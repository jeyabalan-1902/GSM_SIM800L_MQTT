
SIM800MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800578c  0800578c  0000678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cbc  08005cbc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005cbc  08005cbc  00006cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cc4  08005cc4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc4  08005cc4  00006cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ccc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  20000068  08005d34  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea0  08005d34  00007ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbe9  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bc  00000000  00000000  00013c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00016640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f6  00000000  00000000  000170c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f8d  00000000  00000000  000178b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f046  00000000  00000000  0003a843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cafcd  00000000  00000000  00049889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003218  00000000  00000000  0011489c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00117ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005774 	.word	0x08005774

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005774 	.word	0x08005774

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	int len = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7a1b      	ldrb	r3, [r3, #8]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d102      	bne.n	80005ea <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80005e4:	230c      	movs	r3, #12
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e005      	b.n	80005f6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7a1b      	ldrb	r3, [r3, #8]
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d101      	bne.n	80005f6 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80005f2:	230a      	movs	r3, #10
 80005f4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	330c      	adds	r3, #12
 80005fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005fe:	f000 fb5e 	bl	8000cbe <MQTTstrlen>
 8000602:	4603      	mov	r3, r0
 8000604:	3302      	adds	r3, #2
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7edb      	ldrb	r3, [r3, #27]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d013      	beq.n	800063c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3324      	adds	r3, #36	@ 0x24
 8000618:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800061c:	f000 fb4f 	bl	8000cbe <MQTTstrlen>
 8000620:	4603      	mov	r3, r0
 8000622:	1c9c      	adds	r4, r3, #2
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3330      	adds	r3, #48	@ 0x30
 8000628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800062c:	f000 fb47 	bl	8000cbe <MQTTstrlen>
 8000630:	4603      	mov	r3, r0
 8000632:	4423      	add	r3, r4
 8000634:	3302      	adds	r3, #2
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	4413      	add	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <MQTTSerialize_connectLength+0x7c>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00a      	beq.n	8000662 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3340      	adds	r3, #64	@ 0x40
 8000650:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000654:	f000 fb33 	bl	8000cbe <MQTTstrlen>
 8000658:	4603      	mov	r3, r0
 800065a:	3302      	adds	r3, #2
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	2b00      	cmp	r3, #0
 8000668:	d103      	bne.n	8000672 <MQTTSerialize_connectLength+0xa2>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00a      	beq.n	8000688 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	334c      	adds	r3, #76	@ 0x4c
 8000676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800067a:	f000 fb20 	bl	8000cbe <MQTTstrlen>
 800067e:	4603      	mov	r3, r0
 8000680:	3302      	adds	r3, #2
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000688:	68fb      	ldr	r3, [r7, #12]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
	...

08000694 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
	int len = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff8a 	bl	80005d0 <MQTTSerialize_connectLength>
 80006bc:	6238      	str	r0, [r7, #32]
 80006be:	6a38      	ldr	r0, [r7, #32]
 80006c0:	f000 f9b2 	bl	8000a28 <MQTTPacket_len>
 80006c4:	4602      	mov	r2, r0
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	da03      	bge.n	80006d4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80006cc:	f06f 0301 	mvn.w	r3, #1
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 80006d2:	e0c2      	b.n	800085a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80006d8:	7e3b      	ldrb	r3, [r7, #24]
 80006da:	2201      	movs	r2, #1
 80006dc:	f362 1307 	bfi	r3, r2, #4, #4
 80006e0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80006e2:	7e3a      	ldrb	r2, [r7, #24]
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fa2b 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	6a39      	ldr	r1, [r7, #32]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f92b 	bl	8000950 <MQTTPacket_encode>
 80006fa:	4602      	mov	r2, r0
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	4413      	add	r3, r2
 8000700:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7a1b      	ldrb	r3, [r3, #8]
 8000706:	2b04      	cmp	r3, #4
 8000708:	d10c      	bne.n	8000724 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4955      	ldr	r1, [pc, #340]	@ (8000864 <MQTTSerialize_connect+0x1d0>)
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fa56 	bl	8000bc2 <writeCString>
		writeChar(&ptr, (char) 4);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2104      	movs	r1, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fa12 	bl	8000b46 <writeChar>
 8000722:	e00b      	b.n	800073c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	494f      	ldr	r1, [pc, #316]	@ (8000868 <MQTTSerialize_connect+0x1d4>)
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fa49 	bl	8000bc2 <writeCString>
		writeChar(&ptr, (char) 3);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2103      	movs	r1, #3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fa05 	bl	8000b46 <writeChar>
	}

	flags.all = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7e9b      	ldrb	r3, [r3, #26]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	7d3b      	ldrb	r3, [r7, #20]
 800074c:	f362 0341 	bfi	r3, r2, #1, #1
 8000750:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7edb      	ldrb	r3, [r3, #27]
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf14      	ite	ne
 800075a:	2301      	movne	r3, #1
 800075c:	2300      	moveq	r3, #0
 800075e:	b2da      	uxtb	r2, r3
 8000760:	7d3b      	ldrb	r3, [r7, #20]
 8000762:	f362 0382 	bfi	r3, r2, #2, #1
 8000766:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000768:	7d3b      	ldrb	r3, [r7, #20]
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800077a:	f003 0303 	and.w	r3, r3, #3
 800077e:	b2da      	uxtb	r2, r3
 8000780:	7d3b      	ldrb	r3, [r7, #20]
 8000782:	f362 03c4 	bfi	r3, r2, #3, #2
 8000786:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	7d3b      	ldrb	r3, [r7, #20]
 8000796:	f362 1345 	bfi	r3, r2, #5, #1
 800079a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d103      	bne.n	80007ac <MQTTSerialize_connect+0x118>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80007ac:	7d3b      	ldrb	r3, [r7, #20]
 80007ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d103      	bne.n	80007c4 <MQTTSerialize_connect+0x130>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80007c4:	7d3b      	ldrb	r3, [r7, #20]
 80007c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ca:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80007cc:	7d3a      	ldrb	r2, [r7, #20]
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f9b6 	bl	8000b46 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	8b1b      	ldrh	r3, [r3, #24]
 80007de:	461a      	mov	r2, r3
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4611      	mov	r1, r2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f9c2 	bl	8000b70 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f107 001c 	add.w	r0, r7, #28
 80007f2:	330c      	adds	r3, #12
 80007f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f6:	f000 fa03 	bl	8000c00 <writeMQTTString>
	if (options->willFlag)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7edb      	ldrb	r3, [r3, #27]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00d      	beq.n	800081e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f107 001c 	add.w	r0, r7, #28
 8000808:	3324      	adds	r3, #36	@ 0x24
 800080a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800080c:	f000 f9f8 	bl	8000c00 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f107 001c 	add.w	r0, r7, #28
 8000816:	3330      	adds	r3, #48	@ 0x30
 8000818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800081a:	f000 f9f1 	bl	8000c00 <writeMQTTString>
	}
	if (flags.bits.username)
 800081e:	7d3b      	ldrb	r3, [r7, #20]
 8000820:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f107 001c 	add.w	r0, r7, #28
 8000830:	3340      	adds	r3, #64	@ 0x40
 8000832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000834:	f000 f9e4 	bl	8000c00 <writeMQTTString>
	if (flags.bits.password)
 8000838:	7d3b      	ldrb	r3, [r7, #20]
 800083a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d006      	beq.n	8000852 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f107 001c 	add.w	r0, r7, #28
 800084a:	334c      	adds	r3, #76	@ 0x4c
 800084c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084e:	f000 f9d7 	bl	8000c00 <writeMQTTString>

	rc = ptr - buf;
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800085c:	4618      	mov	r0, r3
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	0800578c 	.word	0x0800578c
 8000868:	08005794 	.word	0x08005794

0800086c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800087e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000880:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f943 	bl	8000b1e <readChar>
 8000898:	4603      	mov	r3, r0
 800089a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800089c:	7f3b      	ldrb	r3, [r7, #28]
 800089e:	f023 030f 	bic.w	r3, r3, #15
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b30      	cmp	r3, #48	@ 0x30
 80008a6:	d14b      	bne.n	8000940 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 80008a8:	7f3b      	ldrb	r3, [r7, #28]
 80008aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80008b6:	7f3b      	ldrb	r3, [r7, #28]
 80008b8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80008c4:	7f3b      	ldrb	r3, [r7, #28]
 80008c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	f107 0214 	add.w	r2, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f8ee 	bl	8000abc <MQTTPacket_decodeBuf>
 80008e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80008e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	4413      	add	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	4413      	add	r3, r2
 80008f0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	6a3a      	ldr	r2, [r7, #32]
 80008f8:	4619      	mov	r1, r3
 80008fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008fc:	f000 f9ae 	bl	8000c5c <readMQTTLenString>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01e      	beq.n	8000944 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	6a3a      	ldr	r2, [r7, #32]
 800090a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800090c:	2b00      	cmp	r3, #0
 800090e:	db19      	blt.n	8000944 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dd08      	ble.n	800092a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f8e3 	bl	8000ae8 <readInt>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	6a3a      	ldr	r2, [r7, #32]
 800092e:	1ad2      	subs	r2, r2, r3
 8000930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000932:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000938:	601a      	str	r2, [r3, #0]
	rc = 1;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
 800093e:	e002      	b.n	8000946 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000944:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000948:	4618      	mov	r0, r3
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	425a      	negs	r2, r3
 8000962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000966:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800096a:	bf58      	it	pl
 800096c:	4253      	negpl	r3, r2
 800096e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da00      	bge.n	8000978 <MQTTPacket_encode+0x28>
 8000976:	337f      	adds	r3, #127	@ 0x7f
 8000978:	11db      	asrs	r3, r3, #7
 800097a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	dd03      	ble.n	800098a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000982:	7afb      	ldrb	r3, [r7, #11]
 8000984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000988:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	60fa      	str	r2, [r7, #12]
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	7afa      	ldrb	r2, [r7, #11]
 8000998:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dcde      	bgt.n	800095e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80009a0:	68fb      	ldr	r3, [r7, #12]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
	int len = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	3301      	adds	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	dd03      	ble.n	80009e0 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	60fb      	str	r3, [r7, #12]
			goto exit;
 80009de:	e01d      	b.n	8000a1c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80009e0:	f107 020b 	add.w	r2, r7, #11
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2101      	movs	r1, #1
 80009e8:	4610      	mov	r0, r2
 80009ea:	4798      	blx	r3
 80009ec:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d112      	bne.n	8000a1a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009fe:	6979      	ldr	r1, [r7, #20]
 8000a00:	fb01 f303 	mul.w	r3, r1, r3
 8000a04:	441a      	add	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	01db      	lsls	r3, r3, #7
 8000a0e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dbd6      	blt.n	80009c6 <MQTTPacket_decode+0x18>
exit:
 8000a18:	e000      	b.n	8000a1c <MQTTPacket_decode+0x6e>
			goto exit;
 8000a1a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8000a1c:	693b      	ldr	r3, [r7, #16]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a3a:	dc03      	bgt.n	8000a44 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e012      	b.n	8000a6a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a4a:	da03      	bge.n	8000a54 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3302      	adds	r3, #2
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	e00a      	b.n	8000a6a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <MQTTPacket_len+0x50>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	dc03      	bgt.n	8000a64 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3303      	adds	r3, #3
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	e002      	b.n	8000a6a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3304      	adds	r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	001ffffe 	.word	0x001ffffe

08000a7c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e00a      	b.n	8000aa2 <bufchar+0x26>
		*c = *bufptr++;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <bufchar+0x3c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	4909      	ldr	r1, [pc, #36]	@ (8000ab8 <bufchar+0x3c>)
 8000a94:	600a      	str	r2, [r1, #0]
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbf0      	blt.n	8000a8c <bufchar+0x10>
	return count;
 8000aaa:	683b      	ldr	r3, [r7, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	20000084 	.word	0x20000084

08000abc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000ac6:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <MQTTPacket_decodeBuf+0x24>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000acc:	6839      	ldr	r1, [r7, #0]
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MQTTPacket_decodeBuf+0x28>)
 8000ad0:	f7ff ff6d 	bl	80009ae <MQTTPacket_decode>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000084 	.word	0x20000084
 8000ae4:	08000a7d 	.word	0x08000a7d

08000ae8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	3201      	adds	r2, #1
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1c9a      	adds	r2, r3, #2
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	601a      	str	r2, [r3, #0]
	return len;
 8000b10:	68bb      	ldr	r3, [r7, #8]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
	return c;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	78fa      	ldrb	r2, [r7, #3]
 8000b58:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	da00      	bge.n	8000b82 <writeInt+0x12>
 8000b80:	33ff      	adds	r3, #255	@ 0xff
 8000b82:	121b      	asrs	r3, r3, #8
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	425a      	negs	r2, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	bf58      	it	pl
 8000ba2:	4253      	negpl	r3, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000bcc:	6838      	ldr	r0, [r7, #0]
 8000bce:	f7ff fb29 	bl	8000224 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000bd6:	68f9      	ldr	r1, [r7, #12]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffc9 	bl	8000b70 <writeInt>
	memcpy(*pptr, string, len);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	6839      	ldr	r1, [r7, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 ff05 	bl	80049f6 <memcpy>
	*pptr += len;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	441a      	add	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	4638      	mov	r0, r7
 8000c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd12      	ble.n	8000c3a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4619      	mov	r1, r3
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ffa9 	bl	8000b70 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fee5 	bl	80049f6 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	441a      	add	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000c38:	e00c      	b.n	8000c54 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff ffbc 	bl	8000bc2 <writeCString>
}
 8000c4a:	e003      	b.n	8000c54 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f7ff ff8e 	bl	8000b70 <writeInt>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	dd1a      	ble.n	8000cae <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff ff35 	bl	8000ae8 <readInt>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	6852      	ldr	r2, [r2, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d30c      	bcc.n	8000cae <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	6852      	ldr	r2, [r2, #4]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	601a      	str	r2, [r3, #0]
			rc = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8000cb4:	697b      	ldr	r3, [r7, #20]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff faa4 	bl	8000224 <strlen>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e001      	b.n	8000ce6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	617b      	str	r3, [r7, #20]
	return rc;
 8000ce6:	697b      	ldr	r3, [r7, #20]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000d02:	463b      	mov	r3, r7
 8000d04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d08:	f7ff ffd9 	bl	8000cbe <MQTTstrlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	1c9a      	adds	r2, r3, #2
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	4413      	add	r3, r2
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	4413      	add	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dd02      	ble.n	8000d26 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3302      	adds	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
	return len;
 8000d26:	697b      	ldr	r3, [r7, #20]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5a:	6838      	ldr	r0, [r7, #0]
 8000d5c:	f7ff ffc8 	bl	8000cf0 <MQTTSerialize_publishLength>
 8000d60:	61b8      	str	r0, [r7, #24]
 8000d62:	69b8      	ldr	r0, [r7, #24]
 8000d64:	f7ff fe60 	bl	8000a28 <MQTTPacket_len>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	da03      	bge.n	8000d78 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000d70:	f06f 0301 	mvn.w	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
		goto exit;
 8000d76:	e04c      	b.n	8000e12 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8000d78:	7c3b      	ldrb	r3, [r7, #16]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	f362 1307 	bfi	r3, r2, #4, #4
 8000d80:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	7c3b      	ldrb	r3, [r7, #16]
 8000d8c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000d90:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	7c3b      	ldrb	r3, [r7, #16]
 8000d9c:	f362 0342 	bfi	r3, r2, #1, #2
 8000da0:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8000da2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	7c3b      	ldrb	r3, [r7, #16]
 8000dae:	f362 0300 	bfi	r3, r2, #0, #1
 8000db2:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8000db4:	7c3a      	ldrb	r2, [r7, #16]
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fec2 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	69b9      	ldr	r1, [r7, #24]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fdc2 	bl	8000950 <MQTTPacket_encode>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8000dd4:	f107 0014 	add.w	r0, r7, #20
 8000dd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dde:	f7ff ff0f 	bl	8000c00 <writeMQTTString>

	if (qos > 0)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dd06      	ble.n	8000df6 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8000de8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff febd 	bl	8000b70 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000dfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fdfa 	bl	80049f6 <memcpy>
	ptr += payloadlen;
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e06:	4413      	add	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000e12:	69fb      	ldr	r3, [r7, #28]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8000e20:	4b50      	ldr	r3, [pc, #320]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	b291      	uxth	r1, r2
 8000e28:	4a4e      	ldr	r2, [pc, #312]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e2a:	8011      	strh	r1, [r2, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000e30:	7819      	ldrb	r1, [r3, #0]
 8000e32:	4b4e      	ldr	r3, [pc, #312]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e34:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 8000e36:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000e38:	7c9b      	ldrb	r3, [r3, #18]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d135      	bne.n	8000eaa <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 8000e3e:	494d      	ldr	r1, [pc, #308]	@ (8000f74 <Sim800_RxCallBack+0x158>)
 8000e40:	484a      	ldr	r0, [pc, #296]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e42:	f003 fd4f 	bl	80048e4 <strstr>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <Sim800_RxCallBack+0x40>
 8000e4c:	4b45      	ldr	r3, [pc, #276]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d103      	bne.n	8000e5c <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 8000e54:	4b43      	ldr	r3, [pc, #268]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	e026      	b.n	8000eaa <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 8000e5c:	4945      	ldr	r1, [pc, #276]	@ (8000f74 <Sim800_RxCallBack+0x158>)
 8000e5e:	4843      	ldr	r0, [pc, #268]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e60:	f003 fd40 	bl	80048e4 <strstr>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d01f      	beq.n	8000eaa <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8000e6a:	4a43      	ldr	r2, [pc, #268]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8000e76:	461a      	mov	r2, r3
 8000e78:	f003 fdbd 	bl	80049f6 <memcpy>
            clearRxBuffer();
 8000e7c:	f000 f88e 	bl	8000f9c <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8000e80:	493e      	ldr	r1, [pc, #248]	@ (8000f7c <Sim800_RxCallBack+0x160>)
 8000e82:	483d      	ldr	r0, [pc, #244]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e84:	f003 fd2e 	bl	80048e4 <strstr>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	749a      	strb	r2, [r3, #18]
 8000e94:	e009      	b.n	8000eaa <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8000e96:	493a      	ldr	r1, [pc, #232]	@ (8000f80 <Sim800_RxCallBack+0x164>)
 8000e98:	4837      	ldr	r0, [pc, #220]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e9a:	f003 fd23 	bl	80048e4 <strstr>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 8000eaa:	4936      	ldr	r1, [pc, #216]	@ (8000f84 <Sim800_RxCallBack+0x168>)
 8000eac:	482f      	ldr	r0, [pc, #188]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000eae:	f003 fd19 	bl	80048e4 <strstr>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10d      	bne.n	8000ed4 <Sim800_RxCallBack+0xb8>
 8000eb8:	4933      	ldr	r1, [pc, #204]	@ (8000f88 <Sim800_RxCallBack+0x16c>)
 8000eba:	482c      	ldr	r0, [pc, #176]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000ebc:	f003 fd12 	bl	80048e4 <strstr>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <Sim800_RxCallBack+0xb8>
 8000ec6:	4931      	ldr	r1, [pc, #196]	@ (8000f8c <Sim800_RxCallBack+0x170>)
 8000ec8:	4828      	ldr	r0, [pc, #160]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000eca:	f003 fd0b 	bl	80048e4 <strstr>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000edc:	7c9b      	ldrb	r3, [r3, #18]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d106      	bne.n	8000ef0 <Sim800_RxCallBack+0xd4>
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b30      	cmp	r3, #48	@ 0x30
 8000ee8:	d102      	bne.n	8000ef0 <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 8000eea:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <Sim800_RxCallBack+0x174>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8000ef0:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <Sim800_RxCallBack+0x174>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d124      	bne.n	8000f42 <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	b291      	uxth	r1, r2
 8000f00:	4a24      	ldr	r2, [pc, #144]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f02:	8011      	strh	r1, [r2, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000f08:	7819      	ldrb	r1, [r3, #0]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f0c:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d90d      	bls.n	8000f32 <Sim800_RxCallBack+0x116>
 8000f16:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f1e:	7852      	ldrb	r2, [r2, #1]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	dd06      	ble.n	8000f32 <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 8000f24:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f26:	f000 fb1b 	bl	8001560 <MQTT_Receive>
            clearRxBuffer();
 8000f2a:	f000 f837 	bl	8000f9c <clearRxBuffer>
            clearMqttBuffer();
 8000f2e:	f000 f847 	bl	8000fc0 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d901      	bls.n	8000f42 <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 8000f3e:	f000 f83f 	bl	8000fc0 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d903      	bls.n	8000f56 <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 8000f4e:	f000 f825 	bl	8000f9c <clearRxBuffer>
        clearMqttBuffer();
 8000f52:	f000 f835 	bl	8000fc0 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4903      	ldr	r1, [pc, #12]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000f5a:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <Sim800_RxCallBack+0x17c>)
 8000f5c:	f002 fae1 	bl	8003522 <HAL_UART_Receive_IT>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000640 	.word	0x20000640
 8000f68:	20000088 	.word	0x20000088
 8000f6c:	2000008c 	.word	0x2000008c
 8000f70:	20000bfc 	.word	0x20000bfc
 8000f74:	0800579c 	.word	0x0800579c
 8000f78:	20000644 	.word	0x20000644
 8000f7c:	080057a0 	.word	0x080057a0
 8000f80:	080057b0 	.word	0x080057b0
 8000f84:	080057bc 	.word	0x080057bc
 8000f88:	080057c8 	.word	0x080057c8
 8000f8c:	080057d0 	.word	0x080057d0
 8000f90:	20000642 	.word	0x20000642
 8000f94:	20000bf8 	.word	0x20000bf8
 8000f98:	20000d08 	.word	0x20000d08

08000f9c <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <clearRxBuffer+0x1c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000fa6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000faa:	2100      	movs	r1, #0
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <clearRxBuffer+0x20>)
 8000fae:	f003 fc91 	bl	80048d4 <memset>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000640 	.word	0x20000640
 8000fbc:	2000008c 	.word	0x2000008c

08000fc0 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <clearMqttBuffer+0x20>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <clearMqttBuffer+0x24>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000fd0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <clearMqttBuffer+0x28>)
 8000fd8:	f003 fc7c 	bl	80048d4 <memset>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000642 	.word	0x20000642
 8000fe4:	20000bf8 	.word	0x20000bf8
 8000fe8:	20000644 	.word	0x20000644

08000fec <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff f912 	bl	8000224 <strlen>
 8001000:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8001002:	b29b      	uxth	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	68f9      	ldr	r1, [r7, #12]
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <SIM800_SendCommand+0x50>)
 800100a:	f002 fa54 	bl	80034b6 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f86b 	bl	80020ec <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	4809      	ldr	r0, [pc, #36]	@ (8001040 <SIM800_SendCommand+0x54>)
 800101a:	f003 fc63 	bl	80048e4 <strstr>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <SIM800_SendCommand+0x40>
    {
        clearRxBuffer();
 8001024:	f7ff ffba 	bl	8000f9c <clearRxBuffer>
        return 0;
 8001028:	2300      	movs	r3, #0
 800102a:	e002      	b.n	8001032 <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 800102c:	f7ff ffb6 	bl	8000f9c <clearRxBuffer>
    return 1;
 8001030:	2301      	movs	r3, #1
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000d08 	.word	0x20000d08
 8001040:	20000644 	.word	0x20000644

08001044 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	@ 0x30
 8001048:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 800104a:	4b5e      	ldr	r3, [pc, #376]	@ (80011c4 <MQTT_Init+0x180>)
 800104c:	2200      	movs	r2, #0
 800104e:	749a      	strb	r2, [r3, #18]
    int error = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    char str[32] = {0};
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	4956      	ldr	r1, [pc, #344]	@ (80011c8 <MQTT_Init+0x184>)
 8001070:	4856      	ldr	r0, [pc, #344]	@ (80011cc <MQTT_Init+0x188>)
 8001072:	f002 fa56 	bl	8003522 <HAL_UART_Receive_IT>
    printf("Initializing MQTT...\r\n");
 8001076:	4856      	ldr	r0, [pc, #344]	@ (80011d0 <MQTT_Init+0x18c>)
 8001078:	f003 faf8 	bl	800466c <puts>
    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 800107c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001080:	4954      	ldr	r1, [pc, #336]	@ (80011d4 <MQTT_Init+0x190>)
 8001082:	4855      	ldr	r0, [pc, #340]	@ (80011d8 <MQTT_Init+0x194>)
 8001084:	f7ff ffb2 	bl	8000fec <SIM800_SendCommand>
    printf("AT Command Sent: Checking Module Response\r\n");
 8001088:	4854      	ldr	r0, [pc, #336]	@ (80011dc <MQTT_Init+0x198>)
 800108a:	f003 faef 	bl	800466c <puts>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 800108e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001092:	4950      	ldr	r1, [pc, #320]	@ (80011d4 <MQTT_Init+0x190>)
 8001094:	4852      	ldr	r0, [pc, #328]	@ (80011e0 <MQTT_Init+0x19c>)
 8001096:	f7ff ffa9 	bl	8000fec <SIM800_SendCommand>
    printf("Echo Disabled\r\n");
 800109a:	4852      	ldr	r0, [pc, #328]	@ (80011e4 <MQTT_Init+0x1a0>)
 800109c:	f003 fae6 	bl	800466c <puts>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 80010a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010a4:	4950      	ldr	r1, [pc, #320]	@ (80011e8 <MQTT_Init+0x1a4>)
 80010a6:	4851      	ldr	r0, [pc, #324]	@ (80011ec <MQTT_Init+0x1a8>)
 80010a8:	f7ff ffa0 	bl	8000fec <SIM800_SendCommand>
 80010ac:	4602      	mov	r2, r0
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	4413      	add	r3, r2
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Shutting Down Previous Connections... %s\r\n", (error == 0) ? "Success" : "Failed");
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <MQTT_Init+0x7a>
 80010ba:	4b4d      	ldr	r3, [pc, #308]	@ (80011f0 <MQTT_Init+0x1ac>)
 80010bc:	e000      	b.n	80010c0 <MQTT_Init+0x7c>
 80010be:	4b4d      	ldr	r3, [pc, #308]	@ (80011f4 <MQTT_Init+0x1b0>)
 80010c0:	4619      	mov	r1, r3
 80010c2:	484d      	ldr	r0, [pc, #308]	@ (80011f8 <MQTT_Init+0x1b4>)
 80010c4:	f003 fa6a 	bl	800459c <iprintf>
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 80010c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010cc:	4941      	ldr	r1, [pc, #260]	@ (80011d4 <MQTT_Init+0x190>)
 80010ce:	484b      	ldr	r0, [pc, #300]	@ (80011fc <MQTT_Init+0x1b8>)
 80010d0:	f7ff ff8c 	bl	8000fec <SIM800_SendCommand>
 80010d4:	4602      	mov	r2, r0
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	4413      	add	r3, r2
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("GPRS Attach... %s\r\n", (error == 0) ? "Success" : "Failed");
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <MQTT_Init+0xa2>
 80010e2:	4b43      	ldr	r3, [pc, #268]	@ (80011f0 <MQTT_Init+0x1ac>)
 80010e4:	e000      	b.n	80010e8 <MQTT_Init+0xa4>
 80010e6:	4b43      	ldr	r3, [pc, #268]	@ (80011f4 <MQTT_Init+0x1b0>)
 80010e8:	4619      	mov	r1, r3
 80010ea:	4845      	ldr	r0, [pc, #276]	@ (8001200 <MQTT_Init+0x1bc>)
 80010ec:	f003 fa56 	bl	800459c <iprintf>
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 80010f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010f4:	4937      	ldr	r1, [pc, #220]	@ (80011d4 <MQTT_Init+0x190>)
 80010f6:	4843      	ldr	r0, [pc, #268]	@ (8001204 <MQTT_Init+0x1c0>)
 80010f8:	f7ff ff78 	bl	8000fec <SIM800_SendCommand>
 80010fc:	4602      	mov	r2, r0
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	4413      	add	r3, r2
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Setting TCP/IP Mode... %s\r\n", (error == 0) ? "Success" : "Failed");
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <MQTT_Init+0xca>
 800110a:	4b39      	ldr	r3, [pc, #228]	@ (80011f0 <MQTT_Init+0x1ac>)
 800110c:	e000      	b.n	8001110 <MQTT_Init+0xcc>
 800110e:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <MQTT_Init+0x1b0>)
 8001110:	4619      	mov	r1, r3
 8001112:	483d      	ldr	r0, [pc, #244]	@ (8001208 <MQTT_Init+0x1c4>)
 8001114:	f003 fa42 	bl	800459c <iprintf>
    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 8001118:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <MQTT_Init+0x180>)
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <MQTT_Init+0x180>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a28      	ldr	r2, [pc, #160]	@ (80011c4 <MQTT_Init+0x180>)
 8001122:	6892      	ldr	r2, [r2, #8]
 8001124:	1d38      	adds	r0, r7, #4
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	460b      	mov	r3, r1
 800112c:	4a37      	ldr	r2, [pc, #220]	@ (800120c <MQTT_Init+0x1c8>)
 800112e:	2120      	movs	r1, #32
 8001130:	f003 faa4 	bl	800467c <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800113a:	4926      	ldr	r1, [pc, #152]	@ (80011d4 <MQTT_Init+0x190>)
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff55 	bl	8000fec <SIM800_SendCommand>
 8001142:	4602      	mov	r2, r0
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	4413      	add	r3, r2
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Setting APN: %s... %s\r\n", SIM800.sim.apn, (error == 0) ? "Success" : "Failed");
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <MQTT_Init+0x180>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <MQTT_Init+0x114>
 8001154:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <MQTT_Init+0x1ac>)
 8001156:	e000      	b.n	800115a <MQTT_Init+0x116>
 8001158:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MQTT_Init+0x1b0>)
 800115a:	461a      	mov	r2, r3
 800115c:	482c      	ldr	r0, [pc, #176]	@ (8001210 <MQTT_Init+0x1cc>)
 800115e:	f003 fa1d 	bl	800459c <iprintf>
    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 8001162:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001166:	491b      	ldr	r1, [pc, #108]	@ (80011d4 <MQTT_Init+0x190>)
 8001168:	482a      	ldr	r0, [pc, #168]	@ (8001214 <MQTT_Init+0x1d0>)
 800116a:	f7ff ff3f 	bl	8000fec <SIM800_SendCommand>
 800116e:	4602      	mov	r2, r0
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	4413      	add	r3, r2
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Bringing Up Wireless Connection... %s\r\n", (error == 0) ? "Success" : "Failed");
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <MQTT_Init+0x13c>
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MQTT_Init+0x1ac>)
 800117e:	e000      	b.n	8001182 <MQTT_Init+0x13e>
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MQTT_Init+0x1b0>)
 8001182:	4619      	mov	r1, r3
 8001184:	4824      	ldr	r0, [pc, #144]	@ (8001218 <MQTT_Init+0x1d4>)
 8001186:	f003 fa09 	bl	800459c <iprintf>
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 800118a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800118e:	4923      	ldr	r1, [pc, #140]	@ (800121c <MQTT_Init+0x1d8>)
 8001190:	4823      	ldr	r0, [pc, #140]	@ (8001220 <MQTT_Init+0x1dc>)
 8001192:	f7ff ff2b 	bl	8000fec <SIM800_SendCommand>
    printf("Retrieving IP Address...\r\n");
 8001196:	4823      	ldr	r0, [pc, #140]	@ (8001224 <MQTT_Init+0x1e0>)
 8001198:	f003 fa68 	bl	800466c <puts>
    if (error == 0)
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <MQTT_Init+0x16c>
    {
    	printf("MQTT Initialization Successful. Connecting to Broker...\r\n");
 80011a2:	4821      	ldr	r0, [pc, #132]	@ (8001228 <MQTT_Init+0x1e4>)
 80011a4:	f003 fa62 	bl	800466c <puts>
        MQTT_Connect();
 80011a8:	f000 f842 	bl	8001230 <MQTT_Connect>
        return error;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	e004      	b.n	80011ba <MQTT_Init+0x176>
    }
    else
    {
    	printf("MQTT Initialization Failed! Error Code: %d\r\n", error);
 80011b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011b2:	481e      	ldr	r0, [pc, #120]	@ (800122c <MQTT_Init+0x1e8>)
 80011b4:	f003 f9f2 	bl	800459c <iprintf>
        return error;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000bfc 	.word	0x20000bfc
 80011c8:	20000088 	.word	0x20000088
 80011cc:	20000d08 	.word	0x20000d08
 80011d0:	080057d8 	.word	0x080057d8
 80011d4:	080057f0 	.word	0x080057f0
 80011d8:	080057f8 	.word	0x080057f8
 80011dc:	08005800 	.word	0x08005800
 80011e0:	0800582c 	.word	0x0800582c
 80011e4:	08005834 	.word	0x08005834
 80011e8:	08005844 	.word	0x08005844
 80011ec:	08005850 	.word	0x08005850
 80011f0:	08005860 	.word	0x08005860
 80011f4:	08005868 	.word	0x08005868
 80011f8:	08005870 	.word	0x08005870
 80011fc:	0800589c 	.word	0x0800589c
 8001200:	080058ac 	.word	0x080058ac
 8001204:	080058c0 	.word	0x080058c0
 8001208:	080058d0 	.word	0x080058d0
 800120c:	080058ec 	.word	0x080058ec
 8001210:	08005908 	.word	0x08005908
 8001214:	08005920 	.word	0x08005920
 8001218:	0800592c 	.word	0x0800592c
 800121c:	08005954 	.word	0x08005954
 8001220:	08005958 	.word	0x08005958
 8001224:	08005964 	.word	0x08005964
 8001228:	08005980 	.word	0x08005980
 800122c:	080059bc 	.word	0x080059bc

08001230 <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0d8      	sub	sp, #352	@ 0x160
 8001234:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8001236:	4b5b      	ldr	r3, [pc, #364]	@ (80013a4 <MQTT_Connect+0x174>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    SIM800.mqttServer.connect = 0;
 800123e:	4b59      	ldr	r3, [pc, #356]	@ (80013a4 <MQTT_Connect+0x174>)
 8001240:	2200      	movs	r2, #0
 8001242:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800124a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800124e:	227c      	movs	r2, #124	@ 0x7c
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fb3e 	bl	80048d4 <memset>
    unsigned char buf[128] = {0};
 8001258:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800125c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	3304      	adds	r3, #4
 8001266:	227c      	movs	r2, #124	@ 0x7c
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fb32 	bl	80048d4 <memset>
    printf("MQTT Connection Starting...\r\n");
 8001270:	484d      	ldr	r0, [pc, #308]	@ (80013a8 <MQTT_Connect+0x178>)
 8001272:	f003 f9fb 	bl	800466c <puts>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 8001276:	4b4b      	ldr	r3, [pc, #300]	@ (80013a4 <MQTT_Connect+0x174>)
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	4b4a      	ldr	r3, [pc, #296]	@ (80013a4 <MQTT_Connect+0x174>)
 800127c:	8a1b      	ldrh	r3, [r3, #16]
 800127e:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8001282:	494a      	ldr	r1, [pc, #296]	@ (80013ac <MQTT_Connect+0x17c>)
 8001284:	f003 fa2e 	bl	80046e4 <siprintf>
    printf("Sending: %s\r\n", str);
 8001288:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800128c:	4619      	mov	r1, r3
 800128e:	4848      	ldr	r0, [pc, #288]	@ (80013b0 <MQTT_Connect+0x180>)
 8001290:	f003 f984 	bl	800459c <iprintf>
    if (SIM800_SendCommand(str, "OK\r\n", CMD_DELAY) != 0)
 8001294:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001298:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800129c:	4945      	ldr	r1, [pc, #276]	@ (80013b4 <MQTT_Connect+0x184>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fea4 	bl	8000fec <SIM800_SendCommand>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <MQTT_Connect+0x82>
	{
		printf("ERROR: TCP Connection Failed!\r\n");
 80012aa:	4843      	ldr	r0, [pc, #268]	@ (80013b8 <MQTT_Connect+0x188>)
 80012ac:	f003 f9de 	bl	800466c <puts>
 80012b0:	e074      	b.n	800139c <MQTT_Connect+0x16c>
		return;
	}

	printf("TCP Connection Established!\r\n");
 80012b2:	4842      	ldr	r0, [pc, #264]	@ (80013bc <MQTT_Connect+0x18c>)
 80012b4:	f003 f9da 	bl	800466c <puts>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 80012b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012bc:	f000 ff16 	bl	80020ec <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1)
 80012c0:	4b38      	ldr	r3, [pc, #224]	@ (80013a4 <MQTT_Connect+0x174>)
 80012c2:	7c9b      	ldrb	r3, [r3, #18]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d169      	bne.n	800139c <MQTT_Connect+0x16c>
    {
    	printf("SIM800 Connected to MQTT Broker!\r\n");
 80012c8:	483d      	ldr	r0, [pc, #244]	@ (80013c0 <MQTT_Connect+0x190>)
 80012ca:	f003 f9cf 	bl	800466c <puts>
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 80012ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012d2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012d6:	4a3b      	ldr	r2, [pc, #236]	@ (80013c4 <MQTT_Connect+0x194>)
 80012d8:	4618      	mov	r0, r3
 80012da:	4611      	mov	r1, r2
 80012dc:	2358      	movs	r3, #88	@ 0x58
 80012de:	461a      	mov	r2, r3
 80012e0:	f003 fb89 	bl	80049f6 <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <MQTT_Connect+0x174>)
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012ec:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012f0:	641a      	str	r2, [r3, #64]	@ 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 80012f2:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <MQTT_Connect+0x174>)
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012fa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012fe:	64da      	str	r2, [r3, #76]	@ 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 8001300:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <MQTT_Connect+0x174>)
 8001302:	69da      	ldr	r2, [r3, #28]
 8001304:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001308:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800130c:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 800130e:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <MQTT_Connect+0x174>)
 8001310:	8c1a      	ldrh	r2, [r3, #32]
 8001312:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001316:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800131a:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 800131c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001320:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001324:	2201      	movs	r2, #1
 8001326:	769a      	strb	r2, [r3, #26]

        printf("MQTT Client ID: %s\r\n", datas.clientID.cstring);
 8001328:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800132c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	4619      	mov	r1, r3
 8001334:	4824      	ldr	r0, [pc, #144]	@ (80013c8 <MQTT_Connect+0x198>)
 8001336:	f003 f931 	bl	800459c <iprintf>
		printf("MQTT Username: %s\r\n", datas.username.cstring);
 800133a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800133e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	4619      	mov	r1, r3
 8001346:	4821      	ldr	r0, [pc, #132]	@ (80013cc <MQTT_Connect+0x19c>)
 8001348:	f003 f928 	bl	800459c <iprintf>
		printf("MQTT Password: %s\r\n", datas.password.cstring);
 800134c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001350:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4619      	mov	r1, r3
 8001358:	481d      	ldr	r0, [pc, #116]	@ (80013d0 <MQTT_Connect+0x1a0>)
 800135a:	f003 f91f 	bl	800459c <iprintf>
		printf("MQTT KeepAlive Interval: %d seconds\r\n", datas.keepAliveInterval);
 800135e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001362:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001366:	8b1b      	ldrh	r3, [r3, #24]
 8001368:	4619      	mov	r1, r3
 800136a:	481a      	ldr	r0, [pc, #104]	@ (80013d4 <MQTT_Connect+0x1a4>)
 800136c:	f003 f916 	bl	800459c <iprintf>

        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8001370:	1d3a      	adds	r2, r7, #4
 8001372:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f98b 	bl	8000694 <MQTTSerialize_connect>
 800137e:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001382:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800138c:	4619      	mov	r1, r3
 800138e:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <MQTT_Connect+0x1a8>)
 8001390:	f002 f891 	bl	80034b6 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 8001394:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001398:	f000 fea8 	bl	80020ec <HAL_Delay>
#endif
    }
}
 800139c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000bfc 	.word	0x20000bfc
 80013a8:	080059ec 	.word	0x080059ec
 80013ac:	08005a0c 	.word	0x08005a0c
 80013b0:	08005a28 	.word	0x08005a28
 80013b4:	080057f0 	.word	0x080057f0
 80013b8:	08005a38 	.word	0x08005a38
 80013bc:	08005a58 	.word	0x08005a58
 80013c0:	08005a78 	.word	0x08005a78
 80013c4:	08005b04 	.word	0x08005b04
 80013c8:	08005a9c 	.word	0x08005a9c
 80013cc:	08005ab4 	.word	0x08005ab4
 80013d0:	08005ac8 	.word	0x08005ac8
 80013d4:	08005adc 	.word	0x08005adc
 80013d8:	20000d08 	.word	0x20000d08

080013dc <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b0cf      	sub	sp, #316	@ 0x13c
 80013e0:	af08      	add	r7, sp, #32
 80013e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013ea:	6018      	str	r0, [r3, #0]
 80013ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013f4:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 80013f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	3304      	adds	r3, #4
 8001404:	22fc      	movs	r2, #252	@ 0xfc
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fa63 	bl	80048d4 <memset>

    MQTTString topicString = MQTTString_initializer;
 800140e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001412:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800141e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800142a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8001432:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001436:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800143a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800143e:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 8001446:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800144a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	f7fe fee8 	bl	8000224 <strlen>
 8001454:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 8001456:	f107 0414 	add.w	r4, r7, #20
 800145a:	9306      	str	r3, [sp, #24]
 800145c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001460:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	9305      	str	r3, [sp, #20]
 8001468:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800146c:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8001470:	ab02      	add	r3, sp, #8
 8001472:	ca07      	ldmia	r2, {r0, r1, r2}
 8001474:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001478:	2300      	movs	r3, #0
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	2300      	movs	r3, #0
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2300      	movs	r3, #0
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001488:	4620      	mov	r0, r4
 800148a:	f7ff fc51 	bl	8000d30 <MQTTSerialize_publish>
 800148e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001496:	b29a      	uxth	r2, r3
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MQTT_Pub+0xd8>)
 80014a0:	f002 f809 	bl	80034b6 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 80014a4:	2064      	movs	r0, #100	@ 0x64
 80014a6:	f000 fe21 	bl	80020ec <HAL_Delay>
#endif
}
 80014aa:	bf00      	nop
 80014ac:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd90      	pop	{r4, r7, pc}
 80014b4:	20000d08 	.word	0x20000d08

080014b8 <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0ca      	sub	sp, #296	@ 0x128
 80014bc:	af04      	add	r7, sp, #16
 80014be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014c6:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 80014c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	3304      	adds	r3, #4
 80014d6:	22fc      	movs	r2, #252	@ 0xfc
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 f9fa 	bl	80048d4 <memset>

    MQTTString topicString = MQTTString_initializer;
 80014e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8001504:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001508:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800150c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001510:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 8001518:	f107 0014 	add.w	r0, r7, #20
 800151c:	2300      	movs	r3, #0
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2301      	movs	r3, #1
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001532:	f000 f886 	bl	8001642 <MQTTSerialize_subscribe>
 8001536:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800153a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800153e:	b29a      	uxth	r2, r3
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <MQTT_Sub+0xa4>)
 8001548:	f001 ffb5 	bl	80034b6 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 800154c:	2064      	movs	r0, #100	@ 0x64
 800154e:	f000 fdcd 	bl	80020ec <HAL_Delay>
#endif
}
 8001552:	bf00      	nop
 8001554:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000d08 	.word	0x20000d08

08001560 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	@ 0x30
 8001564:	af06      	add	r7, sp, #24
 8001566:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 8001568:	2240      	movs	r2, #64	@ 0x40
 800156a:	2100      	movs	r1, #0
 800156c:	4819      	ldr	r0, [pc, #100]	@ (80015d4 <MQTT_Receive+0x74>)
 800156e:	f003 f9b1 	bl	80048d4 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8001572:	2240      	movs	r2, #64	@ 0x40
 8001574:	2100      	movs	r1, #0
 8001576:	4818      	ldr	r0, [pc, #96]	@ (80015d8 <MQTT_Receive+0x78>)
 8001578:	f003 f9ac 	bl	80048d4 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 800157c:	2304      	movs	r3, #4
 800157e:	9304      	str	r3, [sp, #16]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	9303      	str	r3, [sp, #12]
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MQTT_Receive+0x7c>)
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <MQTT_Receive+0x80>)
 8001596:	4a13      	ldr	r2, [pc, #76]	@ (80015e4 <MQTT_Receive+0x84>)
 8001598:	4913      	ldr	r1, [pc, #76]	@ (80015e8 <MQTT_Receive+0x88>)
 800159a:	4814      	ldr	r0, [pc, #80]	@ (80015ec <MQTT_Receive+0x8c>)
 800159c:	f7ff f966 	bl	800086c <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4619      	mov	r1, r3
 80015a6:	480b      	ldr	r0, [pc, #44]	@ (80015d4 <MQTT_Receive+0x74>)
 80015a8:	f003 fa25 	bl	80049f6 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <MQTT_Receive+0x90>)
 80015b0:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <MQTT_Receive+0x90>)
 80015b8:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80015ba:	4619      	mov	r1, r3
 80015bc:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <MQTT_Receive+0x78>)
 80015be:	f003 fa1a 	bl	80049f6 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <MQTT_Receive+0x90>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000c70 	.word	0x20000c70
 80015d8:	20000c2c 	.word	0x20000c2c
 80015dc:	20000c6c 	.word	0x20000c6c
 80015e0:	20000c2a 	.word	0x20000c2a
 80015e4:	20000c28 	.word	0x20000c28
 80015e8:	20000c24 	.word	0x20000c24
 80015ec:	20000c21 	.word	0x20000c21
 80015f0:	20000bfc 	.word	0x20000bfc

080015f4 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80015fe:	2302      	movs	r3, #2
 8001600:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e013      	b.n	8001630 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	461a      	mov	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800161c:	f7ff fb4f 	bl	8000cbe <MQTTstrlen>
 8001620:	4603      	mov	r3, r0
 8001622:	3303      	adds	r3, #3
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	4413      	add	r3, r2
 8001628:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3301      	adds	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbe7      	blt.n	8001608 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8001638:	68bb      	ldr	r3, [r7, #8]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b08a      	sub	sp, #40	@ 0x28
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	4611      	mov	r1, r2
 800164e:	461a      	mov	r2, r3
 8001650:	460b      	mov	r3, r1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800166c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800166e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001670:	f7ff ffc0 	bl	80015f4 <MQTTSerialize_subscribeLength>
 8001674:	61f8      	str	r0, [r7, #28]
 8001676:	69f8      	ldr	r0, [r7, #28]
 8001678:	f7ff f9d6 	bl	8000a28 <MQTTPacket_len>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4293      	cmp	r3, r2
 8001682:	da03      	bge.n	800168c <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001684:	f06f 0301 	mvn.w	r3, #1
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800168a:	e051      	b.n	8001730 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8001690:	7d3b      	ldrb	r3, [r7, #20]
 8001692:	2208      	movs	r2, #8
 8001694:	f362 1307 	bfi	r3, r2, #4, #4
 8001698:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	7d3b      	ldrb	r3, [r7, #20]
 80016a4:	f362 03c3 	bfi	r3, r2, #3, #1
 80016a8:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80016aa:	7d3b      	ldrb	r3, [r7, #20]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f362 0342 	bfi	r3, r2, #1, #2
 80016b2:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80016b4:	7d3a      	ldrb	r2, [r7, #20]
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fa42 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	69f9      	ldr	r1, [r7, #28]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f942 	bl	8000950 <MQTTPacket_encode>
 80016cc:	4602      	mov	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4413      	add	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 80016d4:	88ba      	ldrh	r2, [r7, #4]
 80016d6:	f107 0318 	add.w	r3, r7, #24
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fa47 	bl	8000b70 <writeInt>

	for (i = 0; i < count; ++i)
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
 80016e6:	e01b      	b.n	8001720 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80016e8:	6a3a      	ldr	r2, [r7, #32]
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	461a      	mov	r2, r3
 80016f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016f6:	4413      	add	r3, r2
 80016f8:	f107 0018 	add.w	r0, r7, #24
 80016fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016fe:	f7ff fa7f 	bl	8000c00 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fa16 	bl	8000b46 <writeChar>
	for (i = 0; i < count; ++i)
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	3301      	adds	r3, #1
 800171e:	623b      	str	r3, [r7, #32]
 8001720:	6a3a      	ldr	r2, [r7, #32]
 8001722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001724:	429a      	cmp	r2, r3
 8001726:	dbdf      	blt.n	80016e8 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001732:	4618      	mov	r0, r3
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <MX_GPIO_Init+0xec>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a33      	ldr	r2, [pc, #204]	@ (8001828 <MX_GPIO_Init+0xec>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <MX_GPIO_Init+0xec>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <MX_GPIO_Init+0xec>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a2c      	ldr	r2, [pc, #176]	@ (8001828 <MX_GPIO_Init+0xec>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <MX_GPIO_Init+0xec>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <MX_GPIO_Init+0xec>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a25      	ldr	r2, [pc, #148]	@ (8001828 <MX_GPIO_Init+0xec>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <MX_GPIO_Init+0xec>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2120      	movs	r1, #32
 80017aa:	4820      	ldr	r0, [pc, #128]	@ (800182c <MX_GPIO_Init+0xf0>)
 80017ac:	f000 fffa 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2101      	movs	r1, #1
 80017b4:	481e      	ldr	r0, [pc, #120]	@ (8001830 <MX_GPIO_Init+0xf4>)
 80017b6:	f000 fff5 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BT_Pin */
  GPIO_InitStruct.Pin = USER_BT_Pin;
 80017ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BT_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	4818      	ldr	r0, [pc, #96]	@ (8001834 <MX_GPIO_Init+0xf8>)
 80017d2:	f000 fe53 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017d6:	2320      	movs	r3, #32
 80017d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	480f      	ldr	r0, [pc, #60]	@ (800182c <MX_GPIO_Init+0xf0>)
 80017ee:	f000 fe45 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 80017f2:	2301      	movs	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4619      	mov	r1, r3
 8001808:	4809      	ldr	r0, [pc, #36]	@ (8001830 <MX_GPIO_Init+0xf4>)
 800180a:	f000 fe37 	bl	800247c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2028      	movs	r0, #40	@ 0x28
 8001814:	f000 fd69 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001818:	2028      	movs	r0, #40	@ 0x28
 800181a:	f000 fd82 	bl	8002322 <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020800 	.word	0x40020800

08001838 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    if (huart == UART_SIM800)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a0f      	ldr	r2, [pc, #60]	@ (8001880 <HAL_UART_RxCpltCallback+0x48>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d116      	bne.n	8001876 <HAL_UART_RxCpltCallback+0x3e>
    {
        Sim800_RxCallBack();
 8001848:	f7ff fae8 	bl	8000e1c <Sim800_RxCallBack>
        if (SIM800.mqttServer.connect == 1 && rx_data == 0xD0) {
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_UART_RxCpltCallback+0x4c>)
 800184e:	7c9b      	ldrb	r3, [r3, #18]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d110      	bne.n	8001876 <HAL_UART_RxCpltCallback+0x3e>
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <HAL_UART_RxCpltCallback+0x50>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2bd0      	cmp	r3, #208	@ 0xd0
 800185a:	d10c      	bne.n	8001876 <HAL_UART_RxCpltCallback+0x3e>
            printf("Received MQTT PINGRESP\n\r");
 800185c:	480b      	ldr	r0, [pc, #44]	@ (800188c <HAL_UART_RxCpltCallback+0x54>)
 800185e:	f002 fe9d 	bl	800459c <iprintf>
            mqtt_receive = 1;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_UART_RxCpltCallback+0x58>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
            clearRxBuffer();
 8001868:	f7ff fb98 	bl	8000f9c <clearRxBuffer>
            clearMqttBuffer();
 800186c:	f7ff fba8 	bl	8000fc0 <clearMqttBuffer>
            MQTT_Sub("STM32/subscribe");
 8001870:	4808      	ldr	r0, [pc, #32]	@ (8001894 <HAL_UART_RxCpltCallback+0x5c>)
 8001872:	f7ff fe21 	bl	80014b8 <MQTT_Sub>
        }
    }
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000d08 	.word	0x20000d08
 8001884:	20000bfc 	.word	0x20000bfc
 8001888:	20000088 	.word	0x20000088
 800188c:	08005b68 	.word	0x08005b68
 8001890:	20000642 	.word	0x20000642
 8001894:	08005b84 	.word	0x08005b84

08001898 <millis>:

uint32_t millis() {
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    // HAL_GetTick() returns milliseconds since startup
    return HAL_GetTick();
 800189c:	f000 fc1a 	bl	80020d4 <HAL_GetTick>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ae:	f000 fbab 	bl	8002008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b2:	f000 f8c9 	bl	8001a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b6:	f7ff ff41 	bl	800173c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018ba:	f000 fa81 	bl	8001dc0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80018be:	f000 faa9 	bl	8001e14 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
//  HAL_Delay(3000);
//  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
//  HAL_Delay(10000);
  printf("system Init\n\r");
 80018c2:	484a      	ldr	r0, [pc, #296]	@ (80019ec <main+0x144>)
 80018c4:	f002 fe6a 	bl	800459c <iprintf>

  SIM800.sim.apn = "internet";
 80018c8:	4b49      	ldr	r3, [pc, #292]	@ (80019f0 <main+0x148>)
 80018ca:	4a4a      	ldr	r2, [pc, #296]	@ (80019f4 <main+0x14c>)
 80018cc:	601a      	str	r2, [r3, #0]
  SIM800.sim.apn_user = "";
 80018ce:	4b48      	ldr	r3, [pc, #288]	@ (80019f0 <main+0x148>)
 80018d0:	4a49      	ldr	r2, [pc, #292]	@ (80019f8 <main+0x150>)
 80018d2:	605a      	str	r2, [r3, #4]
  SIM800.sim.apn_pass = "";
 80018d4:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <main+0x148>)
 80018d6:	4a48      	ldr	r2, [pc, #288]	@ (80019f8 <main+0x150>)
 80018d8:	609a      	str	r2, [r3, #8]
  SIM800.mqttServer.host = "mqtt.onwords.in";
 80018da:	4b45      	ldr	r3, [pc, #276]	@ (80019f0 <main+0x148>)
 80018dc:	4a47      	ldr	r2, [pc, #284]	@ (80019fc <main+0x154>)
 80018de:	60da      	str	r2, [r3, #12]
  SIM800.mqttServer.port = 1883;
 80018e0:	4b43      	ldr	r3, [pc, #268]	@ (80019f0 <main+0x148>)
 80018e2:	f240 725b 	movw	r2, #1883	@ 0x75b
 80018e6:	821a      	strh	r2, [r3, #16]
  SIM800.mqttClient.username = "Nikhil";
 80018e8:	4b41      	ldr	r3, [pc, #260]	@ (80019f0 <main+0x148>)
 80018ea:	4a45      	ldr	r2, [pc, #276]	@ (8001a00 <main+0x158>)
 80018ec:	615a      	str	r2, [r3, #20]
  SIM800.mqttClient.pass = "Nikhil8182";
 80018ee:	4b40      	ldr	r3, [pc, #256]	@ (80019f0 <main+0x148>)
 80018f0:	4a44      	ldr	r2, [pc, #272]	@ (8001a04 <main+0x15c>)
 80018f2:	619a      	str	r2, [r3, #24]
  SIM800.mqttClient.clientID = "TestSub";
 80018f4:	4b3e      	ldr	r3, [pc, #248]	@ (80019f0 <main+0x148>)
 80018f6:	4a44      	ldr	r2, [pc, #272]	@ (8001a08 <main+0x160>)
 80018f8:	61da      	str	r2, [r3, #28]
  SIM800.mqttClient.keepAliveInterval = 60;
 80018fa:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <main+0x148>)
 80018fc:	223c      	movs	r2, #60	@ 0x3c
 80018fe:	841a      	strh	r2, [r3, #32]
  MQTT_Init();
 8001900:	f7ff fba0 	bl	8001044 <MQTT_Init>
  uint8_t sub = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  uint8_t pub_uint8 = 1;
 8001908:	2301      	movs	r3, #1
 800190a:	73bb      	strb	r3, [r7, #14]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (SIM800.mqttServer.connect == 0)
 800190c:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <main+0x148>)
 800190e:	7c9b      	ldrb	r3, [r3, #18]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <main+0x80>
	  {
		   MQTT_Init();
 8001914:	f7ff fb96 	bl	8001044 <MQTT_Init>
		   sub = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
		   lastKeepAliveTime = millis();
 800191c:	f7ff ffbc 	bl	8001898 <millis>
 8001920:	4603      	mov	r3, r0
 8001922:	4a3a      	ldr	r2, [pc, #232]	@ (8001a0c <main+0x164>)
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e7f1      	b.n	800190c <main+0x64>
	   }
	  else
	   {
		   if(sub == 0){
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d104      	bne.n	8001938 <main+0x90>
			   MQTT_Sub("STM32/subscribe");
 800192e:	4838      	ldr	r0, [pc, #224]	@ (8001a10 <main+0x168>)
 8001930:	f7ff fdc2 	bl	80014b8 <MQTT_Sub>
			   sub = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
		   }
		   if(interrupt)
 8001938:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <main+0x16c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <main+0xc0>
		   {
			   HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001942:	2120      	movs	r1, #32
 8001944:	4834      	ldr	r0, [pc, #208]	@ (8001a18 <main+0x170>)
 8001946:	f000 ff46 	bl	80027d6 <HAL_GPIO_TogglePin>
			   MQTT_Pub("STM32/publish", "LED Toggled");
 800194a:	4934      	ldr	r1, [pc, #208]	@ (8001a1c <main+0x174>)
 800194c:	4834      	ldr	r0, [pc, #208]	@ (8001a20 <main+0x178>)
 800194e:	f7ff fd45 	bl	80013dc <MQTT_Pub>
			   printf("data published\n\r");
 8001952:	4834      	ldr	r0, [pc, #208]	@ (8001a24 <main+0x17c>)
 8001954:	f002 fe22 	bl	800459c <iprintf>
			   interrupt = 0;
 8001958:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <main+0x16c>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
			   lastKeepAliveTime = millis();
 800195e:	f7ff ff9b 	bl	8001898 <millis>
 8001962:	4603      	mov	r3, r0
 8001964:	4a29      	ldr	r2, [pc, #164]	@ (8001a0c <main+0x164>)
 8001966:	6013      	str	r3, [r2, #0]
		   }
		   if(SIM800.mqttReceive.newEvent) {
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <main+0x148>)
 800196a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800196e:	2b00      	cmp	r3, #0
 8001970:	d021      	beq.n	80019b6 <main+0x10e>
			   printf("data received\n\r");
 8001972:	482d      	ldr	r0, [pc, #180]	@ (8001a28 <main+0x180>)
 8001974:	f002 fe12 	bl	800459c <iprintf>
			   unsigned char *topic = SIM800.mqttReceive.topic;
 8001978:	4b2c      	ldr	r3, [pc, #176]	@ (8001a2c <main+0x184>)
 800197a:	60bb      	str	r3, [r7, #8]
			   unsigned char *payload = SIM800.mqttReceive.payload;
 800197c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a30 <main+0x188>)
 800197e:	607b      	str	r3, [r7, #4]

			   // Print topic and payload
			   printf("Topic: %s\n\r", topic);
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	482c      	ldr	r0, [pc, #176]	@ (8001a34 <main+0x18c>)
 8001984:	f002 fe0a 	bl	800459c <iprintf>
			   printf("Payload: %s\n\r", payload);
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	482b      	ldr	r0, [pc, #172]	@ (8001a38 <main+0x190>)
 800198c:	f002 fe06 	bl	800459c <iprintf>
			   if(strcmp((char *)payload, "LED") == 0)
 8001990:	492a      	ldr	r1, [pc, #168]	@ (8001a3c <main+0x194>)
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7fe fc3c 	bl	8000210 <strcmp>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d107      	bne.n	80019ae <main+0x106>
			   {
				   HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800199e:	2120      	movs	r1, #32
 80019a0:	481d      	ldr	r0, [pc, #116]	@ (8001a18 <main+0x170>)
 80019a2:	f000 ff18 	bl	80027d6 <HAL_GPIO_TogglePin>
				   MQTT_Pub("STM32/publish", "LED Toggled");
 80019a6:	491d      	ldr	r1, [pc, #116]	@ (8001a1c <main+0x174>)
 80019a8:	481d      	ldr	r0, [pc, #116]	@ (8001a20 <main+0x178>)
 80019aa:	f7ff fd17 	bl	80013dc <MQTT_Pub>

			   }
			   SIM800.mqttReceive.newEvent = 0;
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <main+0x148>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		   }
		   if ((millis() - lastKeepAliveTime) >= (KEEP_ALIVE_INTERVAL * 500)) {
 80019b6:	f7ff ff6f 	bl	8001898 <millis>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <main+0x164>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d9a0      	bls.n	800190c <main+0x64>
			   uint8_t pingreq_packet[2] = {0xC0, 0x00};  // MQTT PINGREQ
 80019ca:	23c0      	movs	r3, #192	@ 0xc0
 80019cc:	803b      	strh	r3, [r7, #0]
			   HAL_UART_Transmit(UART_SIM800, pingreq_packet, 2, 100);
 80019ce:	4639      	mov	r1, r7
 80019d0:	2364      	movs	r3, #100	@ 0x64
 80019d2:	2202      	movs	r2, #2
 80019d4:	481a      	ldr	r0, [pc, #104]	@ (8001a40 <main+0x198>)
 80019d6:	f001 fce3 	bl	80033a0 <HAL_UART_Transmit>
			   printf("Sending MQTT PINGREQ\n\r");
 80019da:	481a      	ldr	r0, [pc, #104]	@ (8001a44 <main+0x19c>)
 80019dc:	f002 fdde 	bl	800459c <iprintf>
//			   MQTT_PubUint8("STM32/pingreq", pub_uint8);
//			   printf("Sending MQTT PINGREQ\n\r");

			   lastKeepAliveTime = millis();
 80019e0:	f7ff ff5a 	bl	8001898 <millis>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a09      	ldr	r2, [pc, #36]	@ (8001a0c <main+0x164>)
 80019e8:	6013      	str	r3, [r2, #0]
	  if (SIM800.mqttServer.connect == 0)
 80019ea:	e78f      	b.n	800190c <main+0x64>
 80019ec:	08005b94 	.word	0x08005b94
 80019f0:	20000bfc 	.word	0x20000bfc
 80019f4:	08005ba4 	.word	0x08005ba4
 80019f8:	08005bb0 	.word	0x08005bb0
 80019fc:	08005bb4 	.word	0x08005bb4
 8001a00:	08005bc4 	.word	0x08005bc4
 8001a04:	08005bcc 	.word	0x08005bcc
 8001a08:	08005bd8 	.word	0x08005bd8
 8001a0c:	20000cb8 	.word	0x20000cb8
 8001a10:	08005b84 	.word	0x08005b84
 8001a14:	20000cb4 	.word	0x20000cb4
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	08005be0 	.word	0x08005be0
 8001a20:	08005bec 	.word	0x08005bec
 8001a24:	08005bfc 	.word	0x08005bfc
 8001a28:	08005c10 	.word	0x08005c10
 8001a2c:	20000c70 	.word	0x20000c70
 8001a30:	20000c2c 	.word	0x20000c2c
 8001a34:	08005c20 	.word	0x08005c20
 8001a38:	08005c2c 	.word	0x08005c2c
 8001a3c:	08005c3c 	.word	0x08005c3c
 8001a40:	20000d08 	.word	0x20000d08
 8001a44:	08005c40 	.word	0x08005c40

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b094      	sub	sp, #80	@ 0x50
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	2234      	movs	r2, #52	@ 0x34
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 ff3c 	bl	80048d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	4b29      	ldr	r3, [pc, #164]	@ (8001b18 <SystemClock_Config+0xd0>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	4a28      	ldr	r2, [pc, #160]	@ (8001b18 <SystemClock_Config+0xd0>)
 8001a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7c:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <SystemClock_Config+0xd0>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <SystemClock_Config+0xd4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a94:	4a21      	ldr	r2, [pc, #132]	@ (8001b1c <SystemClock_Config+0xd4>)
 8001a96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <SystemClock_Config+0xd4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aac:	2301      	movs	r3, #1
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001abc:	2308      	movs	r3, #8
 8001abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001ac0:	2348      	movs	r3, #72	@ 0x48
 8001ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 f975 	bl	8002dc4 <HAL_RCC_OscConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ae0:	f000 f848 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	2102      	movs	r1, #2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fe9b 	bl	800283c <HAL_RCC_ClockConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b0c:	f000 f832 	bl	8001b74 <Error_Handler>
  }
}
 8001b10:	bf00      	nop
 8001b12:	3750      	adds	r7, #80	@ 0x50
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40007000 	.word	0x40007000

08001b20 <__io_putchar>:
/* USER CODE BEGIN 4 */

#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001b28:	1d39      	adds	r1, r7, #4
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <__io_putchar+0x20>)
 8001b32:	f001 fc35 	bl	80033a0 <HAL_UART_Transmit>
	return ch;
 8001b36:	687b      	ldr	r3, [r7, #4]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000cc0 	.word	0x20000cc0

08001b44 <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BT_Pin)
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b54:	d105      	bne.n	8001b62 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		interrupt = 1;
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_GPIO_EXTI_Callback+0x28>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
		printf("interrupt triggered\n\r");
 8001b5c:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b5e:	f002 fd1d 	bl	800459c <iprintf>
	}
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000cb4 	.word	0x20000cb4
 8001b70:	08005c58 	.word	0x08005c58

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <Error_Handler+0x8>

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <MemManage_Handler+0x4>

08001be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c26:	f000 fa41 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <USART3_IRQHandler+0x10>)
 8001c36:	f001 fc99 	bl	800356c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000d08 	.word	0x20000d08

08001c44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BT_Pin);
 8001c48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c4c:	f000 fdde 	bl	800280c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	e00a      	b.n	8001c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c66:	f3af 8000 	nop.w
 8001c6a:	4601      	mov	r1, r0
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	60ba      	str	r2, [r7, #8]
 8001c72:	b2ca      	uxtb	r2, r1
 8001c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbf0      	blt.n	8001c66 <_read+0x12>
  }

  return len;
 8001c84:	687b      	ldr	r3, [r7, #4]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e009      	b.n	8001cb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff39 	bl	8001b20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbf1      	blt.n	8001ca0 <_write+0x12>
  }
  return len;
 8001cbc:	687b      	ldr	r3, [r7, #4]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_close>:

int _close(int file)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cee:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <_isatty>:

int _isatty(int file)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d38:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <_sbrk+0x5c>)
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <_sbrk+0x60>)
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <_sbrk+0x64>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <_sbrk+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d60:	f002 fe1c 	bl	800499c <__errno>
 8001d64:	4603      	mov	r3, r0
 8001d66:	220c      	movs	r2, #12
 8001d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	e009      	b.n	8001d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <_sbrk+0x64>)
 8001d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20020000 	.word	0x20020000
 8001d90:	00000400 	.word	0x00000400
 8001d94:	20000cbc 	.word	0x20000cbc
 8001d98:	20000ea0 	.word	0x20000ea0

08001d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <SystemInit+0x20>)
 8001da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <SystemInit+0x20>)
 8001da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <MX_USART2_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df8:	f001 fa82 	bl	8003300 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f7ff feb7 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000cc0 	.word	0x20000cc0
 8001e10:	40004400 	.word	0x40004400

08001e14 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <MX_USART3_UART_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e4c:	f001 fa58 	bl	8003300 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e56:	f7ff fe8d 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000d08 	.word	0x20000d08
 8001e64:	40004800 	.word	0x40004800

08001e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	@ 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a45      	ldr	r2, [pc, #276]	@ (8001f9c <HAL_UART_MspInit+0x134>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d12c      	bne.n	8001ee4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	4b44      	ldr	r3, [pc, #272]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4a43      	ldr	r2, [pc, #268]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	4b41      	ldr	r3, [pc, #260]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4831      	ldr	r0, [pc, #196]	@ (8001fa4 <HAL_UART_MspInit+0x13c>)
 8001ede:	f000 facd 	bl	800247c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ee2:	e057      	b.n	8001f94 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa8 <HAL_UART_MspInit+0x140>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d152      	bne.n	8001f94 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efe:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b24      	ldr	r3, [pc, #144]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	4a23      	ldr	r2, [pc, #140]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1a:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <HAL_UART_MspInit+0x138>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f42:	2320      	movs	r3, #32
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f52:	2307      	movs	r3, #7
 8001f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4813      	ldr	r0, [pc, #76]	@ (8001fac <HAL_UART_MspInit+0x144>)
 8001f5e:	f000 fa8d 	bl	800247c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f74:	2307      	movs	r3, #7
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <HAL_UART_MspInit+0x148>)
 8001f80:	f000 fa7c 	bl	800247c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2027      	movs	r0, #39	@ 0x27
 8001f8a:	f000 f9ae 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f8e:	2027      	movs	r0, #39	@ 0x27
 8001f90:	f000 f9c7 	bl	8002322 <HAL_NVIC_EnableIRQ>
}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	@ 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40004800 	.word	0x40004800
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fb8:	f7ff fef0 	bl	8001d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fbc:	480c      	ldr	r0, [pc, #48]	@ (8001ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fbe:	490d      	ldr	r1, [pc, #52]	@ (8001ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8002000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f002 fce1 	bl	80049a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe6:	f7ff fc5f 	bl	80018a8 <main>
  bx  lr    
 8001fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ff8:	08005ccc 	.word	0x08005ccc
  ldr r2, =_sbss
 8001ffc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002000:	20000ea0 	.word	0x20000ea0

08002004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC_IRQHandler>
	...

08002008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <HAL_Init+0x40>)
 8002012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <HAL_Init+0x40>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <HAL_Init+0x40>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 f94f 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002036:	200f      	movs	r0, #15
 8002038:	f000 f808 	bl	800204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800203c:	f7ff fda0 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002054:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <HAL_InitTick+0x54>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_InitTick+0x58>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f967 	bl	800233e <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f000 f92f 	bl	80022ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	@ (80020a8 <HAL_InitTick+0x5c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000008 	.word	0x20000008
 80020a8:	20000004 	.word	0x20000004

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000008 	.word	0x20000008
 80020d0:	20000d50 	.word	0x20000d50

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000d50 	.word	0x20000d50

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000008 	.word	0x20000008

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	@ (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	@ (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	@ (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ff8e 	bl	80021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff29 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022fc:	f7ff ff3e 	bl	800217c <__NVIC_GetPriorityGrouping>
 8002300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f7ff ff8e 	bl	8002228 <NVIC_EncodePriority>
 800230c:	4602      	mov	r2, r0
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff5d 	bl	80021d4 <__NVIC_SetPriority>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff31 	bl	8002198 <__NVIC_EnableIRQ>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ffa2 	bl	8002290 <SysTick_Config>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff feb6 	bl	80020d4 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d008      	beq.n	8002388 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2280      	movs	r2, #128	@ 0x80
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e052      	b.n	800242e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0216 	bic.w	r2, r2, #22
 8002396:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d103      	bne.n	80023b8 <HAL_DMA_Abort+0x62>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0208 	bic.w	r2, r2, #8
 80023c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d8:	e013      	b.n	8002402 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023da:	f7ff fe7b 	bl	80020d4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d90c      	bls.n	8002402 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2203      	movs	r2, #3
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e015      	b.n	800242e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e4      	bne.n	80023da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	223f      	movs	r2, #63	@ 0x3f
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d004      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2280      	movs	r2, #128	@ 0x80
 800244e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e00c      	b.n	800246e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2205      	movs	r2, #5
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	@ 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e165      	b.n	8002764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 8154 	bne.w	800275e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80ae 	beq.w	800275e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b5d      	ldr	r3, [pc, #372]	@ (800277c <HAL_GPIO_Init+0x300>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	4a5c      	ldr	r2, [pc, #368]	@ (800277c <HAL_GPIO_Init+0x300>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002610:	6453      	str	r3, [r2, #68]	@ 0x44
 8002612:	4b5a      	ldr	r3, [pc, #360]	@ (800277c <HAL_GPIO_Init+0x300>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a58      	ldr	r2, [pc, #352]	@ (8002780 <HAL_GPIO_Init+0x304>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4f      	ldr	r2, [pc, #316]	@ (8002784 <HAL_GPIO_Init+0x308>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d025      	beq.n	8002696 <HAL_GPIO_Init+0x21a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4e      	ldr	r2, [pc, #312]	@ (8002788 <HAL_GPIO_Init+0x30c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01f      	beq.n	8002692 <HAL_GPIO_Init+0x216>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4d      	ldr	r2, [pc, #308]	@ (800278c <HAL_GPIO_Init+0x310>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d019      	beq.n	800268e <HAL_GPIO_Init+0x212>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4c      	ldr	r2, [pc, #304]	@ (8002790 <HAL_GPIO_Init+0x314>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0x20e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4b      	ldr	r2, [pc, #300]	@ (8002794 <HAL_GPIO_Init+0x318>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00d      	beq.n	8002686 <HAL_GPIO_Init+0x20a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4a      	ldr	r2, [pc, #296]	@ (8002798 <HAL_GPIO_Init+0x31c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <HAL_GPIO_Init+0x206>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a49      	ldr	r2, [pc, #292]	@ (800279c <HAL_GPIO_Init+0x320>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_GPIO_Init+0x202>
 800267a:	2306      	movs	r3, #6
 800267c:	e00c      	b.n	8002698 <HAL_GPIO_Init+0x21c>
 800267e:	2307      	movs	r3, #7
 8002680:	e00a      	b.n	8002698 <HAL_GPIO_Init+0x21c>
 8002682:	2305      	movs	r3, #5
 8002684:	e008      	b.n	8002698 <HAL_GPIO_Init+0x21c>
 8002686:	2304      	movs	r3, #4
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x21c>
 800268a:	2303      	movs	r3, #3
 800268c:	e004      	b.n	8002698 <HAL_GPIO_Init+0x21c>
 800268e:	2302      	movs	r3, #2
 8002690:	e002      	b.n	8002698 <HAL_GPIO_Init+0x21c>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x21c>
 8002696:	2300      	movs	r3, #0
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f002 0203 	and.w	r2, r2, #3
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	4093      	lsls	r3, r2
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a8:	4935      	ldr	r1, [pc, #212]	@ (8002780 <HAL_GPIO_Init+0x304>)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b6:	4b3a      	ldr	r3, [pc, #232]	@ (80027a0 <HAL_GPIO_Init+0x324>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026da:	4a31      	ldr	r2, [pc, #196]	@ (80027a0 <HAL_GPIO_Init+0x324>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e0:	4b2f      	ldr	r3, [pc, #188]	@ (80027a0 <HAL_GPIO_Init+0x324>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002704:	4a26      	ldr	r2, [pc, #152]	@ (80027a0 <HAL_GPIO_Init+0x324>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800270a:	4b25      	ldr	r3, [pc, #148]	@ (80027a0 <HAL_GPIO_Init+0x324>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272e:	4a1c      	ldr	r2, [pc, #112]	@ (80027a0 <HAL_GPIO_Init+0x324>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002734:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <HAL_GPIO_Init+0x324>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002758:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <HAL_GPIO_Init+0x324>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	f67f ae96 	bls.w	8002498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3724      	adds	r7, #36	@ 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	40013800 	.word	0x40013800
 8002784:	40020000 	.word	0x40020000
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40021400 	.word	0x40021400
 800279c:	40021800 	.word	0x40021800
 80027a0:	40013c00 	.word	0x40013c00

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c0:	e003      	b.n	80027ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	041a      	lsls	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	619a      	str	r2, [r3, #24]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e8:	887a      	ldrh	r2, [r7, #2]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	041a      	lsls	r2, r3, #16
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	400b      	ands	r3, r1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	619a      	str	r2, [r3, #24]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002822:	4a05      	ldr	r2, [pc, #20]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f98a 	bl	8001b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40013c00 	.word	0x40013c00

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0cc      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b68      	ldr	r3, [pc, #416]	@ (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d90c      	bls.n	8002878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b65      	ldr	r3, [pc, #404]	@ (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b63      	ldr	r3, [pc, #396]	@ (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0b8      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002890:	4b59      	ldr	r3, [pc, #356]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a58      	ldr	r2, [pc, #352]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800289a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a8:	4b53      	ldr	r3, [pc, #332]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a52      	ldr	r2, [pc, #328]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b4:	4b50      	ldr	r3, [pc, #320]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	494d      	ldr	r1, [pc, #308]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d044      	beq.n	800295c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b47      	ldr	r3, [pc, #284]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d119      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e07f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b3f      	ldr	r3, [pc, #252]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e06f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	4b3b      	ldr	r3, [pc, #236]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e067      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291a:	4b37      	ldr	r3, [pc, #220]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4934      	ldr	r1, [pc, #208]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292c:	f7ff fbd2 	bl	80020d4 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	e00a      	b.n	800294a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7ff fbce 	bl	80020d4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e04f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b2b      	ldr	r3, [pc, #172]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1eb      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d20c      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b22      	ldr	r3, [pc, #136]	@ (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e032      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002990:	4b19      	ldr	r3, [pc, #100]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4916      	ldr	r1, [pc, #88]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ae:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	490e      	ldr	r1, [pc, #56]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029c2:	f000 f855 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	490a      	ldr	r1, [pc, #40]	@ (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	5ccb      	ldrb	r3, [r1, r3]
 80029d6:	fa22 f303 	lsr.w	r3, r2, r3
 80029da:	4a09      	ldr	r2, [pc, #36]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fb32 	bl	800204c <HAL_InitTick>

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08005c70 	.word	0x08005c70
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	@ (8002a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000000 	.word	0x20000000

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	@ (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08005c80 	.word	0x08005c80

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffdc 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	@ (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08005c80 	.word	0x08005c80

08002a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a74:	b0a6      	sub	sp, #152	@ 0x98
 8002a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a96:	4bc8      	ldr	r3, [pc, #800]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	f200 817e 	bhi.w	8002da0 <HAL_RCC_GetSysClockFreq+0x330>
 8002aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002aac <HAL_RCC_GetSysClockFreq+0x3c>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002ae1 	.word	0x08002ae1
 8002ab0:	08002da1 	.word	0x08002da1
 8002ab4:	08002da1 	.word	0x08002da1
 8002ab8:	08002da1 	.word	0x08002da1
 8002abc:	08002ae9 	.word	0x08002ae9
 8002ac0:	08002da1 	.word	0x08002da1
 8002ac4:	08002da1 	.word	0x08002da1
 8002ac8:	08002da1 	.word	0x08002da1
 8002acc:	08002af1 	.word	0x08002af1
 8002ad0:	08002da1 	.word	0x08002da1
 8002ad4:	08002da1 	.word	0x08002da1
 8002ad8:	08002da1 	.word	0x08002da1
 8002adc:	08002c5b 	.word	0x08002c5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae0:	4bb6      	ldr	r3, [pc, #728]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x34c>)
 8002ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ae6:	e15f      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae8:	4bb5      	ldr	r3, [pc, #724]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002aea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002aee:	e15b      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af0:	4bb1      	ldr	r3, [pc, #708]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002af8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afc:	4bae      	ldr	r3, [pc, #696]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d031      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b08:	4bab      	ldr	r3, [pc, #684]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	2200      	movs	r2, #0
 8002b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b20:	4ba7      	ldr	r3, [pc, #668]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b22:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002b26:	462a      	mov	r2, r5
 8002b28:	fb03 f202 	mul.w	r2, r3, r2
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4621      	mov	r1, r4
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	4aa2      	ldr	r2, [pc, #648]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b38:	4621      	mov	r1, r4
 8002b3a:	fba1 1202 	umull	r1, r2, r1, r2
 8002b3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b40:	460a      	mov	r2, r1
 8002b42:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002b44:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002b46:	4413      	add	r3, r2
 8002b48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b4e:	2200      	movs	r2, #0
 8002b50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b58:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002b5c:	f7fd fbc0 	bl	80002e0 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4613      	mov	r3, r2
 8002b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b6a:	e064      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6c:	4b92      	ldr	r3, [pc, #584]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	2200      	movs	r2, #0
 8002b74:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b76:	657a      	str	r2, [r7, #84]	@ 0x54
 8002b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b80:	2300      	movs	r3, #0
 8002b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b84:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002b88:	4622      	mov	r2, r4
 8002b8a:	462b      	mov	r3, r5
 8002b8c:	f04f 0000 	mov.w	r0, #0
 8002b90:	f04f 0100 	mov.w	r1, #0
 8002b94:	0159      	lsls	r1, r3, #5
 8002b96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9a:	0150      	lsls	r0, r2, #5
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	1a51      	subs	r1, r2, r1
 8002ba4:	6139      	str	r1, [r7, #16]
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bba:	4659      	mov	r1, fp
 8002bbc:	018b      	lsls	r3, r1, #6
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc4:	4651      	mov	r1, sl
 8002bc6:	018a      	lsls	r2, r1, #6
 8002bc8:	4651      	mov	r1, sl
 8002bca:	ebb2 0801 	subs.w	r8, r2, r1
 8002bce:	4659      	mov	r1, fp
 8002bd0:	eb63 0901 	sbc.w	r9, r3, r1
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002be0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002be4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be8:	4690      	mov	r8, r2
 8002bea:	4699      	mov	r9, r3
 8002bec:	4623      	mov	r3, r4
 8002bee:	eb18 0303 	adds.w	r3, r8, r3
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	462b      	mov	r3, r5
 8002bf6:	eb49 0303 	adc.w	r3, r9, r3
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c08:	4629      	mov	r1, r5
 8002c0a:	028b      	lsls	r3, r1, #10
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c12:	4621      	mov	r1, r4
 8002c14:	028a      	lsls	r2, r1, #10
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c22:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c28:	f7fd fb5a 	bl	80002e0 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4613      	mov	r3, r2
 8002c32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c36:	4b60      	ldr	r3, [pc, #384]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	0c1b      	lsrs	r3, r3, #16
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	3301      	adds	r3, #1
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002c48:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c58:	e0a6      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5a:	4b57      	ldr	r3, [pc, #348]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c66:	4b54      	ldr	r3, [pc, #336]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d02a      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b51      	ldr	r3, [pc, #324]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	2200      	movs	r2, #0
 8002c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c84:	2100      	movs	r1, #0
 8002c86:	4b4e      	ldr	r3, [pc, #312]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c88:	fb03 f201 	mul.w	r2, r3, r1
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	fb00 f303 	mul.w	r3, r0, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c96:	fba0 1202 	umull	r1, r2, r0, r2
 8002c9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c9c:	460a      	mov	r2, r1
 8002c9e:	673a      	str	r2, [r7, #112]	@ 0x70
 8002ca0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ca2:	4413      	add	r3, r2
 8002ca4:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002caa:	2200      	movs	r2, #0
 8002cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cae:	637a      	str	r2, [r7, #52]	@ 0x34
 8002cb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002cb4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002cb8:	f7fd fb12 	bl	80002e0 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cc6:	e05b      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	2200      	movs	r2, #0
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cda:	623b      	str	r3, [r7, #32]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	f04f 0000 	mov.w	r0, #0
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	0159      	lsls	r1, r3, #5
 8002cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf6:	0150      	lsls	r0, r2, #5
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d02:	4649      	mov	r1, r9
 8002d04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d20:	eb63 050b 	sbc.w	r5, r3, fp
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	00eb      	lsls	r3, r5, #3
 8002d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d32:	00e2      	lsls	r2, r4, #3
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
 8002d38:	4643      	mov	r3, r8
 8002d3a:	18e3      	adds	r3, r4, r3
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	464b      	mov	r3, r9
 8002d40:	eb45 0303 	adc.w	r3, r5, r3
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d52:	4629      	mov	r1, r5
 8002d54:	028b      	lsls	r3, r1, #10
 8002d56:	4621      	mov	r1, r4
 8002d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	028a      	lsls	r2, r1, #10
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d68:	2200      	movs	r2, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	61fa      	str	r2, [r7, #28]
 8002d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d72:	f7fd fab5 	bl	80002e0 <__aeabi_uldivmod>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d80:	4b0d      	ldr	r3, [pc, #52]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0f1b      	lsrs	r3, r3, #28
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d9e:	e003      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x34c>)
 8002da2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002da6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3798      	adds	r7, #152	@ 0x98
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	017d7840 	.word	0x017d7840

08002dc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e28d      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8083 	beq.w	8002eea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002de4:	4b94      	ldr	r3, [pc, #592]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d019      	beq.n	8002e24 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002df0:	4b91      	ldr	r3, [pc, #580]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dfc:	4b8e      	ldr	r3, [pc, #568]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e08:	d00c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0a:	4b8b      	ldr	r3, [pc, #556]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d112      	bne.n	8002e3c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e16:	4b88      	ldr	r3, [pc, #544]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e22:	d10b      	bne.n	8002e3c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	4b84      	ldr	r3, [pc, #528]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d05b      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x124>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d157      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e25a      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e44:	d106      	bne.n	8002e54 <HAL_RCC_OscConfig+0x90>
 8002e46:	4b7c      	ldr	r3, [pc, #496]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7b      	ldr	r2, [pc, #492]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e01d      	b.n	8002e90 <HAL_RCC_OscConfig+0xcc>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0xb4>
 8002e5e:	4b76      	ldr	r3, [pc, #472]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a75      	ldr	r2, [pc, #468]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b73      	ldr	r3, [pc, #460]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a72      	ldr	r2, [pc, #456]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0xcc>
 8002e78:	4b6f      	ldr	r3, [pc, #444]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b6c      	ldr	r3, [pc, #432]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a6b      	ldr	r2, [pc, #428]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d013      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7ff f91c 	bl	80020d4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7ff f918 	bl	80020d4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e21f      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b61      	ldr	r3, [pc, #388]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xdc>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f908 	bl	80020d4 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7ff f904 	bl	80020d4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	@ 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e20b      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	4b57      	ldr	r3, [pc, #348]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x104>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d06f      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ef6:	4b50      	ldr	r3, [pc, #320]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d017      	beq.n	8002f32 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f02:	4b4d      	ldr	r3, [pc, #308]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b47      	ldr	r3, [pc, #284]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f26:	4b44      	ldr	r3, [pc, #272]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	4b41      	ldr	r3, [pc, #260]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x186>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1d3      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4937      	ldr	r1, [pc, #220]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	e03a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b34      	ldr	r3, [pc, #208]	@ (800303c <HAL_RCC_OscConfig+0x278>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7ff f8b1 	bl	80020d4 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f76:	f7ff f8ad 	bl	80020d4 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1b4      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	4b2b      	ldr	r3, [pc, #172]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b28      	ldr	r3, [pc, #160]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4925      	ldr	r1, [pc, #148]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b24      	ldr	r3, [pc, #144]	@ (800303c <HAL_RCC_OscConfig+0x278>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7ff f890 	bl	80020d4 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7ff f88c 	bl	80020d4 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e193      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d036      	beq.n	8003050 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <HAL_RCC_OscConfig+0x27c>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7ff f870 	bl	80020d4 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7ff f86c 	bl	80020d4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e173      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 800300c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x234>
 8003016:	e01b      	b.n	8003050 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_RCC_OscConfig+0x27c>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7ff f859 	bl	80020d4 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	e00e      	b.n	8003044 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003026:	f7ff f855 	bl	80020d4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d907      	bls.n	8003044 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e15c      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
 8003038:	40023800 	.word	0x40023800
 800303c:	42470000 	.word	0x42470000
 8003040:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b8a      	ldr	r3, [pc, #552]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ea      	bne.n	8003026 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8097 	beq.w	800318c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003062:	4b83      	ldr	r3, [pc, #524]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	4b7f      	ldr	r3, [pc, #508]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	4a7e      	ldr	r2, [pc, #504]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	@ 0x40
 800307e:	4b7c      	ldr	r3, [pc, #496]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b79      	ldr	r3, [pc, #484]	@ (8003274 <HAL_RCC_OscConfig+0x4b0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309a:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <HAL_RCC_OscConfig+0x4b0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a75      	ldr	r2, [pc, #468]	@ (8003274 <HAL_RCC_OscConfig+0x4b0>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7ff f815 	bl	80020d4 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7ff f811 	bl	80020d4 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e118      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003274 <HAL_RCC_OscConfig+0x4b0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x31e>
 80030d4:	4b66      	ldr	r3, [pc, #408]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d8:	4a65      	ldr	r2, [pc, #404]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e0:	e01c      	b.n	800311c <HAL_RCC_OscConfig+0x358>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x340>
 80030ea:	4b61      	ldr	r3, [pc, #388]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ee:	4a60      	ldr	r2, [pc, #384]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f6:	4b5e      	ldr	r3, [pc, #376]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fa:	4a5d      	ldr	r2, [pc, #372]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	@ 0x70
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0x358>
 8003104:	4b5a      	ldr	r3, [pc, #360]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003108:	4a59      	ldr	r2, [pc, #356]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003110:	4b57      	ldr	r3, [pc, #348]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003114:	4a56      	ldr	r2, [pc, #344]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003116:	f023 0304 	bic.w	r3, r3, #4
 800311a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe ffd6 	bl	80020d4 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fe ffd2 	bl	80020d4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0d7      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003142:	4b4b      	ldr	r3, [pc, #300]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ee      	beq.n	800312c <HAL_RCC_OscConfig+0x368>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe ffc0 	bl	80020d4 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe ffbc 	bl	80020d4 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0c1      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	4b40      	ldr	r3, [pc, #256]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ee      	bne.n	8003158 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	4b3b      	ldr	r3, [pc, #236]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	4a3a      	ldr	r2, [pc, #232]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800318a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80ad 	beq.w	80032f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003196:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d060      	beq.n	8003264 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d145      	bne.n	8003236 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b33      	ldr	r3, [pc, #204]	@ (8003278 <HAL_RCC_OscConfig+0x4b4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe ff90 	bl	80020d4 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe ff8c 	bl	80020d4 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e093      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	4b29      	ldr	r3, [pc, #164]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	019b      	lsls	r3, r3, #6
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	3b01      	subs	r3, #1
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	491b      	ldr	r1, [pc, #108]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003208:	4b1b      	ldr	r3, [pc, #108]	@ (8003278 <HAL_RCC_OscConfig+0x4b4>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe ff61 	bl	80020d4 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe ff5d 	bl	80020d4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e064      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003228:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x452>
 8003234:	e05c      	b.n	80032f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <HAL_RCC_OscConfig+0x4b4>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe ff4a 	bl	80020d4 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003244:	f7fe ff46 	bl	80020d4 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e04d      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x480>
 8003262:	e045      	b.n	80032f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d107      	bne.n	800327c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e040      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
 8003270:	40023800 	.word	0x40023800
 8003274:	40007000 	.word	0x40007000
 8003278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800327c:	4b1f      	ldr	r3, [pc, #124]	@ (80032fc <HAL_RCC_OscConfig+0x538>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d030      	beq.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d129      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d122      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d119      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	3b01      	subs	r3, #1
 80032c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d10f      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800

08003300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e042      	b.n	8003398 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe fd9e 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	@ 0x24
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fdf3 	bl	8003f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	@ 0x28
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d175      	bne.n	80034ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_UART_Transmit+0x2c>
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e06e      	b.n	80034ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2221      	movs	r2, #33	@ 0x21
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033de:	f7fe fe79 	bl	80020d4 <HAL_GetTick>
 80033e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	88fa      	ldrh	r2, [r7, #6]
 80033e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f8:	d108      	bne.n	800340c <HAL_UART_Transmit+0x6c>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	e003      	b.n	8003414 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003414:	e02e      	b.n	8003474 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fb55 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e03a      	b.n	80034ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800344c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	3302      	adds	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	e007      	b.n	8003466 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	3301      	adds	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1cb      	bne.n	8003416 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2200      	movs	r2, #0
 8003486:	2140      	movs	r1, #64	@ 0x40
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fb21 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e006      	b.n	80034ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	4613      	mov	r3, r2
 80034c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d121      	bne.n	8003514 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_UART_Transmit_IT+0x26>
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e01a      	b.n	8003516 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2221      	movs	r2, #33	@ 0x21
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800350e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	4613      	mov	r3, r2
 800352e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b20      	cmp	r3, #32
 800353a:	d112      	bne.n	8003562 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_UART_Receive_IT+0x26>
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e00b      	b.n	8003564 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	461a      	mov	r2, r3
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fb12 	bl	8003b82 <UART_Start_Receive_IT>
 800355e:	4603      	mov	r3, r0
 8003560:	e000      	b.n	8003564 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b0ba      	sub	sp, #232	@ 0xe8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80035aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <HAL_UART_IRQHandler+0x66>
 80035be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fbf2 	bl	8003db4 <UART_Receive_IT>
      return;
 80035d0:	e25b      	b.n	8003a8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80de 	beq.w	8003798 <HAL_UART_IRQHandler+0x22c>
 80035dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80d1 	beq.w	8003798 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_UART_IRQHandler+0xae>
 8003602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <HAL_UART_IRQHandler+0xd2>
 8003626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_UART_IRQHandler+0xf6>
 800364a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d011      	beq.n	8003692 <HAL_UART_IRQHandler+0x126>
 800366e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800367a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f043 0208 	orr.w	r2, r3, #8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 81f2 	beq.w	8003a80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800369c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_UART_IRQHandler+0x14e>
 80036a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fb7d 	bl	8003db4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b40      	cmp	r3, #64	@ 0x40
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_UART_IRQHandler+0x17a>
 80036de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d04f      	beq.n	8003786 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa85 	bl	8003bf6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f6:	2b40      	cmp	r3, #64	@ 0x40
 80036f8:	d141      	bne.n	800377e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3314      	adds	r3, #20
 8003700:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003726:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800372a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800373e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1d9      	bne.n	80036fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003752:	4a7e      	ldr	r2, [pc, #504]	@ (800394c <HAL_UART_IRQHandler+0x3e0>)
 8003754:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fe6b 	bl	8002436 <HAL_DMA_Abort_IT>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003770:	4610      	mov	r0, r2
 8003772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	e00e      	b.n	8003794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f994 	bl	8003aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	e00a      	b.n	8003794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f990 	bl	8003aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	e006      	b.n	8003794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f98c 	bl	8003aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003792:	e175      	b.n	8003a80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	bf00      	nop
    return;
 8003796:	e173      	b.n	8003a80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	2b01      	cmp	r3, #1
 800379e:	f040 814f 	bne.w	8003a40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8148 	beq.w	8003a40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8141 	beq.w	8003a40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037de:	2b40      	cmp	r3, #64	@ 0x40
 80037e0:	f040 80b6 	bne.w	8003950 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8145 	beq.w	8003a84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003802:	429a      	cmp	r2, r3
 8003804:	f080 813e 	bcs.w	8003a84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800380e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800381a:	f000 8088 	beq.w	800392e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	330c      	adds	r3, #12
 8003824:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800383c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800384a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800384e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003856:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1d9      	bne.n	800381e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800387a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3314      	adds	r3, #20
 800388a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800388e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003892:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003896:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e1      	bne.n	800386a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3314      	adds	r3, #20
 80038ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e3      	bne.n	80038a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038fe:	f023 0310 	bic.w	r3, r3, #16
 8003902:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003910:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003912:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003916:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800391e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e3      	bne.n	80038ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fd14 	bl	8002356 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800393c:	b29b      	uxth	r3, r3
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	b29b      	uxth	r3, r3
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8b7 	bl	8003ab8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800394a:	e09b      	b.n	8003a84 <HAL_UART_IRQHandler+0x518>
 800394c:	08003cbd 	.word	0x08003cbd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003958:	b29b      	uxth	r3, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 808e 	beq.w	8003a88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800396c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8089 	beq.w	8003a88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800398c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800399a:	647a      	str	r2, [r7, #68]	@ 0x44
 800399c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e3      	bne.n	8003976 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	623b      	str	r3, [r7, #32]
   return(result);
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3314      	adds	r3, #20
 80039ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e3      	bne.n	80039ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0310 	bic.w	r3, r3, #16
 8003a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a18:	61fa      	str	r2, [r7, #28]
 8003a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	69b9      	ldr	r1, [r7, #24]
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	617b      	str	r3, [r7, #20]
   return(result);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e3      	bne.n	80039f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f83d 	bl	8003ab8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a3e:	e023      	b.n	8003a88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <HAL_UART_IRQHandler+0x4f4>
 8003a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f943 	bl	8003ce4 <UART_Transmit_IT>
    return;
 8003a5e:	e014      	b.n	8003a8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00e      	beq.n	8003a8a <HAL_UART_IRQHandler+0x51e>
 8003a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f983 	bl	8003d84 <UART_EndTransmit_IT>
    return;
 8003a7e:	e004      	b.n	8003a8a <HAL_UART_IRQHandler+0x51e>
    return;
 8003a80:	bf00      	nop
 8003a82:	e002      	b.n	8003a8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a88:	bf00      	nop
  }
}
 8003a8a:	37e8      	adds	r7, #232	@ 0xe8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae0:	e03b      	b.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d037      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aea:	f7fe faf3 	bl	80020d4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d302      	bcc.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e03a      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d023      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b80      	cmp	r3, #128	@ 0x80
 8003b16:	d020      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b40      	cmp	r3, #64	@ 0x40
 8003b1c:	d01d      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d116      	bne.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f857 	bl	8003bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e00f      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4013      	ands	r3, r2
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	bf0c      	ite	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	2300      	movne	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d0b4      	beq.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	88fa      	ldrh	r2, [r7, #6]
 8003ba0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2222      	movs	r2, #34	@ 0x22
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0220 	orr.w	r2, r2, #32
 8003be6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b095      	sub	sp, #84	@ 0x54
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e5      	bne.n	8003bfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3314      	adds	r3, #20
 8003c50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e5      	bne.n	8003c32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d119      	bne.n	8003ca2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	330c      	adds	r3, #12
 8003c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f023 0310 	bic.w	r3, r3, #16
 8003c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c8e:	61ba      	str	r2, [r7, #24]
 8003c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6979      	ldr	r1, [r7, #20]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e5      	bne.n	8003c6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cb0:	bf00      	nop
 8003cb2:	3754      	adds	r7, #84	@ 0x54
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff fee4 	bl	8003aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b21      	cmp	r3, #33	@ 0x21
 8003cf6:	d13e      	bne.n	8003d76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d00:	d114      	bne.n	8003d2c <UART_Transmit_IT+0x48>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d110      	bne.n	8003d2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]
 8003d2a:	e008      	b.n	8003d3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	1c59      	adds	r1, r3, #1
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6211      	str	r1, [r2, #32]
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10f      	bne.n	8003d72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fe73 	bl	8003a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08c      	sub	sp, #48	@ 0x30
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b22      	cmp	r3, #34	@ 0x22
 8003dc6:	f040 80ae 	bne.w	8003f26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	d117      	bne.n	8003e04 <UART_Receive_IT+0x50>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d113      	bne.n	8003e04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	1c9a      	adds	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e02:	e026      	b.n	8003e52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e16:	d007      	beq.n	8003e28 <UART_Receive_IT+0x74>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <UART_Receive_IT+0x82>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d106      	bne.n	8003e36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e008      	b.n	8003e48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d15d      	bne.n	8003f22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0220 	bic.w	r2, r2, #32
 8003e74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d135      	bne.n	8003f18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f023 0310 	bic.w	r3, r3, #16
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed2:	623a      	str	r2, [r7, #32]
 8003ed4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	69f9      	ldr	r1, [r7, #28]
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e5      	bne.n	8003eb2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d10a      	bne.n	8003f0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fdd1 	bl	8003ab8 <HAL_UARTEx_RxEventCallback>
 8003f16:	e002      	b.n	8003f1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fd fc8d 	bl	8001838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e002      	b.n	8003f28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3730      	adds	r7, #48	@ 0x30
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f34:	b0c0      	sub	sp, #256	@ 0x100
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	68d9      	ldr	r1, [r3, #12]
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	ea40 0301 	orr.w	r3, r0, r1
 8003f58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f88:	f021 010c 	bic.w	r1, r1, #12
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f96:	430b      	orrs	r3, r1
 8003f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	6999      	ldr	r1, [r3, #24]
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	ea40 0301 	orr.w	r3, r0, r1
 8003fb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b8f      	ldr	r3, [pc, #572]	@ (80041fc <UART_SetConfig+0x2cc>)
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d005      	beq.n	8003fd0 <UART_SetConfig+0xa0>
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b8d      	ldr	r3, [pc, #564]	@ (8004200 <UART_SetConfig+0x2d0>)
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d104      	bne.n	8003fda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fd0:	f7fe fd3a 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8003fd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fd8:	e003      	b.n	8003fe2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fda:	f7fe fd21 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8003fde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fec:	f040 810c 	bne.w	8004208 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ffa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ffe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004002:	4622      	mov	r2, r4
 8004004:	462b      	mov	r3, r5
 8004006:	1891      	adds	r1, r2, r2
 8004008:	65b9      	str	r1, [r7, #88]	@ 0x58
 800400a:	415b      	adcs	r3, r3
 800400c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800400e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004012:	4621      	mov	r1, r4
 8004014:	eb12 0801 	adds.w	r8, r2, r1
 8004018:	4629      	mov	r1, r5
 800401a:	eb43 0901 	adc.w	r9, r3, r1
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004032:	4690      	mov	r8, r2
 8004034:	4699      	mov	r9, r3
 8004036:	4623      	mov	r3, r4
 8004038:	eb18 0303 	adds.w	r3, r8, r3
 800403c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004040:	462b      	mov	r3, r5
 8004042:	eb49 0303 	adc.w	r3, r9, r3
 8004046:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004056:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800405a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800405e:	460b      	mov	r3, r1
 8004060:	18db      	adds	r3, r3, r3
 8004062:	653b      	str	r3, [r7, #80]	@ 0x50
 8004064:	4613      	mov	r3, r2
 8004066:	eb42 0303 	adc.w	r3, r2, r3
 800406a:	657b      	str	r3, [r7, #84]	@ 0x54
 800406c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004070:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004074:	f7fc f934 	bl	80002e0 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4b61      	ldr	r3, [pc, #388]	@ (8004204 <UART_SetConfig+0x2d4>)
 800407e:	fba3 2302 	umull	r2, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	011c      	lsls	r4, r3, #4
 8004086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800408a:	2200      	movs	r2, #0
 800408c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004090:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004094:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004098:	4642      	mov	r2, r8
 800409a:	464b      	mov	r3, r9
 800409c:	1891      	adds	r1, r2, r2
 800409e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040a0:	415b      	adcs	r3, r3
 80040a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040a8:	4641      	mov	r1, r8
 80040aa:	eb12 0a01 	adds.w	sl, r2, r1
 80040ae:	4649      	mov	r1, r9
 80040b0:	eb43 0b01 	adc.w	fp, r3, r1
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040c8:	4692      	mov	sl, r2
 80040ca:	469b      	mov	fp, r3
 80040cc:	4643      	mov	r3, r8
 80040ce:	eb1a 0303 	adds.w	r3, sl, r3
 80040d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040d6:	464b      	mov	r3, r9
 80040d8:	eb4b 0303 	adc.w	r3, fp, r3
 80040dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040f4:	460b      	mov	r3, r1
 80040f6:	18db      	adds	r3, r3, r3
 80040f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80040fa:	4613      	mov	r3, r2
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	647b      	str	r3, [r7, #68]	@ 0x44
 8004102:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004106:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800410a:	f7fc f8e9 	bl	80002e0 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4611      	mov	r1, r2
 8004114:	4b3b      	ldr	r3, [pc, #236]	@ (8004204 <UART_SetConfig+0x2d4>)
 8004116:	fba3 2301 	umull	r2, r3, r3, r1
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2264      	movs	r2, #100	@ 0x64
 800411e:	fb02 f303 	mul.w	r3, r2, r3
 8004122:	1acb      	subs	r3, r1, r3
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800412a:	4b36      	ldr	r3, [pc, #216]	@ (8004204 <UART_SetConfig+0x2d4>)
 800412c:	fba3 2302 	umull	r2, r3, r3, r2
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004138:	441c      	add	r4, r3
 800413a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004144:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004148:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	1891      	adds	r1, r2, r2
 8004152:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004154:	415b      	adcs	r3, r3
 8004156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800415c:	4641      	mov	r1, r8
 800415e:	1851      	adds	r1, r2, r1
 8004160:	6339      	str	r1, [r7, #48]	@ 0x30
 8004162:	4649      	mov	r1, r9
 8004164:	414b      	adcs	r3, r1
 8004166:	637b      	str	r3, [r7, #52]	@ 0x34
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004174:	4659      	mov	r1, fp
 8004176:	00cb      	lsls	r3, r1, #3
 8004178:	4651      	mov	r1, sl
 800417a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417e:	4651      	mov	r1, sl
 8004180:	00ca      	lsls	r2, r1, #3
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	4603      	mov	r3, r0
 8004188:	4642      	mov	r2, r8
 800418a:	189b      	adds	r3, r3, r2
 800418c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004190:	464b      	mov	r3, r9
 8004192:	460a      	mov	r2, r1
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041b0:	460b      	mov	r3, r1
 80041b2:	18db      	adds	r3, r3, r3
 80041b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041b6:	4613      	mov	r3, r2
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041c6:	f7fc f88b 	bl	80002e0 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <UART_SetConfig+0x2d4>)
 80041d0:	fba3 1302 	umull	r1, r3, r3, r2
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	2164      	movs	r1, #100	@ 0x64
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	3332      	adds	r3, #50	@ 0x32
 80041e2:	4a08      	ldr	r2, [pc, #32]	@ (8004204 <UART_SetConfig+0x2d4>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	f003 0207 	and.w	r2, r3, #7
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4422      	add	r2, r4
 80041f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041f8:	e106      	b.n	8004408 <UART_SetConfig+0x4d8>
 80041fa:	bf00      	nop
 80041fc:	40011000 	.word	0x40011000
 8004200:	40011400 	.word	0x40011400
 8004204:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800420c:	2200      	movs	r2, #0
 800420e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004212:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004216:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800421a:	4642      	mov	r2, r8
 800421c:	464b      	mov	r3, r9
 800421e:	1891      	adds	r1, r2, r2
 8004220:	6239      	str	r1, [r7, #32]
 8004222:	415b      	adcs	r3, r3
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
 8004226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800422a:	4641      	mov	r1, r8
 800422c:	1854      	adds	r4, r2, r1
 800422e:	4649      	mov	r1, r9
 8004230:	eb43 0501 	adc.w	r5, r3, r1
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	00eb      	lsls	r3, r5, #3
 800423e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004242:	00e2      	lsls	r2, r4, #3
 8004244:	4614      	mov	r4, r2
 8004246:	461d      	mov	r5, r3
 8004248:	4643      	mov	r3, r8
 800424a:	18e3      	adds	r3, r4, r3
 800424c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004250:	464b      	mov	r3, r9
 8004252:	eb45 0303 	adc.w	r3, r5, r3
 8004256:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004266:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004276:	4629      	mov	r1, r5
 8004278:	008b      	lsls	r3, r1, #2
 800427a:	4621      	mov	r1, r4
 800427c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004280:	4621      	mov	r1, r4
 8004282:	008a      	lsls	r2, r1, #2
 8004284:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004288:	f7fc f82a 	bl	80002e0 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4b60      	ldr	r3, [pc, #384]	@ (8004414 <UART_SetConfig+0x4e4>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	011c      	lsls	r4, r3, #4
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	61b9      	str	r1, [r7, #24]
 80042b4:	415b      	adcs	r3, r3
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042bc:	4641      	mov	r1, r8
 80042be:	1851      	adds	r1, r2, r1
 80042c0:	6139      	str	r1, [r7, #16]
 80042c2:	4649      	mov	r1, r9
 80042c4:	414b      	adcs	r3, r1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042d4:	4659      	mov	r1, fp
 80042d6:	00cb      	lsls	r3, r1, #3
 80042d8:	4651      	mov	r1, sl
 80042da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042de:	4651      	mov	r1, sl
 80042e0:	00ca      	lsls	r2, r1, #3
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	4603      	mov	r3, r0
 80042e8:	4642      	mov	r2, r8
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042f0:	464b      	mov	r3, r9
 80042f2:	460a      	mov	r2, r1
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004306:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004314:	4649      	mov	r1, r9
 8004316:	008b      	lsls	r3, r1, #2
 8004318:	4641      	mov	r1, r8
 800431a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800431e:	4641      	mov	r1, r8
 8004320:	008a      	lsls	r2, r1, #2
 8004322:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004326:	f7fb ffdb 	bl	80002e0 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4611      	mov	r1, r2
 8004330:	4b38      	ldr	r3, [pc, #224]	@ (8004414 <UART_SetConfig+0x4e4>)
 8004332:	fba3 2301 	umull	r2, r3, r3, r1
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2264      	movs	r2, #100	@ 0x64
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	1acb      	subs	r3, r1, r3
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	3332      	adds	r3, #50	@ 0x32
 8004344:	4a33      	ldr	r2, [pc, #204]	@ (8004414 <UART_SetConfig+0x4e4>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004350:	441c      	add	r4, r3
 8004352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004356:	2200      	movs	r2, #0
 8004358:	673b      	str	r3, [r7, #112]	@ 0x70
 800435a:	677a      	str	r2, [r7, #116]	@ 0x74
 800435c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	415b      	adcs	r3, r3
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	6039      	str	r1, [r7, #0]
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043a2:	464b      	mov	r3, r9
 80043a4:	460a      	mov	r2, r1
 80043a6:	eb42 0303 	adc.w	r3, r2, r3
 80043aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043c4:	4649      	mov	r1, r9
 80043c6:	008b      	lsls	r3, r1, #2
 80043c8:	4641      	mov	r1, r8
 80043ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ce:	4641      	mov	r1, r8
 80043d0:	008a      	lsls	r2, r1, #2
 80043d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043d6:	f7fb ff83 	bl	80002e0 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <UART_SetConfig+0x4e4>)
 80043e0:	fba3 1302 	umull	r1, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	2164      	movs	r1, #100	@ 0x64
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	3332      	adds	r3, #50	@ 0x32
 80043f2:	4a08      	ldr	r2, [pc, #32]	@ (8004414 <UART_SetConfig+0x4e4>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	f003 020f 	and.w	r2, r3, #15
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4422      	add	r2, r4
 8004406:	609a      	str	r2, [r3, #8]
}
 8004408:	bf00      	nop
 800440a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800440e:	46bd      	mov	sp, r7
 8004410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004414:	51eb851f 	.word	0x51eb851f

08004418 <std>:
 8004418:	2300      	movs	r3, #0
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	e9c0 3300 	strd	r3, r3, [r0]
 8004422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004426:	6083      	str	r3, [r0, #8]
 8004428:	8181      	strh	r1, [r0, #12]
 800442a:	6643      	str	r3, [r0, #100]	@ 0x64
 800442c:	81c2      	strh	r2, [r0, #14]
 800442e:	6183      	str	r3, [r0, #24]
 8004430:	4619      	mov	r1, r3
 8004432:	2208      	movs	r2, #8
 8004434:	305c      	adds	r0, #92	@ 0x5c
 8004436:	f000 fa4d 	bl	80048d4 <memset>
 800443a:	4b0d      	ldr	r3, [pc, #52]	@ (8004470 <std+0x58>)
 800443c:	6263      	str	r3, [r4, #36]	@ 0x24
 800443e:	4b0d      	ldr	r3, [pc, #52]	@ (8004474 <std+0x5c>)
 8004440:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <std+0x60>)
 8004444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <std+0x64>)
 8004448:	6323      	str	r3, [r4, #48]	@ 0x30
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <std+0x68>)
 800444c:	6224      	str	r4, [r4, #32]
 800444e:	429c      	cmp	r4, r3
 8004450:	d006      	beq.n	8004460 <std+0x48>
 8004452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004456:	4294      	cmp	r4, r2
 8004458:	d002      	beq.n	8004460 <std+0x48>
 800445a:	33d0      	adds	r3, #208	@ 0xd0
 800445c:	429c      	cmp	r4, r3
 800445e:	d105      	bne.n	800446c <std+0x54>
 8004460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004468:	f000 bac2 	b.w	80049f0 <__retarget_lock_init_recursive>
 800446c:	bd10      	pop	{r4, pc}
 800446e:	bf00      	nop
 8004470:	08004725 	.word	0x08004725
 8004474:	08004747 	.word	0x08004747
 8004478:	0800477f 	.word	0x0800477f
 800447c:	080047a3 	.word	0x080047a3
 8004480:	20000d54 	.word	0x20000d54

08004484 <stdio_exit_handler>:
 8004484:	4a02      	ldr	r2, [pc, #8]	@ (8004490 <stdio_exit_handler+0xc>)
 8004486:	4903      	ldr	r1, [pc, #12]	@ (8004494 <stdio_exit_handler+0x10>)
 8004488:	4803      	ldr	r0, [pc, #12]	@ (8004498 <stdio_exit_handler+0x14>)
 800448a:	f000 b869 	b.w	8004560 <_fwalk_sglue>
 800448e:	bf00      	nop
 8004490:	2000000c 	.word	0x2000000c
 8004494:	0800555d 	.word	0x0800555d
 8004498:	2000001c 	.word	0x2000001c

0800449c <cleanup_stdio>:
 800449c:	6841      	ldr	r1, [r0, #4]
 800449e:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <cleanup_stdio+0x34>)
 80044a0:	4299      	cmp	r1, r3
 80044a2:	b510      	push	{r4, lr}
 80044a4:	4604      	mov	r4, r0
 80044a6:	d001      	beq.n	80044ac <cleanup_stdio+0x10>
 80044a8:	f001 f858 	bl	800555c <_fflush_r>
 80044ac:	68a1      	ldr	r1, [r4, #8]
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <cleanup_stdio+0x38>)
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d002      	beq.n	80044ba <cleanup_stdio+0x1e>
 80044b4:	4620      	mov	r0, r4
 80044b6:	f001 f851 	bl	800555c <_fflush_r>
 80044ba:	68e1      	ldr	r1, [r4, #12]
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <cleanup_stdio+0x3c>)
 80044be:	4299      	cmp	r1, r3
 80044c0:	d004      	beq.n	80044cc <cleanup_stdio+0x30>
 80044c2:	4620      	mov	r0, r4
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f001 b848 	b.w	800555c <_fflush_r>
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	20000d54 	.word	0x20000d54
 80044d4:	20000dbc 	.word	0x20000dbc
 80044d8:	20000e24 	.word	0x20000e24

080044dc <global_stdio_init.part.0>:
 80044dc:	b510      	push	{r4, lr}
 80044de:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <global_stdio_init.part.0+0x30>)
 80044e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004510 <global_stdio_init.part.0+0x34>)
 80044e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004514 <global_stdio_init.part.0+0x38>)
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	4620      	mov	r0, r4
 80044e8:	2200      	movs	r2, #0
 80044ea:	2104      	movs	r1, #4
 80044ec:	f7ff ff94 	bl	8004418 <std>
 80044f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044f4:	2201      	movs	r2, #1
 80044f6:	2109      	movs	r1, #9
 80044f8:	f7ff ff8e 	bl	8004418 <std>
 80044fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004500:	2202      	movs	r2, #2
 8004502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004506:	2112      	movs	r1, #18
 8004508:	f7ff bf86 	b.w	8004418 <std>
 800450c:	20000e8c 	.word	0x20000e8c
 8004510:	20000d54 	.word	0x20000d54
 8004514:	08004485 	.word	0x08004485

08004518 <__sfp_lock_acquire>:
 8004518:	4801      	ldr	r0, [pc, #4]	@ (8004520 <__sfp_lock_acquire+0x8>)
 800451a:	f000 ba6a 	b.w	80049f2 <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	20000e95 	.word	0x20000e95

08004524 <__sfp_lock_release>:
 8004524:	4801      	ldr	r0, [pc, #4]	@ (800452c <__sfp_lock_release+0x8>)
 8004526:	f000 ba65 	b.w	80049f4 <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	20000e95 	.word	0x20000e95

08004530 <__sinit>:
 8004530:	b510      	push	{r4, lr}
 8004532:	4604      	mov	r4, r0
 8004534:	f7ff fff0 	bl	8004518 <__sfp_lock_acquire>
 8004538:	6a23      	ldr	r3, [r4, #32]
 800453a:	b11b      	cbz	r3, 8004544 <__sinit+0x14>
 800453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004540:	f7ff bff0 	b.w	8004524 <__sfp_lock_release>
 8004544:	4b04      	ldr	r3, [pc, #16]	@ (8004558 <__sinit+0x28>)
 8004546:	6223      	str	r3, [r4, #32]
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <__sinit+0x2c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f5      	bne.n	800453c <__sinit+0xc>
 8004550:	f7ff ffc4 	bl	80044dc <global_stdio_init.part.0>
 8004554:	e7f2      	b.n	800453c <__sinit+0xc>
 8004556:	bf00      	nop
 8004558:	0800449d 	.word	0x0800449d
 800455c:	20000e8c 	.word	0x20000e8c

08004560 <_fwalk_sglue>:
 8004560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004564:	4607      	mov	r7, r0
 8004566:	4688      	mov	r8, r1
 8004568:	4614      	mov	r4, r2
 800456a:	2600      	movs	r6, #0
 800456c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004570:	f1b9 0901 	subs.w	r9, r9, #1
 8004574:	d505      	bpl.n	8004582 <_fwalk_sglue+0x22>
 8004576:	6824      	ldr	r4, [r4, #0]
 8004578:	2c00      	cmp	r4, #0
 800457a:	d1f7      	bne.n	800456c <_fwalk_sglue+0xc>
 800457c:	4630      	mov	r0, r6
 800457e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004582:	89ab      	ldrh	r3, [r5, #12]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d907      	bls.n	8004598 <_fwalk_sglue+0x38>
 8004588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800458c:	3301      	adds	r3, #1
 800458e:	d003      	beq.n	8004598 <_fwalk_sglue+0x38>
 8004590:	4629      	mov	r1, r5
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	4306      	orrs	r6, r0
 8004598:	3568      	adds	r5, #104	@ 0x68
 800459a:	e7e9      	b.n	8004570 <_fwalk_sglue+0x10>

0800459c <iprintf>:
 800459c:	b40f      	push	{r0, r1, r2, r3}
 800459e:	b507      	push	{r0, r1, r2, lr}
 80045a0:	4906      	ldr	r1, [pc, #24]	@ (80045bc <iprintf+0x20>)
 80045a2:	ab04      	add	r3, sp, #16
 80045a4:	6808      	ldr	r0, [r1, #0]
 80045a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80045aa:	6881      	ldr	r1, [r0, #8]
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	f000 fcab 	bl	8004f08 <_vfiprintf_r>
 80045b2:	b003      	add	sp, #12
 80045b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b8:	b004      	add	sp, #16
 80045ba:	4770      	bx	lr
 80045bc:	20000018 	.word	0x20000018

080045c0 <_puts_r>:
 80045c0:	6a03      	ldr	r3, [r0, #32]
 80045c2:	b570      	push	{r4, r5, r6, lr}
 80045c4:	6884      	ldr	r4, [r0, #8]
 80045c6:	4605      	mov	r5, r0
 80045c8:	460e      	mov	r6, r1
 80045ca:	b90b      	cbnz	r3, 80045d0 <_puts_r+0x10>
 80045cc:	f7ff ffb0 	bl	8004530 <__sinit>
 80045d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045d2:	07db      	lsls	r3, r3, #31
 80045d4:	d405      	bmi.n	80045e2 <_puts_r+0x22>
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	0598      	lsls	r0, r3, #22
 80045da:	d402      	bmi.n	80045e2 <_puts_r+0x22>
 80045dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045de:	f000 fa08 	bl	80049f2 <__retarget_lock_acquire_recursive>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	0719      	lsls	r1, r3, #28
 80045e6:	d502      	bpl.n	80045ee <_puts_r+0x2e>
 80045e8:	6923      	ldr	r3, [r4, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d135      	bne.n	800465a <_puts_r+0x9a>
 80045ee:	4621      	mov	r1, r4
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 f919 	bl	8004828 <__swsetup_r>
 80045f6:	b380      	cbz	r0, 800465a <_puts_r+0x9a>
 80045f8:	f04f 35ff 	mov.w	r5, #4294967295
 80045fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045fe:	07da      	lsls	r2, r3, #31
 8004600:	d405      	bmi.n	800460e <_puts_r+0x4e>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	059b      	lsls	r3, r3, #22
 8004606:	d402      	bmi.n	800460e <_puts_r+0x4e>
 8004608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800460a:	f000 f9f3 	bl	80049f4 <__retarget_lock_release_recursive>
 800460e:	4628      	mov	r0, r5
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	2b00      	cmp	r3, #0
 8004614:	da04      	bge.n	8004620 <_puts_r+0x60>
 8004616:	69a2      	ldr	r2, [r4, #24]
 8004618:	429a      	cmp	r2, r3
 800461a:	dc17      	bgt.n	800464c <_puts_r+0x8c>
 800461c:	290a      	cmp	r1, #10
 800461e:	d015      	beq.n	800464c <_puts_r+0x8c>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	6022      	str	r2, [r4, #0]
 8004626:	7019      	strb	r1, [r3, #0]
 8004628:	68a3      	ldr	r3, [r4, #8]
 800462a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800462e:	3b01      	subs	r3, #1
 8004630:	60a3      	str	r3, [r4, #8]
 8004632:	2900      	cmp	r1, #0
 8004634:	d1ed      	bne.n	8004612 <_puts_r+0x52>
 8004636:	2b00      	cmp	r3, #0
 8004638:	da11      	bge.n	800465e <_puts_r+0x9e>
 800463a:	4622      	mov	r2, r4
 800463c:	210a      	movs	r1, #10
 800463e:	4628      	mov	r0, r5
 8004640:	f000 f8b3 	bl	80047aa <__swbuf_r>
 8004644:	3001      	adds	r0, #1
 8004646:	d0d7      	beq.n	80045f8 <_puts_r+0x38>
 8004648:	250a      	movs	r5, #10
 800464a:	e7d7      	b.n	80045fc <_puts_r+0x3c>
 800464c:	4622      	mov	r2, r4
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f8ab 	bl	80047aa <__swbuf_r>
 8004654:	3001      	adds	r0, #1
 8004656:	d1e7      	bne.n	8004628 <_puts_r+0x68>
 8004658:	e7ce      	b.n	80045f8 <_puts_r+0x38>
 800465a:	3e01      	subs	r6, #1
 800465c:	e7e4      	b.n	8004628 <_puts_r+0x68>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	6022      	str	r2, [r4, #0]
 8004664:	220a      	movs	r2, #10
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e7ee      	b.n	8004648 <_puts_r+0x88>
	...

0800466c <puts>:
 800466c:	4b02      	ldr	r3, [pc, #8]	@ (8004678 <puts+0xc>)
 800466e:	4601      	mov	r1, r0
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	f7ff bfa5 	b.w	80045c0 <_puts_r>
 8004676:	bf00      	nop
 8004678:	20000018 	.word	0x20000018

0800467c <sniprintf>:
 800467c:	b40c      	push	{r2, r3}
 800467e:	b530      	push	{r4, r5, lr}
 8004680:	4b17      	ldr	r3, [pc, #92]	@ (80046e0 <sniprintf+0x64>)
 8004682:	1e0c      	subs	r4, r1, #0
 8004684:	681d      	ldr	r5, [r3, #0]
 8004686:	b09d      	sub	sp, #116	@ 0x74
 8004688:	da08      	bge.n	800469c <sniprintf+0x20>
 800468a:	238b      	movs	r3, #139	@ 0x8b
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	f04f 30ff 	mov.w	r0, #4294967295
 8004692:	b01d      	add	sp, #116	@ 0x74
 8004694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004698:	b002      	add	sp, #8
 800469a:	4770      	bx	lr
 800469c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80046a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046a4:	bf14      	ite	ne
 80046a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046aa:	4623      	moveq	r3, r4
 80046ac:	9304      	str	r3, [sp, #16]
 80046ae:	9307      	str	r3, [sp, #28]
 80046b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046b4:	9002      	str	r0, [sp, #8]
 80046b6:	9006      	str	r0, [sp, #24]
 80046b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80046be:	ab21      	add	r3, sp, #132	@ 0x84
 80046c0:	a902      	add	r1, sp, #8
 80046c2:	4628      	mov	r0, r5
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	f000 faf9 	bl	8004cbc <_svfiprintf_r>
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	bfbc      	itt	lt
 80046ce:	238b      	movlt	r3, #139	@ 0x8b
 80046d0:	602b      	strlt	r3, [r5, #0]
 80046d2:	2c00      	cmp	r4, #0
 80046d4:	d0dd      	beq.n	8004692 <sniprintf+0x16>
 80046d6:	9b02      	ldr	r3, [sp, #8]
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e7d9      	b.n	8004692 <sniprintf+0x16>
 80046de:	bf00      	nop
 80046e0:	20000018 	.word	0x20000018

080046e4 <siprintf>:
 80046e4:	b40e      	push	{r1, r2, r3}
 80046e6:	b500      	push	{lr}
 80046e8:	b09c      	sub	sp, #112	@ 0x70
 80046ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80046ec:	9002      	str	r0, [sp, #8]
 80046ee:	9006      	str	r0, [sp, #24]
 80046f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046f4:	4809      	ldr	r0, [pc, #36]	@ (800471c <siprintf+0x38>)
 80046f6:	9107      	str	r1, [sp, #28]
 80046f8:	9104      	str	r1, [sp, #16]
 80046fa:	4909      	ldr	r1, [pc, #36]	@ (8004720 <siprintf+0x3c>)
 80046fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004700:	9105      	str	r1, [sp, #20]
 8004702:	6800      	ldr	r0, [r0, #0]
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	a902      	add	r1, sp, #8
 8004708:	f000 fad8 	bl	8004cbc <_svfiprintf_r>
 800470c:	9b02      	ldr	r3, [sp, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	b01c      	add	sp, #112	@ 0x70
 8004714:	f85d eb04 	ldr.w	lr, [sp], #4
 8004718:	b003      	add	sp, #12
 800471a:	4770      	bx	lr
 800471c:	20000018 	.word	0x20000018
 8004720:	ffff0208 	.word	0xffff0208

08004724 <__sread>:
 8004724:	b510      	push	{r4, lr}
 8004726:	460c      	mov	r4, r1
 8004728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800472c:	f000 f912 	bl	8004954 <_read_r>
 8004730:	2800      	cmp	r0, #0
 8004732:	bfab      	itete	ge
 8004734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004736:	89a3      	ldrhlt	r3, [r4, #12]
 8004738:	181b      	addge	r3, r3, r0
 800473a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800473e:	bfac      	ite	ge
 8004740:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004742:	81a3      	strhlt	r3, [r4, #12]
 8004744:	bd10      	pop	{r4, pc}

08004746 <__swrite>:
 8004746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800474a:	461f      	mov	r7, r3
 800474c:	898b      	ldrh	r3, [r1, #12]
 800474e:	05db      	lsls	r3, r3, #23
 8004750:	4605      	mov	r5, r0
 8004752:	460c      	mov	r4, r1
 8004754:	4616      	mov	r6, r2
 8004756:	d505      	bpl.n	8004764 <__swrite+0x1e>
 8004758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475c:	2302      	movs	r3, #2
 800475e:	2200      	movs	r2, #0
 8004760:	f000 f8e6 	bl	8004930 <_lseek_r>
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800476a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800476e:	81a3      	strh	r3, [r4, #12]
 8004770:	4632      	mov	r2, r6
 8004772:	463b      	mov	r3, r7
 8004774:	4628      	mov	r0, r5
 8004776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800477a:	f000 b8fd 	b.w	8004978 <_write_r>

0800477e <__sseek>:
 800477e:	b510      	push	{r4, lr}
 8004780:	460c      	mov	r4, r1
 8004782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004786:	f000 f8d3 	bl	8004930 <_lseek_r>
 800478a:	1c43      	adds	r3, r0, #1
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	bf15      	itete	ne
 8004790:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800479a:	81a3      	strheq	r3, [r4, #12]
 800479c:	bf18      	it	ne
 800479e:	81a3      	strhne	r3, [r4, #12]
 80047a0:	bd10      	pop	{r4, pc}

080047a2 <__sclose>:
 80047a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a6:	f000 b8b3 	b.w	8004910 <_close_r>

080047aa <__swbuf_r>:
 80047aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ac:	460e      	mov	r6, r1
 80047ae:	4614      	mov	r4, r2
 80047b0:	4605      	mov	r5, r0
 80047b2:	b118      	cbz	r0, 80047bc <__swbuf_r+0x12>
 80047b4:	6a03      	ldr	r3, [r0, #32]
 80047b6:	b90b      	cbnz	r3, 80047bc <__swbuf_r+0x12>
 80047b8:	f7ff feba 	bl	8004530 <__sinit>
 80047bc:	69a3      	ldr	r3, [r4, #24]
 80047be:	60a3      	str	r3, [r4, #8]
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	071a      	lsls	r2, r3, #28
 80047c4:	d501      	bpl.n	80047ca <__swbuf_r+0x20>
 80047c6:	6923      	ldr	r3, [r4, #16]
 80047c8:	b943      	cbnz	r3, 80047dc <__swbuf_r+0x32>
 80047ca:	4621      	mov	r1, r4
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 f82b 	bl	8004828 <__swsetup_r>
 80047d2:	b118      	cbz	r0, 80047dc <__swbuf_r+0x32>
 80047d4:	f04f 37ff 	mov.w	r7, #4294967295
 80047d8:	4638      	mov	r0, r7
 80047da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	6922      	ldr	r2, [r4, #16]
 80047e0:	1a98      	subs	r0, r3, r2
 80047e2:	6963      	ldr	r3, [r4, #20]
 80047e4:	b2f6      	uxtb	r6, r6
 80047e6:	4283      	cmp	r3, r0
 80047e8:	4637      	mov	r7, r6
 80047ea:	dc05      	bgt.n	80047f8 <__swbuf_r+0x4e>
 80047ec:	4621      	mov	r1, r4
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 feb4 	bl	800555c <_fflush_r>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d1ed      	bne.n	80047d4 <__swbuf_r+0x2a>
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60a3      	str	r3, [r4, #8]
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	6022      	str	r2, [r4, #0]
 8004804:	701e      	strb	r6, [r3, #0]
 8004806:	6962      	ldr	r2, [r4, #20]
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	429a      	cmp	r2, r3
 800480c:	d004      	beq.n	8004818 <__swbuf_r+0x6e>
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	07db      	lsls	r3, r3, #31
 8004812:	d5e1      	bpl.n	80047d8 <__swbuf_r+0x2e>
 8004814:	2e0a      	cmp	r6, #10
 8004816:	d1df      	bne.n	80047d8 <__swbuf_r+0x2e>
 8004818:	4621      	mov	r1, r4
 800481a:	4628      	mov	r0, r5
 800481c:	f000 fe9e 	bl	800555c <_fflush_r>
 8004820:	2800      	cmp	r0, #0
 8004822:	d0d9      	beq.n	80047d8 <__swbuf_r+0x2e>
 8004824:	e7d6      	b.n	80047d4 <__swbuf_r+0x2a>
	...

08004828 <__swsetup_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4b29      	ldr	r3, [pc, #164]	@ (80048d0 <__swsetup_r+0xa8>)
 800482c:	4605      	mov	r5, r0
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	460c      	mov	r4, r1
 8004832:	b118      	cbz	r0, 800483c <__swsetup_r+0x14>
 8004834:	6a03      	ldr	r3, [r0, #32]
 8004836:	b90b      	cbnz	r3, 800483c <__swsetup_r+0x14>
 8004838:	f7ff fe7a 	bl	8004530 <__sinit>
 800483c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004840:	0719      	lsls	r1, r3, #28
 8004842:	d422      	bmi.n	800488a <__swsetup_r+0x62>
 8004844:	06da      	lsls	r2, r3, #27
 8004846:	d407      	bmi.n	8004858 <__swsetup_r+0x30>
 8004848:	2209      	movs	r2, #9
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004850:	81a3      	strh	r3, [r4, #12]
 8004852:	f04f 30ff 	mov.w	r0, #4294967295
 8004856:	e033      	b.n	80048c0 <__swsetup_r+0x98>
 8004858:	0758      	lsls	r0, r3, #29
 800485a:	d512      	bpl.n	8004882 <__swsetup_r+0x5a>
 800485c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800485e:	b141      	cbz	r1, 8004872 <__swsetup_r+0x4a>
 8004860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004864:	4299      	cmp	r1, r3
 8004866:	d002      	beq.n	800486e <__swsetup_r+0x46>
 8004868:	4628      	mov	r0, r5
 800486a:	f000 f8d3 	bl	8004a14 <_free_r>
 800486e:	2300      	movs	r3, #0
 8004870:	6363      	str	r3, [r4, #52]	@ 0x34
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	2300      	movs	r3, #0
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f043 0308 	orr.w	r3, r3, #8
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	b94b      	cbnz	r3, 80048a2 <__swsetup_r+0x7a>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004898:	d003      	beq.n	80048a2 <__swsetup_r+0x7a>
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	f000 feab 	bl	80055f8 <__smakebuf_r>
 80048a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a6:	f013 0201 	ands.w	r2, r3, #1
 80048aa:	d00a      	beq.n	80048c2 <__swsetup_r+0x9a>
 80048ac:	2200      	movs	r2, #0
 80048ae:	60a2      	str	r2, [r4, #8]
 80048b0:	6962      	ldr	r2, [r4, #20]
 80048b2:	4252      	negs	r2, r2
 80048b4:	61a2      	str	r2, [r4, #24]
 80048b6:	6922      	ldr	r2, [r4, #16]
 80048b8:	b942      	cbnz	r2, 80048cc <__swsetup_r+0xa4>
 80048ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048be:	d1c5      	bne.n	800484c <__swsetup_r+0x24>
 80048c0:	bd38      	pop	{r3, r4, r5, pc}
 80048c2:	0799      	lsls	r1, r3, #30
 80048c4:	bf58      	it	pl
 80048c6:	6962      	ldrpl	r2, [r4, #20]
 80048c8:	60a2      	str	r2, [r4, #8]
 80048ca:	e7f4      	b.n	80048b6 <__swsetup_r+0x8e>
 80048cc:	2000      	movs	r0, #0
 80048ce:	e7f7      	b.n	80048c0 <__swsetup_r+0x98>
 80048d0:	20000018 	.word	0x20000018

080048d4 <memset>:
 80048d4:	4402      	add	r2, r0
 80048d6:	4603      	mov	r3, r0
 80048d8:	4293      	cmp	r3, r2
 80048da:	d100      	bne.n	80048de <memset+0xa>
 80048dc:	4770      	bx	lr
 80048de:	f803 1b01 	strb.w	r1, [r3], #1
 80048e2:	e7f9      	b.n	80048d8 <memset+0x4>

080048e4 <strstr>:
 80048e4:	780a      	ldrb	r2, [r1, #0]
 80048e6:	b570      	push	{r4, r5, r6, lr}
 80048e8:	b96a      	cbnz	r2, 8004906 <strstr+0x22>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d109      	bne.n	8004904 <strstr+0x20>
 80048f0:	460c      	mov	r4, r1
 80048f2:	4605      	mov	r5, r0
 80048f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f6      	beq.n	80048ea <strstr+0x6>
 80048fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004900:	429e      	cmp	r6, r3
 8004902:	d0f7      	beq.n	80048f4 <strstr+0x10>
 8004904:	3001      	adds	r0, #1
 8004906:	7803      	ldrb	r3, [r0, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ef      	bne.n	80048ec <strstr+0x8>
 800490c:	4618      	mov	r0, r3
 800490e:	e7ec      	b.n	80048ea <strstr+0x6>

08004910 <_close_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4d06      	ldr	r5, [pc, #24]	@ (800492c <_close_r+0x1c>)
 8004914:	2300      	movs	r3, #0
 8004916:	4604      	mov	r4, r0
 8004918:	4608      	mov	r0, r1
 800491a:	602b      	str	r3, [r5, #0]
 800491c:	f7fd f9d3 	bl	8001cc6 <_close>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d102      	bne.n	800492a <_close_r+0x1a>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	b103      	cbz	r3, 800492a <_close_r+0x1a>
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	20000e90 	.word	0x20000e90

08004930 <_lseek_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4d07      	ldr	r5, [pc, #28]	@ (8004950 <_lseek_r+0x20>)
 8004934:	4604      	mov	r4, r0
 8004936:	4608      	mov	r0, r1
 8004938:	4611      	mov	r1, r2
 800493a:	2200      	movs	r2, #0
 800493c:	602a      	str	r2, [r5, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	f7fd f9e8 	bl	8001d14 <_lseek>
 8004944:	1c43      	adds	r3, r0, #1
 8004946:	d102      	bne.n	800494e <_lseek_r+0x1e>
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	b103      	cbz	r3, 800494e <_lseek_r+0x1e>
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	bd38      	pop	{r3, r4, r5, pc}
 8004950:	20000e90 	.word	0x20000e90

08004954 <_read_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4d07      	ldr	r5, [pc, #28]	@ (8004974 <_read_r+0x20>)
 8004958:	4604      	mov	r4, r0
 800495a:	4608      	mov	r0, r1
 800495c:	4611      	mov	r1, r2
 800495e:	2200      	movs	r2, #0
 8004960:	602a      	str	r2, [r5, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	f7fd f976 	bl	8001c54 <_read>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d102      	bne.n	8004972 <_read_r+0x1e>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	b103      	cbz	r3, 8004972 <_read_r+0x1e>
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	20000e90 	.word	0x20000e90

08004978 <_write_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4d07      	ldr	r5, [pc, #28]	@ (8004998 <_write_r+0x20>)
 800497c:	4604      	mov	r4, r0
 800497e:	4608      	mov	r0, r1
 8004980:	4611      	mov	r1, r2
 8004982:	2200      	movs	r2, #0
 8004984:	602a      	str	r2, [r5, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	f7fd f981 	bl	8001c8e <_write>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d102      	bne.n	8004996 <_write_r+0x1e>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	b103      	cbz	r3, 8004996 <_write_r+0x1e>
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	20000e90 	.word	0x20000e90

0800499c <__errno>:
 800499c:	4b01      	ldr	r3, [pc, #4]	@ (80049a4 <__errno+0x8>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000018 	.word	0x20000018

080049a8 <__libc_init_array>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	4d0d      	ldr	r5, [pc, #52]	@ (80049e0 <__libc_init_array+0x38>)
 80049ac:	4c0d      	ldr	r4, [pc, #52]	@ (80049e4 <__libc_init_array+0x3c>)
 80049ae:	1b64      	subs	r4, r4, r5
 80049b0:	10a4      	asrs	r4, r4, #2
 80049b2:	2600      	movs	r6, #0
 80049b4:	42a6      	cmp	r6, r4
 80049b6:	d109      	bne.n	80049cc <__libc_init_array+0x24>
 80049b8:	4d0b      	ldr	r5, [pc, #44]	@ (80049e8 <__libc_init_array+0x40>)
 80049ba:	4c0c      	ldr	r4, [pc, #48]	@ (80049ec <__libc_init_array+0x44>)
 80049bc:	f000 feda 	bl	8005774 <_init>
 80049c0:	1b64      	subs	r4, r4, r5
 80049c2:	10a4      	asrs	r4, r4, #2
 80049c4:	2600      	movs	r6, #0
 80049c6:	42a6      	cmp	r6, r4
 80049c8:	d105      	bne.n	80049d6 <__libc_init_array+0x2e>
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d0:	4798      	blx	r3
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7ee      	b.n	80049b4 <__libc_init_array+0xc>
 80049d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049da:	4798      	blx	r3
 80049dc:	3601      	adds	r6, #1
 80049de:	e7f2      	b.n	80049c6 <__libc_init_array+0x1e>
 80049e0:	08005cc4 	.word	0x08005cc4
 80049e4:	08005cc4 	.word	0x08005cc4
 80049e8:	08005cc4 	.word	0x08005cc4
 80049ec:	08005cc8 	.word	0x08005cc8

080049f0 <__retarget_lock_init_recursive>:
 80049f0:	4770      	bx	lr

080049f2 <__retarget_lock_acquire_recursive>:
 80049f2:	4770      	bx	lr

080049f4 <__retarget_lock_release_recursive>:
 80049f4:	4770      	bx	lr

080049f6 <memcpy>:
 80049f6:	440a      	add	r2, r1
 80049f8:	4291      	cmp	r1, r2
 80049fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80049fe:	d100      	bne.n	8004a02 <memcpy+0xc>
 8004a00:	4770      	bx	lr
 8004a02:	b510      	push	{r4, lr}
 8004a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a0c:	4291      	cmp	r1, r2
 8004a0e:	d1f9      	bne.n	8004a04 <memcpy+0xe>
 8004a10:	bd10      	pop	{r4, pc}
	...

08004a14 <_free_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4605      	mov	r5, r0
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d041      	beq.n	8004aa0 <_free_r+0x8c>
 8004a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a20:	1f0c      	subs	r4, r1, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bfb8      	it	lt
 8004a26:	18e4      	addlt	r4, r4, r3
 8004a28:	f000 f8e0 	bl	8004bec <__malloc_lock>
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa4 <_free_r+0x90>)
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	b933      	cbnz	r3, 8004a40 <_free_r+0x2c>
 8004a32:	6063      	str	r3, [r4, #4]
 8004a34:	6014      	str	r4, [r2, #0]
 8004a36:	4628      	mov	r0, r5
 8004a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a3c:	f000 b8dc 	b.w	8004bf8 <__malloc_unlock>
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	d908      	bls.n	8004a56 <_free_r+0x42>
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	1821      	adds	r1, r4, r0
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	bf01      	itttt	eq
 8004a4c:	6819      	ldreq	r1, [r3, #0]
 8004a4e:	685b      	ldreq	r3, [r3, #4]
 8004a50:	1809      	addeq	r1, r1, r0
 8004a52:	6021      	streq	r1, [r4, #0]
 8004a54:	e7ed      	b.n	8004a32 <_free_r+0x1e>
 8004a56:	461a      	mov	r2, r3
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b10b      	cbz	r3, 8004a60 <_free_r+0x4c>
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	d9fa      	bls.n	8004a56 <_free_r+0x42>
 8004a60:	6811      	ldr	r1, [r2, #0]
 8004a62:	1850      	adds	r0, r2, r1
 8004a64:	42a0      	cmp	r0, r4
 8004a66:	d10b      	bne.n	8004a80 <_free_r+0x6c>
 8004a68:	6820      	ldr	r0, [r4, #0]
 8004a6a:	4401      	add	r1, r0
 8004a6c:	1850      	adds	r0, r2, r1
 8004a6e:	4283      	cmp	r3, r0
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	d1e0      	bne.n	8004a36 <_free_r+0x22>
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	6053      	str	r3, [r2, #4]
 8004a7a:	4408      	add	r0, r1
 8004a7c:	6010      	str	r0, [r2, #0]
 8004a7e:	e7da      	b.n	8004a36 <_free_r+0x22>
 8004a80:	d902      	bls.n	8004a88 <_free_r+0x74>
 8004a82:	230c      	movs	r3, #12
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	e7d6      	b.n	8004a36 <_free_r+0x22>
 8004a88:	6820      	ldr	r0, [r4, #0]
 8004a8a:	1821      	adds	r1, r4, r0
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	bf04      	itt	eq
 8004a90:	6819      	ldreq	r1, [r3, #0]
 8004a92:	685b      	ldreq	r3, [r3, #4]
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	bf04      	itt	eq
 8004a98:	1809      	addeq	r1, r1, r0
 8004a9a:	6021      	streq	r1, [r4, #0]
 8004a9c:	6054      	str	r4, [r2, #4]
 8004a9e:	e7ca      	b.n	8004a36 <_free_r+0x22>
 8004aa0:	bd38      	pop	{r3, r4, r5, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000e9c 	.word	0x20000e9c

08004aa8 <sbrk_aligned>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8004ae8 <sbrk_aligned+0x40>)
 8004aac:	460c      	mov	r4, r1
 8004aae:	6831      	ldr	r1, [r6, #0]
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	b911      	cbnz	r1, 8004aba <sbrk_aligned+0x12>
 8004ab4:	f000 fe18 	bl	80056e8 <_sbrk_r>
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 fe13 	bl	80056e8 <_sbrk_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d103      	bne.n	8004ace <sbrk_aligned+0x26>
 8004ac6:	f04f 34ff 	mov.w	r4, #4294967295
 8004aca:	4620      	mov	r0, r4
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	1cc4      	adds	r4, r0, #3
 8004ad0:	f024 0403 	bic.w	r4, r4, #3
 8004ad4:	42a0      	cmp	r0, r4
 8004ad6:	d0f8      	beq.n	8004aca <sbrk_aligned+0x22>
 8004ad8:	1a21      	subs	r1, r4, r0
 8004ada:	4628      	mov	r0, r5
 8004adc:	f000 fe04 	bl	80056e8 <_sbrk_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d1f2      	bne.n	8004aca <sbrk_aligned+0x22>
 8004ae4:	e7ef      	b.n	8004ac6 <sbrk_aligned+0x1e>
 8004ae6:	bf00      	nop
 8004ae8:	20000e98 	.word	0x20000e98

08004aec <_malloc_r>:
 8004aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af0:	1ccd      	adds	r5, r1, #3
 8004af2:	f025 0503 	bic.w	r5, r5, #3
 8004af6:	3508      	adds	r5, #8
 8004af8:	2d0c      	cmp	r5, #12
 8004afa:	bf38      	it	cc
 8004afc:	250c      	movcc	r5, #12
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	4606      	mov	r6, r0
 8004b02:	db01      	blt.n	8004b08 <_malloc_r+0x1c>
 8004b04:	42a9      	cmp	r1, r5
 8004b06:	d904      	bls.n	8004b12 <_malloc_r+0x26>
 8004b08:	230c      	movs	r3, #12
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004be8 <_malloc_r+0xfc>
 8004b16:	f000 f869 	bl	8004bec <__malloc_lock>
 8004b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1e:	461c      	mov	r4, r3
 8004b20:	bb44      	cbnz	r4, 8004b74 <_malloc_r+0x88>
 8004b22:	4629      	mov	r1, r5
 8004b24:	4630      	mov	r0, r6
 8004b26:	f7ff ffbf 	bl	8004aa8 <sbrk_aligned>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	d158      	bne.n	8004be2 <_malloc_r+0xf6>
 8004b30:	f8d8 4000 	ldr.w	r4, [r8]
 8004b34:	4627      	mov	r7, r4
 8004b36:	2f00      	cmp	r7, #0
 8004b38:	d143      	bne.n	8004bc2 <_malloc_r+0xd6>
 8004b3a:	2c00      	cmp	r4, #0
 8004b3c:	d04b      	beq.n	8004bd6 <_malloc_r+0xea>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	4639      	mov	r1, r7
 8004b42:	4630      	mov	r0, r6
 8004b44:	eb04 0903 	add.w	r9, r4, r3
 8004b48:	f000 fdce 	bl	80056e8 <_sbrk_r>
 8004b4c:	4581      	cmp	r9, r0
 8004b4e:	d142      	bne.n	8004bd6 <_malloc_r+0xea>
 8004b50:	6821      	ldr	r1, [r4, #0]
 8004b52:	1a6d      	subs	r5, r5, r1
 8004b54:	4629      	mov	r1, r5
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7ff ffa6 	bl	8004aa8 <sbrk_aligned>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d03a      	beq.n	8004bd6 <_malloc_r+0xea>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	442b      	add	r3, r5
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	f8d8 3000 	ldr.w	r3, [r8]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	bb62      	cbnz	r2, 8004bc8 <_malloc_r+0xdc>
 8004b6e:	f8c8 7000 	str.w	r7, [r8]
 8004b72:	e00f      	b.n	8004b94 <_malloc_r+0xa8>
 8004b74:	6822      	ldr	r2, [r4, #0]
 8004b76:	1b52      	subs	r2, r2, r5
 8004b78:	d420      	bmi.n	8004bbc <_malloc_r+0xd0>
 8004b7a:	2a0b      	cmp	r2, #11
 8004b7c:	d917      	bls.n	8004bae <_malloc_r+0xc2>
 8004b7e:	1961      	adds	r1, r4, r5
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	6025      	str	r5, [r4, #0]
 8004b84:	bf18      	it	ne
 8004b86:	6059      	strne	r1, [r3, #4]
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	bf08      	it	eq
 8004b8c:	f8c8 1000 	streq.w	r1, [r8]
 8004b90:	5162      	str	r2, [r4, r5]
 8004b92:	604b      	str	r3, [r1, #4]
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 f82f 	bl	8004bf8 <__malloc_unlock>
 8004b9a:	f104 000b 	add.w	r0, r4, #11
 8004b9e:	1d23      	adds	r3, r4, #4
 8004ba0:	f020 0007 	bic.w	r0, r0, #7
 8004ba4:	1ac2      	subs	r2, r0, r3
 8004ba6:	bf1c      	itt	ne
 8004ba8:	1a1b      	subne	r3, r3, r0
 8004baa:	50a3      	strne	r3, [r4, r2]
 8004bac:	e7af      	b.n	8004b0e <_malloc_r+0x22>
 8004bae:	6862      	ldr	r2, [r4, #4]
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	bf0c      	ite	eq
 8004bb4:	f8c8 2000 	streq.w	r2, [r8]
 8004bb8:	605a      	strne	r2, [r3, #4]
 8004bba:	e7eb      	b.n	8004b94 <_malloc_r+0xa8>
 8004bbc:	4623      	mov	r3, r4
 8004bbe:	6864      	ldr	r4, [r4, #4]
 8004bc0:	e7ae      	b.n	8004b20 <_malloc_r+0x34>
 8004bc2:	463c      	mov	r4, r7
 8004bc4:	687f      	ldr	r7, [r7, #4]
 8004bc6:	e7b6      	b.n	8004b36 <_malloc_r+0x4a>
 8004bc8:	461a      	mov	r2, r3
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	d1fb      	bne.n	8004bc8 <_malloc_r+0xdc>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6053      	str	r3, [r2, #4]
 8004bd4:	e7de      	b.n	8004b94 <_malloc_r+0xa8>
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	6033      	str	r3, [r6, #0]
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f000 f80c 	bl	8004bf8 <__malloc_unlock>
 8004be0:	e794      	b.n	8004b0c <_malloc_r+0x20>
 8004be2:	6005      	str	r5, [r0, #0]
 8004be4:	e7d6      	b.n	8004b94 <_malloc_r+0xa8>
 8004be6:	bf00      	nop
 8004be8:	20000e9c 	.word	0x20000e9c

08004bec <__malloc_lock>:
 8004bec:	4801      	ldr	r0, [pc, #4]	@ (8004bf4 <__malloc_lock+0x8>)
 8004bee:	f7ff bf00 	b.w	80049f2 <__retarget_lock_acquire_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	20000e94 	.word	0x20000e94

08004bf8 <__malloc_unlock>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	@ (8004c00 <__malloc_unlock+0x8>)
 8004bfa:	f7ff befb 	b.w	80049f4 <__retarget_lock_release_recursive>
 8004bfe:	bf00      	nop
 8004c00:	20000e94 	.word	0x20000e94

08004c04 <__ssputs_r>:
 8004c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	688e      	ldr	r6, [r1, #8]
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	42be      	cmp	r6, r7
 8004c0e:	680b      	ldr	r3, [r1, #0]
 8004c10:	4682      	mov	sl, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	4690      	mov	r8, r2
 8004c16:	d82d      	bhi.n	8004c74 <__ssputs_r+0x70>
 8004c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c20:	d026      	beq.n	8004c70 <__ssputs_r+0x6c>
 8004c22:	6965      	ldr	r5, [r4, #20]
 8004c24:	6909      	ldr	r1, [r1, #16]
 8004c26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c2a:	eba3 0901 	sub.w	r9, r3, r1
 8004c2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c32:	1c7b      	adds	r3, r7, #1
 8004c34:	444b      	add	r3, r9
 8004c36:	106d      	asrs	r5, r5, #1
 8004c38:	429d      	cmp	r5, r3
 8004c3a:	bf38      	it	cc
 8004c3c:	461d      	movcc	r5, r3
 8004c3e:	0553      	lsls	r3, r2, #21
 8004c40:	d527      	bpl.n	8004c92 <__ssputs_r+0x8e>
 8004c42:	4629      	mov	r1, r5
 8004c44:	f7ff ff52 	bl	8004aec <_malloc_r>
 8004c48:	4606      	mov	r6, r0
 8004c4a:	b360      	cbz	r0, 8004ca6 <__ssputs_r+0xa2>
 8004c4c:	6921      	ldr	r1, [r4, #16]
 8004c4e:	464a      	mov	r2, r9
 8004c50:	f7ff fed1 	bl	80049f6 <memcpy>
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5e:	81a3      	strh	r3, [r4, #12]
 8004c60:	6126      	str	r6, [r4, #16]
 8004c62:	6165      	str	r5, [r4, #20]
 8004c64:	444e      	add	r6, r9
 8004c66:	eba5 0509 	sub.w	r5, r5, r9
 8004c6a:	6026      	str	r6, [r4, #0]
 8004c6c:	60a5      	str	r5, [r4, #8]
 8004c6e:	463e      	mov	r6, r7
 8004c70:	42be      	cmp	r6, r7
 8004c72:	d900      	bls.n	8004c76 <__ssputs_r+0x72>
 8004c74:	463e      	mov	r6, r7
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	4632      	mov	r2, r6
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	f000 fcf8 	bl	8005670 <memmove>
 8004c80:	68a3      	ldr	r3, [r4, #8]
 8004c82:	1b9b      	subs	r3, r3, r6
 8004c84:	60a3      	str	r3, [r4, #8]
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	4433      	add	r3, r6
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c92:	462a      	mov	r2, r5
 8004c94:	f000 fd38 	bl	8005708 <_realloc_r>
 8004c98:	4606      	mov	r6, r0
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d1e0      	bne.n	8004c60 <__ssputs_r+0x5c>
 8004c9e:	6921      	ldr	r1, [r4, #16]
 8004ca0:	4650      	mov	r0, sl
 8004ca2:	f7ff feb7 	bl	8004a14 <_free_r>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	f8ca 3000 	str.w	r3, [sl]
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	e7e9      	b.n	8004c8e <__ssputs_r+0x8a>
	...

08004cbc <_svfiprintf_r>:
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	4698      	mov	r8, r3
 8004cc2:	898b      	ldrh	r3, [r1, #12]
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	b09d      	sub	sp, #116	@ 0x74
 8004cc8:	4607      	mov	r7, r0
 8004cca:	460d      	mov	r5, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	d510      	bpl.n	8004cf2 <_svfiprintf_r+0x36>
 8004cd0:	690b      	ldr	r3, [r1, #16]
 8004cd2:	b973      	cbnz	r3, 8004cf2 <_svfiprintf_r+0x36>
 8004cd4:	2140      	movs	r1, #64	@ 0x40
 8004cd6:	f7ff ff09 	bl	8004aec <_malloc_r>
 8004cda:	6028      	str	r0, [r5, #0]
 8004cdc:	6128      	str	r0, [r5, #16]
 8004cde:	b930      	cbnz	r0, 8004cee <_svfiprintf_r+0x32>
 8004ce0:	230c      	movs	r3, #12
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	b01d      	add	sp, #116	@ 0x74
 8004cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cee:	2340      	movs	r3, #64	@ 0x40
 8004cf0:	616b      	str	r3, [r5, #20]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d00:	2330      	movs	r3, #48	@ 0x30
 8004d02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ea0 <_svfiprintf_r+0x1e4>
 8004d06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d0a:	f04f 0901 	mov.w	r9, #1
 8004d0e:	4623      	mov	r3, r4
 8004d10:	469a      	mov	sl, r3
 8004d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d16:	b10a      	cbz	r2, 8004d1c <_svfiprintf_r+0x60>
 8004d18:	2a25      	cmp	r2, #37	@ 0x25
 8004d1a:	d1f9      	bne.n	8004d10 <_svfiprintf_r+0x54>
 8004d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d20:	d00b      	beq.n	8004d3a <_svfiprintf_r+0x7e>
 8004d22:	465b      	mov	r3, fp
 8004d24:	4622      	mov	r2, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff ff6b 	bl	8004c04 <__ssputs_r>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	f000 80a7 	beq.w	8004e82 <_svfiprintf_r+0x1c6>
 8004d34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d36:	445a      	add	r2, fp
 8004d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 809f 	beq.w	8004e82 <_svfiprintf_r+0x1c6>
 8004d44:	2300      	movs	r3, #0
 8004d46:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d4e:	f10a 0a01 	add.w	sl, sl, #1
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	9307      	str	r3, [sp, #28]
 8004d56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d5c:	4654      	mov	r4, sl
 8004d5e:	2205      	movs	r2, #5
 8004d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d64:	484e      	ldr	r0, [pc, #312]	@ (8004ea0 <_svfiprintf_r+0x1e4>)
 8004d66:	f7fb fa6b 	bl	8000240 <memchr>
 8004d6a:	9a04      	ldr	r2, [sp, #16]
 8004d6c:	b9d8      	cbnz	r0, 8004da6 <_svfiprintf_r+0xea>
 8004d6e:	06d0      	lsls	r0, r2, #27
 8004d70:	bf44      	itt	mi
 8004d72:	2320      	movmi	r3, #32
 8004d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d78:	0711      	lsls	r1, r2, #28
 8004d7a:	bf44      	itt	mi
 8004d7c:	232b      	movmi	r3, #43	@ 0x2b
 8004d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d82:	f89a 3000 	ldrb.w	r3, [sl]
 8004d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d88:	d015      	beq.n	8004db6 <_svfiprintf_r+0xfa>
 8004d8a:	9a07      	ldr	r2, [sp, #28]
 8004d8c:	4654      	mov	r4, sl
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f04f 0c0a 	mov.w	ip, #10
 8004d94:	4621      	mov	r1, r4
 8004d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d9a:	3b30      	subs	r3, #48	@ 0x30
 8004d9c:	2b09      	cmp	r3, #9
 8004d9e:	d94b      	bls.n	8004e38 <_svfiprintf_r+0x17c>
 8004da0:	b1b0      	cbz	r0, 8004dd0 <_svfiprintf_r+0x114>
 8004da2:	9207      	str	r2, [sp, #28]
 8004da4:	e014      	b.n	8004dd0 <_svfiprintf_r+0x114>
 8004da6:	eba0 0308 	sub.w	r3, r0, r8
 8004daa:	fa09 f303 	lsl.w	r3, r9, r3
 8004dae:	4313      	orrs	r3, r2
 8004db0:	9304      	str	r3, [sp, #16]
 8004db2:	46a2      	mov	sl, r4
 8004db4:	e7d2      	b.n	8004d5c <_svfiprintf_r+0xa0>
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	1d19      	adds	r1, r3, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	9103      	str	r1, [sp, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfbb      	ittet	lt
 8004dc2:	425b      	neglt	r3, r3
 8004dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc8:	9307      	strge	r3, [sp, #28]
 8004dca:	9307      	strlt	r3, [sp, #28]
 8004dcc:	bfb8      	it	lt
 8004dce:	9204      	strlt	r2, [sp, #16]
 8004dd0:	7823      	ldrb	r3, [r4, #0]
 8004dd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dd4:	d10a      	bne.n	8004dec <_svfiprintf_r+0x130>
 8004dd6:	7863      	ldrb	r3, [r4, #1]
 8004dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dda:	d132      	bne.n	8004e42 <_svfiprintf_r+0x186>
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	9203      	str	r2, [sp, #12]
 8004de4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004de8:	3402      	adds	r4, #2
 8004dea:	9305      	str	r3, [sp, #20]
 8004dec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004eb0 <_svfiprintf_r+0x1f4>
 8004df0:	7821      	ldrb	r1, [r4, #0]
 8004df2:	2203      	movs	r2, #3
 8004df4:	4650      	mov	r0, sl
 8004df6:	f7fb fa23 	bl	8000240 <memchr>
 8004dfa:	b138      	cbz	r0, 8004e0c <_svfiprintf_r+0x150>
 8004dfc:	9b04      	ldr	r3, [sp, #16]
 8004dfe:	eba0 000a 	sub.w	r0, r0, sl
 8004e02:	2240      	movs	r2, #64	@ 0x40
 8004e04:	4082      	lsls	r2, r0
 8004e06:	4313      	orrs	r3, r2
 8004e08:	3401      	adds	r4, #1
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e10:	4824      	ldr	r0, [pc, #144]	@ (8004ea4 <_svfiprintf_r+0x1e8>)
 8004e12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e16:	2206      	movs	r2, #6
 8004e18:	f7fb fa12 	bl	8000240 <memchr>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d036      	beq.n	8004e8e <_svfiprintf_r+0x1d2>
 8004e20:	4b21      	ldr	r3, [pc, #132]	@ (8004ea8 <_svfiprintf_r+0x1ec>)
 8004e22:	bb1b      	cbnz	r3, 8004e6c <_svfiprintf_r+0x1b0>
 8004e24:	9b03      	ldr	r3, [sp, #12]
 8004e26:	3307      	adds	r3, #7
 8004e28:	f023 0307 	bic.w	r3, r3, #7
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	9303      	str	r3, [sp, #12]
 8004e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e32:	4433      	add	r3, r6
 8004e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e36:	e76a      	b.n	8004d0e <_svfiprintf_r+0x52>
 8004e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	2001      	movs	r0, #1
 8004e40:	e7a8      	b.n	8004d94 <_svfiprintf_r+0xd8>
 8004e42:	2300      	movs	r3, #0
 8004e44:	3401      	adds	r4, #1
 8004e46:	9305      	str	r3, [sp, #20]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f04f 0c0a 	mov.w	ip, #10
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e54:	3a30      	subs	r2, #48	@ 0x30
 8004e56:	2a09      	cmp	r2, #9
 8004e58:	d903      	bls.n	8004e62 <_svfiprintf_r+0x1a6>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0c6      	beq.n	8004dec <_svfiprintf_r+0x130>
 8004e5e:	9105      	str	r1, [sp, #20]
 8004e60:	e7c4      	b.n	8004dec <_svfiprintf_r+0x130>
 8004e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e66:	4604      	mov	r4, r0
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e7f0      	b.n	8004e4e <_svfiprintf_r+0x192>
 8004e6c:	ab03      	add	r3, sp, #12
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	462a      	mov	r2, r5
 8004e72:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <_svfiprintf_r+0x1f0>)
 8004e74:	a904      	add	r1, sp, #16
 8004e76:	4638      	mov	r0, r7
 8004e78:	f3af 8000 	nop.w
 8004e7c:	1c42      	adds	r2, r0, #1
 8004e7e:	4606      	mov	r6, r0
 8004e80:	d1d6      	bne.n	8004e30 <_svfiprintf_r+0x174>
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	065b      	lsls	r3, r3, #25
 8004e86:	f53f af2d 	bmi.w	8004ce4 <_svfiprintf_r+0x28>
 8004e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e8c:	e72c      	b.n	8004ce8 <_svfiprintf_r+0x2c>
 8004e8e:	ab03      	add	r3, sp, #12
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	462a      	mov	r2, r5
 8004e94:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <_svfiprintf_r+0x1f0>)
 8004e96:	a904      	add	r1, sp, #16
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f000 f9bb 	bl	8005214 <_printf_i>
 8004e9e:	e7ed      	b.n	8004e7c <_svfiprintf_r+0x1c0>
 8004ea0:	08005c88 	.word	0x08005c88
 8004ea4:	08005c92 	.word	0x08005c92
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	08004c05 	.word	0x08004c05
 8004eb0:	08005c8e 	.word	0x08005c8e

08004eb4 <__sfputc_r>:
 8004eb4:	6893      	ldr	r3, [r2, #8]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	b410      	push	{r4}
 8004ebc:	6093      	str	r3, [r2, #8]
 8004ebe:	da08      	bge.n	8004ed2 <__sfputc_r+0x1e>
 8004ec0:	6994      	ldr	r4, [r2, #24]
 8004ec2:	42a3      	cmp	r3, r4
 8004ec4:	db01      	blt.n	8004eca <__sfputc_r+0x16>
 8004ec6:	290a      	cmp	r1, #10
 8004ec8:	d103      	bne.n	8004ed2 <__sfputc_r+0x1e>
 8004eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ece:	f7ff bc6c 	b.w	80047aa <__swbuf_r>
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	1c58      	adds	r0, r3, #1
 8004ed6:	6010      	str	r0, [r2, #0]
 8004ed8:	7019      	strb	r1, [r3, #0]
 8004eda:	4608      	mov	r0, r1
 8004edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <__sfputs_r>:
 8004ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee4:	4606      	mov	r6, r0
 8004ee6:	460f      	mov	r7, r1
 8004ee8:	4614      	mov	r4, r2
 8004eea:	18d5      	adds	r5, r2, r3
 8004eec:	42ac      	cmp	r4, r5
 8004eee:	d101      	bne.n	8004ef4 <__sfputs_r+0x12>
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	e007      	b.n	8004f04 <__sfputs_r+0x22>
 8004ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef8:	463a      	mov	r2, r7
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7ff ffda 	bl	8004eb4 <__sfputc_r>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d1f3      	bne.n	8004eec <__sfputs_r+0xa>
 8004f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f08 <_vfiprintf_r>:
 8004f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	460d      	mov	r5, r1
 8004f0e:	b09d      	sub	sp, #116	@ 0x74
 8004f10:	4614      	mov	r4, r2
 8004f12:	4698      	mov	r8, r3
 8004f14:	4606      	mov	r6, r0
 8004f16:	b118      	cbz	r0, 8004f20 <_vfiprintf_r+0x18>
 8004f18:	6a03      	ldr	r3, [r0, #32]
 8004f1a:	b90b      	cbnz	r3, 8004f20 <_vfiprintf_r+0x18>
 8004f1c:	f7ff fb08 	bl	8004530 <__sinit>
 8004f20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f22:	07d9      	lsls	r1, r3, #31
 8004f24:	d405      	bmi.n	8004f32 <_vfiprintf_r+0x2a>
 8004f26:	89ab      	ldrh	r3, [r5, #12]
 8004f28:	059a      	lsls	r2, r3, #22
 8004f2a:	d402      	bmi.n	8004f32 <_vfiprintf_r+0x2a>
 8004f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f2e:	f7ff fd60 	bl	80049f2 <__retarget_lock_acquire_recursive>
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	071b      	lsls	r3, r3, #28
 8004f36:	d501      	bpl.n	8004f3c <_vfiprintf_r+0x34>
 8004f38:	692b      	ldr	r3, [r5, #16]
 8004f3a:	b99b      	cbnz	r3, 8004f64 <_vfiprintf_r+0x5c>
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f7ff fc72 	bl	8004828 <__swsetup_r>
 8004f44:	b170      	cbz	r0, 8004f64 <_vfiprintf_r+0x5c>
 8004f46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f48:	07dc      	lsls	r4, r3, #31
 8004f4a:	d504      	bpl.n	8004f56 <_vfiprintf_r+0x4e>
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	b01d      	add	sp, #116	@ 0x74
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	89ab      	ldrh	r3, [r5, #12]
 8004f58:	0598      	lsls	r0, r3, #22
 8004f5a:	d4f7      	bmi.n	8004f4c <_vfiprintf_r+0x44>
 8004f5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f5e:	f7ff fd49 	bl	80049f4 <__retarget_lock_release_recursive>
 8004f62:	e7f3      	b.n	8004f4c <_vfiprintf_r+0x44>
 8004f64:	2300      	movs	r3, #0
 8004f66:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f68:	2320      	movs	r3, #32
 8004f6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f72:	2330      	movs	r3, #48	@ 0x30
 8004f74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005124 <_vfiprintf_r+0x21c>
 8004f78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f7c:	f04f 0901 	mov.w	r9, #1
 8004f80:	4623      	mov	r3, r4
 8004f82:	469a      	mov	sl, r3
 8004f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f88:	b10a      	cbz	r2, 8004f8e <_vfiprintf_r+0x86>
 8004f8a:	2a25      	cmp	r2, #37	@ 0x25
 8004f8c:	d1f9      	bne.n	8004f82 <_vfiprintf_r+0x7a>
 8004f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f92:	d00b      	beq.n	8004fac <_vfiprintf_r+0xa4>
 8004f94:	465b      	mov	r3, fp
 8004f96:	4622      	mov	r2, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f7ff ffa1 	bl	8004ee2 <__sfputs_r>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	f000 80a7 	beq.w	80050f4 <_vfiprintf_r+0x1ec>
 8004fa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fa8:	445a      	add	r2, fp
 8004faa:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fac:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 809f 	beq.w	80050f4 <_vfiprintf_r+0x1ec>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fc0:	f10a 0a01 	add.w	sl, sl, #1
 8004fc4:	9304      	str	r3, [sp, #16]
 8004fc6:	9307      	str	r3, [sp, #28]
 8004fc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fce:	4654      	mov	r4, sl
 8004fd0:	2205      	movs	r2, #5
 8004fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd6:	4853      	ldr	r0, [pc, #332]	@ (8005124 <_vfiprintf_r+0x21c>)
 8004fd8:	f7fb f932 	bl	8000240 <memchr>
 8004fdc:	9a04      	ldr	r2, [sp, #16]
 8004fde:	b9d8      	cbnz	r0, 8005018 <_vfiprintf_r+0x110>
 8004fe0:	06d1      	lsls	r1, r2, #27
 8004fe2:	bf44      	itt	mi
 8004fe4:	2320      	movmi	r3, #32
 8004fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fea:	0713      	lsls	r3, r2, #28
 8004fec:	bf44      	itt	mi
 8004fee:	232b      	movmi	r3, #43	@ 0x2b
 8004ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ffa:	d015      	beq.n	8005028 <_vfiprintf_r+0x120>
 8004ffc:	9a07      	ldr	r2, [sp, #28]
 8004ffe:	4654      	mov	r4, sl
 8005000:	2000      	movs	r0, #0
 8005002:	f04f 0c0a 	mov.w	ip, #10
 8005006:	4621      	mov	r1, r4
 8005008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800500c:	3b30      	subs	r3, #48	@ 0x30
 800500e:	2b09      	cmp	r3, #9
 8005010:	d94b      	bls.n	80050aa <_vfiprintf_r+0x1a2>
 8005012:	b1b0      	cbz	r0, 8005042 <_vfiprintf_r+0x13a>
 8005014:	9207      	str	r2, [sp, #28]
 8005016:	e014      	b.n	8005042 <_vfiprintf_r+0x13a>
 8005018:	eba0 0308 	sub.w	r3, r0, r8
 800501c:	fa09 f303 	lsl.w	r3, r9, r3
 8005020:	4313      	orrs	r3, r2
 8005022:	9304      	str	r3, [sp, #16]
 8005024:	46a2      	mov	sl, r4
 8005026:	e7d2      	b.n	8004fce <_vfiprintf_r+0xc6>
 8005028:	9b03      	ldr	r3, [sp, #12]
 800502a:	1d19      	adds	r1, r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	9103      	str	r1, [sp, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	bfbb      	ittet	lt
 8005034:	425b      	neglt	r3, r3
 8005036:	f042 0202 	orrlt.w	r2, r2, #2
 800503a:	9307      	strge	r3, [sp, #28]
 800503c:	9307      	strlt	r3, [sp, #28]
 800503e:	bfb8      	it	lt
 8005040:	9204      	strlt	r2, [sp, #16]
 8005042:	7823      	ldrb	r3, [r4, #0]
 8005044:	2b2e      	cmp	r3, #46	@ 0x2e
 8005046:	d10a      	bne.n	800505e <_vfiprintf_r+0x156>
 8005048:	7863      	ldrb	r3, [r4, #1]
 800504a:	2b2a      	cmp	r3, #42	@ 0x2a
 800504c:	d132      	bne.n	80050b4 <_vfiprintf_r+0x1ac>
 800504e:	9b03      	ldr	r3, [sp, #12]
 8005050:	1d1a      	adds	r2, r3, #4
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	9203      	str	r2, [sp, #12]
 8005056:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800505a:	3402      	adds	r4, #2
 800505c:	9305      	str	r3, [sp, #20]
 800505e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005134 <_vfiprintf_r+0x22c>
 8005062:	7821      	ldrb	r1, [r4, #0]
 8005064:	2203      	movs	r2, #3
 8005066:	4650      	mov	r0, sl
 8005068:	f7fb f8ea 	bl	8000240 <memchr>
 800506c:	b138      	cbz	r0, 800507e <_vfiprintf_r+0x176>
 800506e:	9b04      	ldr	r3, [sp, #16]
 8005070:	eba0 000a 	sub.w	r0, r0, sl
 8005074:	2240      	movs	r2, #64	@ 0x40
 8005076:	4082      	lsls	r2, r0
 8005078:	4313      	orrs	r3, r2
 800507a:	3401      	adds	r4, #1
 800507c:	9304      	str	r3, [sp, #16]
 800507e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005082:	4829      	ldr	r0, [pc, #164]	@ (8005128 <_vfiprintf_r+0x220>)
 8005084:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005088:	2206      	movs	r2, #6
 800508a:	f7fb f8d9 	bl	8000240 <memchr>
 800508e:	2800      	cmp	r0, #0
 8005090:	d03f      	beq.n	8005112 <_vfiprintf_r+0x20a>
 8005092:	4b26      	ldr	r3, [pc, #152]	@ (800512c <_vfiprintf_r+0x224>)
 8005094:	bb1b      	cbnz	r3, 80050de <_vfiprintf_r+0x1d6>
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	3307      	adds	r3, #7
 800509a:	f023 0307 	bic.w	r3, r3, #7
 800509e:	3308      	adds	r3, #8
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050a4:	443b      	add	r3, r7
 80050a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80050a8:	e76a      	b.n	8004f80 <_vfiprintf_r+0x78>
 80050aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ae:	460c      	mov	r4, r1
 80050b0:	2001      	movs	r0, #1
 80050b2:	e7a8      	b.n	8005006 <_vfiprintf_r+0xfe>
 80050b4:	2300      	movs	r3, #0
 80050b6:	3401      	adds	r4, #1
 80050b8:	9305      	str	r3, [sp, #20]
 80050ba:	4619      	mov	r1, r3
 80050bc:	f04f 0c0a 	mov.w	ip, #10
 80050c0:	4620      	mov	r0, r4
 80050c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050c6:	3a30      	subs	r2, #48	@ 0x30
 80050c8:	2a09      	cmp	r2, #9
 80050ca:	d903      	bls.n	80050d4 <_vfiprintf_r+0x1cc>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0c6      	beq.n	800505e <_vfiprintf_r+0x156>
 80050d0:	9105      	str	r1, [sp, #20]
 80050d2:	e7c4      	b.n	800505e <_vfiprintf_r+0x156>
 80050d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80050d8:	4604      	mov	r4, r0
 80050da:	2301      	movs	r3, #1
 80050dc:	e7f0      	b.n	80050c0 <_vfiprintf_r+0x1b8>
 80050de:	ab03      	add	r3, sp, #12
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	462a      	mov	r2, r5
 80050e4:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <_vfiprintf_r+0x228>)
 80050e6:	a904      	add	r1, sp, #16
 80050e8:	4630      	mov	r0, r6
 80050ea:	f3af 8000 	nop.w
 80050ee:	4607      	mov	r7, r0
 80050f0:	1c78      	adds	r0, r7, #1
 80050f2:	d1d6      	bne.n	80050a2 <_vfiprintf_r+0x19a>
 80050f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050f6:	07d9      	lsls	r1, r3, #31
 80050f8:	d405      	bmi.n	8005106 <_vfiprintf_r+0x1fe>
 80050fa:	89ab      	ldrh	r3, [r5, #12]
 80050fc:	059a      	lsls	r2, r3, #22
 80050fe:	d402      	bmi.n	8005106 <_vfiprintf_r+0x1fe>
 8005100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005102:	f7ff fc77 	bl	80049f4 <__retarget_lock_release_recursive>
 8005106:	89ab      	ldrh	r3, [r5, #12]
 8005108:	065b      	lsls	r3, r3, #25
 800510a:	f53f af1f 	bmi.w	8004f4c <_vfiprintf_r+0x44>
 800510e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005110:	e71e      	b.n	8004f50 <_vfiprintf_r+0x48>
 8005112:	ab03      	add	r3, sp, #12
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	462a      	mov	r2, r5
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <_vfiprintf_r+0x228>)
 800511a:	a904      	add	r1, sp, #16
 800511c:	4630      	mov	r0, r6
 800511e:	f000 f879 	bl	8005214 <_printf_i>
 8005122:	e7e4      	b.n	80050ee <_vfiprintf_r+0x1e6>
 8005124:	08005c88 	.word	0x08005c88
 8005128:	08005c92 	.word	0x08005c92
 800512c:	00000000 	.word	0x00000000
 8005130:	08004ee3 	.word	0x08004ee3
 8005134:	08005c8e 	.word	0x08005c8e

08005138 <_printf_common>:
 8005138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	4616      	mov	r6, r2
 800513e:	4698      	mov	r8, r3
 8005140:	688a      	ldr	r2, [r1, #8]
 8005142:	690b      	ldr	r3, [r1, #16]
 8005144:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005148:	4293      	cmp	r3, r2
 800514a:	bfb8      	it	lt
 800514c:	4613      	movlt	r3, r2
 800514e:	6033      	str	r3, [r6, #0]
 8005150:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005154:	4607      	mov	r7, r0
 8005156:	460c      	mov	r4, r1
 8005158:	b10a      	cbz	r2, 800515e <_printf_common+0x26>
 800515a:	3301      	adds	r3, #1
 800515c:	6033      	str	r3, [r6, #0]
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	0699      	lsls	r1, r3, #26
 8005162:	bf42      	ittt	mi
 8005164:	6833      	ldrmi	r3, [r6, #0]
 8005166:	3302      	addmi	r3, #2
 8005168:	6033      	strmi	r3, [r6, #0]
 800516a:	6825      	ldr	r5, [r4, #0]
 800516c:	f015 0506 	ands.w	r5, r5, #6
 8005170:	d106      	bne.n	8005180 <_printf_common+0x48>
 8005172:	f104 0a19 	add.w	sl, r4, #25
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	6832      	ldr	r2, [r6, #0]
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	42ab      	cmp	r3, r5
 800517e:	dc26      	bgt.n	80051ce <_printf_common+0x96>
 8005180:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005184:	6822      	ldr	r2, [r4, #0]
 8005186:	3b00      	subs	r3, #0
 8005188:	bf18      	it	ne
 800518a:	2301      	movne	r3, #1
 800518c:	0692      	lsls	r2, r2, #26
 800518e:	d42b      	bmi.n	80051e8 <_printf_common+0xb0>
 8005190:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005194:	4641      	mov	r1, r8
 8005196:	4638      	mov	r0, r7
 8005198:	47c8      	blx	r9
 800519a:	3001      	adds	r0, #1
 800519c:	d01e      	beq.n	80051dc <_printf_common+0xa4>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	6922      	ldr	r2, [r4, #16]
 80051a2:	f003 0306 	and.w	r3, r3, #6
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	bf02      	ittt	eq
 80051aa:	68e5      	ldreq	r5, [r4, #12]
 80051ac:	6833      	ldreq	r3, [r6, #0]
 80051ae:	1aed      	subeq	r5, r5, r3
 80051b0:	68a3      	ldr	r3, [r4, #8]
 80051b2:	bf0c      	ite	eq
 80051b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b8:	2500      	movne	r5, #0
 80051ba:	4293      	cmp	r3, r2
 80051bc:	bfc4      	itt	gt
 80051be:	1a9b      	subgt	r3, r3, r2
 80051c0:	18ed      	addgt	r5, r5, r3
 80051c2:	2600      	movs	r6, #0
 80051c4:	341a      	adds	r4, #26
 80051c6:	42b5      	cmp	r5, r6
 80051c8:	d11a      	bne.n	8005200 <_printf_common+0xc8>
 80051ca:	2000      	movs	r0, #0
 80051cc:	e008      	b.n	80051e0 <_printf_common+0xa8>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4652      	mov	r2, sl
 80051d2:	4641      	mov	r1, r8
 80051d4:	4638      	mov	r0, r7
 80051d6:	47c8      	blx	r9
 80051d8:	3001      	adds	r0, #1
 80051da:	d103      	bne.n	80051e4 <_printf_common+0xac>
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e4:	3501      	adds	r5, #1
 80051e6:	e7c6      	b.n	8005176 <_printf_common+0x3e>
 80051e8:	18e1      	adds	r1, r4, r3
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	2030      	movs	r0, #48	@ 0x30
 80051ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051f2:	4422      	add	r2, r4
 80051f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051fc:	3302      	adds	r3, #2
 80051fe:	e7c7      	b.n	8005190 <_printf_common+0x58>
 8005200:	2301      	movs	r3, #1
 8005202:	4622      	mov	r2, r4
 8005204:	4641      	mov	r1, r8
 8005206:	4638      	mov	r0, r7
 8005208:	47c8      	blx	r9
 800520a:	3001      	adds	r0, #1
 800520c:	d0e6      	beq.n	80051dc <_printf_common+0xa4>
 800520e:	3601      	adds	r6, #1
 8005210:	e7d9      	b.n	80051c6 <_printf_common+0x8e>
	...

08005214 <_printf_i>:
 8005214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005218:	7e0f      	ldrb	r7, [r1, #24]
 800521a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800521c:	2f78      	cmp	r7, #120	@ 0x78
 800521e:	4691      	mov	r9, r2
 8005220:	4680      	mov	r8, r0
 8005222:	460c      	mov	r4, r1
 8005224:	469a      	mov	sl, r3
 8005226:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800522a:	d807      	bhi.n	800523c <_printf_i+0x28>
 800522c:	2f62      	cmp	r7, #98	@ 0x62
 800522e:	d80a      	bhi.n	8005246 <_printf_i+0x32>
 8005230:	2f00      	cmp	r7, #0
 8005232:	f000 80d2 	beq.w	80053da <_printf_i+0x1c6>
 8005236:	2f58      	cmp	r7, #88	@ 0x58
 8005238:	f000 80b9 	beq.w	80053ae <_printf_i+0x19a>
 800523c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005240:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005244:	e03a      	b.n	80052bc <_printf_i+0xa8>
 8005246:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800524a:	2b15      	cmp	r3, #21
 800524c:	d8f6      	bhi.n	800523c <_printf_i+0x28>
 800524e:	a101      	add	r1, pc, #4	@ (adr r1, 8005254 <_printf_i+0x40>)
 8005250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005254:	080052ad 	.word	0x080052ad
 8005258:	080052c1 	.word	0x080052c1
 800525c:	0800523d 	.word	0x0800523d
 8005260:	0800523d 	.word	0x0800523d
 8005264:	0800523d 	.word	0x0800523d
 8005268:	0800523d 	.word	0x0800523d
 800526c:	080052c1 	.word	0x080052c1
 8005270:	0800523d 	.word	0x0800523d
 8005274:	0800523d 	.word	0x0800523d
 8005278:	0800523d 	.word	0x0800523d
 800527c:	0800523d 	.word	0x0800523d
 8005280:	080053c1 	.word	0x080053c1
 8005284:	080052eb 	.word	0x080052eb
 8005288:	0800537b 	.word	0x0800537b
 800528c:	0800523d 	.word	0x0800523d
 8005290:	0800523d 	.word	0x0800523d
 8005294:	080053e3 	.word	0x080053e3
 8005298:	0800523d 	.word	0x0800523d
 800529c:	080052eb 	.word	0x080052eb
 80052a0:	0800523d 	.word	0x0800523d
 80052a4:	0800523d 	.word	0x0800523d
 80052a8:	08005383 	.word	0x08005383
 80052ac:	6833      	ldr	r3, [r6, #0]
 80052ae:	1d1a      	adds	r2, r3, #4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6032      	str	r2, [r6, #0]
 80052b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052bc:	2301      	movs	r3, #1
 80052be:	e09d      	b.n	80053fc <_printf_i+0x1e8>
 80052c0:	6833      	ldr	r3, [r6, #0]
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	1d19      	adds	r1, r3, #4
 80052c6:	6031      	str	r1, [r6, #0]
 80052c8:	0606      	lsls	r6, r0, #24
 80052ca:	d501      	bpl.n	80052d0 <_printf_i+0xbc>
 80052cc:	681d      	ldr	r5, [r3, #0]
 80052ce:	e003      	b.n	80052d8 <_printf_i+0xc4>
 80052d0:	0645      	lsls	r5, r0, #25
 80052d2:	d5fb      	bpl.n	80052cc <_printf_i+0xb8>
 80052d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052d8:	2d00      	cmp	r5, #0
 80052da:	da03      	bge.n	80052e4 <_printf_i+0xd0>
 80052dc:	232d      	movs	r3, #45	@ 0x2d
 80052de:	426d      	negs	r5, r5
 80052e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052e4:	4859      	ldr	r0, [pc, #356]	@ (800544c <_printf_i+0x238>)
 80052e6:	230a      	movs	r3, #10
 80052e8:	e011      	b.n	800530e <_printf_i+0xfa>
 80052ea:	6821      	ldr	r1, [r4, #0]
 80052ec:	6833      	ldr	r3, [r6, #0]
 80052ee:	0608      	lsls	r0, r1, #24
 80052f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052f4:	d402      	bmi.n	80052fc <_printf_i+0xe8>
 80052f6:	0649      	lsls	r1, r1, #25
 80052f8:	bf48      	it	mi
 80052fa:	b2ad      	uxthmi	r5, r5
 80052fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80052fe:	4853      	ldr	r0, [pc, #332]	@ (800544c <_printf_i+0x238>)
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	bf14      	ite	ne
 8005304:	230a      	movne	r3, #10
 8005306:	2308      	moveq	r3, #8
 8005308:	2100      	movs	r1, #0
 800530a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800530e:	6866      	ldr	r6, [r4, #4]
 8005310:	60a6      	str	r6, [r4, #8]
 8005312:	2e00      	cmp	r6, #0
 8005314:	bfa2      	ittt	ge
 8005316:	6821      	ldrge	r1, [r4, #0]
 8005318:	f021 0104 	bicge.w	r1, r1, #4
 800531c:	6021      	strge	r1, [r4, #0]
 800531e:	b90d      	cbnz	r5, 8005324 <_printf_i+0x110>
 8005320:	2e00      	cmp	r6, #0
 8005322:	d04b      	beq.n	80053bc <_printf_i+0x1a8>
 8005324:	4616      	mov	r6, r2
 8005326:	fbb5 f1f3 	udiv	r1, r5, r3
 800532a:	fb03 5711 	mls	r7, r3, r1, r5
 800532e:	5dc7      	ldrb	r7, [r0, r7]
 8005330:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005334:	462f      	mov	r7, r5
 8005336:	42bb      	cmp	r3, r7
 8005338:	460d      	mov	r5, r1
 800533a:	d9f4      	bls.n	8005326 <_printf_i+0x112>
 800533c:	2b08      	cmp	r3, #8
 800533e:	d10b      	bne.n	8005358 <_printf_i+0x144>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	07df      	lsls	r7, r3, #31
 8005344:	d508      	bpl.n	8005358 <_printf_i+0x144>
 8005346:	6923      	ldr	r3, [r4, #16]
 8005348:	6861      	ldr	r1, [r4, #4]
 800534a:	4299      	cmp	r1, r3
 800534c:	bfde      	ittt	le
 800534e:	2330      	movle	r3, #48	@ 0x30
 8005350:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005354:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005358:	1b92      	subs	r2, r2, r6
 800535a:	6122      	str	r2, [r4, #16]
 800535c:	f8cd a000 	str.w	sl, [sp]
 8005360:	464b      	mov	r3, r9
 8005362:	aa03      	add	r2, sp, #12
 8005364:	4621      	mov	r1, r4
 8005366:	4640      	mov	r0, r8
 8005368:	f7ff fee6 	bl	8005138 <_printf_common>
 800536c:	3001      	adds	r0, #1
 800536e:	d14a      	bne.n	8005406 <_printf_i+0x1f2>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	b004      	add	sp, #16
 8005376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	f043 0320 	orr.w	r3, r3, #32
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	4833      	ldr	r0, [pc, #204]	@ (8005450 <_printf_i+0x23c>)
 8005384:	2778      	movs	r7, #120	@ 0x78
 8005386:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	6831      	ldr	r1, [r6, #0]
 800538e:	061f      	lsls	r7, r3, #24
 8005390:	f851 5b04 	ldr.w	r5, [r1], #4
 8005394:	d402      	bmi.n	800539c <_printf_i+0x188>
 8005396:	065f      	lsls	r7, r3, #25
 8005398:	bf48      	it	mi
 800539a:	b2ad      	uxthmi	r5, r5
 800539c:	6031      	str	r1, [r6, #0]
 800539e:	07d9      	lsls	r1, r3, #31
 80053a0:	bf44      	itt	mi
 80053a2:	f043 0320 	orrmi.w	r3, r3, #32
 80053a6:	6023      	strmi	r3, [r4, #0]
 80053a8:	b11d      	cbz	r5, 80053b2 <_printf_i+0x19e>
 80053aa:	2310      	movs	r3, #16
 80053ac:	e7ac      	b.n	8005308 <_printf_i+0xf4>
 80053ae:	4827      	ldr	r0, [pc, #156]	@ (800544c <_printf_i+0x238>)
 80053b0:	e7e9      	b.n	8005386 <_printf_i+0x172>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	f023 0320 	bic.w	r3, r3, #32
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	e7f6      	b.n	80053aa <_printf_i+0x196>
 80053bc:	4616      	mov	r6, r2
 80053be:	e7bd      	b.n	800533c <_printf_i+0x128>
 80053c0:	6833      	ldr	r3, [r6, #0]
 80053c2:	6825      	ldr	r5, [r4, #0]
 80053c4:	6961      	ldr	r1, [r4, #20]
 80053c6:	1d18      	adds	r0, r3, #4
 80053c8:	6030      	str	r0, [r6, #0]
 80053ca:	062e      	lsls	r6, r5, #24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	d501      	bpl.n	80053d4 <_printf_i+0x1c0>
 80053d0:	6019      	str	r1, [r3, #0]
 80053d2:	e002      	b.n	80053da <_printf_i+0x1c6>
 80053d4:	0668      	lsls	r0, r5, #25
 80053d6:	d5fb      	bpl.n	80053d0 <_printf_i+0x1bc>
 80053d8:	8019      	strh	r1, [r3, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	4616      	mov	r6, r2
 80053e0:	e7bc      	b.n	800535c <_printf_i+0x148>
 80053e2:	6833      	ldr	r3, [r6, #0]
 80053e4:	1d1a      	adds	r2, r3, #4
 80053e6:	6032      	str	r2, [r6, #0]
 80053e8:	681e      	ldr	r6, [r3, #0]
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	2100      	movs	r1, #0
 80053ee:	4630      	mov	r0, r6
 80053f0:	f7fa ff26 	bl	8000240 <memchr>
 80053f4:	b108      	cbz	r0, 80053fa <_printf_i+0x1e6>
 80053f6:	1b80      	subs	r0, r0, r6
 80053f8:	6060      	str	r0, [r4, #4]
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	2300      	movs	r3, #0
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005404:	e7aa      	b.n	800535c <_printf_i+0x148>
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	4632      	mov	r2, r6
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	47d0      	blx	sl
 8005410:	3001      	adds	r0, #1
 8005412:	d0ad      	beq.n	8005370 <_printf_i+0x15c>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	079b      	lsls	r3, r3, #30
 8005418:	d413      	bmi.n	8005442 <_printf_i+0x22e>
 800541a:	68e0      	ldr	r0, [r4, #12]
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	4298      	cmp	r0, r3
 8005420:	bfb8      	it	lt
 8005422:	4618      	movlt	r0, r3
 8005424:	e7a6      	b.n	8005374 <_printf_i+0x160>
 8005426:	2301      	movs	r3, #1
 8005428:	4632      	mov	r2, r6
 800542a:	4649      	mov	r1, r9
 800542c:	4640      	mov	r0, r8
 800542e:	47d0      	blx	sl
 8005430:	3001      	adds	r0, #1
 8005432:	d09d      	beq.n	8005370 <_printf_i+0x15c>
 8005434:	3501      	adds	r5, #1
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	9903      	ldr	r1, [sp, #12]
 800543a:	1a5b      	subs	r3, r3, r1
 800543c:	42ab      	cmp	r3, r5
 800543e:	dcf2      	bgt.n	8005426 <_printf_i+0x212>
 8005440:	e7eb      	b.n	800541a <_printf_i+0x206>
 8005442:	2500      	movs	r5, #0
 8005444:	f104 0619 	add.w	r6, r4, #25
 8005448:	e7f5      	b.n	8005436 <_printf_i+0x222>
 800544a:	bf00      	nop
 800544c:	08005c99 	.word	0x08005c99
 8005450:	08005caa 	.word	0x08005caa

08005454 <__sflush_r>:
 8005454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545c:	0716      	lsls	r6, r2, #28
 800545e:	4605      	mov	r5, r0
 8005460:	460c      	mov	r4, r1
 8005462:	d454      	bmi.n	800550e <__sflush_r+0xba>
 8005464:	684b      	ldr	r3, [r1, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	dc02      	bgt.n	8005470 <__sflush_r+0x1c>
 800546a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	dd48      	ble.n	8005502 <__sflush_r+0xae>
 8005470:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005472:	2e00      	cmp	r6, #0
 8005474:	d045      	beq.n	8005502 <__sflush_r+0xae>
 8005476:	2300      	movs	r3, #0
 8005478:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800547c:	682f      	ldr	r7, [r5, #0]
 800547e:	6a21      	ldr	r1, [r4, #32]
 8005480:	602b      	str	r3, [r5, #0]
 8005482:	d030      	beq.n	80054e6 <__sflush_r+0x92>
 8005484:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	0759      	lsls	r1, r3, #29
 800548a:	d505      	bpl.n	8005498 <__sflush_r+0x44>
 800548c:	6863      	ldr	r3, [r4, #4]
 800548e:	1ad2      	subs	r2, r2, r3
 8005490:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005492:	b10b      	cbz	r3, 8005498 <__sflush_r+0x44>
 8005494:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	2300      	movs	r3, #0
 800549a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800549c:	6a21      	ldr	r1, [r4, #32]
 800549e:	4628      	mov	r0, r5
 80054a0:	47b0      	blx	r6
 80054a2:	1c43      	adds	r3, r0, #1
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	d106      	bne.n	80054b6 <__sflush_r+0x62>
 80054a8:	6829      	ldr	r1, [r5, #0]
 80054aa:	291d      	cmp	r1, #29
 80054ac:	d82b      	bhi.n	8005506 <__sflush_r+0xb2>
 80054ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005558 <__sflush_r+0x104>)
 80054b0:	410a      	asrs	r2, r1
 80054b2:	07d6      	lsls	r6, r2, #31
 80054b4:	d427      	bmi.n	8005506 <__sflush_r+0xb2>
 80054b6:	2200      	movs	r2, #0
 80054b8:	6062      	str	r2, [r4, #4]
 80054ba:	04d9      	lsls	r1, r3, #19
 80054bc:	6922      	ldr	r2, [r4, #16]
 80054be:	6022      	str	r2, [r4, #0]
 80054c0:	d504      	bpl.n	80054cc <__sflush_r+0x78>
 80054c2:	1c42      	adds	r2, r0, #1
 80054c4:	d101      	bne.n	80054ca <__sflush_r+0x76>
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	b903      	cbnz	r3, 80054cc <__sflush_r+0x78>
 80054ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80054cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054ce:	602f      	str	r7, [r5, #0]
 80054d0:	b1b9      	cbz	r1, 8005502 <__sflush_r+0xae>
 80054d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054d6:	4299      	cmp	r1, r3
 80054d8:	d002      	beq.n	80054e0 <__sflush_r+0x8c>
 80054da:	4628      	mov	r0, r5
 80054dc:	f7ff fa9a 	bl	8004a14 <_free_r>
 80054e0:	2300      	movs	r3, #0
 80054e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80054e4:	e00d      	b.n	8005502 <__sflush_r+0xae>
 80054e6:	2301      	movs	r3, #1
 80054e8:	4628      	mov	r0, r5
 80054ea:	47b0      	blx	r6
 80054ec:	4602      	mov	r2, r0
 80054ee:	1c50      	adds	r0, r2, #1
 80054f0:	d1c9      	bne.n	8005486 <__sflush_r+0x32>
 80054f2:	682b      	ldr	r3, [r5, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0c6      	beq.n	8005486 <__sflush_r+0x32>
 80054f8:	2b1d      	cmp	r3, #29
 80054fa:	d001      	beq.n	8005500 <__sflush_r+0xac>
 80054fc:	2b16      	cmp	r3, #22
 80054fe:	d11e      	bne.n	800553e <__sflush_r+0xea>
 8005500:	602f      	str	r7, [r5, #0]
 8005502:	2000      	movs	r0, #0
 8005504:	e022      	b.n	800554c <__sflush_r+0xf8>
 8005506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800550a:	b21b      	sxth	r3, r3
 800550c:	e01b      	b.n	8005546 <__sflush_r+0xf2>
 800550e:	690f      	ldr	r7, [r1, #16]
 8005510:	2f00      	cmp	r7, #0
 8005512:	d0f6      	beq.n	8005502 <__sflush_r+0xae>
 8005514:	0793      	lsls	r3, r2, #30
 8005516:	680e      	ldr	r6, [r1, #0]
 8005518:	bf08      	it	eq
 800551a:	694b      	ldreq	r3, [r1, #20]
 800551c:	600f      	str	r7, [r1, #0]
 800551e:	bf18      	it	ne
 8005520:	2300      	movne	r3, #0
 8005522:	eba6 0807 	sub.w	r8, r6, r7
 8005526:	608b      	str	r3, [r1, #8]
 8005528:	f1b8 0f00 	cmp.w	r8, #0
 800552c:	dde9      	ble.n	8005502 <__sflush_r+0xae>
 800552e:	6a21      	ldr	r1, [r4, #32]
 8005530:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005532:	4643      	mov	r3, r8
 8005534:	463a      	mov	r2, r7
 8005536:	4628      	mov	r0, r5
 8005538:	47b0      	blx	r6
 800553a:	2800      	cmp	r0, #0
 800553c:	dc08      	bgt.n	8005550 <__sflush_r+0xfc>
 800553e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005546:	81a3      	strh	r3, [r4, #12]
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	4407      	add	r7, r0
 8005552:	eba8 0800 	sub.w	r8, r8, r0
 8005556:	e7e7      	b.n	8005528 <__sflush_r+0xd4>
 8005558:	dfbffffe 	.word	0xdfbffffe

0800555c <_fflush_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	690b      	ldr	r3, [r1, #16]
 8005560:	4605      	mov	r5, r0
 8005562:	460c      	mov	r4, r1
 8005564:	b913      	cbnz	r3, 800556c <_fflush_r+0x10>
 8005566:	2500      	movs	r5, #0
 8005568:	4628      	mov	r0, r5
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	b118      	cbz	r0, 8005576 <_fflush_r+0x1a>
 800556e:	6a03      	ldr	r3, [r0, #32]
 8005570:	b90b      	cbnz	r3, 8005576 <_fflush_r+0x1a>
 8005572:	f7fe ffdd 	bl	8004530 <__sinit>
 8005576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f3      	beq.n	8005566 <_fflush_r+0xa>
 800557e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005580:	07d0      	lsls	r0, r2, #31
 8005582:	d404      	bmi.n	800558e <_fflush_r+0x32>
 8005584:	0599      	lsls	r1, r3, #22
 8005586:	d402      	bmi.n	800558e <_fflush_r+0x32>
 8005588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800558a:	f7ff fa32 	bl	80049f2 <__retarget_lock_acquire_recursive>
 800558e:	4628      	mov	r0, r5
 8005590:	4621      	mov	r1, r4
 8005592:	f7ff ff5f 	bl	8005454 <__sflush_r>
 8005596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005598:	07da      	lsls	r2, r3, #31
 800559a:	4605      	mov	r5, r0
 800559c:	d4e4      	bmi.n	8005568 <_fflush_r+0xc>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	059b      	lsls	r3, r3, #22
 80055a2:	d4e1      	bmi.n	8005568 <_fflush_r+0xc>
 80055a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055a6:	f7ff fa25 	bl	80049f4 <__retarget_lock_release_recursive>
 80055aa:	e7dd      	b.n	8005568 <_fflush_r+0xc>

080055ac <__swhatbuf_r>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	460c      	mov	r4, r1
 80055b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b4:	2900      	cmp	r1, #0
 80055b6:	b096      	sub	sp, #88	@ 0x58
 80055b8:	4615      	mov	r5, r2
 80055ba:	461e      	mov	r6, r3
 80055bc:	da0d      	bge.n	80055da <__swhatbuf_r+0x2e>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	bf14      	ite	ne
 80055ca:	2340      	movne	r3, #64	@ 0x40
 80055cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055d0:	2000      	movs	r0, #0
 80055d2:	6031      	str	r1, [r6, #0]
 80055d4:	602b      	str	r3, [r5, #0]
 80055d6:	b016      	add	sp, #88	@ 0x58
 80055d8:	bd70      	pop	{r4, r5, r6, pc}
 80055da:	466a      	mov	r2, sp
 80055dc:	f000 f862 	bl	80056a4 <_fstat_r>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	dbec      	blt.n	80055be <__swhatbuf_r+0x12>
 80055e4:	9901      	ldr	r1, [sp, #4]
 80055e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055ee:	4259      	negs	r1, r3
 80055f0:	4159      	adcs	r1, r3
 80055f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055f6:	e7eb      	b.n	80055d0 <__swhatbuf_r+0x24>

080055f8 <__smakebuf_r>:
 80055f8:	898b      	ldrh	r3, [r1, #12]
 80055fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055fc:	079d      	lsls	r5, r3, #30
 80055fe:	4606      	mov	r6, r0
 8005600:	460c      	mov	r4, r1
 8005602:	d507      	bpl.n	8005614 <__smakebuf_r+0x1c>
 8005604:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	6123      	str	r3, [r4, #16]
 800560c:	2301      	movs	r3, #1
 800560e:	6163      	str	r3, [r4, #20]
 8005610:	b003      	add	sp, #12
 8005612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005614:	ab01      	add	r3, sp, #4
 8005616:	466a      	mov	r2, sp
 8005618:	f7ff ffc8 	bl	80055ac <__swhatbuf_r>
 800561c:	9f00      	ldr	r7, [sp, #0]
 800561e:	4605      	mov	r5, r0
 8005620:	4639      	mov	r1, r7
 8005622:	4630      	mov	r0, r6
 8005624:	f7ff fa62 	bl	8004aec <_malloc_r>
 8005628:	b948      	cbnz	r0, 800563e <__smakebuf_r+0x46>
 800562a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800562e:	059a      	lsls	r2, r3, #22
 8005630:	d4ee      	bmi.n	8005610 <__smakebuf_r+0x18>
 8005632:	f023 0303 	bic.w	r3, r3, #3
 8005636:	f043 0302 	orr.w	r3, r3, #2
 800563a:	81a3      	strh	r3, [r4, #12]
 800563c:	e7e2      	b.n	8005604 <__smakebuf_r+0xc>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	6020      	str	r0, [r4, #0]
 8005642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005646:	81a3      	strh	r3, [r4, #12]
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800564e:	b15b      	cbz	r3, 8005668 <__smakebuf_r+0x70>
 8005650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005654:	4630      	mov	r0, r6
 8005656:	f000 f837 	bl	80056c8 <_isatty_r>
 800565a:	b128      	cbz	r0, 8005668 <__smakebuf_r+0x70>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	431d      	orrs	r5, r3
 800566c:	81a5      	strh	r5, [r4, #12]
 800566e:	e7cf      	b.n	8005610 <__smakebuf_r+0x18>

08005670 <memmove>:
 8005670:	4288      	cmp	r0, r1
 8005672:	b510      	push	{r4, lr}
 8005674:	eb01 0402 	add.w	r4, r1, r2
 8005678:	d902      	bls.n	8005680 <memmove+0x10>
 800567a:	4284      	cmp	r4, r0
 800567c:	4623      	mov	r3, r4
 800567e:	d807      	bhi.n	8005690 <memmove+0x20>
 8005680:	1e43      	subs	r3, r0, #1
 8005682:	42a1      	cmp	r1, r4
 8005684:	d008      	beq.n	8005698 <memmove+0x28>
 8005686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800568a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800568e:	e7f8      	b.n	8005682 <memmove+0x12>
 8005690:	4402      	add	r2, r0
 8005692:	4601      	mov	r1, r0
 8005694:	428a      	cmp	r2, r1
 8005696:	d100      	bne.n	800569a <memmove+0x2a>
 8005698:	bd10      	pop	{r4, pc}
 800569a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800569e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056a2:	e7f7      	b.n	8005694 <memmove+0x24>

080056a4 <_fstat_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d07      	ldr	r5, [pc, #28]	@ (80056c4 <_fstat_r+0x20>)
 80056a8:	2300      	movs	r3, #0
 80056aa:	4604      	mov	r4, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	4611      	mov	r1, r2
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	f7fc fb14 	bl	8001cde <_fstat>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d102      	bne.n	80056c0 <_fstat_r+0x1c>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	b103      	cbz	r3, 80056c0 <_fstat_r+0x1c>
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	bd38      	pop	{r3, r4, r5, pc}
 80056c2:	bf00      	nop
 80056c4:	20000e90 	.word	0x20000e90

080056c8 <_isatty_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d06      	ldr	r5, [pc, #24]	@ (80056e4 <_isatty_r+0x1c>)
 80056cc:	2300      	movs	r3, #0
 80056ce:	4604      	mov	r4, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	f7fc fb13 	bl	8001cfe <_isatty>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_isatty_r+0x1a>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_isatty_r+0x1a>
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	20000e90 	.word	0x20000e90

080056e8 <_sbrk_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d06      	ldr	r5, [pc, #24]	@ (8005704 <_sbrk_r+0x1c>)
 80056ec:	2300      	movs	r3, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fc fb1c 	bl	8001d30 <_sbrk>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_sbrk_r+0x1a>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_sbrk_r+0x1a>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	20000e90 	.word	0x20000e90

08005708 <_realloc_r>:
 8005708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800570c:	4680      	mov	r8, r0
 800570e:	4615      	mov	r5, r2
 8005710:	460c      	mov	r4, r1
 8005712:	b921      	cbnz	r1, 800571e <_realloc_r+0x16>
 8005714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005718:	4611      	mov	r1, r2
 800571a:	f7ff b9e7 	b.w	8004aec <_malloc_r>
 800571e:	b92a      	cbnz	r2, 800572c <_realloc_r+0x24>
 8005720:	f7ff f978 	bl	8004a14 <_free_r>
 8005724:	2400      	movs	r4, #0
 8005726:	4620      	mov	r0, r4
 8005728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800572c:	f000 f81a 	bl	8005764 <_malloc_usable_size_r>
 8005730:	4285      	cmp	r5, r0
 8005732:	4606      	mov	r6, r0
 8005734:	d802      	bhi.n	800573c <_realloc_r+0x34>
 8005736:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800573a:	d8f4      	bhi.n	8005726 <_realloc_r+0x1e>
 800573c:	4629      	mov	r1, r5
 800573e:	4640      	mov	r0, r8
 8005740:	f7ff f9d4 	bl	8004aec <_malloc_r>
 8005744:	4607      	mov	r7, r0
 8005746:	2800      	cmp	r0, #0
 8005748:	d0ec      	beq.n	8005724 <_realloc_r+0x1c>
 800574a:	42b5      	cmp	r5, r6
 800574c:	462a      	mov	r2, r5
 800574e:	4621      	mov	r1, r4
 8005750:	bf28      	it	cs
 8005752:	4632      	movcs	r2, r6
 8005754:	f7ff f94f 	bl	80049f6 <memcpy>
 8005758:	4621      	mov	r1, r4
 800575a:	4640      	mov	r0, r8
 800575c:	f7ff f95a 	bl	8004a14 <_free_r>
 8005760:	463c      	mov	r4, r7
 8005762:	e7e0      	b.n	8005726 <_realloc_r+0x1e>

08005764 <_malloc_usable_size_r>:
 8005764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005768:	1f18      	subs	r0, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	bfbc      	itt	lt
 800576e:	580b      	ldrlt	r3, [r1, r0]
 8005770:	18c0      	addlt	r0, r0, r3
 8005772:	4770      	bx	lr

08005774 <_init>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr

08005780 <_fini>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr

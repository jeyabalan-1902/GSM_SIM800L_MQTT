
SIM800MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800aba8  0800aba8  0000bba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b200  0800b200  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b200  0800b200  0000c200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b208  0800b208  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b208  0800b208  0000c208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b20c  0800b20c  0000c20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b210  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013d84  20000070  0800b280  0000d070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013df4  0800b280  0000ddf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce96  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cba  00000000  00000000  00029f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a18  00000000  00000000  0002ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001430  00000000  00000000  00030608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ef7  00000000  00000000  00031a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000210db  00000000  00000000  0005892f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e48bb  00000000  00000000  00079a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e2c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074f4  00000000  00000000  0015e308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001657fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ab90 	.word	0x0800ab90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800ab90 	.word	0x0800ab90

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	int len = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7a1b      	ldrb	r3, [r3, #8]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d102      	bne.n	80005ea <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80005e4:	230c      	movs	r3, #12
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e005      	b.n	80005f6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7a1b      	ldrb	r3, [r3, #8]
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d101      	bne.n	80005f6 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80005f2:	230a      	movs	r3, #10
 80005f4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	330c      	adds	r3, #12
 80005fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005fe:	f000 fb5e 	bl	8000cbe <MQTTstrlen>
 8000602:	4603      	mov	r3, r0
 8000604:	3302      	adds	r3, #2
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7edb      	ldrb	r3, [r3, #27]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d013      	beq.n	800063c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3324      	adds	r3, #36	@ 0x24
 8000618:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800061c:	f000 fb4f 	bl	8000cbe <MQTTstrlen>
 8000620:	4603      	mov	r3, r0
 8000622:	1c9c      	adds	r4, r3, #2
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3330      	adds	r3, #48	@ 0x30
 8000628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800062c:	f000 fb47 	bl	8000cbe <MQTTstrlen>
 8000630:	4603      	mov	r3, r0
 8000632:	4423      	add	r3, r4
 8000634:	3302      	adds	r3, #2
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	4413      	add	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <MQTTSerialize_connectLength+0x7c>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00a      	beq.n	8000662 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3340      	adds	r3, #64	@ 0x40
 8000650:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000654:	f000 fb33 	bl	8000cbe <MQTTstrlen>
 8000658:	4603      	mov	r3, r0
 800065a:	3302      	adds	r3, #2
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	2b00      	cmp	r3, #0
 8000668:	d103      	bne.n	8000672 <MQTTSerialize_connectLength+0xa2>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00a      	beq.n	8000688 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	334c      	adds	r3, #76	@ 0x4c
 8000676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800067a:	f000 fb20 	bl	8000cbe <MQTTstrlen>
 800067e:	4603      	mov	r3, r0
 8000680:	3302      	adds	r3, #2
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000688:	68fb      	ldr	r3, [r7, #12]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
	...

08000694 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
	int len = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff8a 	bl	80005d0 <MQTTSerialize_connectLength>
 80006bc:	6238      	str	r0, [r7, #32]
 80006be:	6a38      	ldr	r0, [r7, #32]
 80006c0:	f000 f9b2 	bl	8000a28 <MQTTPacket_len>
 80006c4:	4602      	mov	r2, r0
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	da03      	bge.n	80006d4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80006cc:	f06f 0301 	mvn.w	r3, #1
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 80006d2:	e0c2      	b.n	800085a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80006d8:	7e3b      	ldrb	r3, [r7, #24]
 80006da:	2201      	movs	r2, #1
 80006dc:	f362 1307 	bfi	r3, r2, #4, #4
 80006e0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80006e2:	7e3a      	ldrb	r2, [r7, #24]
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fa2b 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	6a39      	ldr	r1, [r7, #32]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f92b 	bl	8000950 <MQTTPacket_encode>
 80006fa:	4602      	mov	r2, r0
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	4413      	add	r3, r2
 8000700:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7a1b      	ldrb	r3, [r3, #8]
 8000706:	2b04      	cmp	r3, #4
 8000708:	d10c      	bne.n	8000724 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4955      	ldr	r1, [pc, #340]	@ (8000864 <MQTTSerialize_connect+0x1d0>)
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fa56 	bl	8000bc2 <writeCString>
		writeChar(&ptr, (char) 4);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2104      	movs	r1, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fa12 	bl	8000b46 <writeChar>
 8000722:	e00b      	b.n	800073c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	494f      	ldr	r1, [pc, #316]	@ (8000868 <MQTTSerialize_connect+0x1d4>)
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fa49 	bl	8000bc2 <writeCString>
		writeChar(&ptr, (char) 3);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2103      	movs	r1, #3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fa05 	bl	8000b46 <writeChar>
	}

	flags.all = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7e9b      	ldrb	r3, [r3, #26]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	7d3b      	ldrb	r3, [r7, #20]
 800074c:	f362 0341 	bfi	r3, r2, #1, #1
 8000750:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7edb      	ldrb	r3, [r3, #27]
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf14      	ite	ne
 800075a:	2301      	movne	r3, #1
 800075c:	2300      	moveq	r3, #0
 800075e:	b2da      	uxtb	r2, r3
 8000760:	7d3b      	ldrb	r3, [r7, #20]
 8000762:	f362 0382 	bfi	r3, r2, #2, #1
 8000766:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000768:	7d3b      	ldrb	r3, [r7, #20]
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800077a:	f003 0303 	and.w	r3, r3, #3
 800077e:	b2da      	uxtb	r2, r3
 8000780:	7d3b      	ldrb	r3, [r7, #20]
 8000782:	f362 03c4 	bfi	r3, r2, #3, #2
 8000786:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	7d3b      	ldrb	r3, [r7, #20]
 8000796:	f362 1345 	bfi	r3, r2, #5, #1
 800079a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d103      	bne.n	80007ac <MQTTSerialize_connect+0x118>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80007ac:	7d3b      	ldrb	r3, [r7, #20]
 80007ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d103      	bne.n	80007c4 <MQTTSerialize_connect+0x130>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80007c4:	7d3b      	ldrb	r3, [r7, #20]
 80007c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ca:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80007cc:	7d3a      	ldrb	r2, [r7, #20]
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f9b6 	bl	8000b46 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	8b1b      	ldrh	r3, [r3, #24]
 80007de:	461a      	mov	r2, r3
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4611      	mov	r1, r2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f9c2 	bl	8000b70 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f107 001c 	add.w	r0, r7, #28
 80007f2:	330c      	adds	r3, #12
 80007f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f6:	f000 fa03 	bl	8000c00 <writeMQTTString>
	if (options->willFlag)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7edb      	ldrb	r3, [r3, #27]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00d      	beq.n	800081e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f107 001c 	add.w	r0, r7, #28
 8000808:	3324      	adds	r3, #36	@ 0x24
 800080a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800080c:	f000 f9f8 	bl	8000c00 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f107 001c 	add.w	r0, r7, #28
 8000816:	3330      	adds	r3, #48	@ 0x30
 8000818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800081a:	f000 f9f1 	bl	8000c00 <writeMQTTString>
	}
	if (flags.bits.username)
 800081e:	7d3b      	ldrb	r3, [r7, #20]
 8000820:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f107 001c 	add.w	r0, r7, #28
 8000830:	3340      	adds	r3, #64	@ 0x40
 8000832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000834:	f000 f9e4 	bl	8000c00 <writeMQTTString>
	if (flags.bits.password)
 8000838:	7d3b      	ldrb	r3, [r7, #20]
 800083a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d006      	beq.n	8000852 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f107 001c 	add.w	r0, r7, #28
 800084a:	334c      	adds	r3, #76	@ 0x4c
 800084c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084e:	f000 f9d7 	bl	8000c00 <writeMQTTString>

	rc = ptr - buf;
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800085c:	4618      	mov	r0, r3
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	0800aba8 	.word	0x0800aba8
 8000868:	0800abb0 	.word	0x0800abb0

0800086c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800087e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000880:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f943 	bl	8000b1e <readChar>
 8000898:	4603      	mov	r3, r0
 800089a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800089c:	7f3b      	ldrb	r3, [r7, #28]
 800089e:	f023 030f 	bic.w	r3, r3, #15
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b30      	cmp	r3, #48	@ 0x30
 80008a6:	d14b      	bne.n	8000940 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 80008a8:	7f3b      	ldrb	r3, [r7, #28]
 80008aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80008b6:	7f3b      	ldrb	r3, [r7, #28]
 80008b8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80008c4:	7f3b      	ldrb	r3, [r7, #28]
 80008c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	f107 0214 	add.w	r2, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f8ee 	bl	8000abc <MQTTPacket_decodeBuf>
 80008e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80008e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	4413      	add	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	4413      	add	r3, r2
 80008f0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	6a3a      	ldr	r2, [r7, #32]
 80008f8:	4619      	mov	r1, r3
 80008fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008fc:	f000 f9ae 	bl	8000c5c <readMQTTLenString>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01e      	beq.n	8000944 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	6a3a      	ldr	r2, [r7, #32]
 800090a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800090c:	2b00      	cmp	r3, #0
 800090e:	db19      	blt.n	8000944 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dd08      	ble.n	800092a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f8e3 	bl	8000ae8 <readInt>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	6a3a      	ldr	r2, [r7, #32]
 800092e:	1ad2      	subs	r2, r2, r3
 8000930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000932:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000938:	601a      	str	r2, [r3, #0]
	rc = 1;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
 800093e:	e002      	b.n	8000946 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000944:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000948:	4618      	mov	r0, r3
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	425a      	negs	r2, r3
 8000962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000966:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800096a:	bf58      	it	pl
 800096c:	4253      	negpl	r3, r2
 800096e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da00      	bge.n	8000978 <MQTTPacket_encode+0x28>
 8000976:	337f      	adds	r3, #127	@ 0x7f
 8000978:	11db      	asrs	r3, r3, #7
 800097a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	dd03      	ble.n	800098a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000982:	7afb      	ldrb	r3, [r7, #11]
 8000984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000988:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	60fa      	str	r2, [r7, #12]
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	7afa      	ldrb	r2, [r7, #11]
 8000998:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dcde      	bgt.n	800095e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80009a0:	68fb      	ldr	r3, [r7, #12]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
	int len = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	3301      	adds	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	dd03      	ble.n	80009e0 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	60fb      	str	r3, [r7, #12]
			goto exit;
 80009de:	e01d      	b.n	8000a1c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80009e0:	f107 020b 	add.w	r2, r7, #11
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2101      	movs	r1, #1
 80009e8:	4610      	mov	r0, r2
 80009ea:	4798      	blx	r3
 80009ec:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d112      	bne.n	8000a1a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009fe:	6979      	ldr	r1, [r7, #20]
 8000a00:	fb01 f303 	mul.w	r3, r1, r3
 8000a04:	441a      	add	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	01db      	lsls	r3, r3, #7
 8000a0e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dbd6      	blt.n	80009c6 <MQTTPacket_decode+0x18>
exit:
 8000a18:	e000      	b.n	8000a1c <MQTTPacket_decode+0x6e>
			goto exit;
 8000a1a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8000a1c:	693b      	ldr	r3, [r7, #16]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a3a:	dc03      	bgt.n	8000a44 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e012      	b.n	8000a6a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a4a:	da03      	bge.n	8000a54 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3302      	adds	r3, #2
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	e00a      	b.n	8000a6a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <MQTTPacket_len+0x50>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	dc03      	bgt.n	8000a64 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3303      	adds	r3, #3
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	e002      	b.n	8000a6a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3304      	adds	r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	001ffffe 	.word	0x001ffffe

08000a7c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e00a      	b.n	8000aa2 <bufchar+0x26>
		*c = *bufptr++;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <bufchar+0x3c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	4909      	ldr	r1, [pc, #36]	@ (8000ab8 <bufchar+0x3c>)
 8000a94:	600a      	str	r2, [r1, #0]
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbf0      	blt.n	8000a8c <bufchar+0x10>
	return count;
 8000aaa:	683b      	ldr	r3, [r7, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	2000008c 	.word	0x2000008c

08000abc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000ac6:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <MQTTPacket_decodeBuf+0x24>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000acc:	6839      	ldr	r1, [r7, #0]
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MQTTPacket_decodeBuf+0x28>)
 8000ad0:	f7ff ff6d 	bl	80009ae <MQTTPacket_decode>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000008c 	.word	0x2000008c
 8000ae4:	08000a7d 	.word	0x08000a7d

08000ae8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	3201      	adds	r2, #1
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1c9a      	adds	r2, r3, #2
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	601a      	str	r2, [r3, #0]
	return len;
 8000b10:	68bb      	ldr	r3, [r7, #8]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
	return c;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	78fa      	ldrb	r2, [r7, #3]
 8000b58:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	da00      	bge.n	8000b82 <writeInt+0x12>
 8000b80:	33ff      	adds	r3, #255	@ 0xff
 8000b82:	121b      	asrs	r3, r3, #8
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	425a      	negs	r2, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	bf58      	it	pl
 8000ba2:	4253      	negpl	r3, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000bcc:	6838      	ldr	r0, [r7, #0]
 8000bce:	f7ff fb29 	bl	8000224 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000bd6:	68f9      	ldr	r1, [r7, #12]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffc9 	bl	8000b70 <writeInt>
	memcpy(*pptr, string, len);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	6839      	ldr	r1, [r7, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f009 f905 	bl	8009df6 <memcpy>
	*pptr += len;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	441a      	add	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	4638      	mov	r0, r7
 8000c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd12      	ble.n	8000c3a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4619      	mov	r1, r3
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ffa9 	bl	8000b70 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f009 f8e5 	bl	8009df6 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	441a      	add	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000c38:	e00c      	b.n	8000c54 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff ffbc 	bl	8000bc2 <writeCString>
}
 8000c4a:	e003      	b.n	8000c54 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f7ff ff8e 	bl	8000b70 <writeInt>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	dd1a      	ble.n	8000cae <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff ff35 	bl	8000ae8 <readInt>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	6852      	ldr	r2, [r2, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d30c      	bcc.n	8000cae <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	6852      	ldr	r2, [r2, #4]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	601a      	str	r2, [r3, #0]
			rc = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8000cb4:	697b      	ldr	r3, [r7, #20]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff faa4 	bl	8000224 <strlen>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e001      	b.n	8000ce6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	617b      	str	r3, [r7, #20]
	return rc;
 8000ce6:	697b      	ldr	r3, [r7, #20]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000d02:	463b      	mov	r3, r7
 8000d04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d08:	f7ff ffd9 	bl	8000cbe <MQTTstrlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	1c9a      	adds	r2, r3, #2
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	4413      	add	r3, r2
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	4413      	add	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dd02      	ble.n	8000d26 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3302      	adds	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
	return len;
 8000d26:	697b      	ldr	r3, [r7, #20]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5a:	6838      	ldr	r0, [r7, #0]
 8000d5c:	f7ff ffc8 	bl	8000cf0 <MQTTSerialize_publishLength>
 8000d60:	61b8      	str	r0, [r7, #24]
 8000d62:	69b8      	ldr	r0, [r7, #24]
 8000d64:	f7ff fe60 	bl	8000a28 <MQTTPacket_len>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	da03      	bge.n	8000d78 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000d70:	f06f 0301 	mvn.w	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
		goto exit;
 8000d76:	e04c      	b.n	8000e12 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8000d78:	7c3b      	ldrb	r3, [r7, #16]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	f362 1307 	bfi	r3, r2, #4, #4
 8000d80:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	7c3b      	ldrb	r3, [r7, #16]
 8000d8c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000d90:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	7c3b      	ldrb	r3, [r7, #16]
 8000d9c:	f362 0342 	bfi	r3, r2, #1, #2
 8000da0:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8000da2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	7c3b      	ldrb	r3, [r7, #16]
 8000dae:	f362 0300 	bfi	r3, r2, #0, #1
 8000db2:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8000db4:	7c3a      	ldrb	r2, [r7, #16]
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fec2 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	69b9      	ldr	r1, [r7, #24]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fdc2 	bl	8000950 <MQTTPacket_encode>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8000dd4:	f107 0014 	add.w	r0, r7, #20
 8000dd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dde:	f7ff ff0f 	bl	8000c00 <writeMQTTString>

	if (qos > 0)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dd06      	ble.n	8000df6 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8000de8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff febd 	bl	8000b70 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000dfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f008 fffa 	bl	8009df6 <memcpy>
	ptr += payloadlen;
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e06:	4413      	add	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000e12:	69fb      	ldr	r3, [r7, #28]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8000e20:	4b50      	ldr	r3, [pc, #320]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	b291      	uxth	r1, r2
 8000e28:	4a4e      	ldr	r2, [pc, #312]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e2a:	8011      	strh	r1, [r2, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000e30:	7819      	ldrb	r1, [r3, #0]
 8000e32:	4b4e      	ldr	r3, [pc, #312]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e34:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 8000e36:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000e38:	7c9b      	ldrb	r3, [r3, #18]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d135      	bne.n	8000eaa <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 8000e3e:	494d      	ldr	r1, [pc, #308]	@ (8000f74 <Sim800_RxCallBack+0x158>)
 8000e40:	484a      	ldr	r0, [pc, #296]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e42:	f008 ff55 	bl	8009cf0 <strstr>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <Sim800_RxCallBack+0x40>
 8000e4c:	4b45      	ldr	r3, [pc, #276]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d103      	bne.n	8000e5c <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 8000e54:	4b43      	ldr	r3, [pc, #268]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	e026      	b.n	8000eaa <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 8000e5c:	4945      	ldr	r1, [pc, #276]	@ (8000f74 <Sim800_RxCallBack+0x158>)
 8000e5e:	4843      	ldr	r0, [pc, #268]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e60:	f008 ff46 	bl	8009cf0 <strstr>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d01f      	beq.n	8000eaa <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8000e6a:	4a43      	ldr	r2, [pc, #268]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8000e76:	461a      	mov	r2, r3
 8000e78:	f008 ffbd 	bl	8009df6 <memcpy>
            clearRxBuffer();
 8000e7c:	f000 f88e 	bl	8000f9c <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8000e80:	493e      	ldr	r1, [pc, #248]	@ (8000f7c <Sim800_RxCallBack+0x160>)
 8000e82:	483d      	ldr	r0, [pc, #244]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e84:	f008 ff34 	bl	8009cf0 <strstr>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	749a      	strb	r2, [r3, #18]
 8000e94:	e009      	b.n	8000eaa <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8000e96:	493a      	ldr	r1, [pc, #232]	@ (8000f80 <Sim800_RxCallBack+0x164>)
 8000e98:	4837      	ldr	r0, [pc, #220]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e9a:	f008 ff29 	bl	8009cf0 <strstr>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 8000eaa:	4936      	ldr	r1, [pc, #216]	@ (8000f84 <Sim800_RxCallBack+0x168>)
 8000eac:	482f      	ldr	r0, [pc, #188]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000eae:	f008 ff1f 	bl	8009cf0 <strstr>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10d      	bne.n	8000ed4 <Sim800_RxCallBack+0xb8>
 8000eb8:	4933      	ldr	r1, [pc, #204]	@ (8000f88 <Sim800_RxCallBack+0x16c>)
 8000eba:	482c      	ldr	r0, [pc, #176]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000ebc:	f008 ff18 	bl	8009cf0 <strstr>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <Sim800_RxCallBack+0xb8>
 8000ec6:	4931      	ldr	r1, [pc, #196]	@ (8000f8c <Sim800_RxCallBack+0x170>)
 8000ec8:	4828      	ldr	r0, [pc, #160]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000eca:	f008 ff11 	bl	8009cf0 <strstr>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000edc:	7c9b      	ldrb	r3, [r3, #18]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d106      	bne.n	8000ef0 <Sim800_RxCallBack+0xd4>
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b30      	cmp	r3, #48	@ 0x30
 8000ee8:	d102      	bne.n	8000ef0 <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 8000eea:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <Sim800_RxCallBack+0x174>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8000ef0:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <Sim800_RxCallBack+0x174>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d124      	bne.n	8000f42 <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	b291      	uxth	r1, r2
 8000f00:	4a24      	ldr	r2, [pc, #144]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f02:	8011      	strh	r1, [r2, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000f08:	7819      	ldrb	r1, [r3, #0]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f0c:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d90d      	bls.n	8000f32 <Sim800_RxCallBack+0x116>
 8000f16:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f1e:	7852      	ldrb	r2, [r2, #1]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	dd06      	ble.n	8000f32 <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 8000f24:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f26:	f000 fb25 	bl	8001574 <MQTT_Receive>
            clearRxBuffer();
 8000f2a:	f000 f837 	bl	8000f9c <clearRxBuffer>
            clearMqttBuffer();
 8000f2e:	f000 f847 	bl	8000fc0 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d901      	bls.n	8000f42 <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 8000f3e:	f000 f83f 	bl	8000fc0 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d903      	bls.n	8000f56 <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 8000f4e:	f000 f825 	bl	8000f9c <clearRxBuffer>
        clearMqttBuffer();
 8000f52:	f000 f835 	bl	8000fc0 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4903      	ldr	r1, [pc, #12]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000f5a:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <Sim800_RxCallBack+0x17c>)
 8000f5c:	f004 fe55 	bl	8005c0a <HAL_UART_Receive_IT>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000648 	.word	0x20000648
 8000f68:	20000090 	.word	0x20000090
 8000f6c:	20000094 	.word	0x20000094
 8000f70:	20000c40 	.word	0x20000c40
 8000f74:	0800abb8 	.word	0x0800abb8
 8000f78:	2000064c 	.word	0x2000064c
 8000f7c:	0800abbc 	.word	0x0800abbc
 8000f80:	0800abcc 	.word	0x0800abcc
 8000f84:	0800abd8 	.word	0x0800abd8
 8000f88:	0800abe4 	.word	0x0800abe4
 8000f8c:	0800abec 	.word	0x0800abec
 8000f90:	2000064a 	.word	0x2000064a
 8000f94:	20000c00 	.word	0x20000c00
 8000f98:	20000e50 	.word	0x20000e50

08000f9c <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <clearRxBuffer+0x1c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000fa6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000faa:	2100      	movs	r1, #0
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <clearRxBuffer+0x20>)
 8000fae:	f008 fe97 	bl	8009ce0 <memset>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000648 	.word	0x20000648
 8000fbc:	20000094 	.word	0x20000094

08000fc0 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <clearMqttBuffer+0x20>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <clearMqttBuffer+0x24>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000fd0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <clearMqttBuffer+0x28>)
 8000fd8:	f008 fe82 	bl	8009ce0 <memset>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000064a 	.word	0x2000064a
 8000fe4:	20000c00 	.word	0x20000c00
 8000fe8:	2000064c 	.word	0x2000064c

08000fec <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff f912 	bl	8000224 <strlen>
 8001000:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8001002:	b29b      	uxth	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	68f9      	ldr	r1, [r7, #12]
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <SIM800_SendCommand+0x50>)
 800100a:	f004 fdc8 	bl	8005b9e <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fcf7 	bl	8002a04 <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	4809      	ldr	r0, [pc, #36]	@ (8001040 <SIM800_SendCommand+0x54>)
 800101a:	f008 fe69 	bl	8009cf0 <strstr>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <SIM800_SendCommand+0x40>
    {
        clearRxBuffer();
 8001024:	f7ff ffba 	bl	8000f9c <clearRxBuffer>
        return 0;
 8001028:	2300      	movs	r3, #0
 800102a:	e002      	b.n	8001032 <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 800102c:	f7ff ffb6 	bl	8000f9c <clearRxBuffer>
    return 1;
 8001030:	2301      	movs	r3, #1
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000e50 	.word	0x20000e50
 8001040:	2000064c 	.word	0x2000064c

08001044 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	@ 0x30
 8001048:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 800104a:	4b5e      	ldr	r3, [pc, #376]	@ (80011c4 <MQTT_Init+0x180>)
 800104c:	2200      	movs	r2, #0
 800104e:	749a      	strb	r2, [r3, #18]
    int error = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    char str[32] = {0};
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	4956      	ldr	r1, [pc, #344]	@ (80011c8 <MQTT_Init+0x184>)
 8001070:	4856      	ldr	r0, [pc, #344]	@ (80011cc <MQTT_Init+0x188>)
 8001072:	f004 fdca 	bl	8005c0a <HAL_UART_Receive_IT>
    printf("Initializing MQTT...\r\n");
 8001076:	4856      	ldr	r0, [pc, #344]	@ (80011d0 <MQTT_Init+0x18c>)
 8001078:	f008 fcfe 	bl	8009a78 <puts>
    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 800107c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001080:	4954      	ldr	r1, [pc, #336]	@ (80011d4 <MQTT_Init+0x190>)
 8001082:	4855      	ldr	r0, [pc, #340]	@ (80011d8 <MQTT_Init+0x194>)
 8001084:	f7ff ffb2 	bl	8000fec <SIM800_SendCommand>
    printf("AT Command Sent: Checking Module Response\r\n");
 8001088:	4854      	ldr	r0, [pc, #336]	@ (80011dc <MQTT_Init+0x198>)
 800108a:	f008 fcf5 	bl	8009a78 <puts>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 800108e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001092:	4950      	ldr	r1, [pc, #320]	@ (80011d4 <MQTT_Init+0x190>)
 8001094:	4852      	ldr	r0, [pc, #328]	@ (80011e0 <MQTT_Init+0x19c>)
 8001096:	f7ff ffa9 	bl	8000fec <SIM800_SendCommand>
    printf("Echo Disabled\r\n");
 800109a:	4852      	ldr	r0, [pc, #328]	@ (80011e4 <MQTT_Init+0x1a0>)
 800109c:	f008 fcec 	bl	8009a78 <puts>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 80010a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010a4:	4950      	ldr	r1, [pc, #320]	@ (80011e8 <MQTT_Init+0x1a4>)
 80010a6:	4851      	ldr	r0, [pc, #324]	@ (80011ec <MQTT_Init+0x1a8>)
 80010a8:	f7ff ffa0 	bl	8000fec <SIM800_SendCommand>
 80010ac:	4602      	mov	r2, r0
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	4413      	add	r3, r2
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Shutting Down Previous Connections... %s\r\n", (error == 0) ? "Success" : "Failed");
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <MQTT_Init+0x7a>
 80010ba:	4b4d      	ldr	r3, [pc, #308]	@ (80011f0 <MQTT_Init+0x1ac>)
 80010bc:	e000      	b.n	80010c0 <MQTT_Init+0x7c>
 80010be:	4b4d      	ldr	r3, [pc, #308]	@ (80011f4 <MQTT_Init+0x1b0>)
 80010c0:	4619      	mov	r1, r3
 80010c2:	484d      	ldr	r0, [pc, #308]	@ (80011f8 <MQTT_Init+0x1b4>)
 80010c4:	f008 fc70 	bl	80099a8 <iprintf>
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 80010c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010cc:	4941      	ldr	r1, [pc, #260]	@ (80011d4 <MQTT_Init+0x190>)
 80010ce:	484b      	ldr	r0, [pc, #300]	@ (80011fc <MQTT_Init+0x1b8>)
 80010d0:	f7ff ff8c 	bl	8000fec <SIM800_SendCommand>
 80010d4:	4602      	mov	r2, r0
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	4413      	add	r3, r2
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("GPRS Attach... %s\r\n", (error == 0) ? "Success" : "Failed");
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <MQTT_Init+0xa2>
 80010e2:	4b43      	ldr	r3, [pc, #268]	@ (80011f0 <MQTT_Init+0x1ac>)
 80010e4:	e000      	b.n	80010e8 <MQTT_Init+0xa4>
 80010e6:	4b43      	ldr	r3, [pc, #268]	@ (80011f4 <MQTT_Init+0x1b0>)
 80010e8:	4619      	mov	r1, r3
 80010ea:	4845      	ldr	r0, [pc, #276]	@ (8001200 <MQTT_Init+0x1bc>)
 80010ec:	f008 fc5c 	bl	80099a8 <iprintf>
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 80010f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010f4:	4937      	ldr	r1, [pc, #220]	@ (80011d4 <MQTT_Init+0x190>)
 80010f6:	4843      	ldr	r0, [pc, #268]	@ (8001204 <MQTT_Init+0x1c0>)
 80010f8:	f7ff ff78 	bl	8000fec <SIM800_SendCommand>
 80010fc:	4602      	mov	r2, r0
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	4413      	add	r3, r2
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Setting TCP/IP Mode... %s\r\n", (error == 0) ? "Success" : "Failed");
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <MQTT_Init+0xca>
 800110a:	4b39      	ldr	r3, [pc, #228]	@ (80011f0 <MQTT_Init+0x1ac>)
 800110c:	e000      	b.n	8001110 <MQTT_Init+0xcc>
 800110e:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <MQTT_Init+0x1b0>)
 8001110:	4619      	mov	r1, r3
 8001112:	483d      	ldr	r0, [pc, #244]	@ (8001208 <MQTT_Init+0x1c4>)
 8001114:	f008 fc48 	bl	80099a8 <iprintf>
    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 8001118:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <MQTT_Init+0x180>)
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <MQTT_Init+0x180>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a28      	ldr	r2, [pc, #160]	@ (80011c4 <MQTT_Init+0x180>)
 8001122:	6892      	ldr	r2, [r2, #8]
 8001124:	1d38      	adds	r0, r7, #4
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	460b      	mov	r3, r1
 800112c:	4a37      	ldr	r2, [pc, #220]	@ (800120c <MQTT_Init+0x1c8>)
 800112e:	2120      	movs	r1, #32
 8001130:	f008 fcaa 	bl	8009a88 <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800113a:	4926      	ldr	r1, [pc, #152]	@ (80011d4 <MQTT_Init+0x190>)
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff55 	bl	8000fec <SIM800_SendCommand>
 8001142:	4602      	mov	r2, r0
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	4413      	add	r3, r2
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Setting APN: %s... %s\r\n", SIM800.sim.apn, (error == 0) ? "Success" : "Failed");
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <MQTT_Init+0x180>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <MQTT_Init+0x114>
 8001154:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <MQTT_Init+0x1ac>)
 8001156:	e000      	b.n	800115a <MQTT_Init+0x116>
 8001158:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MQTT_Init+0x1b0>)
 800115a:	461a      	mov	r2, r3
 800115c:	482c      	ldr	r0, [pc, #176]	@ (8001210 <MQTT_Init+0x1cc>)
 800115e:	f008 fc23 	bl	80099a8 <iprintf>
    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 8001162:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001166:	491b      	ldr	r1, [pc, #108]	@ (80011d4 <MQTT_Init+0x190>)
 8001168:	482a      	ldr	r0, [pc, #168]	@ (8001214 <MQTT_Init+0x1d0>)
 800116a:	f7ff ff3f 	bl	8000fec <SIM800_SendCommand>
 800116e:	4602      	mov	r2, r0
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	4413      	add	r3, r2
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Bringing Up Wireless Connection... %s\r\n", (error == 0) ? "Success" : "Failed");
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <MQTT_Init+0x13c>
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MQTT_Init+0x1ac>)
 800117e:	e000      	b.n	8001182 <MQTT_Init+0x13e>
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MQTT_Init+0x1b0>)
 8001182:	4619      	mov	r1, r3
 8001184:	4824      	ldr	r0, [pc, #144]	@ (8001218 <MQTT_Init+0x1d4>)
 8001186:	f008 fc0f 	bl	80099a8 <iprintf>
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 800118a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800118e:	4923      	ldr	r1, [pc, #140]	@ (800121c <MQTT_Init+0x1d8>)
 8001190:	4823      	ldr	r0, [pc, #140]	@ (8001220 <MQTT_Init+0x1dc>)
 8001192:	f7ff ff2b 	bl	8000fec <SIM800_SendCommand>
    printf("Retrieving IP Address...\r\n");
 8001196:	4823      	ldr	r0, [pc, #140]	@ (8001224 <MQTT_Init+0x1e0>)
 8001198:	f008 fc6e 	bl	8009a78 <puts>
    if (error == 0)
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <MQTT_Init+0x16c>
    {
    	printf("MQTT Initialization Successful. Connecting to Broker...\r\n");
 80011a2:	4821      	ldr	r0, [pc, #132]	@ (8001228 <MQTT_Init+0x1e4>)
 80011a4:	f008 fc68 	bl	8009a78 <puts>
        MQTT_Connect();
 80011a8:	f000 f842 	bl	8001230 <MQTT_Connect>
        return error;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	e004      	b.n	80011ba <MQTT_Init+0x176>
    }
    else
    {
    	printf("MQTT Initialization Failed! Error Code: %d\r\n", error);
 80011b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011b2:	481e      	ldr	r0, [pc, #120]	@ (800122c <MQTT_Init+0x1e8>)
 80011b4:	f008 fbf8 	bl	80099a8 <iprintf>
        return error;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000c40 	.word	0x20000c40
 80011c8:	20000090 	.word	0x20000090
 80011cc:	20000e50 	.word	0x20000e50
 80011d0:	0800abf4 	.word	0x0800abf4
 80011d4:	0800ac0c 	.word	0x0800ac0c
 80011d8:	0800ac14 	.word	0x0800ac14
 80011dc:	0800ac1c 	.word	0x0800ac1c
 80011e0:	0800ac48 	.word	0x0800ac48
 80011e4:	0800ac50 	.word	0x0800ac50
 80011e8:	0800ac60 	.word	0x0800ac60
 80011ec:	0800ac6c 	.word	0x0800ac6c
 80011f0:	0800ac7c 	.word	0x0800ac7c
 80011f4:	0800ac84 	.word	0x0800ac84
 80011f8:	0800ac8c 	.word	0x0800ac8c
 80011fc:	0800acb8 	.word	0x0800acb8
 8001200:	0800acc8 	.word	0x0800acc8
 8001204:	0800acdc 	.word	0x0800acdc
 8001208:	0800acec 	.word	0x0800acec
 800120c:	0800ad08 	.word	0x0800ad08
 8001210:	0800ad24 	.word	0x0800ad24
 8001214:	0800ad3c 	.word	0x0800ad3c
 8001218:	0800ad48 	.word	0x0800ad48
 800121c:	0800ad70 	.word	0x0800ad70
 8001220:	0800ad74 	.word	0x0800ad74
 8001224:	0800ad80 	.word	0x0800ad80
 8001228:	0800ad9c 	.word	0x0800ad9c
 800122c:	0800add8 	.word	0x0800add8

08001230 <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0d8      	sub	sp, #352	@ 0x160
 8001234:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8001236:	4b5e      	ldr	r3, [pc, #376]	@ (80013b0 <MQTT_Connect+0x180>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    SIM800.mqttServer.connect = 0;
 800123e:	4b5c      	ldr	r3, [pc, #368]	@ (80013b0 <MQTT_Connect+0x180>)
 8001240:	2200      	movs	r2, #0
 8001242:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800124a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800124e:	227c      	movs	r2, #124	@ 0x7c
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f008 fd44 	bl	8009ce0 <memset>
    unsigned char buf[128] = {0};
 8001258:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800125c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	3304      	adds	r3, #4
 8001266:	227c      	movs	r2, #124	@ 0x7c
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f008 fd38 	bl	8009ce0 <memset>
    printf("MQTT Connection Starting...\r\n");
 8001270:	4850      	ldr	r0, [pc, #320]	@ (80013b4 <MQTT_Connect+0x184>)
 8001272:	f008 fc01 	bl	8009a78 <puts>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 8001276:	4b4e      	ldr	r3, [pc, #312]	@ (80013b0 <MQTT_Connect+0x180>)
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	4b4d      	ldr	r3, [pc, #308]	@ (80013b0 <MQTT_Connect+0x180>)
 800127c:	8a1b      	ldrh	r3, [r3, #16]
 800127e:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8001282:	494d      	ldr	r1, [pc, #308]	@ (80013b8 <MQTT_Connect+0x188>)
 8001284:	f008 fc34 	bl	8009af0 <siprintf>
    printf("Sending: %s\r\n", str);
 8001288:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800128c:	4619      	mov	r1, r3
 800128e:	484b      	ldr	r0, [pc, #300]	@ (80013bc <MQTT_Connect+0x18c>)
 8001290:	f008 fb8a 	bl	80099a8 <iprintf>
    if (SIM800_SendCommand(str, "OK\r\n", CMD_DELAY) != 0)
 8001294:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001298:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800129c:	4948      	ldr	r1, [pc, #288]	@ (80013c0 <MQTT_Connect+0x190>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fea4 	bl	8000fec <SIM800_SendCommand>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <MQTT_Connect+0x82>
	{
		printf("ERROR: TCP Connection Failed!\r\n");
 80012aa:	4846      	ldr	r0, [pc, #280]	@ (80013c4 <MQTT_Connect+0x194>)
 80012ac:	f008 fbe4 	bl	8009a78 <puts>
 80012b0:	e07a      	b.n	80013a8 <MQTT_Connect+0x178>
		return;
	}

	printf("TCP Connection Established!\r\n");
 80012b2:	4845      	ldr	r0, [pc, #276]	@ (80013c8 <MQTT_Connect+0x198>)
 80012b4:	f008 fbe0 	bl	8009a78 <puts>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 80012b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012bc:	f001 fba2 	bl	8002a04 <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1)
 80012c0:	4b3b      	ldr	r3, [pc, #236]	@ (80013b0 <MQTT_Connect+0x180>)
 80012c2:	7c9b      	ldrb	r3, [r3, #18]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d16f      	bne.n	80013a8 <MQTT_Connect+0x178>
    {
    	printf("SIM800 Connected to MQTT Broker!\r\n");
 80012c8:	4840      	ldr	r0, [pc, #256]	@ (80013cc <MQTT_Connect+0x19c>)
 80012ca:	f008 fbd5 	bl	8009a78 <puts>
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 80012ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012d2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012d6:	4a3e      	ldr	r2, [pc, #248]	@ (80013d0 <MQTT_Connect+0x1a0>)
 80012d8:	4618      	mov	r0, r3
 80012da:	4611      	mov	r1, r2
 80012dc:	2358      	movs	r3, #88	@ 0x58
 80012de:	461a      	mov	r2, r3
 80012e0:	f008 fd89 	bl	8009df6 <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 80012e4:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <MQTT_Connect+0x180>)
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012ec:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012f0:	641a      	str	r2, [r3, #64]	@ 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 80012f2:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <MQTT_Connect+0x180>)
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012fa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012fe:	64da      	str	r2, [r3, #76]	@ 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 8001300:	4b2b      	ldr	r3, [pc, #172]	@ (80013b0 <MQTT_Connect+0x180>)
 8001302:	69da      	ldr	r2, [r3, #28]
 8001304:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001308:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800130c:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 800130e:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <MQTT_Connect+0x180>)
 8001310:	8c1a      	ldrh	r2, [r3, #32]
 8001312:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001316:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800131a:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 800131c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001320:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001324:	2201      	movs	r2, #1
 8001326:	769a      	strb	r2, [r3, #26]

        printf("MQTT Client ID: %s\r\n", datas.clientID.cstring);
 8001328:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800132c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	4619      	mov	r1, r3
 8001334:	4827      	ldr	r0, [pc, #156]	@ (80013d4 <MQTT_Connect+0x1a4>)
 8001336:	f008 fb37 	bl	80099a8 <iprintf>
		printf("MQTT Username: %s\r\n", datas.username.cstring);
 800133a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800133e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	4619      	mov	r1, r3
 8001346:	4824      	ldr	r0, [pc, #144]	@ (80013d8 <MQTT_Connect+0x1a8>)
 8001348:	f008 fb2e 	bl	80099a8 <iprintf>
		printf("MQTT Password: %s\r\n", datas.password.cstring);
 800134c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001350:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4619      	mov	r1, r3
 8001358:	4820      	ldr	r0, [pc, #128]	@ (80013dc <MQTT_Connect+0x1ac>)
 800135a:	f008 fb25 	bl	80099a8 <iprintf>
		printf("MQTT KeepAlive Interval: %d seconds\r\n", datas.keepAliveInterval);
 800135e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001362:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001366:	8b1b      	ldrh	r3, [r3, #24]
 8001368:	4619      	mov	r1, r3
 800136a:	481d      	ldr	r0, [pc, #116]	@ (80013e0 <MQTT_Connect+0x1b0>)
 800136c:	f008 fb1c 	bl	80099a8 <iprintf>

        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8001370:	1d3a      	adds	r2, r7, #4
 8001372:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f98b 	bl	8000694 <MQTTSerialize_connect>
 800137e:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001382:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800138c:	4619      	mov	r1, r3
 800138e:	4815      	ldr	r0, [pc, #84]	@ (80013e4 <MQTT_Connect+0x1b4>)
 8001390:	f004 fc05 	bl	8005b9e <HAL_UART_Transmit_IT>
        printf("==============================================================================\n\r");
 8001394:	4814      	ldr	r0, [pc, #80]	@ (80013e8 <MQTT_Connect+0x1b8>)
 8001396:	f008 fb07 	bl	80099a8 <iprintf>
        printf("MQTT connection Established and ready to Transmit and Receive data!..\n\r");
 800139a:	4814      	ldr	r0, [pc, #80]	@ (80013ec <MQTT_Connect+0x1bc>)
 800139c:	f008 fb04 	bl	80099a8 <iprintf>

#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 80013a0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80013a4:	f001 fb2e 	bl	8002a04 <HAL_Delay>
#endif
    }
}
 80013a8:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000c40 	.word	0x20000c40
 80013b4:	0800ae08 	.word	0x0800ae08
 80013b8:	0800ae28 	.word	0x0800ae28
 80013bc:	0800ae44 	.word	0x0800ae44
 80013c0:	0800ac0c 	.word	0x0800ac0c
 80013c4:	0800ae54 	.word	0x0800ae54
 80013c8:	0800ae74 	.word	0x0800ae74
 80013cc:	0800ae94 	.word	0x0800ae94
 80013d0:	0800afbc 	.word	0x0800afbc
 80013d4:	0800aeb8 	.word	0x0800aeb8
 80013d8:	0800aed0 	.word	0x0800aed0
 80013dc:	0800aee4 	.word	0x0800aee4
 80013e0:	0800aef8 	.word	0x0800aef8
 80013e4:	20000e50 	.word	0x20000e50
 80013e8:	0800af20 	.word	0x0800af20
 80013ec:	0800af74 	.word	0x0800af74

080013f0 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b0cf      	sub	sp, #316	@ 0x13c
 80013f4:	af08      	add	r7, sp, #32
 80013f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013fe:	6018      	str	r0, [r3, #0]
 8001400:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001404:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001408:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 800140a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800140e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	3304      	adds	r3, #4
 8001418:	22fc      	movs	r2, #252	@ 0xfc
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f008 fc5f 	bl	8009ce0 <memset>

    MQTTString topicString = MQTTString_initializer;
 8001422:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001426:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001432:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800143e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8001446:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800144a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800144e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001452:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 800145a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800145e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f7fe fede 	bl	8000224 <strlen>
 8001468:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 800146a:	f107 0414 	add.w	r4, r7, #20
 800146e:	9306      	str	r3, [sp, #24]
 8001470:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001474:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	9305      	str	r3, [sp, #20]
 800147c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001480:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8001484:	ab02      	add	r3, sp, #8
 8001486:	ca07      	ldmia	r2, {r0, r1, r2}
 8001488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800148c:	2300      	movs	r3, #0
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	2300      	movs	r3, #0
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2300      	movs	r3, #0
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff fc47 	bl	8000d30 <MQTTSerialize_publish>
 80014a2:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 80014a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MQTT_Pub+0xd8>)
 80014b4:	f004 fb73 	bl	8005b9e <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 80014b8:	2064      	movs	r0, #100	@ 0x64
 80014ba:	f001 faa3 	bl	8002a04 <HAL_Delay>
#endif
}
 80014be:	bf00      	nop
 80014c0:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	20000e50 	.word	0x20000e50

080014cc <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0ca      	sub	sp, #296	@ 0x128
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014da:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 80014dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	3304      	adds	r3, #4
 80014ea:	22fc      	movs	r2, #252	@ 0xfc
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f008 fbf6 	bl	8009ce0 <memset>

    MQTTString topicString = MQTTString_initializer;
 80014f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001504:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001510:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8001518:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800151c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001520:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001524:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 800152c:	f107 0014 	add.w	r0, r7, #20
 8001530:	2300      	movs	r3, #0
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2301      	movs	r3, #1
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001546:	f000 f886 	bl	8001656 <MQTTSerialize_subscribe>
 800154a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800154e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001552:	b29a      	uxth	r2, r3
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MQTT_Sub+0xa4>)
 800155c:	f004 fb1f 	bl	8005b9e <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8001560:	2064      	movs	r0, #100	@ 0x64
 8001562:	f001 fa4f 	bl	8002a04 <HAL_Delay>
#endif
}
 8001566:	bf00      	nop
 8001568:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000e50 	.word	0x20000e50

08001574 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af06      	add	r7, sp, #24
 800157a:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 800157c:	2240      	movs	r2, #64	@ 0x40
 800157e:	2100      	movs	r1, #0
 8001580:	4819      	ldr	r0, [pc, #100]	@ (80015e8 <MQTT_Receive+0x74>)
 8001582:	f008 fbad 	bl	8009ce0 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8001586:	2240      	movs	r2, #64	@ 0x40
 8001588:	2100      	movs	r1, #0
 800158a:	4818      	ldr	r0, [pc, #96]	@ (80015ec <MQTT_Receive+0x78>)
 800158c:	f008 fba8 	bl	8009ce0 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8001590:	2304      	movs	r3, #4
 8001592:	9304      	str	r3, [sp, #16]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	9303      	str	r3, [sp, #12]
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MQTT_Receive+0x7c>)
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MQTT_Receive+0x80>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <MQTT_Receive+0x84>)
 80015ac:	4913      	ldr	r1, [pc, #76]	@ (80015fc <MQTT_Receive+0x88>)
 80015ae:	4814      	ldr	r0, [pc, #80]	@ (8001600 <MQTT_Receive+0x8c>)
 80015b0:	f7ff f95c 	bl	800086c <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4619      	mov	r1, r3
 80015ba:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <MQTT_Receive+0x74>)
 80015bc:	f008 fc1b 	bl	8009df6 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <MQTT_Receive+0x90>)
 80015c4:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <MQTT_Receive+0x90>)
 80015cc:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80015ce:	4619      	mov	r1, r3
 80015d0:	4806      	ldr	r0, [pc, #24]	@ (80015ec <MQTT_Receive+0x78>)
 80015d2:	f008 fc10 	bl	8009df6 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <MQTT_Receive+0x90>)
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000cb4 	.word	0x20000cb4
 80015ec:	20000c70 	.word	0x20000c70
 80015f0:	20000cb0 	.word	0x20000cb0
 80015f4:	20000c6e 	.word	0x20000c6e
 80015f8:	20000c6c 	.word	0x20000c6c
 80015fc:	20000c68 	.word	0x20000c68
 8001600:	20000c65 	.word	0x20000c65
 8001604:	20000c40 	.word	0x20000c40

08001608 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001612:	2302      	movs	r3, #2
 8001614:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e013      	b.n	8001644 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4413      	add	r3, r2
 800162c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001630:	f7ff fb45 	bl	8000cbe <MQTTstrlen>
 8001634:	4603      	mov	r3, r0
 8001636:	3303      	adds	r3, #3
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	4413      	add	r3, r2
 800163c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbe7      	blt.n	800161c <MQTTSerialize_subscribeLength+0x14>
	return len;
 800164c:	68bb      	ldr	r3, [r7, #8]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b08a      	sub	sp, #40	@ 0x28
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	4611      	mov	r1, r2
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001680:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001684:	f7ff ffc0 	bl	8001608 <MQTTSerialize_subscribeLength>
 8001688:	61f8      	str	r0, [r7, #28]
 800168a:	69f8      	ldr	r0, [r7, #28]
 800168c:	f7ff f9cc 	bl	8000a28 <MQTTPacket_len>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	4293      	cmp	r3, r2
 8001696:	da03      	bge.n	80016a0 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001698:	f06f 0301 	mvn.w	r3, #1
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800169e:	e051      	b.n	8001744 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 80016a4:	7d3b      	ldrb	r3, [r7, #20]
 80016a6:	2208      	movs	r2, #8
 80016a8:	f362 1307 	bfi	r3, r2, #4, #4
 80016ac:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	7d3b      	ldrb	r3, [r7, #20]
 80016b8:	f362 03c3 	bfi	r3, r2, #3, #1
 80016bc:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80016be:	7d3b      	ldrb	r3, [r7, #20]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f362 0342 	bfi	r3, r2, #1, #2
 80016c6:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80016c8:	7d3a      	ldrb	r2, [r7, #20]
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa38 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	69f9      	ldr	r1, [r7, #28]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f938 	bl	8000950 <MQTTPacket_encode>
 80016e0:	4602      	mov	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4413      	add	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 80016e8:	88ba      	ldrh	r2, [r7, #4]
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fa3d 	bl	8000b70 <writeInt>

	for (i = 0; i < count; ++i)
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
 80016fa:	e01b      	b.n	8001734 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80016fc:	6a3a      	ldr	r2, [r7, #32]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	461a      	mov	r2, r3
 8001708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800170a:	4413      	add	r3, r2
 800170c:	f107 0018 	add.w	r0, r7, #24
 8001710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001712:	f7ff fa75 	bl	8000c00 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800171c:	4413      	add	r3, r2
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fa0c 	bl	8000b46 <writeChar>
	for (i = 0; i < count; ++i)
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	3301      	adds	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	6a3a      	ldr	r2, [r7, #32]
 8001736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001738:	429a      	cmp	r2, r3
 800173a:	dbdf      	blt.n	80016fc <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001746:	4618      	mov	r0, r3
 8001748:	3728      	adds	r7, #40	@ 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_DMA_Init+0x3c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <MX_DMA_Init+0x3c>)
 8001760:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_DMA_Init+0x3c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	200d      	movs	r0, #13
 8001778:	f001 fa20 	bl	8002bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800177c:	200d      	movs	r0, #13
 800177e:	f001 fa39 	bl	8002bf4 <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <MX_GPIO_Init+0x108>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001898 <MX_GPIO_Init+0x108>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <MX_GPIO_Init+0x108>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <MX_GPIO_Init+0x108>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a33      	ldr	r2, [pc, #204]	@ (8001898 <MX_GPIO_Init+0x108>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <MX_GPIO_Init+0x108>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <MX_GPIO_Init+0x108>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001898 <MX_GPIO_Init+0x108>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <MX_GPIO_Init+0x108>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <MX_GPIO_Init+0x108>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a25      	ldr	r2, [pc, #148]	@ (8001898 <MX_GPIO_Init+0x108>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <MX_GPIO_Init+0x108>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2120      	movs	r1, #32
 800181a:	4820      	ldr	r0, [pc, #128]	@ (800189c <MX_GPIO_Init+0x10c>)
 800181c:	f001 ff08 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2101      	movs	r1, #1
 8001824:	481e      	ldr	r0, [pc, #120]	@ (80018a0 <MX_GPIO_Init+0x110>)
 8001826:	f001 ff03 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BT_Pin */
  GPIO_InitStruct.Pin = USER_BT_Pin;
 800182a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001830:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001836:	2301      	movs	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BT_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4818      	ldr	r0, [pc, #96]	@ (80018a4 <MX_GPIO_Init+0x114>)
 8001842:	f001 fd61 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001846:	2320      	movs	r3, #32
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	480f      	ldr	r0, [pc, #60]	@ (800189c <MX_GPIO_Init+0x10c>)
 800185e:	f001 fd53 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 8001862:	2301      	movs	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4809      	ldr	r0, [pc, #36]	@ (80018a0 <MX_GPIO_Init+0x110>)
 800187a:	f001 fd45 	bl	8003308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2105      	movs	r1, #5
 8001882:	2028      	movs	r0, #40	@ 0x28
 8001884:	f001 f99a 	bl	8002bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001888:	2028      	movs	r0, #40	@ 0x28
 800188a:	f001 f9b3 	bl	8002bf4 <HAL_NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	@ 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020800 	.word	0x40020800

080018a8 <GSM_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GSM_init(void)                                 //GSM Init
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	SIM800.sim.apn = "internet";
 80018ac:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <GSM_init+0x48>)
 80018ae:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <GSM_init+0x4c>)
 80018b0:	601a      	str	r2, [r3, #0]
	SIM800.sim.apn_user = "";
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <GSM_init+0x48>)
 80018b4:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <GSM_init+0x50>)
 80018b6:	605a      	str	r2, [r3, #4]
	SIM800.sim.apn_pass = "";
 80018b8:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <GSM_init+0x48>)
 80018ba:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <GSM_init+0x50>)
 80018bc:	609a      	str	r2, [r3, #8]
	SIM800.mqttServer.host = "mqtt.onwords.in";
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <GSM_init+0x48>)
 80018c0:	4a0e      	ldr	r2, [pc, #56]	@ (80018fc <GSM_init+0x54>)
 80018c2:	60da      	str	r2, [r3, #12]
	SIM800.mqttServer.port = 1883;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <GSM_init+0x48>)
 80018c6:	f240 725b 	movw	r2, #1883	@ 0x75b
 80018ca:	821a      	strh	r2, [r3, #16]
	SIM800.mqttClient.username = "Nikhil";
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <GSM_init+0x48>)
 80018ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001900 <GSM_init+0x58>)
 80018d0:	615a      	str	r2, [r3, #20]
	SIM800.mqttClient.pass = "Nikhil8182";
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <GSM_init+0x48>)
 80018d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001904 <GSM_init+0x5c>)
 80018d6:	619a      	str	r2, [r3, #24]
	SIM800.mqttClient.clientID = "TestSub";
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <GSM_init+0x48>)
 80018da:	4a0b      	ldr	r2, [pc, #44]	@ (8001908 <GSM_init+0x60>)
 80018dc:	61da      	str	r2, [r3, #28]
	SIM800.mqttClient.keepAliveInterval = 60;
 80018de:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <GSM_init+0x48>)
 80018e0:	223c      	movs	r2, #60	@ 0x3c
 80018e2:	841a      	strh	r2, [r3, #32]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000c40 	.word	0x20000c40
 80018f4:	0800b020 	.word	0x0800b020
 80018f8:	0800b02c 	.word	0x0800b02c
 80018fc:	0800b030 	.word	0x0800b030
 8001900:	0800b040 	.word	0x0800b040
 8001904:	0800b048 	.word	0x0800b048
 8001908:	0800b054 	.word	0x0800b054

0800190c <FreeRTOS_Init>:

void FreeRTOS_Init(void)                            //FreeRTOS initialization function
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af02      	add	r7, sp, #8
    mqttQueue = xQueueCreate(5, sizeof(uint8_t));                 // Queue init
 8001912:	2200      	movs	r2, #0
 8001914:	2101      	movs	r1, #1
 8001916:	2005      	movs	r0, #5
 8001918:	f005 fa10 	bl	8006d3c <xQueueGenericCreate>
 800191c:	4603      	mov	r3, r0
 800191e:	4a20      	ldr	r2, [pc, #128]	@ (80019a0 <FreeRTOS_Init+0x94>)
 8001920:	6013      	str	r3, [r2, #0]
    ESP_uartQueue = xQueueCreate(10, sizeof(uartRxBuffer));
 8001922:	2200      	movs	r2, #0
 8001924:	2101      	movs	r1, #1
 8001926:	200a      	movs	r0, #10
 8001928:	f005 fa08 	bl	8006d3c <xQueueGenericCreate>
 800192c:	4603      	mov	r3, r0
 800192e:	4a1d      	ldr	r2, [pc, #116]	@ (80019a4 <FreeRTOS_Init+0x98>)
 8001930:	6013      	str	r3, [r2, #0]

    xButtonSemaphore = xSemaphoreCreateBinary();          //binary semaphore init
 8001932:	2203      	movs	r2, #3
 8001934:	2100      	movs	r1, #0
 8001936:	2001      	movs	r0, #1
 8001938:	f005 fa00 	bl	8006d3c <xQueueGenericCreate>
 800193c:	4603      	mov	r3, r0
 800193e:	4a1a      	ldr	r2, [pc, #104]	@ (80019a8 <FreeRTOS_Init+0x9c>)
 8001940:	6013      	str	r3, [r2, #0]

    xTaskCreate(ESP_UART_Task, "ESP_UART_Task", 200, NULL, 3, &uartTaskHandle);
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <FreeRTOS_Init+0xa0>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2303      	movs	r3, #3
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2300      	movs	r3, #0
 800194c:	22c8      	movs	r2, #200	@ 0xc8
 800194e:	4918      	ldr	r1, [pc, #96]	@ (80019b0 <FreeRTOS_Init+0xa4>)
 8001950:	4818      	ldr	r0, [pc, #96]	@ (80019b4 <FreeRTOS_Init+0xa8>)
 8001952:	f006 f841 	bl	80079d8 <xTaskCreate>
    xTaskCreate(RTC_Task, "RTC_Task", 200, NULL, 1, &rtcTaskHandle);
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <FreeRTOS_Init+0xac>)
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	2301      	movs	r3, #1
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2300      	movs	r3, #0
 8001960:	22c8      	movs	r2, #200	@ 0xc8
 8001962:	4916      	ldr	r1, [pc, #88]	@ (80019bc <FreeRTOS_Init+0xb0>)
 8001964:	4816      	ldr	r0, [pc, #88]	@ (80019c0 <FreeRTOS_Init+0xb4>)
 8001966:	f006 f837 	bl	80079d8 <xTaskCreate>
    xTaskCreate(GSM_MQTT_Task, "GSM_MQTT_Task", 512, NULL, 2, &mqttTaskHandle);
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <FreeRTOS_Init+0xb8>)
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2302      	movs	r3, #2
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001978:	4913      	ldr	r1, [pc, #76]	@ (80019c8 <FreeRTOS_Init+0xbc>)
 800197a:	4814      	ldr	r0, [pc, #80]	@ (80019cc <FreeRTOS_Init+0xc0>)
 800197c:	f006 f82c 	bl	80079d8 <xTaskCreate>
    xTaskCreate(INT_GPIO_Task, "INT_GPIO_Task", 256, NULL, 4, &gpioTaskHandle);
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <FreeRTOS_Init+0xc4>)
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	2304      	movs	r3, #4
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198e:	4911      	ldr	r1, [pc, #68]	@ (80019d4 <FreeRTOS_Init+0xc8>)
 8001990:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <FreeRTOS_Init+0xcc>)
 8001992:	f006 f821 	bl	80079d8 <xTaskCreate>
    vTaskStartScheduler();
 8001996:	f006 f99b 	bl	8007cd0 <vTaskStartScheduler>
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000c18 	.word	0x20000c18
 80019a4:	20000c1c 	.word	0x20000c1c
 80019a8:	20000c14 	.word	0x20000c14
 80019ac:	20000c0c 	.word	0x20000c0c
 80019b0:	0800b05c 	.word	0x0800b05c
 80019b4:	08001a71 	.word	0x08001a71
 80019b8:	20000c10 	.word	0x20000c10
 80019bc:	0800b06c 	.word	0x0800b06c
 80019c0:	08001c9d 	.word	0x08001c9d
 80019c4:	20000c04 	.word	0x20000c04
 80019c8:	0800b078 	.word	0x0800b078
 80019cc:	08001b29 	.word	0x08001b29
 80019d0:	20000c08 	.word	0x20000c08
 80019d4:	0800b088 	.word	0x0800b088
 80019d8:	08001ac1 	.word	0x08001ac1

080019dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)          // UART interrupt call back
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a58 <HAL_UART_RxCpltCallback+0x7c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d11c      	bne.n	8001a28 <HAL_UART_RxCpltCallback+0x4c>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
		xQueueSendFromISR(ESP_uartQueue, uartRxBuffer, &xHigherPriorityTaskWoken);
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <HAL_UART_RxCpltCallback+0x80>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f107 0208 	add.w	r2, r7, #8
 80019fa:	2300      	movs	r3, #0
 80019fc:	4918      	ldr	r1, [pc, #96]	@ (8001a60 <HAL_UART_RxCpltCallback+0x84>)
 80019fe:	f005 fb25 	bl	800704c <xQueueGenericSendFromISR>
		memset(uartRxBuffer, 0, sizeof(uartRxBuffer));
 8001a02:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <HAL_UART_RxCpltCallback+0x84>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, uartRxBuffer, sizeof(uartRxBuffer));
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4915      	ldr	r1, [pc, #84]	@ (8001a60 <HAL_UART_RxCpltCallback+0x84>)
 8001a0c:	4815      	ldr	r0, [pc, #84]	@ (8001a64 <HAL_UART_RxCpltCallback+0x88>)
 8001a0e:	f004 f8fc 	bl	8005c0a <HAL_UART_Receive_IT>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <HAL_UART_RxCpltCallback+0x4c>
 8001a18:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <HAL_UART_RxCpltCallback+0x8c>)
 8001a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f3bf 8f4f 	dsb	sy
 8001a24:	f3bf 8f6f 	isb	sy
	}

    if (huart == UART_SIM800)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <HAL_UART_RxCpltCallback+0x90>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d10e      	bne.n	8001a4e <HAL_UART_RxCpltCallback+0x72>
    {
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
        Sim800_RxCallBack();
 8001a34:	f7ff f9f2 	bl	8000e1c <Sim800_RxCallBack>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_UART_RxCpltCallback+0x72>
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_UART_RxCpltCallback+0x8c>)
 8001a40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f3bf 8f4f 	dsb	sy
 8001a4a:	f3bf 8f6f 	isb	sy
    }
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40004c00 	.word	0x40004c00
 8001a5c:	20000c1c 	.word	0x20000c1c
 8001a60:	20000cfc 	.word	0x20000cfc
 8001a64:	20000dc0 	.word	0x20000dc0
 8001a68:	e000ed04 	.word	0xe000ed04
 8001a6c:	20000e50 	.word	0x20000e50

08001a70 <ESP_UART_Task>:

void ESP_UART_Task(void *pvParameters)                             //UART task handler
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    while (1) {
        if (xQueueReceive(ESP_uartQueue, uartRxBuffer, portMAX_DELAY) == pdTRUE) {
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <ESP_UART_Task+0x3c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	490b      	ldr	r1, [pc, #44]	@ (8001ab0 <ESP_UART_Task+0x40>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f005 fc30 	bl	80072e8 <xQueueReceive>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d1f4      	bne.n	8001a78 <ESP_UART_Task+0x8>
            printf("UART Data Received: %s\n", uartRxBuffer);
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <ESP_UART_Task+0x40>)
 8001a90:	4808      	ldr	r0, [pc, #32]	@ (8001ab4 <ESP_UART_Task+0x44>)
 8001a92:	f007 ff89 	bl	80099a8 <iprintf>
            if(uartRxBuffer == 1)
 8001a96:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <ESP_UART_Task+0x40>)
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d1ed      	bne.n	8001a78 <ESP_UART_Task+0x8>
            {
            	printf("LED Toggled\n\r");
 8001a9c:	4806      	ldr	r0, [pc, #24]	@ (8001ab8 <ESP_UART_Task+0x48>)
 8001a9e:	f007 ff83 	bl	80099a8 <iprintf>
            	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	4805      	ldr	r0, [pc, #20]	@ (8001abc <ESP_UART_Task+0x4c>)
 8001aa6:	f001 fddc 	bl	8003662 <HAL_GPIO_TogglePin>
        if (xQueueReceive(ESP_uartQueue, uartRxBuffer, portMAX_DELAY) == pdTRUE) {
 8001aaa:	e7e5      	b.n	8001a78 <ESP_UART_Task+0x8>
 8001aac:	20000c1c 	.word	0x20000c1c
 8001ab0:	20000cfc 	.word	0x20000cfc
 8001ab4:	0800b098 	.word	0x0800b098
 8001ab8:	0800b0b0 	.word	0x0800b0b0
 8001abc:	40020000 	.word	0x40020000

08001ac0 <INT_GPIO_Task>:
        }
    }
}

void INT_GPIO_Task(void *pvParameters)                             //GPIO Task Handler
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	if(xSemaphoreTake(xButtonSemaphore, portMAX_DELAY) == pdTRUE)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <INT_GPIO_Task+0x54>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f005 fceb 	bl	80074ac <xQueueSemaphoreTake>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d1f5      	bne.n	8001ac8 <INT_GPIO_Task+0x8>
    	{
    		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001adc:	2120      	movs	r1, #32
 8001ade:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <INT_GPIO_Task+0x58>)
 8001ae0:	f001 fdbf 	bl	8003662 <HAL_GPIO_TogglePin>
    		buttonState ^= 1;
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <INT_GPIO_Task+0x5c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <INT_GPIO_Task+0x5c>)
 8001af2:	701a      	strb	r2, [r3, #0]
			printf("button state toggled: %d\n\r", buttonState);
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <INT_GPIO_Task+0x5c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	4808      	ldr	r0, [pc, #32]	@ (8001b20 <INT_GPIO_Task+0x60>)
 8001afe:	f007 ff53 	bl	80099a8 <iprintf>
			xQueueSend(mqttQueue, (void *)&buttonState, portMAX_DELAY);
 8001b02:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <INT_GPIO_Task+0x64>)
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	2300      	movs	r3, #0
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	4903      	ldr	r1, [pc, #12]	@ (8001b1c <INT_GPIO_Task+0x5c>)
 8001b0e:	f005 f99b 	bl	8006e48 <xQueueGenericSend>
    	if(xSemaphoreTake(xButtonSemaphore, portMAX_DELAY) == pdTRUE)
 8001b12:	e7d9      	b.n	8001ac8 <INT_GPIO_Task+0x8>
 8001b14:	20000c14 	.word	0x20000c14
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	20000c3f 	.word	0x20000c3f
 8001b20:	0800b0c0 	.word	0x0800b0c0
 8001b24:	20000c18 	.word	0x20000c18

08001b28 <GSM_MQTT_Task>:
    	}
    }
}

void GSM_MQTT_Task(void *pvParameters)                             //GSM & MQTT Task Handler
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b096      	sub	sp, #88	@ 0x58
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
   uint8_t receivedState;
   char mqttPayload[32];
   while(1)
   {
	   if (SIM800.mqttServer.connect == 0)
 8001b30:	4b4a      	ldr	r3, [pc, #296]	@ (8001c5c <GSM_MQTT_Task+0x134>)
 8001b32:	7c9b      	ldrb	r3, [r3, #18]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d106      	bne.n	8001b46 <GSM_MQTT_Task+0x1e>
	   {
		   MQTT_Init();
 8001b38:	f7ff fa84 	bl	8001044 <MQTT_Init>
		   lastKeepAliveTime = millis();
 8001b3c:	f000 f902 	bl	8001d44 <millis>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a47      	ldr	r2, [pc, #284]	@ (8001c60 <GSM_MQTT_Task+0x138>)
 8001b44:	6013      	str	r3, [r2, #0]
	   }
	  if (SIM800.mqttServer.connect == 1)
 8001b46:	4b45      	ldr	r3, [pc, #276]	@ (8001c5c <GSM_MQTT_Task+0x134>)
 8001b48:	7c9b      	ldrb	r3, [r3, #18]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	f040 8082 	bne.w	8001c54 <GSM_MQTT_Task+0x12c>
	   {
		  MQTT_Sub("STM32/subscribe");
 8001b50:	4844      	ldr	r0, [pc, #272]	@ (8001c64 <GSM_MQTT_Task+0x13c>)
 8001b52:	f7ff fcbb 	bl	80014cc <MQTT_Sub>
		  if(SIM800.mqttReceive.newEvent)
 8001b56:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <GSM_MQTT_Task+0x134>)
 8001b58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d038      	beq.n	8001bd2 <GSM_MQTT_Task+0xaa>
		  {
			  unsigned char *topic = SIM800.mqttReceive.topic;
 8001b60:	4b41      	ldr	r3, [pc, #260]	@ (8001c68 <GSM_MQTT_Task+0x140>)
 8001b62:	657b      	str	r3, [r7, #84]	@ 0x54
			  unsigned char *payload = SIM800.mqttReceive.payload;
 8001b64:	4b41      	ldr	r3, [pc, #260]	@ (8001c6c <GSM_MQTT_Task+0x144>)
 8001b66:	653b      	str	r3, [r7, #80]	@ 0x50
			  SIM800.mqttReceive.newEvent = 0;
 8001b68:	4b3c      	ldr	r3, [pc, #240]	@ (8001c5c <GSM_MQTT_Task+0x134>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			  printf("Topic: %s\n\r", topic);
 8001b70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b72:	483f      	ldr	r0, [pc, #252]	@ (8001c70 <GSM_MQTT_Task+0x148>)
 8001b74:	f007 ff18 	bl	80099a8 <iprintf>
			  printf("Payload: %s\n\r",payload);
 8001b78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001b7a:	483e      	ldr	r0, [pc, #248]	@ (8001c74 <GSM_MQTT_Task+0x14c>)
 8001b7c:	f007 ff14 	bl	80099a8 <iprintf>
			  if(strcmp((char *)payload, "LED") == 0)
 8001b80:	493d      	ldr	r1, [pc, #244]	@ (8001c78 <GSM_MQTT_Task+0x150>)
 8001b82:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001b84:	f7fe fb44 	bl	8000210 <strcmp>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d121      	bne.n	8001bd2 <GSM_MQTT_Task+0xaa>
				{
					buttonState ^= 1;
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c7c <GSM_MQTT_Task+0x154>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f083 0301 	eor.w	r3, r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b38      	ldr	r3, [pc, #224]	@ (8001c7c <GSM_MQTT_Task+0x154>)
 8001b9c:	701a      	strb	r2, [r3, #0]
					char mqttPayload[32];
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	4837      	ldr	r0, [pc, #220]	@ (8001c80 <GSM_MQTT_Task+0x158>)
 8001ba2:	f001 fd5e 	bl	8003662 <HAL_GPIO_TogglePin>
					sprintf(mqttPayload, "{\"device1\":%d}", buttonState);
 8001ba6:	4b35      	ldr	r3, [pc, #212]	@ (8001c7c <GSM_MQTT_Task+0x154>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	4934      	ldr	r1, [pc, #208]	@ (8001c84 <GSM_MQTT_Task+0x15c>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f007 ff9b 	bl	8009af0 <siprintf>
					MQTT_Pub("STM32/publish", mqttPayload);
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4831      	ldr	r0, [pc, #196]	@ (8001c88 <GSM_MQTT_Task+0x160>)
 8001bc2:	f7ff fc15 	bl	80013f0 <MQTT_Pub>
					printf("MQTT Published: %s\n\r", mqttPayload);
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	482f      	ldr	r0, [pc, #188]	@ (8001c8c <GSM_MQTT_Task+0x164>)
 8001bce:	f007 feeb 	bl	80099a8 <iprintf>

				}
		  }

		  if(xQueueReceive(mqttQueue, &receivedState, pdMS_TO_TICKS(500)) == pdTRUE)
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c90 <GSM_MQTT_Task+0x168>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f107 014f 	add.w	r1, r7, #79	@ 0x4f
 8001bda:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fb82 	bl	80072e8 <xQueueReceive>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d119      	bne.n	8001c1e <GSM_MQTT_Task+0xf6>
			{
			   sprintf(mqttPayload, "{\"device1\":%d}", receivedState);
 8001bea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf4:	4923      	ldr	r1, [pc, #140]	@ (8001c84 <GSM_MQTT_Task+0x15c>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f007 ff7a 	bl	8009af0 <siprintf>
			   MQTT_Pub("STM32/publish", mqttPayload);
 8001bfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c00:	4619      	mov	r1, r3
 8001c02:	4821      	ldr	r0, [pc, #132]	@ (8001c88 <GSM_MQTT_Task+0x160>)
 8001c04:	f7ff fbf4 	bl	80013f0 <MQTT_Pub>
			   printf("MQTT Published: %s\n\r", mqttPayload);
 8001c08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	481f      	ldr	r0, [pc, #124]	@ (8001c8c <GSM_MQTT_Task+0x164>)
 8001c10:	f007 feca 	bl	80099a8 <iprintf>
			   lastKeepAliveTime = millis();
 8001c14:	f000 f896 	bl	8001d44 <millis>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a11      	ldr	r2, [pc, #68]	@ (8001c60 <GSM_MQTT_Task+0x138>)
 8001c1c:	6013      	str	r3, [r2, #0]

			}
			if ((millis() - lastKeepAliveTime) >= (KEEP_ALIVE_INTERVAL * 500))
 8001c1e:	f000 f891 	bl	8001d44 <millis>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <GSM_MQTT_Task+0x138>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d910      	bls.n	8001c54 <GSM_MQTT_Task+0x12c>
			{
			   uint8_t pingreq_packet[2] = {0xC0, 0x00};
 8001c32:	23c0      	movs	r3, #192	@ 0xc0
 8001c34:	853b      	strh	r3, [r7, #40]	@ 0x28
			   HAL_UART_Transmit(UART_SIM800, pingreq_packet, 2, 100);
 8001c36:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001c3a:	2364      	movs	r3, #100	@ 0x64
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4815      	ldr	r0, [pc, #84]	@ (8001c94 <GSM_MQTT_Task+0x16c>)
 8001c40:	f003 ff22 	bl	8005a88 <HAL_UART_Transmit>
			   printf("Sending MQTT PINGREQ\n\r");
 8001c44:	4814      	ldr	r0, [pc, #80]	@ (8001c98 <GSM_MQTT_Task+0x170>)
 8001c46:	f007 feaf 	bl	80099a8 <iprintf>
			   lastKeepAliveTime = millis();
 8001c4a:	f000 f87b 	bl	8001d44 <millis>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4a03      	ldr	r2, [pc, #12]	@ (8001c60 <GSM_MQTT_Task+0x138>)
 8001c52:	6013      	str	r3, [r2, #0]
			}
	   }
    vTaskDelay(100);
 8001c54:	2064      	movs	r0, #100	@ 0x64
 8001c56:	f006 f805 	bl	8007c64 <vTaskDelay>
	   if (SIM800.mqttServer.connect == 0)
 8001c5a:	e769      	b.n	8001b30 <GSM_MQTT_Task+0x8>
 8001c5c:	20000c40 	.word	0x20000c40
 8001c60:	20000cf8 	.word	0x20000cf8
 8001c64:	0800b0dc 	.word	0x0800b0dc
 8001c68:	20000cb4 	.word	0x20000cb4
 8001c6c:	20000c70 	.word	0x20000c70
 8001c70:	0800b0ec 	.word	0x0800b0ec
 8001c74:	0800b0f8 	.word	0x0800b0f8
 8001c78:	0800b108 	.word	0x0800b108
 8001c7c:	20000c3f 	.word	0x20000c3f
 8001c80:	40020000 	.word	0x40020000
 8001c84:	0800b10c 	.word	0x0800b10c
 8001c88:	0800b11c 	.word	0x0800b11c
 8001c8c:	0800b12c 	.word	0x0800b12c
 8001c90:	20000c18 	.word	0x20000c18
 8001c94:	20000e50 	.word	0x20000e50
 8001c98:	0800b144 	.word	0x0800b144

08001c9c <RTC_Task>:
   }
}

void RTC_Task(void *pvParameters)                          // RTC Task Handler
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		get_time_date(timeData, dateData);
 8001ca4:	4908      	ldr	r1, [pc, #32]	@ (8001cc8 <RTC_Task+0x2c>)
 8001ca6:	4809      	ldr	r0, [pc, #36]	@ (8001ccc <RTC_Task+0x30>)
 8001ca8:	f000 f97a 	bl	8001fa0 <get_time_date>
		printf("%s\n\r", timeData);
 8001cac:	4907      	ldr	r1, [pc, #28]	@ (8001ccc <RTC_Task+0x30>)
 8001cae:	4808      	ldr	r0, [pc, #32]	@ (8001cd0 <RTC_Task+0x34>)
 8001cb0:	f007 fe7a 	bl	80099a8 <iprintf>
		printf("%s\n\r", dateData);
 8001cb4:	4904      	ldr	r1, [pc, #16]	@ (8001cc8 <RTC_Task+0x2c>)
 8001cb6:	4806      	ldr	r0, [pc, #24]	@ (8001cd0 <RTC_Task+0x34>)
 8001cb8:	f007 fe76 	bl	80099a8 <iprintf>
		vTaskDelay(1000);
 8001cbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cc0:	f005 ffd0 	bl	8007c64 <vTaskDelay>
		get_time_date(timeData, dateData);
 8001cc4:	bf00      	nop
 8001cc6:	e7ed      	b.n	8001ca4 <RTC_Task+0x8>
 8001cc8:	20000c30 	.word	0x20000c30
 8001ccc:	20000c20 	.word	0x20000c20
 8001cd0:	0800b15c 	.word	0x0800b15c

08001cd4 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)                // External interrupt call back
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
    if (GPIO_Pin == USER_BT_Pin)
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ce8:	d111      	bne.n	8001d0e <HAL_GPIO_EXTI_Callback+0x3a>
    {
        xSemaphoreGiveFromISR(xButtonSemaphore, xHigherPriorityTaskWoken);
 8001cea:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <HAL_GPIO_EXTI_Callback+0x44>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 fa58 	bl	80071a8 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_EXTI_Callback+0x3a>
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <HAL_GPIO_EXTI_Callback+0x48>)
 8001d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	f3bf 8f6f 	isb	sy
    }
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000c14 	.word	0x20000c14
 8001d1c:	e000ed04 	.word	0xe000ed04

08001d20 <__io_putchar>:


#ifdef __GNUC__                                                //printf
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001d28:	1d39      	adds	r1, r7, #4
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <__io_putchar+0x20>)
 8001d32:	f003 fea9 	bl	8005a88 <HAL_UART_Transmit>
	return ch;
 8001d36:	687b      	ldr	r3, [r7, #4]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000e08 	.word	0x20000e08

08001d44 <millis>:
#endif

uint32_t millis() {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001d48:	f000 fe50 	bl	80029ec <HAL_GetTick>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d58:	f000 fe12 	bl	8002980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5c:	f000 f84c 	bl	8001df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d60:	f7ff fd16 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d64:	f7ff fcf4 	bl	8001750 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d68:	f000 fc78 	bl	800265c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001d6c:	f000 fca0 	bl	80026b0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001d70:	f000 fa32 	bl	80021d8 <MX_SPI1_Init>
  MX_UART4_Init();
 8001d74:	f000 fc48 	bl	8002608 <MX_UART4_Init>
  MX_RTC_Init();
 8001d78:	f000 f970 	bl	800205c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2345)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4818      	ldr	r0, [pc, #96]	@ (8001de0 <main+0x8c>)
 8001d80:	f003 fae6 	bl	8005350 <HAL_RTCEx_BKUPRead>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f242 3245 	movw	r2, #9029	@ 0x2345
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00a      	beq.n	8001da4 <main+0x50>
  {
	set_time(15, 20, 30);
 8001d8e:	221e      	movs	r2, #30
 8001d90:	2114      	movs	r1, #20
 8001d92:	200f      	movs	r0, #15
 8001d94:	f000 f8a4 	bl	8001ee0 <set_time>
	set_date(25, 02, 22, 7);
 8001d98:	2307      	movs	r3, #7
 8001d9a:	2216      	movs	r2, #22
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	2019      	movs	r0, #25
 8001da0:	f000 f8cc 	bl	8001f3c <set_date>
  }
  set_time(15, 20, 30);
 8001da4:	221e      	movs	r2, #30
 8001da6:	2114      	movs	r1, #20
 8001da8:	200f      	movs	r0, #15
 8001daa:	f000 f899 	bl	8001ee0 <set_time>
  set_date(25, 02, 22, 7);
 8001dae:	2307      	movs	r3, #7
 8001db0:	2216      	movs	r2, #22
 8001db2:	2102      	movs	r1, #2
 8001db4:	2019      	movs	r0, #25
 8001db6:	f000 f8c1 	bl	8001f3c <set_date>
  HAL_UART_Receive_IT(&huart4, uartRxBuffer, sizeof(uartRxBuffer));
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4909      	ldr	r1, [pc, #36]	@ (8001de4 <main+0x90>)
 8001dbe:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <main+0x94>)
 8001dc0:	f003 ff23 	bl	8005c0a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4909      	ldr	r1, [pc, #36]	@ (8001dec <main+0x98>)
 8001dc8:	4809      	ldr	r0, [pc, #36]	@ (8001df0 <main+0x9c>)
 8001dca:	f003 ff1e 	bl	8005c0a <HAL_UART_Receive_IT>
  printf("system Init\n\r");
 8001dce:	4809      	ldr	r0, [pc, #36]	@ (8001df4 <main+0xa0>)
 8001dd0:	f007 fdea 	bl	80099a8 <iprintf>
  GSM_init();
 8001dd4:	f7ff fd68 	bl	80018a8 <GSM_init>
  FreeRTOS_Init();
 8001dd8:	f7ff fd98 	bl	800190c <FreeRTOS_Init>
//  uint8_t pub_uint8 = 1;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <main+0x88>
 8001de0:	20000d00 	.word	0x20000d00
 8001de4:	20000cfc 	.word	0x20000cfc
 8001de8:	20000dc0 	.word	0x20000dc0
 8001dec:	20000090 	.word	0x20000090
 8001df0:	20000e50 	.word	0x20000e50
 8001df4:	0800b164 	.word	0x0800b164

08001df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b094      	sub	sp, #80	@ 0x50
 8001dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	2234      	movs	r2, #52	@ 0x34
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f007 ff6a 	bl	8009ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <SystemClock_Config+0xe0>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed8 <SystemClock_Config+0xe0>)
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <SystemClock_Config+0xe0>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4b27      	ldr	r3, [pc, #156]	@ (8001edc <SystemClock_Config+0xe4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a26      	ldr	r2, [pc, #152]	@ (8001edc <SystemClock_Config+0xe4>)
 8001e42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <SystemClock_Config+0xe4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001e54:	2305      	movs	r3, #5
 8001e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e62:	2302      	movs	r3, #2
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001e70:	23b4      	movs	r3, #180	@ 0xb4
 8001e72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e74:	2302      	movs	r3, #2
 8001e76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fb15 	bl	80044b4 <HAL_RCC_OscConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e90:	f000 f8de 	bl	8002050 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e94:	f001 fc18 	bl	80036c8 <HAL_PWREx_EnableOverDrive>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001e9e:	f000 f8d7 	bl	8002050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001eb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	2105      	movs	r1, #5
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 fc51 	bl	8003768 <HAL_RCC_ClockConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001ecc:	f000 f8c0 	bl	8002050 <Error_Handler>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3750      	adds	r7, #80	@ 0x50
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000

08001ee0 <set_time>:

/* USER CODE BEGIN 4 */
void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	460b      	mov	r3, r1
 8001eec:	71bb      	strb	r3, [r7, #6]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime = {0};
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]

	sTime.Hours = hr;
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = min;
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = sec;
 8001f0a:	797b      	ldrb	r3, [r7, #5]
 8001f0c:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4806      	ldr	r0, [pc, #24]	@ (8001f38 <set_time+0x58>)
 8001f20:	f002 fde9 	bl	8004af6 <HAL_RTC_SetTime>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <set_time+0x4e>
	{
		Error_Handler();
 8001f2a:	f000 f891 	bl	8002050 <Error_Handler>
	}
}
 8001f2e:	bf00      	nop
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000d00 	.word	0x20000d00

08001f3c <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date, uint8_t day)  // monday = 1
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4623      	mov	r3, r4
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71bb      	strb	r3, [r7, #6]
 8001f52:	460b      	mov	r3, r1
 8001f54:	717b      	strb	r3, [r7, #5]
 8001f56:	4613      	mov	r3, r2
 8001f58:	713b      	strb	r3, [r7, #4]

	RTC_DateTypeDef sDate = {0};
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
	sDate.WeekDay = day;
 8001f5e:	793b      	ldrb	r3, [r7, #4]
 8001f60:	733b      	strb	r3, [r7, #12]
	sDate.Month = month;
 8001f62:	79bb      	ldrb	r3, [r7, #6]
 8001f64:	737b      	strb	r3, [r7, #13]
	sDate.Date = date;
 8001f66:	797b      	ldrb	r3, [r7, #5]
 8001f68:	73bb      	strb	r3, [r7, #14]
	sDate.Year = year;
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	73fb      	strb	r3, [r7, #15]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	2200      	movs	r2, #0
 8001f74:	4619      	mov	r1, r3
 8001f76:	4809      	ldr	r0, [pc, #36]	@ (8001f9c <set_date+0x60>)
 8001f78:	f002 feb5 	bl	8004ce6 <HAL_RTC_SetDate>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <set_date+0x4a>
	{
		Error_Handler();
 8001f82:	f000 f865 	bl	8002050 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
 8001f86:	f242 3245 	movw	r2, #9029	@ 0x2345
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4803      	ldr	r0, [pc, #12]	@ (8001f9c <set_date+0x60>)
 8001f8e:	f003 f9c5 	bl	800531c <HAL_RTCEx_BKUPWrite>
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000d00 	.word	0x20000d00

08001fa0 <get_time_date>:
		Error_Handler();
	}
}

void get_time_date(char *time, char *date)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	@ 0x28
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	2200      	movs	r2, #0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4813      	ldr	r0, [pc, #76]	@ (8002000 <get_time_date+0x60>)
 8001fb4:	f002 fe39 	bl	8004c2a <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480f      	ldr	r0, [pc, #60]	@ (8002000 <get_time_date+0x60>)
 8001fc2:	f002 ff14 	bl	8004dee <HAL_RTC_GetDate>
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001fc6:	7a3b      	ldrb	r3, [r7, #8]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	7a7b      	ldrb	r3, [r7, #9]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	7abb      	ldrb	r3, [r7, #10]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	490b      	ldr	r1, [pc, #44]	@ (8002004 <get_time_date+0x64>)
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f007 fd8a 	bl	8009af0 <siprintf>
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8001fdc:	7fbb      	ldrb	r3, [r7, #30]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	7f7b      	ldrb	r3, [r7, #29]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
 8001fe6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	4906      	ldr	r1, [pc, #24]	@ (8002008 <get_time_date+0x68>)
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f007 fd7d 	bl	8009af0 <siprintf>
}
 8001ff6:	bf00      	nop
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000d00 	.word	0x20000d00
 8002004:	0800b174 	.word	0x0800b174
 8002008:	0800b184 	.word	0x0800b184

0800200c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);  // turn the LED ON
 8002014:	2201      	movs	r2, #1
 8002016:	2120      	movs	r1, #32
 8002018:	4803      	ldr	r0, [pc, #12]	@ (8002028 <HAL_RTC_AlarmAEventCallback+0x1c>)
 800201a:	f001 fb09 	bl	8003630 <HAL_GPIO_WritePin>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40020000 	.word	0x40020000

0800202c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a04      	ldr	r2, [pc, #16]	@ (800204c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800203e:	f000 fcc1 	bl	80029c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40001000 	.word	0x40001000

08002050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002054:	b672      	cpsid	i
}
 8002056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <Error_Handler+0x8>

0800205c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b090      	sub	sp, #64	@ 0x40
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002062:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002072:	2300      	movs	r3, #0
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002076:	463b      	mov	r3, r7
 8002078:	2228      	movs	r2, #40	@ 0x28
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f007 fe2f 	bl	8009ce0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002082:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <MX_RTC_Init+0x110>)
 8002084:	4a3a      	ldr	r2, [pc, #232]	@ (8002170 <MX_RTC_Init+0x114>)
 8002086:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002088:	4b38      	ldr	r3, [pc, #224]	@ (800216c <MX_RTC_Init+0x110>)
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800208e:	4b37      	ldr	r3, [pc, #220]	@ (800216c <MX_RTC_Init+0x110>)
 8002090:	227f      	movs	r2, #127	@ 0x7f
 8002092:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002094:	4b35      	ldr	r3, [pc, #212]	@ (800216c <MX_RTC_Init+0x110>)
 8002096:	22ff      	movs	r2, #255	@ 0xff
 8002098:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800209a:	4b34      	ldr	r3, [pc, #208]	@ (800216c <MX_RTC_Init+0x110>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020a0:	4b32      	ldr	r3, [pc, #200]	@ (800216c <MX_RTC_Init+0x110>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020a6:	4b31      	ldr	r3, [pc, #196]	@ (800216c <MX_RTC_Init+0x110>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020ac:	482f      	ldr	r0, [pc, #188]	@ (800216c <MX_RTC_Init+0x110>)
 80020ae:	f002 fc9f 	bl	80049f0 <HAL_RTC_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80020b8:	f7ff ffca 	bl	8002050 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80020d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	4823      	ldr	r0, [pc, #140]	@ (800216c <MX_RTC_Init+0x110>)
 80020e0:	f002 fd09 	bl	8004af6 <HAL_RTC_SetTime>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80020ea:	f7ff ffb1 	bl	8002050 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002106:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800210a:	2200      	movs	r2, #0
 800210c:	4619      	mov	r1, r3
 800210e:	4817      	ldr	r0, [pc, #92]	@ (800216c <MX_RTC_Init+0x110>)
 8002110:	f002 fde9 	bl	8004ce6 <HAL_RTC_SetDate>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800211a:	f7ff ff99 	bl	8002050 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800214e:	463b      	mov	r3, r7
 8002150:	2200      	movs	r2, #0
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	@ (800216c <MX_RTC_Init+0x110>)
 8002156:	f002 fe99 	bl	8004e8c <HAL_RTC_SetAlarm_IT>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002160:	f7ff ff76 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	3740      	adds	r7, #64	@ 0x40
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000d00 	.word	0x20000d00
 8002170:	40002800 	.word	0x40002800

08002174 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b09a      	sub	sp, #104	@ 0x68
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	225c      	movs	r2, #92	@ 0x5c
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f007 fdab 	bl	8009ce0 <memset>
  if(rtcHandle->Instance==RTC)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a10      	ldr	r2, [pc, #64]	@ (80021d0 <HAL_RTC_MspInit+0x5c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d119      	bne.n	80021c8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002194:	2320      	movs	r3, #32
 8002196:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002198:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800219c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 fc2c 	bl	8003a00 <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80021ae:	f7ff ff4f 	bl	8002050 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <HAL_RTC_MspInit+0x60>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	2029      	movs	r0, #41	@ 0x29
 80021be:	f000 fcfd 	bl	8002bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80021c2:	2029      	movs	r0, #41	@ 0x29
 80021c4:	f000 fd16 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021c8:	bf00      	nop
 80021ca:	3768      	adds	r7, #104	@ 0x68
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40002800 	.word	0x40002800
 80021d4:	42470e3c 	.word	0x42470e3c

080021d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021dc:	4b17      	ldr	r3, [pc, #92]	@ (800223c <MX_SPI1_Init+0x64>)
 80021de:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <MX_SPI1_Init+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021e2:	4b16      	ldr	r3, [pc, #88]	@ (800223c <MX_SPI1_Init+0x64>)
 80021e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ea:	4b14      	ldr	r3, [pc, #80]	@ (800223c <MX_SPI1_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <MX_SPI1_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <MX_SPI1_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <MX_SPI1_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <MX_SPI1_Init+0x64>)
 8002204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <MX_SPI1_Init+0x64>)
 800220c:	2208      	movs	r2, #8
 800220e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002210:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <MX_SPI1_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <MX_SPI1_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <MX_SPI1_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <MX_SPI1_Init+0x64>)
 8002224:	220a      	movs	r2, #10
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	@ (800223c <MX_SPI1_Init+0x64>)
 800222a:	f003 f8b3 	bl	8005394 <HAL_SPI_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002234:	f7ff ff0c 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000d20 	.word	0x20000d20
 8002240:	40013000 	.word	0x40013000

08002244 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a28      	ldr	r2, [pc, #160]	@ (8002304 <HAL_SPI_MspInit+0xc0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d149      	bne.n	80022fa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <HAL_SPI_MspInit+0xc4>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	4a26      	ldr	r2, [pc, #152]	@ (8002308 <HAL_SPI_MspInit+0xc4>)
 8002270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002274:	6453      	str	r3, [r2, #68]	@ 0x44
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <HAL_SPI_MspInit+0xc4>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <HAL_SPI_MspInit+0xc4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a1f      	ldr	r2, [pc, #124]	@ (8002308 <HAL_SPI_MspInit+0xc4>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HAL_SPI_MspInit+0xc4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_SPI_MspInit+0xc4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	4a18      	ldr	r2, [pc, #96]	@ (8002308 <HAL_SPI_MspInit+0xc4>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ae:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <HAL_SPI_MspInit+0xc4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ba:	23c0      	movs	r3, #192	@ 0xc0
 80022bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ca:	2305      	movs	r3, #5
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	480d      	ldr	r0, [pc, #52]	@ (800230c <HAL_SPI_MspInit+0xc8>)
 80022d6:	f001 f817 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022da:	2308      	movs	r3, #8
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ea:	2305      	movs	r3, #5
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4806      	ldr	r0, [pc, #24]	@ (8002310 <HAL_SPI_MspInit+0xcc>)
 80022f6:	f001 f807 	bl	8003308 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40013000 	.word	0x40013000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400

08002314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <HAL_MspInit+0x4c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	4a0f      	ldr	r2, [pc, #60]	@ (8002360 <HAL_MspInit+0x4c>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002328:	6453      	str	r3, [r2, #68]	@ 0x44
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_MspInit+0x4c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_MspInit+0x4c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <HAL_MspInit+0x4c>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	@ 0x40
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_MspInit+0x4c>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	@ 0x38
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	4b33      	ldr	r3, [pc, #204]	@ (8002448 <HAL_InitTick+0xe4>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	4a32      	ldr	r2, [pc, #200]	@ (8002448 <HAL_InitTick+0xe4>)
 800237e:	f043 0310 	orr.w	r3, r3, #16
 8002382:	6413      	str	r3, [r2, #64]	@ 0x40
 8002384:	4b30      	ldr	r3, [pc, #192]	@ (8002448 <HAL_InitTick+0xe4>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002390:	f107 0210 	add.w	r2, r7, #16
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f001 fafe 	bl	800399c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023aa:	f001 facf 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 80023ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80023b0:	e004      	b.n	80023bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023b2:	f001 facb 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 80023b6:	4603      	mov	r3, r0
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023be:	4a23      	ldr	r2, [pc, #140]	@ (800244c <HAL_InitTick+0xe8>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9b      	lsrs	r3, r3, #18
 80023c6:	3b01      	subs	r3, #1
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023ca:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <HAL_InitTick+0xec>)
 80023cc:	4a21      	ldr	r2, [pc, #132]	@ (8002454 <HAL_InitTick+0xf0>)
 80023ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <HAL_InitTick+0xec>)
 80023d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <HAL_InitTick+0xec>)
 80023da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023de:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <HAL_InitTick+0xec>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <HAL_InitTick+0xec>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ea:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_InitTick+0xec>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023f0:	4817      	ldr	r0, [pc, #92]	@ (8002450 <HAL_InitTick+0xec>)
 80023f2:	f003 f858 	bl	80054a6 <HAL_TIM_Base_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002400:	2b00      	cmp	r3, #0
 8002402:	d11b      	bne.n	800243c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002404:	4812      	ldr	r0, [pc, #72]	@ (8002450 <HAL_InitTick+0xec>)
 8002406:	f003 f8a7 	bl	8005558 <HAL_TIM_Base_Start_IT>
 800240a:	4603      	mov	r3, r0
 800240c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002414:	2b00      	cmp	r3, #0
 8002416:	d111      	bne.n	800243c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002418:	2036      	movs	r0, #54	@ 0x36
 800241a:	f000 fbeb 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	d808      	bhi.n	8002436 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002424:	2200      	movs	r2, #0
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	2036      	movs	r0, #54	@ 0x36
 800242a:	f000 fbc7 	bl	8002bbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <HAL_InitTick+0xf4>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e002      	b.n	800243c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800243c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002440:	4618      	mov	r0, r3
 8002442:	3738      	adds	r7, #56	@ 0x38
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	431bde83 	.word	0x431bde83
 8002450:	20000d78 	.word	0x20000d78
 8002454:	40001000 	.word	0x40001000
 8002458:	20000004 	.word	0x20000004

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <NMI_Handler+0x4>

08002464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <MemManage_Handler+0x4>

08002474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <BusFault_Handler+0x4>

0800247c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <UsageFault_Handler+0x4>

08002484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002498:	4802      	ldr	r0, [pc, #8]	@ (80024a4 <DMA1_Stream2_IRQHandler+0x10>)
 800249a:	f000 fcf9 	bl	8002e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000e98 	.word	0x20000e98

080024a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024ac:	4802      	ldr	r0, [pc, #8]	@ (80024b8 <USART3_IRQHandler+0x10>)
 80024ae:	f003 fbd1 	bl	8005c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000e50 	.word	0x20000e50

080024bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BT_Pin);
 80024c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024c4:	f001 f8e8 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <RTC_Alarm_IRQHandler+0x10>)
 80024d2:	f002 fe1f 	bl	8005114 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000d00 	.word	0x20000d00

080024e0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <UART4_IRQHandler+0x10>)
 80024e6:	f003 fbb5 	bl	8005c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000dc0 	.word	0x20000dc0

080024f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <TIM6_DAC_IRQHandler+0x10>)
 80024fa:	f003 f89d 	bl	8005638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000d78 	.word	0x20000d78

08002508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e00a      	b.n	8002530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800251a:	f3af 8000 	nop.w
 800251e:	4601      	mov	r1, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	60ba      	str	r2, [r7, #8]
 8002526:	b2ca      	uxtb	r2, r1
 8002528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf0      	blt.n	800251a <_read+0x12>
  }

  return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e009      	b.n	8002568 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	60ba      	str	r2, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fbdf 	bl	8001d20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3301      	adds	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	429a      	cmp	r2, r3
 800256e:	dbf1      	blt.n	8002554 <_write+0x12>
  }
  return len;
 8002570:	687b      	ldr	r3, [r7, #4]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <_close>:

int _close(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025a2:	605a      	str	r2, [r3, #4]
  return 0;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <_isatty>:

int _isatty(int file)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <SystemInit+0x20>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ee:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <SystemInit+0x20>)
 80025f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <MX_UART4_Init+0x4c>)
 800260e:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <MX_UART4_Init+0x50>)
 8002610:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <MX_UART4_Init+0x4c>)
 8002614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002618:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800261a:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <MX_UART4_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <MX_UART4_Init+0x4c>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <MX_UART4_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <MX_UART4_Init+0x4c>)
 800262e:	220c      	movs	r2, #12
 8002630:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002632:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <MX_UART4_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <MX_UART4_Init+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800263e:	4805      	ldr	r0, [pc, #20]	@ (8002654 <MX_UART4_Init+0x4c>)
 8002640:	f003 f9d2 	bl	80059e8 <HAL_UART_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800264a:	f7ff fd01 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000dc0 	.word	0x20000dc0
 8002658:	40004c00 	.word	0x40004c00

0800265c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002660:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002662:	4a12      	ldr	r2, [pc, #72]	@ (80026ac <MX_USART2_UART_Init+0x50>)
 8002664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002666:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800266c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800266e:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800267a:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <MX_USART2_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002682:	220c      	movs	r2, #12
 8002684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002686:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <MX_USART2_UART_Init+0x4c>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002692:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002694:	f003 f9a8 	bl	80059e8 <HAL_UART_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800269e:	f7ff fcd7 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000e08 	.word	0x20000e08
 80026ac:	40004400 	.word	0x40004400

080026b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <MX_USART3_UART_Init+0x4c>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	@ (8002700 <MX_USART3_UART_Init+0x50>)
 80026b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <MX_USART3_UART_Init+0x4c>)
 80026bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80026c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <MX_USART3_UART_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <MX_USART3_UART_Init+0x4c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <MX_USART3_UART_Init+0x4c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026d4:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <MX_USART3_UART_Init+0x4c>)
 80026d6:	220c      	movs	r2, #12
 80026d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <MX_USART3_UART_Init+0x4c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <MX_USART3_UART_Init+0x4c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026e6:	4805      	ldr	r0, [pc, #20]	@ (80026fc <MX_USART3_UART_Init+0x4c>)
 80026e8:	f003 f97e 	bl	80059e8 <HAL_UART_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026f2:	f7ff fcad 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000e50 	.word	0x20000e50
 8002700:	40004800 	.word	0x40004800

08002704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08e      	sub	sp, #56	@ 0x38
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a79      	ldr	r2, [pc, #484]	@ (8002908 <HAL_UART_MspInit+0x204>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d162      	bne.n	80027ec <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
 800272a:	4b78      	ldr	r3, [pc, #480]	@ (800290c <HAL_UART_MspInit+0x208>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	4a77      	ldr	r2, [pc, #476]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002730:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002734:	6413      	str	r3, [r2, #64]	@ 0x40
 8002736:	4b75      	ldr	r3, [pc, #468]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	4b71      	ldr	r3, [pc, #452]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	4a70      	ldr	r2, [pc, #448]	@ (800290c <HAL_UART_MspInit+0x208>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6313      	str	r3, [r2, #48]	@ 0x30
 8002752:	4b6e      	ldr	r3, [pc, #440]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800275e:	2303      	movs	r3, #3
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800276e:	2308      	movs	r3, #8
 8002770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002776:	4619      	mov	r1, r3
 8002778:	4865      	ldr	r0, [pc, #404]	@ (8002910 <HAL_UART_MspInit+0x20c>)
 800277a:	f000 fdc5 	bl	8003308 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800277e:	4b65      	ldr	r3, [pc, #404]	@ (8002914 <HAL_UART_MspInit+0x210>)
 8002780:	4a65      	ldr	r2, [pc, #404]	@ (8002918 <HAL_UART_MspInit+0x214>)
 8002782:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002784:	4b63      	ldr	r3, [pc, #396]	@ (8002914 <HAL_UART_MspInit+0x210>)
 8002786:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800278a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800278c:	4b61      	ldr	r3, [pc, #388]	@ (8002914 <HAL_UART_MspInit+0x210>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002792:	4b60      	ldr	r3, [pc, #384]	@ (8002914 <HAL_UART_MspInit+0x210>)
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002798:	4b5e      	ldr	r3, [pc, #376]	@ (8002914 <HAL_UART_MspInit+0x210>)
 800279a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800279e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002914 <HAL_UART_MspInit+0x210>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002914 <HAL_UART_MspInit+0x210>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80027ac:	4b59      	ldr	r3, [pc, #356]	@ (8002914 <HAL_UART_MspInit+0x210>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027b2:	4b58      	ldr	r3, [pc, #352]	@ (8002914 <HAL_UART_MspInit+0x210>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b8:	4b56      	ldr	r3, [pc, #344]	@ (8002914 <HAL_UART_MspInit+0x210>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80027be:	4855      	ldr	r0, [pc, #340]	@ (8002914 <HAL_UART_MspInit+0x210>)
 80027c0:	f000 fa26 	bl	8002c10 <HAL_DMA_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80027ca:	f7ff fc41 	bl	8002050 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a50      	ldr	r2, [pc, #320]	@ (8002914 <HAL_UART_MspInit+0x210>)
 80027d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002914 <HAL_UART_MspInit+0x210>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2106      	movs	r1, #6
 80027de:	2034      	movs	r0, #52	@ 0x34
 80027e0:	f000 f9ec 	bl	8002bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80027e4:	2034      	movs	r0, #52	@ 0x34
 80027e6:	f000 fa05 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027ea:	e089      	b.n	8002900 <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a4a      	ldr	r2, [pc, #296]	@ (800291c <HAL_UART_MspInit+0x218>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d12c      	bne.n	8002850 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	4b44      	ldr	r3, [pc, #272]	@ (800290c <HAL_UART_MspInit+0x208>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	4a43      	ldr	r2, [pc, #268]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002804:	6413      	str	r3, [r2, #64]	@ 0x40
 8002806:	4b41      	ldr	r3, [pc, #260]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a3c      	ldr	r2, [pc, #240]	@ (800290c <HAL_UART_MspInit+0x208>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b3a      	ldr	r3, [pc, #232]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800282e:	230c      	movs	r3, #12
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800283e:	2307      	movs	r3, #7
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002846:	4619      	mov	r1, r3
 8002848:	4831      	ldr	r0, [pc, #196]	@ (8002910 <HAL_UART_MspInit+0x20c>)
 800284a:	f000 fd5d 	bl	8003308 <HAL_GPIO_Init>
}
 800284e:	e057      	b.n	8002900 <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a32      	ldr	r2, [pc, #200]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d152      	bne.n	8002900 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b2b      	ldr	r3, [pc, #172]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	4a2a      	ldr	r2, [pc, #168]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002868:	6413      	str	r3, [r2, #64]	@ 0x40
 800286a:	4b28      	ldr	r3, [pc, #160]	@ (800290c <HAL_UART_MspInit+0x208>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <HAL_UART_MspInit+0x208>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a23      	ldr	r2, [pc, #140]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <HAL_UART_MspInit+0x208>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	4a1c      	ldr	r2, [pc, #112]	@ (800290c <HAL_UART_MspInit+0x208>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a2:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <HAL_UART_MspInit+0x208>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028ae:	2320      	movs	r3, #32
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028be:	2307      	movs	r3, #7
 80028c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c6:	4619      	mov	r1, r3
 80028c8:	4816      	ldr	r0, [pc, #88]	@ (8002924 <HAL_UART_MspInit+0x220>)
 80028ca:	f000 fd1d 	bl	8003308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028e0:	2307      	movs	r3, #7
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e8:	4619      	mov	r1, r3
 80028ea:	480f      	ldr	r0, [pc, #60]	@ (8002928 <HAL_UART_MspInit+0x224>)
 80028ec:	f000 fd0c 	bl	8003308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2106      	movs	r1, #6
 80028f4:	2027      	movs	r0, #39	@ 0x27
 80028f6:	f000 f961 	bl	8002bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028fa:	2027      	movs	r0, #39	@ 0x27
 80028fc:	f000 f97a 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
}
 8002900:	bf00      	nop
 8002902:	3738      	adds	r7, #56	@ 0x38
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40004c00 	.word	0x40004c00
 800290c:	40023800 	.word	0x40023800
 8002910:	40020000 	.word	0x40020000
 8002914:	20000e98 	.word	0x20000e98
 8002918:	40026040 	.word	0x40026040
 800291c:	40004400 	.word	0x40004400
 8002920:	40004800 	.word	0x40004800
 8002924:	40020800 	.word	0x40020800
 8002928:	40020400 	.word	0x40020400

0800292c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002930:	f7ff fe58 	bl	80025e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002934:	480c      	ldr	r0, [pc, #48]	@ (8002968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002936:	490d      	ldr	r1, [pc, #52]	@ (800296c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800293c:	e002      	b.n	8002944 <LoopCopyDataInit>

0800293e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002942:	3304      	adds	r3, #4

08002944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002948:	d3f9      	bcc.n	800293e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800294c:	4c0a      	ldr	r4, [pc, #40]	@ (8002978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002950:	e001      	b.n	8002956 <LoopFillZerobss>

08002952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002954:	3204      	adds	r2, #4

08002956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002958:	d3fb      	bcc.n	8002952 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800295a:	f007 fa25 	bl	8009da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7ff f9f9 	bl	8001d54 <main>
  bx  lr    
 8002962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002970:	0800b210 	.word	0x0800b210
  ldr r2, =_sbss
 8002974:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002978:	20013df4 	.word	0x20013df4

0800297c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>
	...

08002980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002984:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0d      	ldr	r2, [pc, #52]	@ (80029c0 <HAL_Init+0x40>)
 800298a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800298e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002990:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0a      	ldr	r2, [pc, #40]	@ (80029c0 <HAL_Init+0x40>)
 8002996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800299a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800299c:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a07      	ldr	r2, [pc, #28]	@ (80029c0 <HAL_Init+0x40>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f000 f8fc 	bl	8002ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ae:	200f      	movs	r0, #15
 80029b0:	f7ff fcd8 	bl	8002364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b4:	f7ff fcae 	bl	8002314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023c00 	.word	0x40023c00

080029c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_IncTick+0x20>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_IncTick+0x24>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <HAL_IncTick+0x24>)
 80029d6:	6013      	str	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000008 	.word	0x20000008
 80029e8:	20000ef8 	.word	0x20000ef8

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	@ (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000ef8 	.word	0x20000ef8

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff ffee 	bl	80029ec <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d005      	beq.n	8002a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <HAL_Delay+0x44>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a2a:	bf00      	nop
 8002a2c:	f7ff ffde 	bl	80029ec <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d8f7      	bhi.n	8002a2c <HAL_Delay+0x28>
  {
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000008 	.word	0x20000008

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	@ (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	@ (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	@ (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	@ (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	@ 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	@ 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ff4c 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bce:	f7ff ff61 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002bd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	6978      	ldr	r0, [r7, #20]
 8002bda:	f7ff ffb1 	bl	8002b40 <NVIC_EncodePriority>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff80 	bl	8002aec <__NVIC_SetPriority>
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff54 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c1c:	f7ff fee6 	bl	80029ec <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e099      	b.n	8002d60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4c:	e00f      	b.n	8002c6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c4e:	f7ff fecd 	bl	80029ec <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d908      	bls.n	8002c6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2203      	movs	r2, #3
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e078      	b.n	8002d60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e8      	bne.n	8002c4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4b38      	ldr	r3, [pc, #224]	@ (8002d68 <HAL_DMA_Init+0x158>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d107      	bne.n	8002cd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f023 0307 	bic.w	r3, r3, #7
 8002cee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d117      	bne.n	8002d32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fa7b 	bl	8003210 <DMA_CheckFifoParam>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2240      	movs	r2, #64	@ 0x40
 8002d24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e016      	b.n	8002d60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa32 	bl	80031a4 <DMA_CalcBaseAndBitshift>
 8002d40:	4603      	mov	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	223f      	movs	r2, #63	@ 0x3f
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	f010803f 	.word	0xf010803f

08002d6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d7a:	f7ff fe37 	bl	80029ec <HAL_GetTick>
 8002d7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d008      	beq.n	8002d9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e052      	b.n	8002e44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0216 	bic.w	r2, r2, #22
 8002dac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <HAL_DMA_Abort+0x62>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0208 	bic.w	r2, r2, #8
 8002ddc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dee:	e013      	b.n	8002e18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002df0:	f7ff fdfc 	bl	80029ec <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d90c      	bls.n	8002e18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2203      	movs	r2, #3
 8002e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e015      	b.n	8002e44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e4      	bne.n	8002df0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2a:	223f      	movs	r2, #63	@ 0x3f
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d004      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2280      	movs	r2, #128	@ 0x80
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00c      	b.n	8002e84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e9c:	4b8e      	ldr	r3, [pc, #568]	@ (80030d8 <HAL_DMA_IRQHandler+0x248>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a8e      	ldr	r2, [pc, #568]	@ (80030dc <HAL_DMA_IRQHandler+0x24c>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	0a9b      	lsrs	r3, r3, #10
 8002ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	2208      	movs	r2, #8
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01a      	beq.n	8002efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0204 	bic.w	r2, r2, #4
 8002ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	2208      	movs	r2, #8
 8002eea:	409a      	lsls	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f00:	2201      	movs	r2, #1
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d012      	beq.n	8002f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	409a      	lsls	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2a:	f043 0202 	orr.w	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	2204      	movs	r2, #4
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d012      	beq.n	8002f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	2204      	movs	r2, #4
 8002f56:	409a      	lsls	r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d043      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d03c      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d108      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d024      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
 8002fbe:	e01f      	b.n	8003000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01b      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
 8002fd0:	e016      	b.n	8003000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0208 	bic.w	r2, r2, #8
 8002fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003004:	2220      	movs	r2, #32
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 808f 	beq.w	8003130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8087 	beq.w	8003130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	2220      	movs	r2, #32
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b05      	cmp	r3, #5
 8003038:	d136      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0216 	bic.w	r2, r2, #22
 8003048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <HAL_DMA_IRQHandler+0x1da>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0208 	bic.w	r2, r2, #8
 8003078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307e:	223f      	movs	r2, #63	@ 0x3f
 8003080:	409a      	lsls	r2, r3
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309a:	2b00      	cmp	r3, #0
 800309c:	d07e      	beq.n	800319c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
        }
        return;
 80030a6:	e079      	b.n	800319c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01d      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10d      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d031      	beq.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
 80030d4:	e02c      	b.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
 80030d6:	bf00      	nop
 80030d8:	20000000 	.word	0x20000000
 80030dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d023      	beq.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
 80030f0:	e01e      	b.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10f      	bne.n	8003120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0210 	bic.w	r2, r2, #16
 800310e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	2b00      	cmp	r3, #0
 8003136:	d032      	beq.n	800319e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d022      	beq.n	800318a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2205      	movs	r2, #5
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3301      	adds	r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	d307      	bcc.n	8003178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f2      	bne.n	800315c <HAL_DMA_IRQHandler+0x2cc>
 8003176:	e000      	b.n	800317a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
 800319a:	e000      	b.n	800319e <HAL_DMA_IRQHandler+0x30e>
        return;
 800319c:	bf00      	nop
    }
  }
}
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3b10      	subs	r3, #16
 80031b4:	4a14      	ldr	r2, [pc, #80]	@ (8003208 <DMA_CalcBaseAndBitshift+0x64>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031be:	4a13      	ldr	r2, [pc, #76]	@ (800320c <DMA_CalcBaseAndBitshift+0x68>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d909      	bls.n	80031e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	1d1a      	adds	r2, r3, #4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80031e4:	e007      	b.n	80031f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031ee:	f023 0303 	bic.w	r3, r3, #3
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	aaaaaaab 	.word	0xaaaaaaab
 800320c:	0800b1c4 	.word	0x0800b1c4

08003210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11f      	bne.n	800326a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d856      	bhi.n	80032de <DMA_CheckFifoParam+0xce>
 8003230:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <DMA_CheckFifoParam+0x28>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	08003249 	.word	0x08003249
 800323c:	0800325b 	.word	0x0800325b
 8003240:	08003249 	.word	0x08003249
 8003244:	080032df 	.word	0x080032df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d046      	beq.n	80032e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003258:	e043      	b.n	80032e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003262:	d140      	bne.n	80032e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003268:	e03d      	b.n	80032e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003272:	d121      	bne.n	80032b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d837      	bhi.n	80032ea <DMA_CheckFifoParam+0xda>
 800327a:	a201      	add	r2, pc, #4	@ (adr r2, 8003280 <DMA_CheckFifoParam+0x70>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	08003291 	.word	0x08003291
 8003284:	08003297 	.word	0x08003297
 8003288:	08003291 	.word	0x08003291
 800328c:	080032a9 	.word	0x080032a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e030      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d025      	beq.n	80032ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a6:	e022      	b.n	80032ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032b0:	d11f      	bne.n	80032f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032b6:	e01c      	b.n	80032f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d903      	bls.n	80032c6 <DMA_CheckFifoParam+0xb6>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d003      	beq.n	80032cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032c4:	e018      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ca:	e015      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      break;
 80032dc:	e00b      	b.n	80032f6 <DMA_CheckFifoParam+0xe6>
      break;
 80032de:	bf00      	nop
 80032e0:	e00a      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e2:	bf00      	nop
 80032e4:	e008      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
 80032e8:	e006      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ea:	bf00      	nop
 80032ec:	e004      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e002      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032f6:	bf00      	nop
    }
  } 
  
  return status; 
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop

08003308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	@ 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	e165      	b.n	80035f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003324:	2201      	movs	r2, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	429a      	cmp	r2, r3
 800333e:	f040 8154 	bne.w	80035ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d005      	beq.n	800335a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003356:	2b02      	cmp	r3, #2
 8003358:	d130      	bne.n	80033bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003390:	2201      	movs	r2, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 0201 	and.w	r2, r3, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d017      	beq.n	80033f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d123      	bne.n	800344c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	08da      	lsrs	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3208      	adds	r2, #8
 800340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	69b9      	ldr	r1, [r7, #24]
 8003448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0203 	and.w	r2, r3, #3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80ae 	beq.w	80035ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b5d      	ldr	r3, [pc, #372]	@ (8003608 <HAL_GPIO_Init+0x300>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	4a5c      	ldr	r2, [pc, #368]	@ (8003608 <HAL_GPIO_Init+0x300>)
 8003498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800349c:	6453      	str	r3, [r2, #68]	@ 0x44
 800349e:	4b5a      	ldr	r3, [pc, #360]	@ (8003608 <HAL_GPIO_Init+0x300>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034aa:	4a58      	ldr	r2, [pc, #352]	@ (800360c <HAL_GPIO_Init+0x304>)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3302      	adds	r3, #2
 80034b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003610 <HAL_GPIO_Init+0x308>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d025      	beq.n	8003522 <HAL_GPIO_Init+0x21a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003614 <HAL_GPIO_Init+0x30c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01f      	beq.n	800351e <HAL_GPIO_Init+0x216>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003618 <HAL_GPIO_Init+0x310>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d019      	beq.n	800351a <HAL_GPIO_Init+0x212>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4c      	ldr	r2, [pc, #304]	@ (800361c <HAL_GPIO_Init+0x314>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_GPIO_Init+0x20e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003620 <HAL_GPIO_Init+0x318>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00d      	beq.n	8003512 <HAL_GPIO_Init+0x20a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003624 <HAL_GPIO_Init+0x31c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <HAL_GPIO_Init+0x206>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a49      	ldr	r2, [pc, #292]	@ (8003628 <HAL_GPIO_Init+0x320>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_GPIO_Init+0x202>
 8003506:	2306      	movs	r3, #6
 8003508:	e00c      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 800350a:	2307      	movs	r3, #7
 800350c:	e00a      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 800350e:	2305      	movs	r3, #5
 8003510:	e008      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 8003512:	2304      	movs	r3, #4
 8003514:	e006      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 8003516:	2303      	movs	r3, #3
 8003518:	e004      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 800351a:	2302      	movs	r3, #2
 800351c:	e002      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_GPIO_Init+0x21c>
 8003522:	2300      	movs	r3, #0
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f002 0203 	and.w	r2, r2, #3
 800352a:	0092      	lsls	r2, r2, #2
 800352c:	4093      	lsls	r3, r2
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003534:	4935      	ldr	r1, [pc, #212]	@ (800360c <HAL_GPIO_Init+0x304>)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003542:	4b3a      	ldr	r3, [pc, #232]	@ (800362c <HAL_GPIO_Init+0x324>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003566:	4a31      	ldr	r2, [pc, #196]	@ (800362c <HAL_GPIO_Init+0x324>)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800356c:	4b2f      	ldr	r3, [pc, #188]	@ (800362c <HAL_GPIO_Init+0x324>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003590:	4a26      	ldr	r2, [pc, #152]	@ (800362c <HAL_GPIO_Init+0x324>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003596:	4b25      	ldr	r3, [pc, #148]	@ (800362c <HAL_GPIO_Init+0x324>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ba:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <HAL_GPIO_Init+0x324>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c0:	4b1a      	ldr	r3, [pc, #104]	@ (800362c <HAL_GPIO_Init+0x324>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e4:	4a11      	ldr	r2, [pc, #68]	@ (800362c <HAL_GPIO_Init+0x324>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3301      	adds	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	f67f ae96 	bls.w	8003324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	3724      	adds	r7, #36	@ 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	40013800 	.word	0x40013800
 8003610:	40020000 	.word	0x40020000
 8003614:	40020400 	.word	0x40020400
 8003618:	40020800 	.word	0x40020800
 800361c:	40020c00 	.word	0x40020c00
 8003620:	40021000 	.word	0x40021000
 8003624:	40021400 	.word	0x40021400
 8003628:	40021800 	.word	0x40021800
 800362c:	40013c00 	.word	0x40013c00

08003630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
 800363c:	4613      	mov	r3, r2
 800363e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003640:	787b      	ldrb	r3, [r7, #1]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800364c:	e003      	b.n	8003656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	041a      	lsls	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	619a      	str	r2, [r3, #24]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	460b      	mov	r3, r1
 800366c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003674:	887a      	ldrh	r2, [r7, #2]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4013      	ands	r3, r2
 800367a:	041a      	lsls	r2, r3, #16
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	43d9      	mvns	r1, r3
 8003680:	887b      	ldrh	r3, [r7, #2]
 8003682:	400b      	ands	r3, r1
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	619a      	str	r2, [r3, #24]
}
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036a2:	4b08      	ldr	r3, [pc, #32]	@ (80036c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d006      	beq.n	80036bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ae:	4a05      	ldr	r2, [pc, #20]	@ (80036c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fb0c 	bl	8001cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40013c00 	.word	0x40013c00

080036c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <HAL_PWREx_EnableOverDrive+0x90>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	4a1f      	ldr	r2, [pc, #124]	@ (8003758 <HAL_PWREx_EnableOverDrive+0x90>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <HAL_PWREx_EnableOverDrive+0x90>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036ee:	4b1b      	ldr	r3, [pc, #108]	@ (800375c <HAL_PWREx_EnableOverDrive+0x94>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036f4:	f7ff f97a 	bl	80029ec <HAL_GetTick>
 80036f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036fa:	e009      	b.n	8003710 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036fc:	f7ff f976 	bl	80029ec <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800370a:	d901      	bls.n	8003710 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e01f      	b.n	8003750 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003710:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <HAL_PWREx_EnableOverDrive+0x98>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800371c:	d1ee      	bne.n	80036fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800371e:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003724:	f7ff f962 	bl	80029ec <HAL_GetTick>
 8003728:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800372a:	e009      	b.n	8003740 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800372c:	f7ff f95e 	bl	80029ec <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800373a:	d901      	bls.n	8003740 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e007      	b.n	8003750 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003740:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <HAL_PWREx_EnableOverDrive+0x98>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800374c:	d1ee      	bne.n	800372c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40023800 	.word	0x40023800
 800375c:	420e0040 	.word	0x420e0040
 8003760:	40007000 	.word	0x40007000
 8003764:	420e0044 	.word	0x420e0044

08003768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0cc      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800377c:	4b68      	ldr	r3, [pc, #416]	@ (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d90c      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b65      	ldr	r3, [pc, #404]	@ (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b63      	ldr	r3, [pc, #396]	@ (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0b8      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b59      	ldr	r3, [pc, #356]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a58      	ldr	r2, [pc, #352]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d4:	4b53      	ldr	r3, [pc, #332]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a52      	ldr	r2, [pc, #328]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b50      	ldr	r3, [pc, #320]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	494d      	ldr	r1, [pc, #308]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d044      	beq.n	8003888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b47      	ldr	r3, [pc, #284]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d119      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d003      	beq.n	8003826 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003822:	2b03      	cmp	r3, #3
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	4b3f      	ldr	r3, [pc, #252]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e06f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003836:	4b3b      	ldr	r3, [pc, #236]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e067      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003846:	4b37      	ldr	r3, [pc, #220]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4934      	ldr	r1, [pc, #208]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003858:	f7ff f8c8 	bl	80029ec <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	e00a      	b.n	8003876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003860:	f7ff f8c4 	bl	80029ec <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e04f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	4b2b      	ldr	r3, [pc, #172]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 020c 	and.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	429a      	cmp	r2, r3
 8003886:	d1eb      	bne.n	8003860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003888:	4b25      	ldr	r3, [pc, #148]	@ (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d20c      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b22      	ldr	r3, [pc, #136]	@ (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4916      	ldr	r1, [pc, #88]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038da:	4b12      	ldr	r3, [pc, #72]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490e      	ldr	r1, [pc, #56]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ee:	f000 fbb1 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	490a      	ldr	r1, [pc, #40]	@ (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	4a09      	ldr	r2, [pc, #36]	@ (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800390a:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fd28 	bl	8002364 <HAL_InitTick>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023c00 	.word	0x40023c00
 8003924:	40023800 	.word	0x40023800
 8003928:	0800b1ac 	.word	0x0800b1ac
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003938:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <HAL_RCC_GetHCLKFreq+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000000 	.word	0x20000000

0800394c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003950:	f7ff fff0 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	@ (800396c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0a9b      	lsrs	r3, r3, #10
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	@ (8003970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	0800b1bc 	.word	0x0800b1bc

08003974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003978:	f7ff ffdc 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	0b5b      	lsrs	r3, r3, #13
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4903      	ldr	r1, [pc, #12]	@ (8003998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	0800b1bc 	.word	0x0800b1bc

0800399c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	220f      	movs	r2, #15
 80039aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039ac:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0203 	and.w	r2, r3, #3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039b8:	4b0f      	ldr	r3, [pc, #60]	@ (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039de:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <HAL_RCC_GetClockConfig+0x60>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 020f 	and.w	r2, r3, #15
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	601a      	str	r2, [r3, #0]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40023c00 	.word	0x40023c00

08003a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08c      	sub	sp, #48	@ 0x30
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003a38:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a3e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a46:	496c      	ldr	r1, [pc, #432]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003a56:	2301      	movs	r3, #1
 8003a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d010      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003a66:	4b64      	ldr	r3, [pc, #400]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a6c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a74:	4960      	ldr	r1, [pc, #384]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003a84:	2301      	movs	r3, #1
 8003a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d017      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a94:	4b58      	ldr	r3, [pc, #352]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa2:	4955      	ldr	r1, [pc, #340]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d017      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ad0:	4b49      	ldr	r3, [pc, #292]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ade:	4946      	ldr	r1, [pc, #280]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aee:	d101      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003af0:	2301      	movs	r3, #1
 8003af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003afc:	2301      	movs	r3, #1
 8003afe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 808a 	beq.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	4a38      	ldr	r2, [pc, #224]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1e:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b2a:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a33      	ldr	r2, [pc, #204]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b36:	f7fe ff59 	bl	80029ec <HAL_GetTick>
 8003b3a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fe ff55 	bl	80029ec <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e278      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b50:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b5c:	4b26      	ldr	r3, [pc, #152]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b64:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02f      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b74:	6a3a      	ldr	r2, [r7, #32]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d028      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b82:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b84:	4b1e      	ldr	r3, [pc, #120]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b90:	4a19      	ldr	r2, [pc, #100]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b96:	4b18      	ldr	r3, [pc, #96]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d114      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fe ff23 	bl	80029ec <HAL_GetTick>
 8003ba6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fe ff1f 	bl	80029ec <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e240      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ee      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd8:	d114      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003bda:	4b07      	ldr	r3, [pc, #28]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bee:	4902      	ldr	r1, [pc, #8]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
 8003bf4:	e00c      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42470e40 	.word	0x42470e40
 8003c04:	4b4a      	ldr	r3, [pc, #296]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a49      	ldr	r2, [pc, #292]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c0a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c0e:	6093      	str	r3, [r2, #8]
 8003c10:	4b47      	ldr	r3, [pc, #284]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1c:	4944      	ldr	r1, [pc, #272]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c34:	4b3f      	ldr	r3, [pc, #252]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003c36:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c44:	4b3a      	ldr	r3, [pc, #232]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	4937      	ldr	r1, [pc, #220]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c66:	4b32      	ldr	r3, [pc, #200]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c6c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c74:	492e      	ldr	r1, [pc, #184]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d011      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c88:	4b29      	ldr	r3, [pc, #164]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	4926      	ldr	r1, [pc, #152]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ca6:	d101      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cbe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc6:	491a      	ldr	r1, [pc, #104]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d011      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003cda:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce8:	4911      	ldr	r1, [pc, #68]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d005      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d0c:	f040 80ff 	bne.w	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d10:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d16:	f7fe fe69 	bl	80029ec <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d1c:	e00e      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d1e:	f7fe fe65 	bl	80029ec <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d907      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e188      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d30:	40023800 	.word	0x40023800
 8003d34:	424711e0 	.word	0x424711e0
 8003d38:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ea      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d028      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d124      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d70:	4b71      	ldr	r3, [pc, #452]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d82:	4b6d      	ldr	r3, [pc, #436]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d88:	0e1b      	lsrs	r3, r3, #24
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	019b      	lsls	r3, r3, #6
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	3b01      	subs	r3, #1
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	431a      	orrs	r2, r3
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	071b      	lsls	r3, r3, #28
 8003db2:	4961      	ldr	r1, [pc, #388]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d035      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de4:	d130      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003de6:	4b54      	ldr	r3, [pc, #336]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003df8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dfe:	0f1b      	lsrs	r3, r3, #28
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	019b      	lsls	r3, r3, #6
 8003e10:	431a      	orrs	r2, r3
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	3b01      	subs	r3, #1
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	061b      	lsls	r3, r3, #24
 8003e22:	431a      	orrs	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	071b      	lsls	r3, r3, #28
 8003e28:	4943      	ldr	r1, [pc, #268]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e30:	4b41      	ldr	r3, [pc, #260]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e36:	f023 021f 	bic.w	r2, r3, #31
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	493d      	ldr	r1, [pc, #244]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d029      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e5c:	d124      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e5e:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e70:	4b31      	ldr	r3, [pc, #196]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e76:	0f1b      	lsrs	r3, r3, #28
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	019b      	lsls	r3, r3, #6
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	3b01      	subs	r3, #1
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	431a      	orrs	r2, r3
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	071b      	lsls	r3, r3, #28
 8003ea0:	4925      	ldr	r1, [pc, #148]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d016      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	019b      	lsls	r3, r3, #6
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	071b      	lsls	r3, r3, #28
 8003eda:	4917      	ldr	r1, [pc, #92]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ee2:	4b16      	ldr	r3, [pc, #88]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee8:	f7fe fd80 	bl	80029ec <HAL_GetTick>
 8003eec:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef0:	f7fe fd7c 	bl	80029ec <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e09f      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	f040 8095 	bne.w	8004040 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f16:	4b0a      	ldr	r3, [pc, #40]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f1c:	f7fe fd66 	bl	80029ec <HAL_GetTick>
 8003f20:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f22:	e00f      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f24:	f7fe fd62 	bl	80029ec <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d908      	bls.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e085      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	42470068 	.word	0x42470068
 8003f40:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f44:	4b41      	ldr	r3, [pc, #260]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f50:	d0e8      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02b      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d127      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f7a:	4b34      	ldr	r3, [pc, #208]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	431a      	orrs	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	4928      	ldr	r1, [pc, #160]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fb0:	4b26      	ldr	r3, [pc, #152]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fb6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	4922      	ldr	r1, [pc, #136]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01d      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fde:	d118      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe6:	0e1b      	lsrs	r3, r3, #24
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	019b      	lsls	r3, r3, #6
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	3b01      	subs	r3, #1
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	4910      	ldr	r1, [pc, #64]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004012:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004018:	f7fe fce8 	bl	80029ec <HAL_GetTick>
 800401c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004020:	f7fe fce4 	bl	80029ec <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e007      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800403a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800403e:	d1ef      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3730      	adds	r7, #48	@ 0x30
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
 8004050:	42470070 	.word	0x42470070

08004054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004058:	b0ae      	sub	sp, #184	@ 0xb8
 800405a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800407a:	4bcb      	ldr	r3, [pc, #812]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b0c      	cmp	r3, #12
 8004084:	f200 8206 	bhi.w	8004494 <HAL_RCC_GetSysClockFreq+0x440>
 8004088:	a201      	add	r2, pc, #4	@ (adr r2, 8004090 <HAL_RCC_GetSysClockFreq+0x3c>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040c5 	.word	0x080040c5
 8004094:	08004495 	.word	0x08004495
 8004098:	08004495 	.word	0x08004495
 800409c:	08004495 	.word	0x08004495
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	08004495 	.word	0x08004495
 80040a8:	08004495 	.word	0x08004495
 80040ac:	08004495 	.word	0x08004495
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	08004495 	.word	0x08004495
 80040b8:	08004495 	.word	0x08004495
 80040bc:	08004495 	.word	0x08004495
 80040c0:	080042c5 	.word	0x080042c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c4:	4bb9      	ldr	r3, [pc, #740]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x358>)
 80040c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ca:	e1e7      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040cc:	4bb8      	ldr	r3, [pc, #736]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80040ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040d2:	e1e3      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d4:	4bb4      	ldr	r3, [pc, #720]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040e0:	4bb1      	ldr	r3, [pc, #708]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d071      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ec:	4bae      	ldr	r3, [pc, #696]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	099b      	lsrs	r3, r3, #6
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80040fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800410e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004112:	4622      	mov	r2, r4
 8004114:	462b      	mov	r3, r5
 8004116:	f04f 0000 	mov.w	r0, #0
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	0159      	lsls	r1, r3, #5
 8004120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004124:	0150      	lsls	r0, r2, #5
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4621      	mov	r1, r4
 800412c:	1a51      	subs	r1, r2, r1
 800412e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004130:	4629      	mov	r1, r5
 8004132:	eb63 0301 	sbc.w	r3, r3, r1
 8004136:	647b      	str	r3, [r7, #68]	@ 0x44
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004144:	4649      	mov	r1, r9
 8004146:	018b      	lsls	r3, r1, #6
 8004148:	4641      	mov	r1, r8
 800414a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800414e:	4641      	mov	r1, r8
 8004150:	018a      	lsls	r2, r1, #6
 8004152:	4641      	mov	r1, r8
 8004154:	1a51      	subs	r1, r2, r1
 8004156:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004158:	4649      	mov	r1, r9
 800415a:	eb63 0301 	sbc.w	r3, r3, r1
 800415e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800416c:	4649      	mov	r1, r9
 800416e:	00cb      	lsls	r3, r1, #3
 8004170:	4641      	mov	r1, r8
 8004172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004176:	4641      	mov	r1, r8
 8004178:	00ca      	lsls	r2, r1, #3
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	4603      	mov	r3, r0
 8004180:	4622      	mov	r2, r4
 8004182:	189b      	adds	r3, r3, r2
 8004184:	633b      	str	r3, [r7, #48]	@ 0x30
 8004186:	462b      	mov	r3, r5
 8004188:	460a      	mov	r2, r1
 800418a:	eb42 0303 	adc.w	r3, r2, r3
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800419c:	4629      	mov	r1, r5
 800419e:	024b      	lsls	r3, r1, #9
 80041a0:	4621      	mov	r1, r4
 80041a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041a6:	4621      	mov	r1, r4
 80041a8:	024a      	lsls	r2, r1, #9
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80041c0:	f7fc f88e 	bl	80002e0 <__aeabi_uldivmod>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4613      	mov	r3, r2
 80041ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ce:	e067      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d0:	4b75      	ldr	r3, [pc, #468]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80041e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ea:	2300      	movs	r3, #0
 80041ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80041f2:	4622      	mov	r2, r4
 80041f4:	462b      	mov	r3, r5
 80041f6:	f04f 0000 	mov.w	r0, #0
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	0159      	lsls	r1, r3, #5
 8004200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004204:	0150      	lsls	r0, r2, #5
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4621      	mov	r1, r4
 800420c:	1a51      	subs	r1, r2, r1
 800420e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004210:	4629      	mov	r1, r5
 8004212:	eb63 0301 	sbc.w	r3, r3, r1
 8004216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004224:	4649      	mov	r1, r9
 8004226:	018b      	lsls	r3, r1, #6
 8004228:	4641      	mov	r1, r8
 800422a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800422e:	4641      	mov	r1, r8
 8004230:	018a      	lsls	r2, r1, #6
 8004232:	4641      	mov	r1, r8
 8004234:	ebb2 0a01 	subs.w	sl, r2, r1
 8004238:	4649      	mov	r1, r9
 800423a:	eb63 0b01 	sbc.w	fp, r3, r1
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800424a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800424e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004252:	4692      	mov	sl, r2
 8004254:	469b      	mov	fp, r3
 8004256:	4623      	mov	r3, r4
 8004258:	eb1a 0303 	adds.w	r3, sl, r3
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	462b      	mov	r3, r5
 8004260:	eb4b 0303 	adc.w	r3, fp, r3
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004272:	4629      	mov	r1, r5
 8004274:	028b      	lsls	r3, r1, #10
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800427c:	4621      	mov	r1, r4
 800427e:	028a      	lsls	r2, r1, #10
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004288:	2200      	movs	r2, #0
 800428a:	673b      	str	r3, [r7, #112]	@ 0x70
 800428c:	677a      	str	r2, [r7, #116]	@ 0x74
 800428e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004292:	f7fc f825 	bl	80002e0 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4613      	mov	r3, r2
 800429c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042a0:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	3301      	adds	r3, #1
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80042b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80042be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042c2:	e0eb      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c4:	4b38      	ldr	r3, [pc, #224]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d0:	4b35      	ldr	r3, [pc, #212]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d06b      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042dc:	4b32      	ldr	r3, [pc, #200]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	099b      	lsrs	r3, r3, #6
 80042e2:	2200      	movs	r2, #0
 80042e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80042f0:	2300      	movs	r3, #0
 80042f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80042f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80042f8:	4622      	mov	r2, r4
 80042fa:	462b      	mov	r3, r5
 80042fc:	f04f 0000 	mov.w	r0, #0
 8004300:	f04f 0100 	mov.w	r1, #0
 8004304:	0159      	lsls	r1, r3, #5
 8004306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800430a:	0150      	lsls	r0, r2, #5
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4621      	mov	r1, r4
 8004312:	1a51      	subs	r1, r2, r1
 8004314:	61b9      	str	r1, [r7, #24]
 8004316:	4629      	mov	r1, r5
 8004318:	eb63 0301 	sbc.w	r3, r3, r1
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800432a:	4659      	mov	r1, fp
 800432c:	018b      	lsls	r3, r1, #6
 800432e:	4651      	mov	r1, sl
 8004330:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004334:	4651      	mov	r1, sl
 8004336:	018a      	lsls	r2, r1, #6
 8004338:	4651      	mov	r1, sl
 800433a:	ebb2 0801 	subs.w	r8, r2, r1
 800433e:	4659      	mov	r1, fp
 8004340:	eb63 0901 	sbc.w	r9, r3, r1
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004350:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004354:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004358:	4690      	mov	r8, r2
 800435a:	4699      	mov	r9, r3
 800435c:	4623      	mov	r3, r4
 800435e:	eb18 0303 	adds.w	r3, r8, r3
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	462b      	mov	r3, r5
 8004366:	eb49 0303 	adc.w	r3, r9, r3
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004378:	4629      	mov	r1, r5
 800437a:	024b      	lsls	r3, r1, #9
 800437c:	4621      	mov	r1, r4
 800437e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004382:	4621      	mov	r1, r4
 8004384:	024a      	lsls	r2, r1, #9
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800438e:	2200      	movs	r2, #0
 8004390:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004392:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004394:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004398:	f7fb ffa2 	bl	80002e0 <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4613      	mov	r3, r2
 80043a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043a6:	e065      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x420>
 80043a8:	40023800 	.word	0x40023800
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b4:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x458>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	099b      	lsrs	r3, r3, #6
 80043ba:	2200      	movs	r2, #0
 80043bc:	4618      	mov	r0, r3
 80043be:	4611      	mov	r1, r2
 80043c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80043c6:	2300      	movs	r3, #0
 80043c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80043ce:	4642      	mov	r2, r8
 80043d0:	464b      	mov	r3, r9
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	0159      	lsls	r1, r3, #5
 80043dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e0:	0150      	lsls	r0, r2, #5
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4641      	mov	r1, r8
 80043e8:	1a51      	subs	r1, r2, r1
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	4649      	mov	r1, r9
 80043ee:	eb63 0301 	sbc.w	r3, r3, r1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004400:	4659      	mov	r1, fp
 8004402:	018b      	lsls	r3, r1, #6
 8004404:	4651      	mov	r1, sl
 8004406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800440a:	4651      	mov	r1, sl
 800440c:	018a      	lsls	r2, r1, #6
 800440e:	4651      	mov	r1, sl
 8004410:	1a54      	subs	r4, r2, r1
 8004412:	4659      	mov	r1, fp
 8004414:	eb63 0501 	sbc.w	r5, r3, r1
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	00eb      	lsls	r3, r5, #3
 8004422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004426:	00e2      	lsls	r2, r4, #3
 8004428:	4614      	mov	r4, r2
 800442a:	461d      	mov	r5, r3
 800442c:	4643      	mov	r3, r8
 800442e:	18e3      	adds	r3, r4, r3
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	464b      	mov	r3, r9
 8004434:	eb45 0303 	adc.w	r3, r5, r3
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004446:	4629      	mov	r1, r5
 8004448:	028b      	lsls	r3, r1, #10
 800444a:	4621      	mov	r1, r4
 800444c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004450:	4621      	mov	r1, r4
 8004452:	028a      	lsls	r2, r1, #10
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800445c:	2200      	movs	r2, #0
 800445e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004460:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004462:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004466:	f7fb ff3b 	bl	80002e0 <__aeabi_uldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4613      	mov	r3, r2
 8004470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004474:	4b0d      	ldr	r3, [pc, #52]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x458>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	0f1b      	lsrs	r3, r3, #28
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004492:	e003      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004494:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004496:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800449a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800449c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	37b8      	adds	r7, #184	@ 0xb8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	00f42400 	.word	0x00f42400

080044b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e28d      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8083 	beq.w	80045da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044d4:	4b94      	ldr	r3, [pc, #592]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d019      	beq.n	8004514 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80044e0:	4b91      	ldr	r3, [pc, #580]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d106      	bne.n	80044fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80044ec:	4b8e      	ldr	r3, [pc, #568]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f8:	d00c      	beq.n	8004514 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d112      	bne.n	800452c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004506:	4b88      	ldr	r3, [pc, #544]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004512:	d10b      	bne.n	800452c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	4b84      	ldr	r3, [pc, #528]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d05b      	beq.n	80045d8 <HAL_RCC_OscConfig+0x124>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d157      	bne.n	80045d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e25a      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004534:	d106      	bne.n	8004544 <HAL_RCC_OscConfig+0x90>
 8004536:	4b7c      	ldr	r3, [pc, #496]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7b      	ldr	r2, [pc, #492]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e01d      	b.n	8004580 <HAL_RCC_OscConfig+0xcc>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800454c:	d10c      	bne.n	8004568 <HAL_RCC_OscConfig+0xb4>
 800454e:	4b76      	ldr	r3, [pc, #472]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a75      	ldr	r2, [pc, #468]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b73      	ldr	r3, [pc, #460]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a72      	ldr	r2, [pc, #456]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e00b      	b.n	8004580 <HAL_RCC_OscConfig+0xcc>
 8004568:	4b6f      	ldr	r3, [pc, #444]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a6e      	ldr	r2, [pc, #440]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 800456e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4b6c      	ldr	r3, [pc, #432]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6b      	ldr	r2, [pc, #428]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 800457a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800457e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d013      	beq.n	80045b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fe fa30 	bl	80029ec <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004590:	f7fe fa2c 	bl	80029ec <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	@ 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e21f      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b61      	ldr	r3, [pc, #388]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0xdc>
 80045ae:	e014      	b.n	80045da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fe fa1c 	bl	80029ec <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fe fa18 	bl	80029ec <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	@ 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e20b      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ca:	4b57      	ldr	r3, [pc, #348]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x104>
 80045d6:	e000      	b.n	80045da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d06f      	beq.n	80046c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045e6:	4b50      	ldr	r3, [pc, #320]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d017      	beq.n	8004622 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80045f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80045fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460a:	4b47      	ldr	r3, [pc, #284]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d11c      	bne.n	8004650 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004616:	4b44      	ldr	r3, [pc, #272]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d116      	bne.n	8004650 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004622:	4b41      	ldr	r3, [pc, #260]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_RCC_OscConfig+0x186>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e1d3      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463a:	4b3b      	ldr	r3, [pc, #236]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4937      	ldr	r1, [pc, #220]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	e03a      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004658:	4b34      	ldr	r3, [pc, #208]	@ (800472c <HAL_RCC_OscConfig+0x278>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fe f9c5 	bl	80029ec <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004666:	f7fe f9c1 	bl	80029ec <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e1b4      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004678:	4b2b      	ldr	r3, [pc, #172]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b28      	ldr	r3, [pc, #160]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4925      	ldr	r1, [pc, #148]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
 8004698:	e015      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469a:	4b24      	ldr	r3, [pc, #144]	@ (800472c <HAL_RCC_OscConfig+0x278>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe f9a4 	bl	80029ec <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a8:	f7fe f9a0 	bl	80029ec <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e193      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d036      	beq.n	8004740 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046da:	4b15      	ldr	r3, [pc, #84]	@ (8004730 <HAL_RCC_OscConfig+0x27c>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fe f984 	bl	80029ec <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e8:	f7fe f980 	bl	80029ec <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e173      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <HAL_RCC_OscConfig+0x274>)
 80046fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x234>
 8004706:	e01b      	b.n	8004740 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004708:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <HAL_RCC_OscConfig+0x27c>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470e:	f7fe f96d 	bl	80029ec <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	e00e      	b.n	8004734 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004716:	f7fe f969 	bl	80029ec <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d907      	bls.n	8004734 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e15c      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
 8004728:	40023800 	.word	0x40023800
 800472c:	42470000 	.word	0x42470000
 8004730:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004734:	4b8a      	ldr	r3, [pc, #552]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1ea      	bne.n	8004716 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8097 	beq.w	800487c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004752:	4b83      	ldr	r3, [pc, #524]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	4b7f      	ldr	r3, [pc, #508]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	4a7e      	ldr	r2, [pc, #504]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476c:	6413      	str	r3, [r2, #64]	@ 0x40
 800476e:	4b7c      	ldr	r3, [pc, #496]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477a:	2301      	movs	r3, #1
 800477c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	4b79      	ldr	r3, [pc, #484]	@ (8004964 <HAL_RCC_OscConfig+0x4b0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d118      	bne.n	80047bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478a:	4b76      	ldr	r3, [pc, #472]	@ (8004964 <HAL_RCC_OscConfig+0x4b0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a75      	ldr	r2, [pc, #468]	@ (8004964 <HAL_RCC_OscConfig+0x4b0>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004796:	f7fe f929 	bl	80029ec <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479e:	f7fe f925 	bl	80029ec <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e118      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004964 <HAL_RCC_OscConfig+0x4b0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d106      	bne.n	80047d2 <HAL_RCC_OscConfig+0x31e>
 80047c4:	4b66      	ldr	r3, [pc, #408]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c8:	4a65      	ldr	r2, [pc, #404]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d0:	e01c      	b.n	800480c <HAL_RCC_OscConfig+0x358>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b05      	cmp	r3, #5
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x340>
 80047da:	4b61      	ldr	r3, [pc, #388]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047de:	4a60      	ldr	r2, [pc, #384]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f2:	e00b      	b.n	800480c <HAL_RCC_OscConfig+0x358>
 80047f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f8:	4a59      	ldr	r2, [pc, #356]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004800:	4b57      	ldr	r3, [pc, #348]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004804:	4a56      	ldr	r2, [pc, #344]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004806:	f023 0304 	bic.w	r3, r3, #4
 800480a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d015      	beq.n	8004840 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fe f8ea 	bl	80029ec <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481a:	e00a      	b.n	8004832 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fe f8e6 	bl	80029ec <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e0d7      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004832:	4b4b      	ldr	r3, [pc, #300]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0ee      	beq.n	800481c <HAL_RCC_OscConfig+0x368>
 800483e:	e014      	b.n	800486a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fe f8d4 	bl	80029ec <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fe f8d0 	bl	80029ec <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0c1      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485e:	4b40      	ldr	r3, [pc, #256]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1ee      	bne.n	8004848 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d105      	bne.n	800487c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004870:	4b3b      	ldr	r3, [pc, #236]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	4a3a      	ldr	r2, [pc, #232]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800487a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80ad 	beq.w	80049e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004886:	4b36      	ldr	r3, [pc, #216]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b08      	cmp	r3, #8
 8004890:	d060      	beq.n	8004954 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d145      	bne.n	8004926 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b33      	ldr	r3, [pc, #204]	@ (8004968 <HAL_RCC_OscConfig+0x4b4>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe f8a4 	bl	80029ec <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fe f8a0 	bl	80029ec <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e093      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	4b29      	ldr	r3, [pc, #164]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d4:	019b      	lsls	r3, r3, #6
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	3b01      	subs	r3, #1
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	071b      	lsls	r3, r3, #28
 80048f2:	491b      	ldr	r1, [pc, #108]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x4b4>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fe f875 	bl	80029ec <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004906:	f7fe f871 	bl	80029ec <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e064      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004918:	4b11      	ldr	r3, [pc, #68]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x452>
 8004924:	e05c      	b.n	80049e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004926:	4b10      	ldr	r3, [pc, #64]	@ (8004968 <HAL_RCC_OscConfig+0x4b4>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fe f85e 	bl	80029ec <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fe f85a 	bl	80029ec <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e04d      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x480>
 8004952:	e045      	b.n	80049e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d107      	bne.n	800496c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e040      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
 8004960:	40023800 	.word	0x40023800
 8004964:	40007000 	.word	0x40007000
 8004968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800496c:	4b1f      	ldr	r3, [pc, #124]	@ (80049ec <HAL_RCC_OscConfig+0x538>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d030      	beq.n	80049dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d129      	bne.n	80049dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d122      	bne.n	80049dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800499c:	4013      	ands	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d119      	bne.n	80049dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	3b01      	subs	r3, #1
 80049b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d10f      	bne.n	80049dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800

080049f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e073      	b.n	8004aee <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7f5b      	ldrb	r3, [r3, #29]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d105      	bne.n	8004a1c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd fbac 	bl	8002174 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d055      	beq.n	8004adc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	22ca      	movs	r2, #202	@ 0xca
 8004a36:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2253      	movs	r2, #83	@ 0x53
 8004a3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fbd3 	bl	80051ec <RTC_EnterInitMode>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d12c      	bne.n	8004aaa <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a62:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6899      	ldr	r1, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68d2      	ldr	r2, [r2, #12]
 8004a8a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6919      	ldr	r1, [r3, #16]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	041a      	lsls	r2, r3, #16
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fbda 	bl	800525a <RTC_ExitInitMode>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d110      	bne.n	8004ad2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004abe:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	22ff      	movs	r2, #255	@ 0xff
 8004ad8:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ada:	e001      	b.n	8004ae0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004af6:	b590      	push	{r4, r7, lr}
 8004af8:	b087      	sub	sp, #28
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	7f1b      	ldrb	r3, [r3, #28]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_RTC_SetTime+0x1c>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e087      	b.n	8004c22 <HAL_RTC_SetTime+0x12c>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d126      	bne.n	8004b72 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2200      	movs	r2, #0
 8004b36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fbb1 	bl	80052a4 <RTC_ByteToBcd2>
 8004b42:	4603      	mov	r3, r0
 8004b44:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fbaa 	bl	80052a4 <RTC_ByteToBcd2>
 8004b50:	4603      	mov	r3, r0
 8004b52:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b54:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	789b      	ldrb	r3, [r3, #2]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fba2 	bl	80052a4 <RTC_ByteToBcd2>
 8004b60:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b62:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	78db      	ldrb	r3, [r3, #3]
 8004b6a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e018      	b.n	8004ba4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2200      	movs	r2, #0
 8004b84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b92:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004b98:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	78db      	ldrb	r3, [r3, #3]
 8004b9e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	22ca      	movs	r2, #202	@ 0xca
 8004baa:	625a      	str	r2, [r3, #36]	@ 0x24
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2253      	movs	r2, #83	@ 0x53
 8004bb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fb19 	bl	80051ec <RTC_EnterInitMode>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004bbe:	7cfb      	ldrb	r3, [r7, #19]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d120      	bne.n	8004c06 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004bce:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004bd2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004be2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6899      	ldr	r1, [r3, #8]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fb2c 	bl	800525a <RTC_ExitInitMode>
 8004c02:	4603      	mov	r3, r0
 8004c04:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	22ff      	movs	r2, #255	@ 0xff
 8004c18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]

  return status;
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd90      	pop	{r4, r7, pc}

08004c2a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004c5c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004c60:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	0a1b      	lsrs	r3, r3, #8
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	0d9b      	lsrs	r3, r3, #22
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d11a      	bne.n	8004cdc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fb18 	bl	80052e0 <RTC_Bcd2ToByte>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fb0f 	bl	80052e0 <RTC_Bcd2ToByte>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	789b      	ldrb	r3, [r3, #2]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fb06 	bl	80052e0 <RTC_Bcd2ToByte>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ce6:	b590      	push	{r4, r7, lr}
 8004ce8:	b087      	sub	sp, #28
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	7f1b      	ldrb	r3, [r3, #28]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_RTC_SetDate+0x1c>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e071      	b.n	8004de6 <HAL_RTC_SetDate+0x100>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10e      	bne.n	8004d32 <HAL_RTC_SetDate+0x4c>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	f023 0310 	bic.w	r3, r3, #16
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	330a      	adds	r3, #10
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11c      	bne.n	8004d72 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	78db      	ldrb	r3, [r3, #3]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fab1 	bl	80052a4 <RTC_ByteToBcd2>
 8004d42:	4603      	mov	r3, r0
 8004d44:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 faaa 	bl	80052a4 <RTC_ByteToBcd2>
 8004d50:	4603      	mov	r3, r0
 8004d52:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004d54:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	789b      	ldrb	r3, [r3, #2]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 faa2 	bl	80052a4 <RTC_ByteToBcd2>
 8004d60:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004d62:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e00e      	b.n	8004d90 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	78db      	ldrb	r3, [r3, #3]
 8004d76:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004d7e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004d84:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	22ca      	movs	r2, #202	@ 0xca
 8004d96:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2253      	movs	r2, #83	@ 0x53
 8004d9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fa23 	bl	80051ec <RTC_EnterInitMode>
 8004da6:	4603      	mov	r3, r0
 8004da8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10c      	bne.n	8004dca <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004dba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004dbe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fa4a 	bl	800525a <RTC_ExitInitMode>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004dca:	7cfb      	ldrb	r3, [r7, #19]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	22ff      	movs	r2, #255	@ 0xff
 8004ddc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]

  return status;
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd90      	pop	{r4, r7, pc}

08004dee <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e08:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	0b5b      	lsrs	r3, r3, #13
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d11a      	bne.n	8004e82 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	78db      	ldrb	r3, [r3, #3]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fa45 	bl	80052e0 <RTC_Bcd2ToByte>
 8004e56:	4603      	mov	r3, r0
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fa3c 	bl	80052e0 <RTC_Bcd2ToByte>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	789b      	ldrb	r3, [r3, #2]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fa33 	bl	80052e0 <RTC_Bcd2ToByte>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b089      	sub	sp, #36	@ 0x24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004e98:	4b9b      	ldr	r3, [pc, #620]	@ (8005108 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a9b      	ldr	r2, [pc, #620]	@ (800510c <HAL_RTC_SetAlarm_IT+0x280>)
 8004e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea2:	0adb      	lsrs	r3, r3, #11
 8004ea4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	7f1b      	ldrb	r3, [r3, #28]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RTC_SetAlarm_IT+0x36>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e11e      	b.n	8005100 <HAL_RTC_SetAlarm_IT+0x274>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d137      	bne.n	8004f44 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f9d9 	bl	80052a4 <RTC_ByteToBcd2>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f9d2 	bl	80052a4 <RTC_ByteToBcd2>
 8004f00:	4603      	mov	r3, r0
 8004f02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004f04:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	789b      	ldrb	r3, [r3, #2]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f9ca 	bl	80052a4 <RTC_ByteToBcd2>
 8004f10:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f12:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	78db      	ldrb	r3, [r3, #3]
 8004f1a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004f1c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f9bc 	bl	80052a4 <RTC_ByteToBcd2>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004f30:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004f38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	e023      	b.n	8004f8c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2200      	movs	r2, #0
 8004f56:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004f64:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004f6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	78db      	ldrb	r3, [r3, #3]
 8004f70:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004f72:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004f7c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004f82:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	22ca      	movs	r2, #202	@ 0xca
 8004f9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2253      	movs	r2, #83	@ 0x53
 8004fa6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb0:	d142      	bne.n	8005038 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fc0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004fd2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	22ff      	movs	r2, #255	@ 0xff
 8004fe6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2203      	movs	r2, #3
 8004fec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e083      	b.n	8005100 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0e6      	beq.n	8004fd4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005024:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	e04c      	b.n	80050d2 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005046:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005058:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800505a:	4b2b      	ldr	r3, [pc, #172]	@ (8005108 <HAL_RTC_SetAlarm_IT+0x27c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2b      	ldr	r2, [pc, #172]	@ (800510c <HAL_RTC_SetAlarm_IT+0x280>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	0adb      	lsrs	r3, r3, #11
 8005066:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3b01      	subs	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	22ff      	movs	r2, #255	@ 0xff
 8005082:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2203      	movs	r2, #3
 8005088:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e035      	b.n	8005100 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0e6      	beq.n	8005070 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050c0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050d0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80050d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005110 <HAL_RTC_SetAlarm_IT+0x284>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005110 <HAL_RTC_SetAlarm_IT+0x284>)
 80050d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050dc:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80050de:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <HAL_RTC_SetAlarm_IT+0x284>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005110 <HAL_RTC_SetAlarm_IT+0x284>)
 80050e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	22ff      	movs	r2, #255	@ 0xff
 80050f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3724      	adds	r7, #36	@ 0x24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd90      	pop	{r4, r7, pc}
 8005108:	20000000 	.word	0x20000000
 800510c:	10624dd3 	.word	0x10624dd3
 8005110:	40013c00 	.word	0x40013c00

08005114 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800511c:	4b1f      	ldr	r3, [pc, #124]	@ (800519c <HAL_RTC_AlarmIRQHandler+0x88>)
 800511e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005122:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d012      	beq.n	8005158 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00b      	beq.n	8005158 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005150:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fc ff5a 	bl	800200c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d012      	beq.n	800518c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005184:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8fa 	bl	8005380 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	775a      	strb	r2, [r3, #29]
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40013c00 	.word	0x40013c00

080051a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0d      	ldr	r2, [pc, #52]	@ (80051e8 <HAL_RTC_WaitForSynchro+0x48>)
 80051b2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051b4:	f7fd fc1a 	bl	80029ec <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051ba:	e009      	b.n	80051d0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051bc:	f7fd fc16 	bl	80029ec <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051ca:	d901      	bls.n	80051d0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e007      	b.n	80051e0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ee      	beq.n	80051bc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	00017f5f 	.word	0x00017f5f

080051ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d122      	bne.n	8005250 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005218:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800521a:	f7fd fbe7 	bl	80029ec <HAL_GetTick>
 800521e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005220:	e00c      	b.n	800523c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005222:	f7fd fbe3 	bl	80029ec <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005230:	d904      	bls.n	800523c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2204      	movs	r2, #4
 8005236:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <RTC_EnterInitMode+0x64>
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d1e8      	bne.n	8005222 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005274:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff ff8b 	bl	80051a0 <HAL_RTC_WaitForSynchro>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2204      	movs	r2, #4
 8005294:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80052b2:	e005      	b.n	80052c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3301      	adds	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	3b0a      	subs	r3, #10
 80052be:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	2b09      	cmp	r3, #9
 80052c4:	d8f6      	bhi.n	80052b4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	b2db      	uxtb	r3, r3
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	b2db      	uxtb	r3, r3
 800530c:	4413      	add	r3, r2
 800530e:	b2db      	uxtb	r3, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3350      	adds	r3, #80	@ 0x50
 8005332:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4413      	add	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3350      	adds	r3, #80	@ 0x50
 8005364:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e07b      	b.n	800549e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d108      	bne.n	80053c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053b6:	d009      	beq.n	80053cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	61da      	str	r2, [r3, #28]
 80053be:	e005      	b.n	80053cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fc ff2c 	bl	8002244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005450:	ea42 0103 	orr.w	r1, r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005458:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	0c1b      	lsrs	r3, r3, #16
 800546a:	f003 0104 	and.w	r1, r3, #4
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	f003 0210 	and.w	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800548c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e041      	b.n	800553c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f839 	bl	8005544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f000 f9bf 	bl	8005868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	d001      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e04e      	b.n	800560e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a23      	ldr	r2, [pc, #140]	@ (800561c <HAL_TIM_Base_Start_IT+0xc4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d022      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x80>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559a:	d01d      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x80>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005620 <HAL_TIM_Base_Start_IT+0xc8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d018      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x80>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005624 <HAL_TIM_Base_Start_IT+0xcc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d013      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x80>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005628 <HAL_TIM_Base_Start_IT+0xd0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00e      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x80>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1b      	ldr	r2, [pc, #108]	@ (800562c <HAL_TIM_Base_Start_IT+0xd4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d009      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x80>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a19      	ldr	r2, [pc, #100]	@ (8005630 <HAL_TIM_Base_Start_IT+0xd8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x80>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a18      	ldr	r2, [pc, #96]	@ (8005634 <HAL_TIM_Base_Start_IT+0xdc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d111      	bne.n	80055fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d010      	beq.n	800560c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0201 	orr.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	e007      	b.n	800560c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40010400 	.word	0x40010400
 8005630:	40014000 	.word	0x40014000
 8005634:	40001800 	.word	0x40001800

08005638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d020      	beq.n	800569c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01b      	beq.n	800569c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0202 	mvn.w	r2, #2
 800566c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8d2 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8c4 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f8d5 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d020      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01b      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0204 	mvn.w	r2, #4
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8ac 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f89e 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f8af 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d020      	beq.n	8005734 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01b      	beq.n	8005734 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0208 	mvn.w	r2, #8
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2204      	movs	r2, #4
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f886 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f878 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f889 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b00      	cmp	r3, #0
 800573c:	d020      	beq.n	8005780 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01b      	beq.n	8005780 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0210 	mvn.w	r2, #16
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2208      	movs	r2, #8
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f860 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f852 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f863 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d007      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0201 	mvn.w	r2, #1
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fc fc44 	bl	800202c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00c      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f906 	bl	80059d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f834 	bl	8005854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0220 	mvn.w	r2, #32
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8d8 	bl	80059c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a46      	ldr	r2, [pc, #280]	@ (8005994 <TIM_Base_SetConfig+0x12c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005886:	d00f      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a43      	ldr	r2, [pc, #268]	@ (8005998 <TIM_Base_SetConfig+0x130>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00b      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a42      	ldr	r2, [pc, #264]	@ (800599c <TIM_Base_SetConfig+0x134>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a41      	ldr	r2, [pc, #260]	@ (80059a0 <TIM_Base_SetConfig+0x138>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a40      	ldr	r2, [pc, #256]	@ (80059a4 <TIM_Base_SetConfig+0x13c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d108      	bne.n	80058ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a35      	ldr	r2, [pc, #212]	@ (8005994 <TIM_Base_SetConfig+0x12c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d02b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c8:	d027      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a32      	ldr	r2, [pc, #200]	@ (8005998 <TIM_Base_SetConfig+0x130>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d023      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a31      	ldr	r2, [pc, #196]	@ (800599c <TIM_Base_SetConfig+0x134>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01f      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a30      	ldr	r2, [pc, #192]	@ (80059a0 <TIM_Base_SetConfig+0x138>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2f      	ldr	r2, [pc, #188]	@ (80059a4 <TIM_Base_SetConfig+0x13c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d017      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2e      	ldr	r2, [pc, #184]	@ (80059a8 <TIM_Base_SetConfig+0x140>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2d      	ldr	r2, [pc, #180]	@ (80059ac <TIM_Base_SetConfig+0x144>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00f      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2c      	ldr	r2, [pc, #176]	@ (80059b0 <TIM_Base_SetConfig+0x148>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2b      	ldr	r2, [pc, #172]	@ (80059b4 <TIM_Base_SetConfig+0x14c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2a      	ldr	r2, [pc, #168]	@ (80059b8 <TIM_Base_SetConfig+0x150>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a29      	ldr	r2, [pc, #164]	@ (80059bc <TIM_Base_SetConfig+0x154>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d108      	bne.n	800592c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a10      	ldr	r2, [pc, #64]	@ (8005994 <TIM_Base_SetConfig+0x12c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0xf8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a12      	ldr	r2, [pc, #72]	@ (80059a4 <TIM_Base_SetConfig+0x13c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d103      	bne.n	8005968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d105      	bne.n	8005986 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f023 0201 	bic.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]
  }
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40010000 	.word	0x40010000
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40010400 	.word	0x40010400
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800
 80059b4:	40001800 	.word	0x40001800
 80059b8:	40001c00 	.word	0x40001c00
 80059bc:	40002000 	.word	0x40002000

080059c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e042      	b.n	8005a80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc fe78 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2224      	movs	r2, #36	@ 0x24
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fdf3 	bl	8006618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	@ 0x28
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d175      	bne.n	8005b94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_UART_Transmit+0x2c>
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e06e      	b.n	8005b96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2221      	movs	r2, #33	@ 0x21
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ac6:	f7fc ff91 	bl	80029ec <HAL_GetTick>
 8005aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae0:	d108      	bne.n	8005af4 <HAL_UART_Transmit+0x6c>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e003      	b.n	8005afc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005afc:	e02e      	b.n	8005b5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	2180      	movs	r1, #128	@ 0x80
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fb55 	bl	80061b8 <UART_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e03a      	b.n	8005b96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	3302      	adds	r3, #2
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	e007      	b.n	8005b4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1cb      	bne.n	8005afe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2140      	movs	r1, #64	@ 0x40
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 fb21 	bl	80061b8 <UART_WaitOnFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e006      	b.n	8005b96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e000      	b.n	8005b96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b94:	2302      	movs	r3, #2
  }
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d121      	bne.n	8005bfc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_UART_Transmit_IT+0x26>
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e01a      	b.n	8005bfe <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	88fa      	ldrh	r2, [r7, #6]
 8005bd2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2221      	movs	r2, #33	@ 0x21
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bf6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e000      	b.n	8005bfe <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
  }
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	4613      	mov	r3, r2
 8005c16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d112      	bne.n	8005c4a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_UART_Receive_IT+0x26>
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e00b      	b.n	8005c4c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fb12 	bl	800626a <UART_Start_Receive_IT>
 8005c46:	4603      	mov	r3, r0
 8005c48:	e000      	b.n	8005c4c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005c4a:	2302      	movs	r3, #2
  }
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b0ba      	sub	sp, #232	@ 0xe8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10f      	bne.n	8005cba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <HAL_UART_IRQHandler+0x66>
 8005ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fbf2 	bl	800649c <UART_Receive_IT>
      return;
 8005cb8:	e25b      	b.n	8006172 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80de 	beq.w	8005e80 <HAL_UART_IRQHandler+0x22c>
 8005cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80d1 	beq.w	8005e80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <HAL_UART_IRQHandler+0xae>
 8005cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d005      	beq.n	8005d02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <HAL_UART_IRQHandler+0xd2>
 8005d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	f043 0202 	orr.w	r2, r3, #2
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_UART_IRQHandler+0xf6>
 8005d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d42:	f043 0204 	orr.w	r2, r3, #4
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d011      	beq.n	8005d7a <HAL_UART_IRQHandler+0x126>
 8005d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d105      	bne.n	8005d6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d005      	beq.n	8005d7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d72:	f043 0208 	orr.w	r2, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 81f2 	beq.w	8006168 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_UART_IRQHandler+0x14e>
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fb7d 	bl	800649c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b40      	cmp	r3, #64	@ 0x40
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d103      	bne.n	8005dce <HAL_UART_IRQHandler+0x17a>
 8005dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d04f      	beq.n	8005e6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa85 	bl	80062de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dde:	2b40      	cmp	r3, #64	@ 0x40
 8005de0:	d141      	bne.n	8005e66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3314      	adds	r3, #20
 8005de8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3314      	adds	r3, #20
 8005e0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1d9      	bne.n	8005de2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d013      	beq.n	8005e5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006034 <HAL_UART_IRQHandler+0x3e0>)
 8005e3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fd f802 	bl	8002e4c <HAL_DMA_Abort_IT>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d016      	beq.n	8005e7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5c:	e00e      	b.n	8005e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f994 	bl	800618c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	e00a      	b.n	8005e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f990 	bl	800618c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	e006      	b.n	8005e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f98c 	bl	800618c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005e7a:	e175      	b.n	8006168 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	bf00      	nop
    return;
 8005e7e:	e173      	b.n	8006168 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	f040 814f 	bne.w	8006128 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8148 	beq.w	8006128 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8141 	beq.w	8006128 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	f040 80b6 	bne.w	8006038 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ed8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8145 	beq.w	800616c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eea:	429a      	cmp	r2, r3
 8005eec:	f080 813e 	bcs.w	800616c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ef6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f02:	f000 8088 	beq.w	8006016 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005f32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1d9      	bne.n	8005f06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3314      	adds	r3, #20
 8005f58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3314      	adds	r3, #20
 8005f72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e1      	bne.n	8005f52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3314      	adds	r3, #20
 8005fae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e3      	bne.n	8005f8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	330c      	adds	r3, #12
 8005fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fe6:	f023 0310 	bic.w	r3, r3, #16
 8005fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ff8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ffa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ffe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e3      	bne.n	8005fd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006010:	4618      	mov	r0, r3
 8006012:	f7fc feab 	bl	8002d6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006024:	b29b      	uxth	r3, r3
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	b29b      	uxth	r3, r3
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8b7 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006032:	e09b      	b.n	800616c <HAL_UART_IRQHandler+0x518>
 8006034:	080063a5 	.word	0x080063a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006040:	b29b      	uxth	r3, r3
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 808e 	beq.w	8006170 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8089 	beq.w	8006170 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800606e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006074:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006082:	647a      	str	r2, [r7, #68]	@ 0x44
 8006084:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e3      	bne.n	800605e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3314      	adds	r3, #20
 800609c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	623b      	str	r3, [r7, #32]
   return(result);
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3314      	adds	r3, #20
 80060b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80060bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e3      	bne.n	8006096 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	330c      	adds	r3, #12
 80060e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0310 	bic.w	r3, r3, #16
 80060f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006100:	61fa      	str	r2, [r7, #28]
 8006102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	69b9      	ldr	r1, [r7, #24]
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	617b      	str	r3, [r7, #20]
   return(result);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e3      	bne.n	80060dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800611a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f83d 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006126:	e023      	b.n	8006170 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800612c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <HAL_UART_IRQHandler+0x4f4>
 8006134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f943 	bl	80063cc <UART_Transmit_IT>
    return;
 8006146:	e014      	b.n	8006172 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <HAL_UART_IRQHandler+0x51e>
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f983 	bl	800646c <UART_EndTransmit_IT>
    return;
 8006166:	e004      	b.n	8006172 <HAL_UART_IRQHandler+0x51e>
    return;
 8006168:	bf00      	nop
 800616a:	e002      	b.n	8006172 <HAL_UART_IRQHandler+0x51e>
      return;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <HAL_UART_IRQHandler+0x51e>
      return;
 8006170:	bf00      	nop
  }
}
 8006172:	37e8      	adds	r7, #232	@ 0xe8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c8:	e03b      	b.n	8006242 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d037      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d2:	f7fc fc0b 	bl	80029ec <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	6a3a      	ldr	r2, [r7, #32]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d302      	bcc.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e03a      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d023      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0x8a>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b80      	cmp	r3, #128	@ 0x80
 80061fe:	d020      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b40      	cmp	r3, #64	@ 0x40
 8006204:	d01d      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b08      	cmp	r3, #8
 8006212:	d116      	bne.n	8006242 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f857 	bl	80062de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2208      	movs	r2, #8
 8006234:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e00f      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4013      	ands	r3, r2
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	bf0c      	ite	eq
 8006252:	2301      	moveq	r3, #1
 8006254:	2300      	movne	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	429a      	cmp	r2, r3
 800625e:	d0b4      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	4613      	mov	r3, r2
 8006276:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2222      	movs	r2, #34	@ 0x22
 8006294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062ae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0220 	orr.w	r2, r2, #32
 80062ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062de:	b480      	push	{r7}
 80062e0:	b095      	sub	sp, #84	@ 0x54
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	330c      	adds	r3, #12
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	330c      	adds	r3, #12
 8006304:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006306:	643a      	str	r2, [r7, #64]	@ 0x40
 8006308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800630c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e5      	bne.n	80062e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3314      	adds	r3, #20
 8006320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	61fb      	str	r3, [r7, #28]
   return(result);
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3314      	adds	r3, #20
 8006338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800633a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800633c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e5      	bne.n	800631a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006352:	2b01      	cmp	r3, #1
 8006354:	d119      	bne.n	800638a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	330c      	adds	r3, #12
 800635c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	60bb      	str	r3, [r7, #8]
   return(result);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f023 0310 	bic.w	r3, r3, #16
 800636c:	647b      	str	r3, [r7, #68]	@ 0x44
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	330c      	adds	r3, #12
 8006374:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006376:	61ba      	str	r2, [r7, #24]
 8006378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6979      	ldr	r1, [r7, #20]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	613b      	str	r3, [r7, #16]
   return(result);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006398:	bf00      	nop
 800639a:	3754      	adds	r7, #84	@ 0x54
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff fee4 	bl	800618c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063c4:	bf00      	nop
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b21      	cmp	r3, #33	@ 0x21
 80063de:	d13e      	bne.n	800645e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e8:	d114      	bne.n	8006414 <UART_Transmit_IT+0x48>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d110      	bne.n	8006414 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006406:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	1c9a      	adds	r2, r3, #2
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]
 8006412:	e008      	b.n	8006426 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	1c59      	adds	r1, r3, #1
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6211      	str	r1, [r2, #32]
 800641e:	781a      	ldrb	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29b      	uxth	r3, r3
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4619      	mov	r1, r3
 8006434:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10f      	bne.n	800645a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006448:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006458:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e000      	b.n	8006460 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800645e:	2302      	movs	r3, #2
  }
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006482:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff fe73 	bl	8006178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	@ 0x30
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b22      	cmp	r3, #34	@ 0x22
 80064ae:	f040 80ae 	bne.w	800660e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ba:	d117      	bne.n	80064ec <UART_Receive_IT+0x50>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d113      	bne.n	80064ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e4:	1c9a      	adds	r2, r3, #2
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80064ea:	e026      	b.n	800653a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064fe:	d007      	beq.n	8006510 <UART_Receive_IT+0x74>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <UART_Receive_IT+0x82>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	e008      	b.n	8006530 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800652a:	b2da      	uxtb	r2, r3
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29b      	uxth	r3, r3
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	4619      	mov	r1, r3
 8006548:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800654a:	2b00      	cmp	r3, #0
 800654c:	d15d      	bne.n	800660a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0220 	bic.w	r2, r2, #32
 800655c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800656c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695a      	ldr	r2, [r3, #20]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006590:	2b01      	cmp	r3, #1
 8006592:	d135      	bne.n	8006600 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	330c      	adds	r3, #12
 80065a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	613b      	str	r3, [r7, #16]
   return(result);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f023 0310 	bic.w	r3, r3, #16
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ba:	623a      	str	r2, [r7, #32]
 80065bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	69f9      	ldr	r1, [r7, #28]
 80065c0:	6a3a      	ldr	r2, [r7, #32]
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d10a      	bne.n	80065f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fdd1 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
 80065fe:	e002      	b.n	8006606 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fb f9eb 	bl	80019dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	e002      	b.n	8006610 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	e000      	b.n	8006610 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3730      	adds	r7, #48	@ 0x30
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800661c:	b0c0      	sub	sp, #256	@ 0x100
 800661e:	af00      	add	r7, sp, #0
 8006620:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006634:	68d9      	ldr	r1, [r3, #12]
 8006636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	ea40 0301 	orr.w	r3, r0, r1
 8006640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	431a      	orrs	r2, r3
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	431a      	orrs	r2, r3
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006670:	f021 010c 	bic.w	r1, r1, #12
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800667e:	430b      	orrs	r3, r1
 8006680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006692:	6999      	ldr	r1, [r3, #24]
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	ea40 0301 	orr.w	r3, r0, r1
 800669e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	4b8f      	ldr	r3, [pc, #572]	@ (80068e4 <UART_SetConfig+0x2cc>)
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d005      	beq.n	80066b8 <UART_SetConfig+0xa0>
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b8d      	ldr	r3, [pc, #564]	@ (80068e8 <UART_SetConfig+0x2d0>)
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d104      	bne.n	80066c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066b8:	f7fd f95c 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 80066bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066c0:	e003      	b.n	80066ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066c2:	f7fd f943 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 80066c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066d4:	f040 810c 	bne.w	80068f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066ea:	4622      	mov	r2, r4
 80066ec:	462b      	mov	r3, r5
 80066ee:	1891      	adds	r1, r2, r2
 80066f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066f2:	415b      	adcs	r3, r3
 80066f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066fa:	4621      	mov	r1, r4
 80066fc:	eb12 0801 	adds.w	r8, r2, r1
 8006700:	4629      	mov	r1, r5
 8006702:	eb43 0901 	adc.w	r9, r3, r1
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800671a:	4690      	mov	r8, r2
 800671c:	4699      	mov	r9, r3
 800671e:	4623      	mov	r3, r4
 8006720:	eb18 0303 	adds.w	r3, r8, r3
 8006724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006728:	462b      	mov	r3, r5
 800672a:	eb49 0303 	adc.w	r3, r9, r3
 800672e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800673e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006746:	460b      	mov	r3, r1
 8006748:	18db      	adds	r3, r3, r3
 800674a:	653b      	str	r3, [r7, #80]	@ 0x50
 800674c:	4613      	mov	r3, r2
 800674e:	eb42 0303 	adc.w	r3, r2, r3
 8006752:	657b      	str	r3, [r7, #84]	@ 0x54
 8006754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006758:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800675c:	f7f9 fdc0 	bl	80002e0 <__aeabi_uldivmod>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4b61      	ldr	r3, [pc, #388]	@ (80068ec <UART_SetConfig+0x2d4>)
 8006766:	fba3 2302 	umull	r2, r3, r3, r2
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	011c      	lsls	r4, r3, #4
 800676e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006772:	2200      	movs	r2, #0
 8006774:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006778:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800677c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	1891      	adds	r1, r2, r2
 8006786:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006788:	415b      	adcs	r3, r3
 800678a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800678c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006790:	4641      	mov	r1, r8
 8006792:	eb12 0a01 	adds.w	sl, r2, r1
 8006796:	4649      	mov	r1, r9
 8006798:	eb43 0b01 	adc.w	fp, r3, r1
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067b0:	4692      	mov	sl, r2
 80067b2:	469b      	mov	fp, r3
 80067b4:	4643      	mov	r3, r8
 80067b6:	eb1a 0303 	adds.w	r3, sl, r3
 80067ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067be:	464b      	mov	r3, r9
 80067c0:	eb4b 0303 	adc.w	r3, fp, r3
 80067c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067dc:	460b      	mov	r3, r1
 80067de:	18db      	adds	r3, r3, r3
 80067e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80067e2:	4613      	mov	r3, r2
 80067e4:	eb42 0303 	adc.w	r3, r2, r3
 80067e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067f2:	f7f9 fd75 	bl	80002e0 <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4611      	mov	r1, r2
 80067fc:	4b3b      	ldr	r3, [pc, #236]	@ (80068ec <UART_SetConfig+0x2d4>)
 80067fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	2264      	movs	r2, #100	@ 0x64
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	1acb      	subs	r3, r1, r3
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006812:	4b36      	ldr	r3, [pc, #216]	@ (80068ec <UART_SetConfig+0x2d4>)
 8006814:	fba3 2302 	umull	r2, r3, r3, r2
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006820:	441c      	add	r4, r3
 8006822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006826:	2200      	movs	r2, #0
 8006828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800682c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006830:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006834:	4642      	mov	r2, r8
 8006836:	464b      	mov	r3, r9
 8006838:	1891      	adds	r1, r2, r2
 800683a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800683c:	415b      	adcs	r3, r3
 800683e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006844:	4641      	mov	r1, r8
 8006846:	1851      	adds	r1, r2, r1
 8006848:	6339      	str	r1, [r7, #48]	@ 0x30
 800684a:	4649      	mov	r1, r9
 800684c:	414b      	adcs	r3, r1
 800684e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800685c:	4659      	mov	r1, fp
 800685e:	00cb      	lsls	r3, r1, #3
 8006860:	4651      	mov	r1, sl
 8006862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006866:	4651      	mov	r1, sl
 8006868:	00ca      	lsls	r2, r1, #3
 800686a:	4610      	mov	r0, r2
 800686c:	4619      	mov	r1, r3
 800686e:	4603      	mov	r3, r0
 8006870:	4642      	mov	r2, r8
 8006872:	189b      	adds	r3, r3, r2
 8006874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006878:	464b      	mov	r3, r9
 800687a:	460a      	mov	r2, r1
 800687c:	eb42 0303 	adc.w	r3, r2, r3
 8006880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006890:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006894:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006898:	460b      	mov	r3, r1
 800689a:	18db      	adds	r3, r3, r3
 800689c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800689e:	4613      	mov	r3, r2
 80068a0:	eb42 0303 	adc.w	r3, r2, r3
 80068a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068ae:	f7f9 fd17 	bl	80002e0 <__aeabi_uldivmod>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4b0d      	ldr	r3, [pc, #52]	@ (80068ec <UART_SetConfig+0x2d4>)
 80068b8:	fba3 1302 	umull	r1, r3, r3, r2
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	2164      	movs	r1, #100	@ 0x64
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	3332      	adds	r3, #50	@ 0x32
 80068ca:	4a08      	ldr	r2, [pc, #32]	@ (80068ec <UART_SetConfig+0x2d4>)
 80068cc:	fba2 2303 	umull	r2, r3, r2, r3
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	f003 0207 	and.w	r2, r3, #7
 80068d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4422      	add	r2, r4
 80068de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068e0:	e106      	b.n	8006af0 <UART_SetConfig+0x4d8>
 80068e2:	bf00      	nop
 80068e4:	40011000 	.word	0x40011000
 80068e8:	40011400 	.word	0x40011400
 80068ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006902:	4642      	mov	r2, r8
 8006904:	464b      	mov	r3, r9
 8006906:	1891      	adds	r1, r2, r2
 8006908:	6239      	str	r1, [r7, #32]
 800690a:	415b      	adcs	r3, r3
 800690c:	627b      	str	r3, [r7, #36]	@ 0x24
 800690e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006912:	4641      	mov	r1, r8
 8006914:	1854      	adds	r4, r2, r1
 8006916:	4649      	mov	r1, r9
 8006918:	eb43 0501 	adc.w	r5, r3, r1
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	00eb      	lsls	r3, r5, #3
 8006926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800692a:	00e2      	lsls	r2, r4, #3
 800692c:	4614      	mov	r4, r2
 800692e:	461d      	mov	r5, r3
 8006930:	4643      	mov	r3, r8
 8006932:	18e3      	adds	r3, r4, r3
 8006934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006938:	464b      	mov	r3, r9
 800693a:	eb45 0303 	adc.w	r3, r5, r3
 800693e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800694e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800695e:	4629      	mov	r1, r5
 8006960:	008b      	lsls	r3, r1, #2
 8006962:	4621      	mov	r1, r4
 8006964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006968:	4621      	mov	r1, r4
 800696a:	008a      	lsls	r2, r1, #2
 800696c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006970:	f7f9 fcb6 	bl	80002e0 <__aeabi_uldivmod>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4b60      	ldr	r3, [pc, #384]	@ (8006afc <UART_SetConfig+0x4e4>)
 800697a:	fba3 2302 	umull	r2, r3, r3, r2
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	011c      	lsls	r4, r3, #4
 8006982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006986:	2200      	movs	r2, #0
 8006988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800698c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	1891      	adds	r1, r2, r2
 800699a:	61b9      	str	r1, [r7, #24]
 800699c:	415b      	adcs	r3, r3
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069a4:	4641      	mov	r1, r8
 80069a6:	1851      	adds	r1, r2, r1
 80069a8:	6139      	str	r1, [r7, #16]
 80069aa:	4649      	mov	r1, r9
 80069ac:	414b      	adcs	r3, r1
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069bc:	4659      	mov	r1, fp
 80069be:	00cb      	lsls	r3, r1, #3
 80069c0:	4651      	mov	r1, sl
 80069c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c6:	4651      	mov	r1, sl
 80069c8:	00ca      	lsls	r2, r1, #3
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	4642      	mov	r2, r8
 80069d2:	189b      	adds	r3, r3, r2
 80069d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069d8:	464b      	mov	r3, r9
 80069da:	460a      	mov	r2, r1
 80069dc:	eb42 0303 	adc.w	r3, r2, r3
 80069e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069fc:	4649      	mov	r1, r9
 80069fe:	008b      	lsls	r3, r1, #2
 8006a00:	4641      	mov	r1, r8
 8006a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a06:	4641      	mov	r1, r8
 8006a08:	008a      	lsls	r2, r1, #2
 8006a0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a0e:	f7f9 fc67 	bl	80002e0 <__aeabi_uldivmod>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	4b38      	ldr	r3, [pc, #224]	@ (8006afc <UART_SetConfig+0x4e4>)
 8006a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	2264      	movs	r2, #100	@ 0x64
 8006a22:	fb02 f303 	mul.w	r3, r2, r3
 8006a26:	1acb      	subs	r3, r1, r3
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	3332      	adds	r3, #50	@ 0x32
 8006a2c:	4a33      	ldr	r2, [pc, #204]	@ (8006afc <UART_SetConfig+0x4e4>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a38:	441c      	add	r4, r3
 8006a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a3e:	2200      	movs	r2, #0
 8006a40:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a42:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a48:	4642      	mov	r2, r8
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	1891      	adds	r1, r2, r2
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	415b      	adcs	r3, r3
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a58:	4641      	mov	r1, r8
 8006a5a:	1851      	adds	r1, r2, r1
 8006a5c:	6039      	str	r1, [r7, #0]
 8006a5e:	4649      	mov	r1, r9
 8006a60:	414b      	adcs	r3, r1
 8006a62:	607b      	str	r3, [r7, #4]
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a70:	4659      	mov	r1, fp
 8006a72:	00cb      	lsls	r3, r1, #3
 8006a74:	4651      	mov	r1, sl
 8006a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a7a:	4651      	mov	r1, sl
 8006a7c:	00ca      	lsls	r2, r1, #3
 8006a7e:	4610      	mov	r0, r2
 8006a80:	4619      	mov	r1, r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	4642      	mov	r2, r8
 8006a86:	189b      	adds	r3, r3, r2
 8006a88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	460a      	mov	r2, r1
 8006a8e:	eb42 0303 	adc.w	r3, r2, r3
 8006a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006aac:	4649      	mov	r1, r9
 8006aae:	008b      	lsls	r3, r1, #2
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ab6:	4641      	mov	r1, r8
 8006ab8:	008a      	lsls	r2, r1, #2
 8006aba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006abe:	f7f9 fc0f 	bl	80002e0 <__aeabi_uldivmod>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <UART_SetConfig+0x4e4>)
 8006ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	2164      	movs	r1, #100	@ 0x64
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	3332      	adds	r3, #50	@ 0x32
 8006ada:	4a08      	ldr	r2, [pc, #32]	@ (8006afc <UART_SetConfig+0x4e4>)
 8006adc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4422      	add	r2, r4
 8006aee:	609a      	str	r2, [r3, #8]
}
 8006af0:	bf00      	nop
 8006af2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006af6:	46bd      	mov	sp, r7
 8006af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006afc:	51eb851f 	.word	0x51eb851f

08006b00 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f103 0208 	add.w	r2, r3, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f04f 32ff 	mov.w	r2, #4294967295
 8006b18:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f103 0208 	add.w	r2, r3, #8
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f103 0208 	add.w	r2, r3, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	601a      	str	r2, [r3, #0]
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d103      	bne.n	8006bc2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	e00c      	b.n	8006bdc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e002      	b.n	8006bd0 <vListInsert+0x2e>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d2f6      	bcs.n	8006bca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]
}
 8006c08:	bf00      	nop
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6892      	ldr	r2, [r2, #8]
 8006c2a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6852      	ldr	r2, [r2, #4]
 8006c34:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d103      	bne.n	8006c48 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	1e5a      	subs	r2, r3, #1
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8006c94:	f002 fa9a 	bl	80091cc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca0:	68f9      	ldr	r1, [r7, #12]
 8006ca2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	441a      	add	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	441a      	add	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	22ff      	movs	r2, #255	@ 0xff
 8006cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	22ff      	movs	r2, #255	@ 0xff
 8006ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d114      	bne.n	8006d14 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01a      	beq.n	8006d28 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3310      	adds	r3, #16
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fa60 	bl	80081bc <xTaskRemoveFromEventList>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d012      	beq.n	8006d28 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8006d02:	4b0d      	ldr	r3, [pc, #52]	@ (8006d38 <xQueueGenericReset+0xd0>)
 8006d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	e009      	b.n	8006d28 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3310      	adds	r3, #16
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff fef1 	bl	8006b00 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3324      	adds	r3, #36	@ 0x24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff feec 	bl	8006b00 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006d28:	f002 fa82 	bl	8009230 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8006d2c:	2301      	movs	r3, #1
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08c      	sub	sp, #48	@ 0x30
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10b      	bne.n	8006d68 <xQueueGenericCreate+0x2c>
        __asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	61bb      	str	r3, [r7, #24]
    }
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
 8006d70:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d006      	beq.n	8006d86 <xQueueGenericCreate+0x4a>
 8006d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d101      	bne.n	8006d8a <xQueueGenericCreate+0x4e>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueGenericCreate+0x50>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <xQueueGenericCreate+0x6c>
        __asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	617b      	str	r3, [r7, #20]
    }
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	e7fd      	b.n	8006da4 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006daa:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8006dae:	d90b      	bls.n	8006dc8 <xQueueGenericCreate+0x8c>
        __asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	613b      	str	r3, [r7, #16]
    }
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	3350      	adds	r3, #80	@ 0x50
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f002 fb27 	bl	8009420 <pvPortMalloc>
 8006dd2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00d      	beq.n	8006df6 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	3350      	adds	r3, #80	@ 0x50
 8006de2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006de4:	79fa      	ldrb	r2, [r7, #7]
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	4613      	mov	r3, r2
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f805 	bl	8006e00 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006df6:	6a3b      	ldr	r3, [r7, #32]
    }
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3728      	adds	r7, #40	@ 0x28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e002      	b.n	8006e22 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e2e:	2101      	movs	r1, #1
 8006e30:	69b8      	ldr	r0, [r7, #24]
 8006e32:	f7ff ff19 	bl	8006c68 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08e      	sub	sp, #56	@ 0x38
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10b      	bne.n	8006e7c <xQueueGenericSend+0x34>
        __asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <xQueueGenericSend+0x42>
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <xQueueGenericSend+0x46>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <xQueueGenericSend+0x48>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10b      	bne.n	8006eac <xQueueGenericSend+0x64>
        __asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006ea6:	bf00      	nop
 8006ea8:	bf00      	nop
 8006eaa:	e7fd      	b.n	8006ea8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d103      	bne.n	8006eba <xQueueGenericSend+0x72>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <xQueueGenericSend+0x76>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <xQueueGenericSend+0x78>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10b      	bne.n	8006edc <xQueueGenericSend+0x94>
        __asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	623b      	str	r3, [r7, #32]
    }
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	e7fd      	b.n	8006ed8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006edc:	f001 fb0e 	bl	80084fc <xTaskGetSchedulerState>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d102      	bne.n	8006eec <xQueueGenericSend+0xa4>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <xQueueGenericSend+0xa8>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <xQueueGenericSend+0xaa>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10b      	bne.n	8006f0e <xQueueGenericSend+0xc6>
        __asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	61fb      	str	r3, [r7, #28]
    }
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	e7fd      	b.n	8006f0a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006f0e:	f002 f95d 	bl	80091cc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d302      	bcc.n	8006f24 <xQueueGenericSend+0xdc>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d129      	bne.n	8006f78 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f2a:	f000 fbe7 	bl	80076fc <prvCopyDataToQueue>
 8006f2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	3324      	adds	r3, #36	@ 0x24
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 f93d 	bl	80081bc <xTaskRemoveFromEventList>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d013      	beq.n	8006f70 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006f48:	4b3f      	ldr	r3, [pc, #252]	@ (8007048 <xQueueGenericSend+0x200>)
 8006f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	e00a      	b.n	8006f70 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006f60:	4b39      	ldr	r3, [pc, #228]	@ (8007048 <xQueueGenericSend+0x200>)
 8006f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006f70:	f002 f95e 	bl	8009230 <vPortExitCritical>
                return pdPASS;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e063      	b.n	8007040 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d103      	bne.n	8006f86 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006f7e:	f002 f957 	bl	8009230 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e05c      	b.n	8007040 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d106      	bne.n	8006f9a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006f8c:	f107 0314 	add.w	r3, r7, #20
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 f977 	bl	8008284 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006f96:	2301      	movs	r3, #1
 8006f98:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006f9a:	f002 f949 	bl	8009230 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006f9e:	f000 fee9 	bl	8007d74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006fa2:	f002 f913 	bl	80091cc <vPortEnterCritical>
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fac:	b25b      	sxtb	r3, r3
 8006fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb2:	d103      	bne.n	8006fbc <xQueueGenericSend+0x174>
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d103      	bne.n	8006fd2 <xQueueGenericSend+0x18a>
 8006fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fd2:	f002 f92d 	bl	8009230 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fd6:	1d3a      	adds	r2, r7, #4
 8006fd8:	f107 0314 	add.w	r3, r7, #20
 8006fdc:	4611      	mov	r1, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 f966 	bl	80082b0 <xTaskCheckForTimeOut>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d124      	bne.n	8007034 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fec:	f000 fc7e 	bl	80078ec <prvIsQueueFull>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d018      	beq.n	8007028 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	3310      	adds	r3, #16
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 f88a 	bl	8008118 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8007004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007006:	f000 fc09 	bl	800781c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800700a:	f000 fec1 	bl	8007d90 <xTaskResumeAll>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	f47f af7c 	bne.w	8006f0e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8007016:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <xQueueGenericSend+0x200>)
 8007018:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	e772      	b.n	8006f0e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8007028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800702a:	f000 fbf7 	bl	800781c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800702e:	f000 feaf 	bl	8007d90 <xTaskResumeAll>
 8007032:	e76c      	b.n	8006f0e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8007034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007036:	f000 fbf1 	bl	800781c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800703a:	f000 fea9 	bl	8007d90 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800703e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8007040:	4618      	mov	r0, r3
 8007042:	3738      	adds	r7, #56	@ 0x38
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b090      	sub	sp, #64	@ 0x40
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10b      	bne.n	800707c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	e7fd      	b.n	8007078 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <xQueueGenericSendFromISR+0x3e>
 8007082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <xQueueGenericSendFromISR+0x42>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <xQueueGenericSendFromISR+0x44>
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d103      	bne.n	80070ba <xQueueGenericSendFromISR+0x6e>
 80070b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <xQueueGenericSendFromISR+0x72>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <xQueueGenericSendFromISR+0x74>
 80070be:	2300      	movs	r3, #0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	623b      	str	r3, [r7, #32]
    }
 80070d6:	bf00      	nop
 80070d8:	bf00      	nop
 80070da:	e7fd      	b.n	80070d8 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070dc:	f002 f95e 	bl	800939c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80070e0:	f3ef 8211 	mrs	r2, BASEPRI
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	61fa      	str	r2, [r7, #28]
 80070f6:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80070f8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070fa:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007104:	429a      	cmp	r2, r3
 8007106:	d302      	bcc.n	800710e <xQueueGenericSendFromISR+0xc2>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d13f      	bne.n	800718e <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007114:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007124:	f000 faea 	bl	80076fc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8007128:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007130:	d112      	bne.n	8007158 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	d026      	beq.n	8007188 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	3324      	adds	r3, #36	@ 0x24
 800713e:	4618      	mov	r0, r3
 8007140:	f001 f83c 	bl	80081bc <xTaskRemoveFromEventList>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01e      	beq.n	8007188 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01b      	beq.n	8007188 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	e017      	b.n	8007188 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8007158:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800715c:	2b7f      	cmp	r3, #127	@ 0x7f
 800715e:	d10b      	bne.n	8007178 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	617b      	str	r3, [r7, #20]
    }
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	e7fd      	b.n	8007174 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007178:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800717c:	3301      	adds	r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	b25a      	sxtb	r2, r3
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8007188:	2301      	movs	r3, #1
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800718c:	e001      	b.n	8007192 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800718e:	2300      	movs	r3, #0
 8007190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007194:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800719c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800719e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3740      	adds	r7, #64	@ 0x40
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08e      	sub	sp, #56	@ 0x38
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	633b      	str	r3, [r7, #48]	@ 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10b      	bne.n	80071d4 <xQueueGiveFromISR+0x2c>
        __asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	623b      	str	r3, [r7, #32]
    }
 80071ce:	bf00      	nop
 80071d0:	bf00      	nop
 80071d2:	e7fd      	b.n	80071d0 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <xQueueGiveFromISR+0x4c>
        __asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61fb      	str	r3, [r7, #28]
    }
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d103      	bne.n	8007204 <xQueueGiveFromISR+0x5c>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <xQueueGiveFromISR+0x60>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <xQueueGiveFromISR+0x62>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <xQueueGiveFromISR+0x7e>
        __asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	61bb      	str	r3, [r7, #24]
    }
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007226:	f002 f8b9 	bl	800939c <vPortValidateInterruptPriority>
        __asm volatile
 800722a:	f3ef 8211 	mrs	r2, BASEPRI
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	617a      	str	r2, [r7, #20]
 8007240:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8007242:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007244:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007252:	429a      	cmp	r2, r3
 8007254:	d23b      	bcs.n	80072ce <xQueueGiveFromISR+0x126>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8007256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007258:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800725c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8007268:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d112      	bne.n	8007298 <xQueueGiveFromISR+0xf0>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	d026      	beq.n	80072c8 <xQueueGiveFromISR+0x120>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	3324      	adds	r3, #36	@ 0x24
 800727e:	4618      	mov	r0, r3
 8007280:	f000 ff9c 	bl	80081bc <xTaskRemoveFromEventList>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01e      	beq.n	80072c8 <xQueueGiveFromISR+0x120>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01b      	beq.n	80072c8 <xQueueGiveFromISR+0x120>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2201      	movs	r2, #1
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	e017      	b.n	80072c8 <xQueueGiveFromISR+0x120>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8007298:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800729c:	2b7f      	cmp	r3, #127	@ 0x7f
 800729e:	d10b      	bne.n	80072b8 <xQueueGiveFromISR+0x110>
        __asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	60fb      	str	r3, [r7, #12]
    }
 80072b2:	bf00      	nop
 80072b4:	bf00      	nop
 80072b6:	e7fd      	b.n	80072b4 <xQueueGiveFromISR+0x10c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072bc:	3301      	adds	r3, #1
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	b25a      	sxtb	r2, r3
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80072c8:	2301      	movs	r3, #1
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80072cc:	e001      	b.n	80072d2 <xQueueGiveFromISR+0x12a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f383 8811 	msr	BASEPRI, r3
    }
 80072dc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80072de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3738      	adds	r7, #56	@ 0x38
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08c      	sub	sp, #48	@ 0x30
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80072f4:	2300      	movs	r3, #0
 80072f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80072fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <xQueueReceive+0x32>
        __asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	623b      	str	r3, [r7, #32]
    }
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	e7fd      	b.n	8007316 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <xQueueReceive+0x40>
 8007320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <xQueueReceive+0x44>
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <xQueueReceive+0x46>
 800732c:	2300      	movs	r3, #0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <xQueueReceive+0x62>
        __asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	61fb      	str	r3, [r7, #28]
    }
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800734a:	f001 f8d7 	bl	80084fc <xTaskGetSchedulerState>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d102      	bne.n	800735a <xQueueReceive+0x72>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <xQueueReceive+0x76>
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <xQueueReceive+0x78>
 800735e:	2300      	movs	r3, #0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10b      	bne.n	800737c <xQueueReceive+0x94>
        __asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	61bb      	str	r3, [r7, #24]
    }
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800737c:	f001 ff26 	bl	80091cc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01f      	beq.n	80073cc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007390:	f000 fa1e 	bl	80077d0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	1e5a      	subs	r2, r3, #1
 8007398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00f      	beq.n	80073c4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a6:	3310      	adds	r3, #16
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 ff07 	bl	80081bc <xTaskRemoveFromEventList>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d007      	beq.n	80073c4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80073b4:	4b3c      	ldr	r3, [pc, #240]	@ (80074a8 <xQueueReceive+0x1c0>)
 80073b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80073c4:	f001 ff34 	bl	8009230 <vPortExitCritical>
                return pdPASS;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e069      	b.n	80074a0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d103      	bne.n	80073da <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80073d2:	f001 ff2d 	bl	8009230 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e062      	b.n	80074a0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80073e0:	f107 0310 	add.w	r3, r7, #16
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 ff4d 	bl	8008284 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80073ee:	f001 ff1f 	bl	8009230 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80073f2:	f000 fcbf 	bl	8007d74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80073f6:	f001 fee9 	bl	80091cc <vPortEnterCritical>
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007400:	b25b      	sxtb	r3, r3
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d103      	bne.n	8007410 <xQueueReceive+0x128>
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007416:	b25b      	sxtb	r3, r3
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d103      	bne.n	8007426 <xQueueReceive+0x13e>
 800741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007426:	f001 ff03 	bl	8009230 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800742a:	1d3a      	adds	r2, r7, #4
 800742c:	f107 0310 	add.w	r3, r7, #16
 8007430:	4611      	mov	r1, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f000 ff3c 	bl	80082b0 <xTaskCheckForTimeOut>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d123      	bne.n	8007486 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800743e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007440:	f000 fa3e 	bl	80078c0 <prvIsQueueEmpty>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d017      	beq.n	800747a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800744a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744c:	3324      	adds	r3, #36	@ 0x24
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fe60 	bl	8008118 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800745a:	f000 f9df 	bl	800781c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800745e:	f000 fc97 	bl	8007d90 <xTaskResumeAll>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d189      	bne.n	800737c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8007468:	4b0f      	ldr	r3, [pc, #60]	@ (80074a8 <xQueueReceive+0x1c0>)
 800746a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	e780      	b.n	800737c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800747a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800747c:	f000 f9ce 	bl	800781c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007480:	f000 fc86 	bl	8007d90 <xTaskResumeAll>
 8007484:	e77a      	b.n	800737c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8007486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007488:	f000 f9c8 	bl	800781c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800748c:	f000 fc80 	bl	8007d90 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007492:	f000 fa15 	bl	80078c0 <prvIsQueueEmpty>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	f43f af6f 	beq.w	800737c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800749e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3730      	adds	r7, #48	@ 0x30
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08e      	sub	sp, #56	@ 0x38
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80074be:	2300      	movs	r3, #0
 80074c0:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80074c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10b      	bne.n	80074e0 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	623b      	str	r3, [r7, #32]
    }
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	e7fd      	b.n	80074dc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80074e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00b      	beq.n	8007500 <xQueueSemaphoreTake+0x54>
        __asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	61fb      	str	r3, [r7, #28]
    }
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	e7fd      	b.n	80074fc <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007500:	f000 fffc 	bl	80084fc <xTaskGetSchedulerState>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d102      	bne.n	8007510 <xQueueSemaphoreTake+0x64>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <xQueueSemaphoreTake+0x68>
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <xQueueSemaphoreTake+0x6a>
 8007514:	2300      	movs	r3, #0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <xQueueSemaphoreTake+0x86>
        __asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	61bb      	str	r3, [r7, #24]
    }
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	e7fd      	b.n	800752e <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007532:	f001 fe4b 	bl	80091cc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800753c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d024      	beq.n	800758c <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007544:	1e5a      	subs	r2, r3, #1
 8007546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007548:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800754a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d104      	bne.n	800755c <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007552:	f001 f973 	bl	800883c <pvTaskIncrementMutexHeldCount>
 8007556:	4602      	mov	r2, r0
 8007558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755a:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00f      	beq.n	8007584 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007566:	3310      	adds	r3, #16
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fe27 	bl	80081bc <xTaskRemoveFromEventList>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007574:	4b54      	ldr	r3, [pc, #336]	@ (80076c8 <xQueueSemaphoreTake+0x21c>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007584:	f001 fe54 	bl	8009230 <vPortExitCritical>
                return pdPASS;
 8007588:	2301      	movs	r3, #1
 800758a:	e098      	b.n	80076be <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d112      	bne.n	80075b8 <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <xQueueSemaphoreTake+0x104>
        __asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	617b      	str	r3, [r7, #20]
    }
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	e7fd      	b.n	80075ac <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80075b0:	f001 fe3e 	bl	8009230 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80075b4:	2300      	movs	r3, #0
 80075b6:	e082      	b.n	80076be <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 80075b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d106      	bne.n	80075cc <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80075be:	f107 030c 	add.w	r3, r7, #12
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fe5e 	bl	8008284 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80075c8:	2301      	movs	r3, #1
 80075ca:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80075cc:	f001 fe30 	bl	8009230 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80075d0:	f000 fbd0 	bl	8007d74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80075d4:	f001 fdfa 	bl	80091cc <vPortEnterCritical>
 80075d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075de:	b25b      	sxtb	r3, r3
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d103      	bne.n	80075ee <xQueueSemaphoreTake+0x142>
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d103      	bne.n	8007604 <xQueueSemaphoreTake+0x158>
 80075fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007604:	f001 fe14 	bl	8009230 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007608:	463a      	mov	r2, r7
 800760a:	f107 030c 	add.w	r3, r7, #12
 800760e:	4611      	mov	r1, r2
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fe4d 	bl	80082b0 <xTaskCheckForTimeOut>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d132      	bne.n	8007682 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800761c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800761e:	f000 f94f 	bl	80078c0 <prvIsQueueEmpty>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d026      	beq.n	8007676 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d109      	bne.n	8007644 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 8007630:	f001 fdcc 	bl	80091cc <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 ff7d 	bl	8008538 <xTaskPriorityInherit>
 800763e:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8007640:	f001 fdf6 	bl	8009230 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007646:	3324      	adds	r3, #36	@ 0x24
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	4611      	mov	r1, r2
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fd63 	bl	8008118 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007652:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007654:	f000 f8e2 	bl	800781c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007658:	f000 fb9a 	bl	8007d90 <xTaskResumeAll>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	f47f af67 	bne.w	8007532 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8007664:	4b18      	ldr	r3, [pc, #96]	@ (80076c8 <xQueueSemaphoreTake+0x21c>)
 8007666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	e75d      	b.n	8007532 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8007676:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007678:	f000 f8d0 	bl	800781c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800767c:	f000 fb88 	bl	8007d90 <xTaskResumeAll>
 8007680:	e757      	b.n	8007532 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8007682:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007684:	f000 f8ca 	bl	800781c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007688:	f000 fb82 	bl	8007d90 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800768c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800768e:	f000 f917 	bl	80078c0 <prvIsQueueEmpty>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	f43f af4c 	beq.w	8007532 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00d      	beq.n	80076bc <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 80076a0:	f001 fd94 	bl	80091cc <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80076a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076a6:	f000 f811 	bl	80076cc <prvGetDisinheritPriorityAfterTimeout>
 80076aa:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076b2:	4618      	mov	r0, r3
 80076b4:	f001 f832 	bl	800871c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80076b8:	f001 fdba 	bl	8009230 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80076bc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3738      	adds	r7, #56	@ 0x38
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d006      	beq.n	80076ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f1c3 0305 	rsb	r3, r3, #5
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e001      	b.n	80076ee <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80076ee:	68fb      	ldr	r3, [r7, #12]
    }
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007710:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10d      	bne.n	8007736 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d14d      	bne.n	80077be <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 ff7c 	bl	8008624 <xTaskPriorityDisinherit>
 800772c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	609a      	str	r2, [r3, #8]
 8007734:	e043      	b.n	80077be <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d119      	bne.n	8007770 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6858      	ldr	r0, [r3, #4]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007744:	461a      	mov	r2, r3
 8007746:	68b9      	ldr	r1, [r7, #8]
 8007748:	f002 fb55 	bl	8009df6 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007754:	441a      	add	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	429a      	cmp	r2, r3
 8007764:	d32b      	bcc.n	80077be <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	605a      	str	r2, [r3, #4]
 800776e:	e026      	b.n	80077be <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68d8      	ldr	r0, [r3, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007778:	461a      	mov	r2, r3
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	f002 fb3b 	bl	8009df6 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007788:	425b      	negs	r3, r3
 800778a:	441a      	add	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	429a      	cmp	r2, r3
 800779a:	d207      	bcs.n	80077ac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a4:	425b      	negs	r3, r3
 80077a6:	441a      	add	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d105      	bne.n	80077be <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80077c6:	697b      	ldr	r3, [r7, #20]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d018      	beq.n	8007814 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ea:	441a      	add	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d303      	bcc.n	8007804 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68d9      	ldr	r1, [r3, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	461a      	mov	r2, r3
 800780e:	6838      	ldr	r0, [r7, #0]
 8007810:	f002 faf1 	bl	8009df6 <memcpy>
    }
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007824:	f001 fcd2 	bl	80091cc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800782e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007830:	e011      	b.n	8007856 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	d012      	beq.n	8007860 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3324      	adds	r3, #36	@ 0x24
 800783e:	4618      	mov	r0, r3
 8007840:	f000 fcbc 	bl	80081bc <xTaskRemoveFromEventList>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800784a:	f000 fd99 	bl	8008380 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	3b01      	subs	r3, #1
 8007852:	b2db      	uxtb	r3, r3
 8007854:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800785a:	2b00      	cmp	r3, #0
 800785c:	dce9      	bgt.n	8007832 <prvUnlockQueue+0x16>
 800785e:	e000      	b.n	8007862 <prvUnlockQueue+0x46>
                        break;
 8007860:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	22ff      	movs	r2, #255	@ 0xff
 8007866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800786a:	f001 fce1 	bl	8009230 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800786e:	f001 fcad 	bl	80091cc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007878:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800787a:	e011      	b.n	80078a0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d012      	beq.n	80078aa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3310      	adds	r3, #16
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fc97 	bl	80081bc <xTaskRemoveFromEventList>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8007894:	f000 fd74 	bl	8008380 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	3b01      	subs	r3, #1
 800789c:	b2db      	uxtb	r3, r3
 800789e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80078a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dce9      	bgt.n	800787c <prvUnlockQueue+0x60>
 80078a8:	e000      	b.n	80078ac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80078aa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	22ff      	movs	r2, #255	@ 0xff
 80078b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80078b4:	f001 fcbc 	bl	8009230 <vPortExitCritical>
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80078c8:	f001 fc80 	bl	80091cc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d102      	bne.n	80078da <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80078d4:	2301      	movs	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e001      	b.n	80078de <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80078de:	f001 fca7 	bl	8009230 <vPortExitCritical>

    return xReturn;
 80078e2:	68fb      	ldr	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80078f4:	f001 fc6a 	bl	80091cc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007900:	429a      	cmp	r2, r3
 8007902:	d102      	bne.n	800790a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8007904:	2301      	movs	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	e001      	b.n	800790e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800790e:	f001 fc8f 	bl	8009230 <vPortExitCritical>

    return xReturn;
 8007912:	68fb      	ldr	r3, [r7, #12]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	e014      	b.n	8007956 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800792c:	4a0f      	ldr	r2, [pc, #60]	@ (800796c <vQueueAddToRegistry+0x50>)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10b      	bne.n	8007950 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007938:	490c      	ldr	r1, [pc, #48]	@ (800796c <vQueueAddToRegistry+0x50>)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8007942:	4a0a      	ldr	r2, [pc, #40]	@ (800796c <vQueueAddToRegistry+0x50>)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	4413      	add	r3, r2
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800794e:	e006      	b.n	800795e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b07      	cmp	r3, #7
 800795a:	d9e7      	bls.n	800792c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000efc 	.word	0x20000efc

08007970 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007980:	f001 fc24 	bl	80091cc <vPortEnterCritical>
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800798a:	b25b      	sxtb	r3, r3
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007990:	d103      	bne.n	800799a <vQueueWaitForMessageRestricted+0x2a>
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079a0:	b25b      	sxtb	r3, r3
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	d103      	bne.n	80079b0 <vQueueWaitForMessageRestricted+0x40>
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079b0:	f001 fc3e 	bl	8009230 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d106      	bne.n	80079ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	3324      	adds	r3, #36	@ 0x24
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fbcd 	bl	8008164 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80079ca:	6978      	ldr	r0, [r7, #20]
 80079cc:	f7ff ff26 	bl	800781c <prvUnlockQueue>
    }
 80079d0:	bf00      	nop
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08c      	sub	sp, #48	@ 0x30
 80079dc:	af04      	add	r7, sp, #16
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	4613      	mov	r3, r2
 80079e6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079e8:	88fb      	ldrh	r3, [r7, #6]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 fd17 	bl	8009420 <pvPortMalloc>
 80079f2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00e      	beq.n	8007a18 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079fa:	2058      	movs	r0, #88	@ 0x58
 80079fc:	f001 fd10 	bl	8009420 <pvPortMalloc>
 8007a00:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a0e:	e005      	b.n	8007a1c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007a10:	6978      	ldr	r0, [r7, #20]
 8007a12:	f001 fde7 	bl	80095e4 <vPortFree>
 8007a16:	e001      	b.n	8007a1c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d013      	beq.n	8007a4a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	2300      	movs	r3, #0
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	9302      	str	r3, [sp, #8]
 8007a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f80e 	bl	8007a5a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007a3e:	69f8      	ldr	r0, [r7, #28]
 8007a40:	f000 f8a2 	bl	8007b88 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007a44:	2301      	movs	r3, #1
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	e002      	b.n	8007a50 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007a50:	69bb      	ldr	r3, [r7, #24]
    }
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b088      	sub	sp, #32
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	607a      	str	r2, [r7, #4]
 8007a66:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	461a      	mov	r2, r3
 8007a72:	21a5      	movs	r1, #165	@ 0xa5
 8007a74:	f002 f934 	bl	8009ce0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a82:	3b01      	subs	r3, #1
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f023 0307 	bic.w	r3, r3, #7
 8007a90:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	617b      	str	r3, [r7, #20]
    }
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d01f      	beq.n	8007afa <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aba:	2300      	movs	r3, #0
 8007abc:	61fb      	str	r3, [r7, #28]
 8007abe:	e012      	b.n	8007ae6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	7819      	ldrb	r1, [r3, #0]
 8007ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	3334      	adds	r3, #52	@ 0x34
 8007ad0:	460a      	mov	r2, r1
 8007ad2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d006      	beq.n	8007aee <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	61fb      	str	r3, [r7, #28]
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	2b09      	cmp	r3, #9
 8007aea:	d9e9      	bls.n	8007ac0 <prvInitialiseNewTask+0x66>
 8007aec:	e000      	b.n	8007af0 <prvInitialiseNewTask+0x96>
            {
                break;
 8007aee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007af8:	e003      	b.n	8007b02 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d901      	bls.n	8007b0c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b08:	2304      	movs	r3, #4
 8007b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b10:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b16:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8007b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b20:	3304      	adds	r3, #4
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff f80c 	bl	8006b40 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2a:	3318      	adds	r3, #24
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff f807 	bl	8006b40 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b36:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	f1c3 0205 	rsb	r2, r3, #5
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b46:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4a:	3350      	adds	r3, #80	@ 0x50
 8007b4c:	2204      	movs	r2, #4
 8007b4e:	2100      	movs	r1, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f002 f8c5 	bl	8009ce0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	3354      	adds	r3, #84	@ 0x54
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f002 f8be 	bl	8009ce0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	69b8      	ldr	r0, [r7, #24]
 8007b6a:	f001 f9ff 	bl	8008f6c <pxPortInitialiseStack>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b72:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b7e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007b80:	bf00      	nop
 8007b82:	3720      	adds	r7, #32
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007b90:	f001 fb1c 	bl	80091cc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007b94:	4b2c      	ldr	r3, [pc, #176]	@ (8007c48 <prvAddNewTaskToReadyList+0xc0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007c48 <prvAddNewTaskToReadyList+0xc0>)
 8007b9c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8007c4c <prvAddNewTaskToReadyList+0xc4>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007ba6:	4a29      	ldr	r2, [pc, #164]	@ (8007c4c <prvAddNewTaskToReadyList+0xc4>)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007bac:	4b26      	ldr	r3, [pc, #152]	@ (8007c48 <prvAddNewTaskToReadyList+0xc0>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d110      	bne.n	8007bd6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007bb4:	f000 fc08 	bl	80083c8 <prvInitialiseTaskLists>
 8007bb8:	e00d      	b.n	8007bd6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007bba:	4b25      	ldr	r3, [pc, #148]	@ (8007c50 <prvAddNewTaskToReadyList+0xc8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d109      	bne.n	8007bd6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bc2:	4b22      	ldr	r3, [pc, #136]	@ (8007c4c <prvAddNewTaskToReadyList+0xc4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d802      	bhi.n	8007bd6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8007c4c <prvAddNewTaskToReadyList+0xc4>)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c54 <prvAddNewTaskToReadyList+0xcc>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8007c54 <prvAddNewTaskToReadyList+0xcc>)
 8007bde:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007be0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c54 <prvAddNewTaskToReadyList+0xcc>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	2201      	movs	r2, #1
 8007bee:	409a      	lsls	r2, r3
 8007bf0:	4b19      	ldr	r3, [pc, #100]	@ (8007c58 <prvAddNewTaskToReadyList+0xd0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	4a18      	ldr	r2, [pc, #96]	@ (8007c58 <prvAddNewTaskToReadyList+0xd0>)
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4a15      	ldr	r2, [pc, #84]	@ (8007c5c <prvAddNewTaskToReadyList+0xd4>)
 8007c08:	441a      	add	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4610      	mov	r0, r2
 8007c12:	f7fe ffa2 	bl	8006b5a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007c16:	f001 fb0b 	bl	8009230 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c50 <prvAddNewTaskToReadyList+0xc8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00e      	beq.n	8007c40 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c22:	4b0a      	ldr	r3, [pc, #40]	@ (8007c4c <prvAddNewTaskToReadyList+0xc4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d207      	bcs.n	8007c40 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007c30:	4b0b      	ldr	r3, [pc, #44]	@ (8007c60 <prvAddNewTaskToReadyList+0xd8>)
 8007c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20001014 	.word	0x20001014
 8007c4c:	20000f3c 	.word	0x20000f3c
 8007c50:	20001020 	.word	0x20001020
 8007c54:	20001030 	.word	0x20001030
 8007c58:	2000101c 	.word	0x2000101c
 8007c5c:	20000f40 	.word	0x20000f40
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d018      	beq.n	8007ca8 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8007c76:	4b14      	ldr	r3, [pc, #80]	@ (8007cc8 <vTaskDelay+0x64>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <vTaskDelay+0x32>
        __asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60bb      	str	r3, [r7, #8]
    }
 8007c90:	bf00      	nop
 8007c92:	bf00      	nop
 8007c94:	e7fd      	b.n	8007c92 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8007c96:	f000 f86d 	bl	8007d74 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fde1 	bl	8008864 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007ca2:	f000 f875 	bl	8007d90 <xTaskResumeAll>
 8007ca6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d107      	bne.n	8007cbe <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8007cae:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <vTaskDelay+0x68>)
 8007cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	2000103c 	.word	0x2000103c
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8007cd6:	4b20      	ldr	r3, [pc, #128]	@ (8007d58 <vTaskStartScheduler+0x88>)
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2282      	movs	r2, #130	@ 0x82
 8007ce2:	491e      	ldr	r1, [pc, #120]	@ (8007d5c <vTaskStartScheduler+0x8c>)
 8007ce4:	481e      	ldr	r0, [pc, #120]	@ (8007d60 <vTaskStartScheduler+0x90>)
 8007ce6:	f7ff fe77 	bl	80079d8 <xTaskCreate>
 8007cea:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d102      	bne.n	8007cf8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8007cf2:	f000 fe1d 	bl	8008930 <xTimerCreateTimerTask>
 8007cf6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d116      	bne.n	8007d2c <vTaskStartScheduler+0x5c>
        __asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60bb      	str	r3, [r7, #8]
    }
 8007d10:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8007d12:	4b14      	ldr	r3, [pc, #80]	@ (8007d64 <vTaskStartScheduler+0x94>)
 8007d14:	f04f 32ff 	mov.w	r2, #4294967295
 8007d18:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007d1a:	4b13      	ldr	r3, [pc, #76]	@ (8007d68 <vTaskStartScheduler+0x98>)
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d20:	4b12      	ldr	r3, [pc, #72]	@ (8007d6c <vTaskStartScheduler+0x9c>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8007d26:	f001 f9ad 	bl	8009084 <xPortStartScheduler>
 8007d2a:	e00f      	b.n	8007d4c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d10b      	bne.n	8007d4c <vTaskStartScheduler+0x7c>
        __asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	607b      	str	r3, [r7, #4]
    }
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	e7fd      	b.n	8007d48 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007d4c:	4b08      	ldr	r3, [pc, #32]	@ (8007d70 <vTaskStartScheduler+0xa0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20001038 	.word	0x20001038
 8007d5c:	0800b194 	.word	0x0800b194
 8007d60:	08008399 	.word	0x08008399
 8007d64:	20001034 	.word	0x20001034
 8007d68:	20001020 	.word	0x20001020
 8007d6c:	20001018 	.word	0x20001018
 8007d70:	2000000c 	.word	0x2000000c

08007d74 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007d78:	4b04      	ldr	r3, [pc, #16]	@ (8007d8c <vTaskSuspendAll+0x18>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	4a03      	ldr	r2, [pc, #12]	@ (8007d8c <vTaskSuspendAll+0x18>)
 8007d80:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007d82:	bf00      	nop
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	2000103c 	.word	0x2000103c

08007d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8007d9e:	4b42      	ldr	r3, [pc, #264]	@ (8007ea8 <xTaskResumeAll+0x118>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10b      	bne.n	8007dbe <xTaskResumeAll+0x2e>
        __asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	603b      	str	r3, [r7, #0]
    }
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	e7fd      	b.n	8007dba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007dbe:	f001 fa05 	bl	80091cc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007dc2:	4b39      	ldr	r3, [pc, #228]	@ (8007ea8 <xTaskResumeAll+0x118>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	4a37      	ldr	r2, [pc, #220]	@ (8007ea8 <xTaskResumeAll+0x118>)
 8007dca:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dcc:	4b36      	ldr	r3, [pc, #216]	@ (8007ea8 <xTaskResumeAll+0x118>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d161      	bne.n	8007e98 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dd4:	4b35      	ldr	r3, [pc, #212]	@ (8007eac <xTaskResumeAll+0x11c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d05d      	beq.n	8007e98 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ddc:	e02e      	b.n	8007e3c <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dde:	4b34      	ldr	r3, [pc, #208]	@ (8007eb0 <xTaskResumeAll+0x120>)
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3318      	adds	r3, #24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe ff12 	bl	8006c14 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe ff0d 	bl	8006c14 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfe:	2201      	movs	r2, #1
 8007e00:	409a      	lsls	r2, r3
 8007e02:	4b2c      	ldr	r3, [pc, #176]	@ (8007eb4 <xTaskResumeAll+0x124>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	4a2a      	ldr	r2, [pc, #168]	@ (8007eb4 <xTaskResumeAll+0x124>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4a27      	ldr	r2, [pc, #156]	@ (8007eb8 <xTaskResumeAll+0x128>)
 8007e1a:	441a      	add	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe fe99 	bl	8006b5a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e2c:	4b23      	ldr	r3, [pc, #140]	@ (8007ebc <xTaskResumeAll+0x12c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8007e36:	4b22      	ldr	r3, [pc, #136]	@ (8007ec0 <xTaskResumeAll+0x130>)
 8007e38:	2201      	movs	r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007eb0 <xTaskResumeAll+0x120>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1cc      	bne.n	8007dde <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007e4a:	f000 fb3b 	bl	80084c4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ec4 <xTaskResumeAll+0x134>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d010      	beq.n	8007e7c <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007e5a:	f000 f847 	bl	8007eec <xTaskIncrementTick>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8007e64:	4b16      	ldr	r3, [pc, #88]	@ (8007ec0 <xTaskResumeAll+0x130>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f1      	bne.n	8007e5a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8007e76:	4b13      	ldr	r3, [pc, #76]	@ (8007ec4 <xTaskResumeAll+0x134>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007e7c:	4b10      	ldr	r3, [pc, #64]	@ (8007ec0 <xTaskResumeAll+0x130>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d009      	beq.n	8007e98 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007e88:	4b0f      	ldr	r3, [pc, #60]	@ (8007ec8 <xTaskResumeAll+0x138>)
 8007e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007e98:	f001 f9ca 	bl	8009230 <vPortExitCritical>

    return xAlreadyYielded;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	2000103c 	.word	0x2000103c
 8007eac:	20001014 	.word	0x20001014
 8007eb0:	20000fd4 	.word	0x20000fd4
 8007eb4:	2000101c 	.word	0x2000101c
 8007eb8:	20000f40 	.word	0x20000f40
 8007ebc:	20000f3c 	.word	0x20000f3c
 8007ec0:	20001028 	.word	0x20001028
 8007ec4:	20001024 	.word	0x20001024
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007ed2:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <xTaskGetTickCount+0x1c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007ed8:	687b      	ldr	r3, [r7, #4]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20001018 	.word	0x20001018

08007eec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8008034 <xTaskIncrementTick+0x148>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f040 808f 	bne.w	800801e <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f00:	4b4d      	ldr	r3, [pc, #308]	@ (8008038 <xTaskIncrementTick+0x14c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007f08:	4a4b      	ldr	r2, [pc, #300]	@ (8008038 <xTaskIncrementTick+0x14c>)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d121      	bne.n	8007f58 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007f14:	4b49      	ldr	r3, [pc, #292]	@ (800803c <xTaskIncrementTick+0x150>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <xTaskIncrementTick+0x4a>
        __asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	603b      	str	r3, [r7, #0]
    }
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <xTaskIncrementTick+0x46>
 8007f36:	4b41      	ldr	r3, [pc, #260]	@ (800803c <xTaskIncrementTick+0x150>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	4b40      	ldr	r3, [pc, #256]	@ (8008040 <xTaskIncrementTick+0x154>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a3e      	ldr	r2, [pc, #248]	@ (800803c <xTaskIncrementTick+0x150>)
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	4a3e      	ldr	r2, [pc, #248]	@ (8008040 <xTaskIncrementTick+0x154>)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8008044 <xTaskIncrementTick+0x158>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	4a3c      	ldr	r2, [pc, #240]	@ (8008044 <xTaskIncrementTick+0x158>)
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	f000 fab6 	bl	80084c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007f58:	4b3b      	ldr	r3, [pc, #236]	@ (8008048 <xTaskIncrementTick+0x15c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d348      	bcc.n	8007ff4 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f62:	4b36      	ldr	r3, [pc, #216]	@ (800803c <xTaskIncrementTick+0x150>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d104      	bne.n	8007f76 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f6c:	4b36      	ldr	r3, [pc, #216]	@ (8008048 <xTaskIncrementTick+0x15c>)
 8007f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f72:	601a      	str	r2, [r3, #0]
                    break;
 8007f74:	e03e      	b.n	8007ff4 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f76:	4b31      	ldr	r3, [pc, #196]	@ (800803c <xTaskIncrementTick+0x150>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d203      	bcs.n	8007f96 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8008048 <xTaskIncrementTick+0x15c>)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f94:	e02e      	b.n	8007ff4 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe fe3a 	bl	8006c14 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	3318      	adds	r3, #24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fe31 	bl	8006c14 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	409a      	lsls	r2, r3
 8007fba:	4b24      	ldr	r3, [pc, #144]	@ (800804c <xTaskIncrementTick+0x160>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	4a22      	ldr	r2, [pc, #136]	@ (800804c <xTaskIncrementTick+0x160>)
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8008050 <xTaskIncrementTick+0x164>)
 8007fd2:	441a      	add	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f7fe fdbd 	bl	8006b5a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8008054 <xTaskIncrementTick+0x168>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d3b9      	bcc.n	8007f62 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ff2:	e7b6      	b.n	8007f62 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ff4:	4b17      	ldr	r3, [pc, #92]	@ (8008054 <xTaskIncrementTick+0x168>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffa:	4915      	ldr	r1, [pc, #84]	@ (8008050 <xTaskIncrementTick+0x164>)
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d901      	bls.n	8008010 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8008010:	4b11      	ldr	r3, [pc, #68]	@ (8008058 <xTaskIncrementTick+0x16c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d007      	beq.n	8008028 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8008018:	2301      	movs	r3, #1
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e004      	b.n	8008028 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800801e:	4b0f      	ldr	r3, [pc, #60]	@ (800805c <xTaskIncrementTick+0x170>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3301      	adds	r3, #1
 8008024:	4a0d      	ldr	r2, [pc, #52]	@ (800805c <xTaskIncrementTick+0x170>)
 8008026:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8008028:	697b      	ldr	r3, [r7, #20]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	2000103c 	.word	0x2000103c
 8008038:	20001018 	.word	0x20001018
 800803c:	20000fcc 	.word	0x20000fcc
 8008040:	20000fd0 	.word	0x20000fd0
 8008044:	2000102c 	.word	0x2000102c
 8008048:	20001034 	.word	0x20001034
 800804c:	2000101c 	.word	0x2000101c
 8008050:	20000f40 	.word	0x20000f40
 8008054:	20000f3c 	.word	0x20000f3c
 8008058:	20001028 	.word	0x20001028
 800805c:	20001024 	.word	0x20001024

08008060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008066:	4b27      	ldr	r3, [pc, #156]	@ (8008104 <vTaskSwitchContext+0xa4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800806e:	4b26      	ldr	r3, [pc, #152]	@ (8008108 <vTaskSwitchContext+0xa8>)
 8008070:	2201      	movs	r2, #1
 8008072:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8008074:	e040      	b.n	80080f8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8008076:	4b24      	ldr	r3, [pc, #144]	@ (8008108 <vTaskSwitchContext+0xa8>)
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800807c:	4b23      	ldr	r3, [pc, #140]	@ (800810c <vTaskSwitchContext+0xac>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	fab3 f383 	clz	r3, r3
 8008088:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800808a:	7afb      	ldrb	r3, [r7, #11]
 800808c:	f1c3 031f 	rsb	r3, r3, #31
 8008090:	617b      	str	r3, [r7, #20]
 8008092:	491f      	ldr	r1, [pc, #124]	@ (8008110 <vTaskSwitchContext+0xb0>)
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10b      	bne.n	80080be <vTaskSwitchContext+0x5e>
        __asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	607b      	str	r3, [r7, #4]
    }
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	e7fd      	b.n	80080ba <vTaskSwitchContext+0x5a>
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4a11      	ldr	r2, [pc, #68]	@ (8008110 <vTaskSwitchContext+0xb0>)
 80080ca:	4413      	add	r3, r2
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	605a      	str	r2, [r3, #4]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3308      	adds	r3, #8
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d104      	bne.n	80080ee <vTaskSwitchContext+0x8e>
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	4a07      	ldr	r2, [pc, #28]	@ (8008114 <vTaskSwitchContext+0xb4>)
 80080f6:	6013      	str	r3, [r2, #0]
}
 80080f8:	bf00      	nop
 80080fa:	371c      	adds	r7, #28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	2000103c 	.word	0x2000103c
 8008108:	20001028 	.word	0x20001028
 800810c:	2000101c 	.word	0x2000101c
 8008110:	20000f40 	.word	0x20000f40
 8008114:	20000f3c 	.word	0x20000f3c

08008118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10b      	bne.n	8008140 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	60fb      	str	r3, [r7, #12]
    }
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	e7fd      	b.n	800813c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008140:	4b07      	ldr	r3, [pc, #28]	@ (8008160 <vTaskPlaceOnEventList+0x48>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3318      	adds	r3, #24
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fe fd2a 	bl	8006ba2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800814e:	2101      	movs	r1, #1
 8008150:	6838      	ldr	r0, [r7, #0]
 8008152:	f000 fb87 	bl	8008864 <prvAddCurrentTaskToDelayedList>
}
 8008156:	bf00      	nop
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20000f3c 	.word	0x20000f3c

08008164 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10b      	bne.n	800818e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	617b      	str	r3, [r7, #20]
    }
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800818e:	4b0a      	ldr	r3, [pc, #40]	@ (80081b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3318      	adds	r3, #24
 8008194:	4619      	mov	r1, r3
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7fe fcdf 	bl	8006b5a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80081a2:	f04f 33ff 	mov.w	r3, #4294967295
 80081a6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	68b8      	ldr	r0, [r7, #8]
 80081ac:	f000 fb5a 	bl	8008864 <prvAddCurrentTaskToDelayedList>
    }
 80081b0:	bf00      	nop
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20000f3c 	.word	0x20000f3c

080081bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10b      	bne.n	80081ea <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	60fb      	str	r3, [r7, #12]
    }
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	e7fd      	b.n	80081e6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3318      	adds	r3, #24
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fe fd10 	bl	8006c14 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f4:	4b1d      	ldr	r3, [pc, #116]	@ (800826c <xTaskRemoveFromEventList+0xb0>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d11c      	bne.n	8008236 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3304      	adds	r3, #4
 8008200:	4618      	mov	r0, r3
 8008202:	f7fe fd07 	bl	8006c14 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820a:	2201      	movs	r2, #1
 800820c:	409a      	lsls	r2, r3
 800820e:	4b18      	ldr	r3, [pc, #96]	@ (8008270 <xTaskRemoveFromEventList+0xb4>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4313      	orrs	r3, r2
 8008214:	4a16      	ldr	r2, [pc, #88]	@ (8008270 <xTaskRemoveFromEventList+0xb4>)
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4a13      	ldr	r2, [pc, #76]	@ (8008274 <xTaskRemoveFromEventList+0xb8>)
 8008226:	441a      	add	r2, r3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3304      	adds	r3, #4
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f7fe fc93 	bl	8006b5a <vListInsertEnd>
 8008234:	e005      	b.n	8008242 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3318      	adds	r3, #24
 800823a:	4619      	mov	r1, r3
 800823c:	480e      	ldr	r0, [pc, #56]	@ (8008278 <xTaskRemoveFromEventList+0xbc>)
 800823e:	f7fe fc8c 	bl	8006b5a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008246:	4b0d      	ldr	r3, [pc, #52]	@ (800827c <xTaskRemoveFromEventList+0xc0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	429a      	cmp	r2, r3
 800824e:	d905      	bls.n	800825c <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008250:	2301      	movs	r3, #1
 8008252:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008254:	4b0a      	ldr	r3, [pc, #40]	@ (8008280 <xTaskRemoveFromEventList+0xc4>)
 8008256:	2201      	movs	r2, #1
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	e001      	b.n	8008260 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8008260:	697b      	ldr	r3, [r7, #20]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	2000103c 	.word	0x2000103c
 8008270:	2000101c 	.word	0x2000101c
 8008274:	20000f40 	.word	0x20000f40
 8008278:	20000fd4 	.word	0x20000fd4
 800827c:	20000f3c 	.word	0x20000f3c
 8008280:	20001028 	.word	0x20001028

08008284 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800828c:	4b06      	ldr	r3, [pc, #24]	@ (80082a8 <vTaskInternalSetTimeOutState+0x24>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008294:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <vTaskInternalSetTimeOutState+0x28>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	2000102c 	.word	0x2000102c
 80082ac:	20001018 	.word	0x20001018

080082b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	613b      	str	r3, [r7, #16]
    }
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10b      	bne.n	80082f6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	60fb      	str	r3, [r7, #12]
    }
 80082f0:	bf00      	nop
 80082f2:	bf00      	nop
 80082f4:	e7fd      	b.n	80082f2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80082f6:	f000 ff69 	bl	80091cc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80082fa:	4b1f      	ldr	r3, [pc, #124]	@ (8008378 <xTaskCheckForTimeOut+0xc8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	d102      	bne.n	800831a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008314:	2300      	movs	r3, #0
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	e026      	b.n	8008368 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	4b17      	ldr	r3, [pc, #92]	@ (800837c <xTaskCheckForTimeOut+0xcc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	429a      	cmp	r2, r3
 8008324:	d00a      	beq.n	800833c <xTaskCheckForTimeOut+0x8c>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	429a      	cmp	r2, r3
 800832e:	d305      	bcc.n	800833c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008330:	2301      	movs	r3, #1
 8008332:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	e015      	b.n	8008368 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	429a      	cmp	r2, r3
 8008344:	d20b      	bcs.n	800835e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	1ad2      	subs	r2, r2, r3
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff ff96 	bl	8008284 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008358:	2300      	movs	r3, #0
 800835a:	61fb      	str	r3, [r7, #28]
 800835c:	e004      	b.n	8008368 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8008368:	f000 ff62 	bl	8009230 <vPortExitCritical>

    return xReturn;
 800836c:	69fb      	ldr	r3, [r7, #28]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20001018 	.word	0x20001018
 800837c:	2000102c 	.word	0x2000102c

08008380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008384:	4b03      	ldr	r3, [pc, #12]	@ (8008394 <vTaskMissedYield+0x14>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]
}
 800838a:	bf00      	nop
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	20001028 	.word	0x20001028

08008398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80083a0:	f000 f852 	bl	8008448 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083a4:	4b06      	ldr	r3, [pc, #24]	@ (80083c0 <prvIdleTask+0x28>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d9f9      	bls.n	80083a0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80083ac:	4b05      	ldr	r3, [pc, #20]	@ (80083c4 <prvIdleTask+0x2c>)
 80083ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80083bc:	e7f0      	b.n	80083a0 <prvIdleTask+0x8>
 80083be:	bf00      	nop
 80083c0:	20000f40 	.word	0x20000f40
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
 80083d2:	e00c      	b.n	80083ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4a12      	ldr	r2, [pc, #72]	@ (8008428 <prvInitialiseTaskLists+0x60>)
 80083e0:	4413      	add	r3, r2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fb8c 	bl	8006b00 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3301      	adds	r3, #1
 80083ec:	607b      	str	r3, [r7, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d9ef      	bls.n	80083d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80083f4:	480d      	ldr	r0, [pc, #52]	@ (800842c <prvInitialiseTaskLists+0x64>)
 80083f6:	f7fe fb83 	bl	8006b00 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80083fa:	480d      	ldr	r0, [pc, #52]	@ (8008430 <prvInitialiseTaskLists+0x68>)
 80083fc:	f7fe fb80 	bl	8006b00 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008400:	480c      	ldr	r0, [pc, #48]	@ (8008434 <prvInitialiseTaskLists+0x6c>)
 8008402:	f7fe fb7d 	bl	8006b00 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8008406:	480c      	ldr	r0, [pc, #48]	@ (8008438 <prvInitialiseTaskLists+0x70>)
 8008408:	f7fe fb7a 	bl	8006b00 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800840c:	480b      	ldr	r0, [pc, #44]	@ (800843c <prvInitialiseTaskLists+0x74>)
 800840e:	f7fe fb77 	bl	8006b00 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008412:	4b0b      	ldr	r3, [pc, #44]	@ (8008440 <prvInitialiseTaskLists+0x78>)
 8008414:	4a05      	ldr	r2, [pc, #20]	@ (800842c <prvInitialiseTaskLists+0x64>)
 8008416:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008418:	4b0a      	ldr	r3, [pc, #40]	@ (8008444 <prvInitialiseTaskLists+0x7c>)
 800841a:	4a05      	ldr	r2, [pc, #20]	@ (8008430 <prvInitialiseTaskLists+0x68>)
 800841c:	601a      	str	r2, [r3, #0]
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000f40 	.word	0x20000f40
 800842c:	20000fa4 	.word	0x20000fa4
 8008430:	20000fb8 	.word	0x20000fb8
 8008434:	20000fd4 	.word	0x20000fd4
 8008438:	20000fe8 	.word	0x20000fe8
 800843c:	20001000 	.word	0x20001000
 8008440:	20000fcc 	.word	0x20000fcc
 8008444:	20000fd0 	.word	0x20000fd0

08008448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800844e:	e019      	b.n	8008484 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8008450:	f000 febc 	bl	80091cc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008454:	4b10      	ldr	r3, [pc, #64]	@ (8008498 <prvCheckTasksWaitingTermination+0x50>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3304      	adds	r3, #4
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fbd7 	bl	8006c14 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8008466:	4b0d      	ldr	r3, [pc, #52]	@ (800849c <prvCheckTasksWaitingTermination+0x54>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3b01      	subs	r3, #1
 800846c:	4a0b      	ldr	r2, [pc, #44]	@ (800849c <prvCheckTasksWaitingTermination+0x54>)
 800846e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8008470:	4b0b      	ldr	r3, [pc, #44]	@ (80084a0 <prvCheckTasksWaitingTermination+0x58>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3b01      	subs	r3, #1
 8008476:	4a0a      	ldr	r2, [pc, #40]	@ (80084a0 <prvCheckTasksWaitingTermination+0x58>)
 8008478:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800847a:	f000 fed9 	bl	8009230 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f810 	bl	80084a4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008484:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <prvCheckTasksWaitingTermination+0x58>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e1      	bne.n	8008450 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20000fe8 	.word	0x20000fe8
 800849c:	20001014 	.word	0x20001014
 80084a0:	20000ffc 	.word	0x20000ffc

080084a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 f897 	bl	80095e4 <vPortFree>
                vPortFree( pxTCB );
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 f894 	bl	80095e4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084c8:	4b0a      	ldr	r3, [pc, #40]	@ (80084f4 <prvResetNextTaskUnblockTime+0x30>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d104      	bne.n	80084dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80084d2:	4b09      	ldr	r3, [pc, #36]	@ (80084f8 <prvResetNextTaskUnblockTime+0x34>)
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295
 80084d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80084da:	e005      	b.n	80084e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084dc:	4b05      	ldr	r3, [pc, #20]	@ (80084f4 <prvResetNextTaskUnblockTime+0x30>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a04      	ldr	r2, [pc, #16]	@ (80084f8 <prvResetNextTaskUnblockTime+0x34>)
 80084e6:	6013      	str	r3, [r2, #0]
}
 80084e8:	bf00      	nop
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000fcc 	.word	0x20000fcc
 80084f8:	20001034 	.word	0x20001034

080084fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8008502:	4b0b      	ldr	r3, [pc, #44]	@ (8008530 <xTaskGetSchedulerState+0x34>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d102      	bne.n	8008510 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800850a:	2301      	movs	r3, #1
 800850c:	607b      	str	r3, [r7, #4]
 800850e:	e008      	b.n	8008522 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008510:	4b08      	ldr	r3, [pc, #32]	@ (8008534 <xTaskGetSchedulerState+0x38>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d102      	bne.n	800851e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008518:	2302      	movs	r3, #2
 800851a:	607b      	str	r3, [r7, #4]
 800851c:	e001      	b.n	8008522 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800851e:	2300      	movs	r3, #0
 8008520:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8008522:	687b      	ldr	r3, [r7, #4]
    }
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	20001020 	.word	0x20001020
 8008534:	2000103c 	.word	0x2000103c

08008538 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d05e      	beq.n	800860c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008552:	4b31      	ldr	r3, [pc, #196]	@ (8008618 <xTaskPriorityInherit+0xe0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008558:	429a      	cmp	r2, r3
 800855a:	d24e      	bcs.n	80085fa <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	2b00      	cmp	r3, #0
 8008562:	db06      	blt.n	8008572 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008564:	4b2c      	ldr	r3, [pc, #176]	@ (8008618 <xTaskPriorityInherit+0xe0>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856a:	f1c3 0205 	rsb	r2, r3, #5
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6959      	ldr	r1, [r3, #20]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4a26      	ldr	r2, [pc, #152]	@ (800861c <xTaskPriorityInherit+0xe4>)
 8008584:	4413      	add	r3, r2
 8008586:	4299      	cmp	r1, r3
 8008588:	d12f      	bne.n	80085ea <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	3304      	adds	r3, #4
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fb40 	bl	8006c14 <uxListRemove>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10a      	bne.n	80085b0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859e:	2201      	movs	r2, #1
 80085a0:	fa02 f303 	lsl.w	r3, r2, r3
 80085a4:	43da      	mvns	r2, r3
 80085a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008620 <xTaskPriorityInherit+0xe8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4013      	ands	r3, r2
 80085ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008620 <xTaskPriorityInherit+0xe8>)
 80085ae:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085b0:	4b19      	ldr	r3, [pc, #100]	@ (8008618 <xTaskPriorityInherit+0xe0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085be:	2201      	movs	r2, #1
 80085c0:	409a      	lsls	r2, r3
 80085c2:	4b17      	ldr	r3, [pc, #92]	@ (8008620 <xTaskPriorityInherit+0xe8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	4a15      	ldr	r2, [pc, #84]	@ (8008620 <xTaskPriorityInherit+0xe8>)
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d0:	4613      	mov	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4a10      	ldr	r2, [pc, #64]	@ (800861c <xTaskPriorityInherit+0xe4>)
 80085da:	441a      	add	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3304      	adds	r3, #4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f7fe fab9 	bl	8006b5a <vListInsertEnd>
 80085e8:	e004      	b.n	80085f4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008618 <xTaskPriorityInherit+0xe0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	e008      	b.n	800860c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085fe:	4b06      	ldr	r3, [pc, #24]	@ (8008618 <xTaskPriorityInherit+0xe0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008604:	429a      	cmp	r2, r3
 8008606:	d201      	bcs.n	800860c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8008608:	2301      	movs	r3, #1
 800860a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800860c:	68fb      	ldr	r3, [r7, #12]
    }
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000f3c 	.word	0x20000f3c
 800861c:	20000f40 	.word	0x20000f40
 8008620:	2000101c 	.word	0x2000101c

08008624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d065      	beq.n	8008706 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800863a:	4b35      	ldr	r3, [pc, #212]	@ (8008710 <xTaskPriorityDisinherit+0xec>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	429a      	cmp	r2, r3
 8008642:	d00b      	beq.n	800865c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	60fb      	str	r3, [r7, #12]
    }
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10b      	bne.n	800867c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	60bb      	str	r3, [r7, #8]
    }
 8008676:	bf00      	nop
 8008678:	bf00      	nop
 800867a:	e7fd      	b.n	8008678 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008680:	1e5a      	subs	r2, r3, #1
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800868e:	429a      	cmp	r2, r3
 8008690:	d039      	beq.n	8008706 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d135      	bne.n	8008706 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3304      	adds	r3, #4
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fab8 	bl	8006c14 <uxListRemove>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ae:	2201      	movs	r2, #1
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	43da      	mvns	r2, r3
 80086b6:	4b17      	ldr	r3, [pc, #92]	@ (8008714 <xTaskPriorityDisinherit+0xf0>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4013      	ands	r3, r2
 80086bc:	4a15      	ldr	r2, [pc, #84]	@ (8008714 <xTaskPriorityDisinherit+0xf0>)
 80086be:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086cc:	f1c3 0205 	rsb	r2, r3, #5
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d8:	2201      	movs	r2, #1
 80086da:	409a      	lsls	r2, r3
 80086dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008714 <xTaskPriorityDisinherit+0xf0>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008714 <xTaskPriorityDisinherit+0xf0>)
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4a09      	ldr	r2, [pc, #36]	@ (8008718 <xTaskPriorityDisinherit+0xf4>)
 80086f4:	441a      	add	r2, r3
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f7fe fa2c 	bl	8006b5a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008702:	2301      	movs	r3, #1
 8008704:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008706:	697b      	ldr	r3, [r7, #20]
    }
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000f3c 	.word	0x20000f3c
 8008714:	2000101c 	.word	0x2000101c
 8008718:	20000f40 	.word	0x20000f40

0800871c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800872a:	2301      	movs	r3, #1
 800872c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d079      	beq.n	8008828 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10b      	bne.n	8008754 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	60fb      	str	r3, [r7, #12]
    }
 800874e:	bf00      	nop
 8008750:	bf00      	nop
 8008752:	e7fd      	b.n	8008750 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d902      	bls.n	8008764 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	61fb      	str	r3, [r7, #28]
 8008762:	e002      	b.n	800876a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008768:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876e:	69fa      	ldr	r2, [r7, #28]
 8008770:	429a      	cmp	r2, r3
 8008772:	d059      	beq.n	8008828 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	429a      	cmp	r2, r3
 800877c:	d154      	bne.n	8008828 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800877e:	4b2c      	ldr	r3, [pc, #176]	@ (8008830 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	429a      	cmp	r2, r3
 8008786:	d10b      	bne.n	80087a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	60bb      	str	r3, [r7, #8]
    }
 800879a:	bf00      	nop
 800879c:	bf00      	nop
 800879e:	e7fd      	b.n	800879c <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	db04      	blt.n	80087be <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f1c3 0205 	rsb	r2, r3, #5
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	6959      	ldr	r1, [r3, #20]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4a19      	ldr	r2, [pc, #100]	@ (8008834 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80087ce:	4413      	add	r3, r2
 80087d0:	4299      	cmp	r1, r3
 80087d2:	d129      	bne.n	8008828 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe fa1b 	bl	8006c14 <uxListRemove>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	2201      	movs	r2, #1
 80087ea:	fa02 f303 	lsl.w	r3, r2, r3
 80087ee:	43da      	mvns	r2, r3
 80087f0:	4b11      	ldr	r3, [pc, #68]	@ (8008838 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4013      	ands	r3, r2
 80087f6:	4a10      	ldr	r2, [pc, #64]	@ (8008838 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80087f8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fe:	2201      	movs	r2, #1
 8008800:	409a      	lsls	r2, r3
 8008802:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4313      	orrs	r3, r2
 8008808:	4a0b      	ldr	r2, [pc, #44]	@ (8008838 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4a06      	ldr	r2, [pc, #24]	@ (8008834 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800881a:	441a      	add	r2, r3
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	3304      	adds	r3, #4
 8008820:	4619      	mov	r1, r3
 8008822:	4610      	mov	r0, r2
 8008824:	f7fe f999 	bl	8006b5a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008828:	bf00      	nop
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	20000f3c 	.word	0x20000f3c
 8008834:	20000f40 	.word	0x20000f40
 8008838:	2000101c 	.word	0x2000101c

0800883c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8008840:	4b07      	ldr	r3, [pc, #28]	@ (8008860 <pvTaskIncrementMutexHeldCount+0x24>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8008848:	4b05      	ldr	r3, [pc, #20]	@ (8008860 <pvTaskIncrementMutexHeldCount+0x24>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800884e:	3201      	adds	r2, #1
 8008850:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8008852:	4b03      	ldr	r3, [pc, #12]	@ (8008860 <pvTaskIncrementMutexHeldCount+0x24>)
 8008854:	681b      	ldr	r3, [r3, #0]
    }
 8008856:	4618      	mov	r0, r3
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	20000f3c 	.word	0x20000f3c

08008864 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800886e:	4b29      	ldr	r3, [pc, #164]	@ (8008914 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008874:	4b28      	ldr	r3, [pc, #160]	@ (8008918 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3304      	adds	r3, #4
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe f9ca 	bl	8006c14 <uxListRemove>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10b      	bne.n	800889e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008886:	4b24      	ldr	r3, [pc, #144]	@ (8008918 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888c:	2201      	movs	r2, #1
 800888e:	fa02 f303 	lsl.w	r3, r2, r3
 8008892:	43da      	mvns	r2, r3
 8008894:	4b21      	ldr	r3, [pc, #132]	@ (800891c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4013      	ands	r3, r2
 800889a:	4a20      	ldr	r2, [pc, #128]	@ (800891c <prvAddCurrentTaskToDelayedList+0xb8>)
 800889c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a4:	d10a      	bne.n	80088bc <prvAddCurrentTaskToDelayedList+0x58>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4619      	mov	r1, r3
 80088b4:	481a      	ldr	r0, [pc, #104]	@ (8008920 <prvAddCurrentTaskToDelayedList+0xbc>)
 80088b6:	f7fe f950 	bl	8006b5a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80088ba:	e026      	b.n	800890a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4413      	add	r3, r2
 80088c2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088c4:	4b14      	ldr	r3, [pc, #80]	@ (8008918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d209      	bcs.n	80088e8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088d4:	4b13      	ldr	r3, [pc, #76]	@ (8008924 <prvAddCurrentTaskToDelayedList+0xc0>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3304      	adds	r3, #4
 80088de:	4619      	mov	r1, r3
 80088e0:	4610      	mov	r0, r2
 80088e2:	f7fe f95e 	bl	8006ba2 <vListInsert>
}
 80088e6:	e010      	b.n	800890a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008928 <prvAddCurrentTaskToDelayedList+0xc4>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7fe f954 	bl	8006ba2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80088fa:	4b0c      	ldr	r3, [pc, #48]	@ (800892c <prvAddCurrentTaskToDelayedList+0xc8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	429a      	cmp	r2, r3
 8008902:	d202      	bcs.n	800890a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8008904:	4a09      	ldr	r2, [pc, #36]	@ (800892c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	6013      	str	r3, [r2, #0]
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20001018 	.word	0x20001018
 8008918:	20000f3c 	.word	0x20000f3c
 800891c:	2000101c 	.word	0x2000101c
 8008920:	20001000 	.word	0x20001000
 8008924:	20000fd0 	.word	0x20000fd0
 8008928:	20000fcc 	.word	0x20000fcc
 800892c:	20001034 	.word	0x20001034

08008930 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8008936:	2300      	movs	r3, #0
 8008938:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800893a:	f000 fae1 	bl	8008f00 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800893e:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <xTimerCreateTimerTask+0x58>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8008946:	4b11      	ldr	r3, [pc, #68]	@ (800898c <xTimerCreateTimerTask+0x5c>)
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	2302      	movs	r3, #2
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	2300      	movs	r3, #0
 8008950:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008954:	490e      	ldr	r1, [pc, #56]	@ (8008990 <xTimerCreateTimerTask+0x60>)
 8008956:	480f      	ldr	r0, [pc, #60]	@ (8008994 <xTimerCreateTimerTask+0x64>)
 8008958:	f7ff f83e 	bl	80079d8 <xTaskCreate>
 800895c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10b      	bne.n	800897c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	603b      	str	r3, [r7, #0]
    }
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	e7fd      	b.n	8008978 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800897c:	687b      	ldr	r3, [r7, #4]
    }
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20001070 	.word	0x20001070
 800898c:	20001074 	.word	0x20001074
 8008990:	0800b19c 	.word	0x0800b19c
 8008994:	08008ad1 	.word	0x08008ad1

08008998 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	@ 0x28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10b      	bne.n	80089c8 <xTimerGenericCommand+0x30>
        __asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	623b      	str	r3, [r7, #32]
    }
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80089c8:	4b19      	ldr	r3, [pc, #100]	@ (8008a30 <xTimerGenericCommand+0x98>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d02a      	beq.n	8008a26 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b05      	cmp	r3, #5
 80089e0:	dc18      	bgt.n	8008a14 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089e2:	f7ff fd8b 	bl	80084fc <xTaskGetSchedulerState>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d109      	bne.n	8008a00 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089ec:	4b10      	ldr	r3, [pc, #64]	@ (8008a30 <xTimerGenericCommand+0x98>)
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	f107 0114 	add.w	r1, r7, #20
 80089f4:	2300      	movs	r3, #0
 80089f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089f8:	f7fe fa26 	bl	8006e48 <xQueueGenericSend>
 80089fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80089fe:	e012      	b.n	8008a26 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a00:	4b0b      	ldr	r3, [pc, #44]	@ (8008a30 <xTimerGenericCommand+0x98>)
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	f107 0114 	add.w	r1, r7, #20
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f7fe fa1c 	bl	8006e48 <xQueueGenericSend>
 8008a10:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a12:	e008      	b.n	8008a26 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a14:	4b06      	ldr	r3, [pc, #24]	@ (8008a30 <xTimerGenericCommand+0x98>)
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	f107 0114 	add.w	r1, r7, #20
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	f7fe fb14 	bl	800704c <xQueueGenericSendFromISR>
 8008a24:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3728      	adds	r7, #40	@ 0x28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20001070 	.word	0x20001070

08008a34 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af02      	add	r7, sp, #8
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a3e:	4b23      	ldr	r3, [pc, #140]	@ (8008acc <prvProcessExpiredTimer+0x98>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fe f8e1 	bl	8006c14 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d023      	beq.n	8008aa8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	699a      	ldr	r2, [r3, #24]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	18d1      	adds	r1, r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	6978      	ldr	r0, [r7, #20]
 8008a6e:	f000 f8d5 	bl	8008c1c <prvInsertTimerInActiveList>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d020      	beq.n	8008aba <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	2100      	movs	r1, #0
 8008a82:	6978      	ldr	r0, [r7, #20]
 8008a84:	f7ff ff88 	bl	8008998 <xTimerGenericCommand>
 8008a88:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d114      	bne.n	8008aba <prvProcessExpiredTimer+0x86>
        __asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
    }
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008aae:	f023 0301 	bic.w	r3, r3, #1
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	6978      	ldr	r0, [r7, #20]
 8008ac0:	4798      	blx	r3
    }
 8008ac2:	bf00      	nop
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20001068 	.word	0x20001068

08008ad0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ad8:	f107 0308 	add.w	r3, r7, #8
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 f859 	bl	8008b94 <prvGetNextExpireTime>
 8008ae2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f805 	bl	8008af8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008aee:	f000 f8d7 	bl	8008ca0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008af2:	bf00      	nop
 8008af4:	e7f0      	b.n	8008ad8 <prvTimerTask+0x8>
	...

08008af8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008b02:	f7ff f937 	bl	8007d74 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b06:	f107 0308 	add.w	r3, r7, #8
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 f866 	bl	8008bdc <prvSampleTimeNow>
 8008b10:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d130      	bne.n	8008b7a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10a      	bne.n	8008b34 <prvProcessTimerOrBlockTask+0x3c>
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d806      	bhi.n	8008b34 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8008b26:	f7ff f933 	bl	8007d90 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b2a:	68f9      	ldr	r1, [r7, #12]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff ff81 	bl	8008a34 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008b32:	e024      	b.n	8008b7e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d008      	beq.n	8008b4c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b3a:	4b13      	ldr	r3, [pc, #76]	@ (8008b88 <prvProcessTimerOrBlockTask+0x90>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <prvProcessTimerOrBlockTask+0x50>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e000      	b.n	8008b4a <prvProcessTimerOrBlockTask+0x52>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b8c <prvProcessTimerOrBlockTask+0x94>)
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f7fe ff09 	bl	8007970 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008b5e:	f7ff f917 	bl	8007d90 <xTaskResumeAll>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10a      	bne.n	8008b7e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008b68:	4b09      	ldr	r3, [pc, #36]	@ (8008b90 <prvProcessTimerOrBlockTask+0x98>)
 8008b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	f3bf 8f6f 	isb	sy
    }
 8008b78:	e001      	b.n	8008b7e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008b7a:	f7ff f909 	bl	8007d90 <xTaskResumeAll>
    }
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	2000106c 	.word	0x2000106c
 8008b8c:	20001070 	.word	0x20001070
 8008b90:	e000ed04 	.word	0xe000ed04

08008b94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd8 <prvGetNextExpireTime+0x44>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <prvGetNextExpireTime+0x16>
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	e000      	b.n	8008bac <prvGetNextExpireTime+0x18>
 8008baa:	2200      	movs	r2, #0
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d105      	bne.n	8008bc4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bb8:	4b07      	ldr	r3, [pc, #28]	@ (8008bd8 <prvGetNextExpireTime+0x44>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	e001      	b.n	8008bc8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
    }
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20001068 	.word	0x20001068

08008bdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008be4:	f7ff f972 	bl	8007ecc <xTaskGetTickCount>
 8008be8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008bea:	4b0b      	ldr	r3, [pc, #44]	@ (8008c18 <prvSampleTimeNow+0x3c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d205      	bcs.n	8008c00 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008bf4:	f000 f91e 	bl	8008e34 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	e002      	b.n	8008c06 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008c06:	4a04      	ldr	r2, [pc, #16]	@ (8008c18 <prvSampleTimeNow+0x3c>)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
    }
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20001078 	.word	0x20001078

08008c1c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d812      	bhi.n	8008c68 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	1ad2      	subs	r2, r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d302      	bcc.n	8008c56 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008c50:	2301      	movs	r3, #1
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	e01b      	b.n	8008c8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c56:	4b10      	ldr	r3, [pc, #64]	@ (8008c98 <prvInsertTimerInActiveList+0x7c>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4610      	mov	r0, r2
 8008c62:	f7fd ff9e 	bl	8006ba2 <vListInsert>
 8008c66:	e012      	b.n	8008c8e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d206      	bcs.n	8008c7e <prvInsertTimerInActiveList+0x62>
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d302      	bcc.n	8008c7e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	e007      	b.n	8008c8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c7e:	4b07      	ldr	r3, [pc, #28]	@ (8008c9c <prvInsertTimerInActiveList+0x80>)
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4619      	mov	r1, r3
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f7fd ff8a 	bl	8006ba2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008c8e:	697b      	ldr	r3, [r7, #20]
    }
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	2000106c 	.word	0x2000106c
 8008c9c:	20001068 	.word	0x20001068

08008ca0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08c      	sub	sp, #48	@ 0x30
 8008ca4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ca6:	e0b2      	b.n	8008e0e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f2c0 80af 	blt.w	8008e0e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d004      	beq.n	8008cc6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd ffa7 	bl	8006c14 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cc6:	1d3b      	adds	r3, r7, #4
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff ff87 	bl	8008bdc <prvSampleTimeNow>
 8008cce:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b09      	cmp	r3, #9
 8008cd4:	f200 8098 	bhi.w	8008e08 <prvProcessReceivedCommands+0x168>
 8008cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce0 <prvProcessReceivedCommands+0x40>)
 8008cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cde:	bf00      	nop
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d09 	.word	0x08008d09
 8008cec:	08008d7f 	.word	0x08008d7f
 8008cf0:	08008d93 	.word	0x08008d93
 8008cf4:	08008ddf 	.word	0x08008ddf
 8008cf8:	08008d09 	.word	0x08008d09
 8008cfc:	08008d09 	.word	0x08008d09
 8008d00:	08008d7f 	.word	0x08008d7f
 8008d04:	08008d93 	.word	0x08008d93
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d0e:	f043 0301 	orr.w	r3, r3, #1
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	18d1      	adds	r1, r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6a3a      	ldr	r2, [r7, #32]
 8008d26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d28:	f7ff ff78 	bl	8008c1c <prvInsertTimerInActiveList>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d06c      	beq.n	8008e0c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d38:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d061      	beq.n	8008e0c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	441a      	add	r2, r3
 8008d50:	2300      	movs	r3, #0
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	2300      	movs	r3, #0
 8008d56:	2100      	movs	r1, #0
 8008d58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d5a:	f7ff fe1d 	bl	8008998 <xTimerGenericCommand>
 8008d5e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d152      	bne.n	8008e0c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	61bb      	str	r3, [r7, #24]
    }
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008d90:	e03d      	b.n	8008e0e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d98:	f043 0301 	orr.w	r3, r3, #1
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10b      	bne.n	8008dca <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	617b      	str	r3, [r7, #20]
    }
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	e7fd      	b.n	8008dc6 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dcc:	699a      	ldr	r2, [r3, #24]
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	18d1      	adds	r1, r2, r3
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	6a3a      	ldr	r2, [r7, #32]
 8008dd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008dd8:	f7ff ff20 	bl	8008c1c <prvInsertTimerInActiveList>
                        break;
 8008ddc:	e017      	b.n	8008e0e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d103      	bne.n	8008df4 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8008dec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008dee:	f000 fbf9 	bl	80095e4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008df2:	e00c      	b.n	8008e0e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dfa:	f023 0301 	bic.w	r3, r3, #1
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008e06:	e002      	b.n	8008e0e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008e08:	bf00      	nop
 8008e0a:	e000      	b.n	8008e0e <prvProcessReceivedCommands+0x16e>
                        break;
 8008e0c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e0e:	4b08      	ldr	r3, [pc, #32]	@ (8008e30 <prvProcessReceivedCommands+0x190>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f107 0108 	add.w	r1, r7, #8
 8008e16:	2200      	movs	r2, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe fa65 	bl	80072e8 <xQueueReceive>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f47f af41 	bne.w	8008ca8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008e26:	bf00      	nop
 8008e28:	bf00      	nop
 8008e2a:	3728      	adds	r7, #40	@ 0x28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20001070 	.word	0x20001070

08008e34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e3a:	e049      	b.n	8008ed0 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ef8 <prvSwitchTimerLists+0xc4>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e46:	4b2c      	ldr	r3, [pc, #176]	@ (8008ef8 <prvSwitchTimerLists+0xc4>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fd fedd 	bl	8006c14 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d02f      	beq.n	8008ed0 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4413      	add	r3, r2
 8008e78:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d90e      	bls.n	8008ea0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ef8 <prvSwitchTimerLists+0xc4>)
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3304      	adds	r3, #4
 8008e96:	4619      	mov	r1, r3
 8008e98:	4610      	mov	r0, r2
 8008e9a:	f7fd fe82 	bl	8006ba2 <vListInsert>
 8008e9e:	e017      	b.n	8008ed0 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7ff fd74 	bl	8008998 <xTimerGenericCommand>
 8008eb0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	603b      	str	r3, [r7, #0]
    }
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ed0:	4b09      	ldr	r3, [pc, #36]	@ (8008ef8 <prvSwitchTimerLists+0xc4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1b0      	bne.n	8008e3c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8008eda:	4b07      	ldr	r3, [pc, #28]	@ (8008ef8 <prvSwitchTimerLists+0xc4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8008ee0:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <prvSwitchTimerLists+0xc8>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a04      	ldr	r2, [pc, #16]	@ (8008ef8 <prvSwitchTimerLists+0xc4>)
 8008ee6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008ee8:	4a04      	ldr	r2, [pc, #16]	@ (8008efc <prvSwitchTimerLists+0xc8>)
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	6013      	str	r3, [r2, #0]
    }
 8008eee:	bf00      	nop
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20001068 	.word	0x20001068
 8008efc:	2000106c 	.word	0x2000106c

08008f00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008f04:	f000 f962 	bl	80091cc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008f08:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <prvCheckForValidListAndQueue+0x54>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d11d      	bne.n	8008f4c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008f10:	4811      	ldr	r0, [pc, #68]	@ (8008f58 <prvCheckForValidListAndQueue+0x58>)
 8008f12:	f7fd fdf5 	bl	8006b00 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008f16:	4811      	ldr	r0, [pc, #68]	@ (8008f5c <prvCheckForValidListAndQueue+0x5c>)
 8008f18:	f7fd fdf2 	bl	8006b00 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008f1c:	4b10      	ldr	r3, [pc, #64]	@ (8008f60 <prvCheckForValidListAndQueue+0x60>)
 8008f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8008f58 <prvCheckForValidListAndQueue+0x58>)
 8008f20:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008f22:	4b10      	ldr	r3, [pc, #64]	@ (8008f64 <prvCheckForValidListAndQueue+0x64>)
 8008f24:	4a0d      	ldr	r2, [pc, #52]	@ (8008f5c <prvCheckForValidListAndQueue+0x5c>)
 8008f26:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008f28:	2200      	movs	r2, #0
 8008f2a:	210c      	movs	r1, #12
 8008f2c:	200a      	movs	r0, #10
 8008f2e:	f7fd ff05 	bl	8006d3c <xQueueGenericCreate>
 8008f32:	4603      	mov	r3, r0
 8008f34:	4a07      	ldr	r2, [pc, #28]	@ (8008f54 <prvCheckForValidListAndQueue+0x54>)
 8008f36:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <prvCheckForValidListAndQueue+0x54>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f40:	4b04      	ldr	r3, [pc, #16]	@ (8008f54 <prvCheckForValidListAndQueue+0x54>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4908      	ldr	r1, [pc, #32]	@ (8008f68 <prvCheckForValidListAndQueue+0x68>)
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fce8 	bl	800791c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008f4c:	f000 f970 	bl	8009230 <vPortExitCritical>
    }
 8008f50:	bf00      	nop
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20001070 	.word	0x20001070
 8008f58:	20001040 	.word	0x20001040
 8008f5c:	20001054 	.word	0x20001054
 8008f60:	20001068 	.word	0x20001068
 8008f64:	2000106c 	.word	0x2000106c
 8008f68:	0800b1a4 	.word	0x0800b1a4

08008f6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3b04      	subs	r3, #4
 8008f7c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3b04      	subs	r3, #4
 8008f8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f023 0201 	bic.w	r2, r3, #1
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3b04      	subs	r3, #4
 8008f9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8008fd0 <pxPortInitialiseStack+0x64>)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3b14      	subs	r3, #20
 8008fa6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3b04      	subs	r3, #4
 8008fb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f06f 0202 	mvn.w	r2, #2
 8008fba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3b20      	subs	r3, #32
 8008fc0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	08008fd5 	.word	0x08008fd5

08008fd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008fde:	4b13      	ldr	r3, [pc, #76]	@ (800902c <prvTaskExitError+0x58>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe6:	d00b      	beq.n	8009000 <prvTaskExitError+0x2c>
        __asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	60fb      	str	r3, [r7, #12]
    }
 8008ffa:	bf00      	nop
 8008ffc:	bf00      	nop
 8008ffe:	e7fd      	b.n	8008ffc <prvTaskExitError+0x28>
        __asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60bb      	str	r3, [r7, #8]
    }
 8009012:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8009014:	bf00      	nop
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0fc      	beq.n	8009016 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	20000010 	.word	0x20000010

08009030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8009030:	4b07      	ldr	r3, [pc, #28]	@ (8009050 <pxCurrentTCBConst2>)
 8009032:	6819      	ldr	r1, [r3, #0]
 8009034:	6808      	ldr	r0, [r1, #0]
 8009036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903a:	f380 8809 	msr	PSP, r0
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f04f 0000 	mov.w	r0, #0
 8009046:	f380 8811 	msr	BASEPRI, r0
 800904a:	4770      	bx	lr
 800904c:	f3af 8000 	nop.w

08009050 <pxCurrentTCBConst2>:
 8009050:	20000f3c 	.word	0x20000f3c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop

08009058 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009058:	4808      	ldr	r0, [pc, #32]	@ (800907c <prvPortStartFirstTask+0x24>)
 800905a:	6800      	ldr	r0, [r0, #0]
 800905c:	6800      	ldr	r0, [r0, #0]
 800905e:	f380 8808 	msr	MSP, r0
 8009062:	f04f 0000 	mov.w	r0, #0
 8009066:	f380 8814 	msr	CONTROL, r0
 800906a:	b662      	cpsie	i
 800906c:	b661      	cpsie	f
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	df00      	svc	0
 8009078:	bf00      	nop
 800907a:	0000      	.short	0x0000
 800907c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop

08009084 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800908a:	4b47      	ldr	r3, [pc, #284]	@ (80091a8 <xPortStartScheduler+0x124>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a47      	ldr	r2, [pc, #284]	@ (80091ac <xPortStartScheduler+0x128>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d10b      	bne.n	80090ac <xPortStartScheduler+0x28>
        __asm volatile
 8009094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	613b      	str	r3, [r7, #16]
    }
 80090a6:	bf00      	nop
 80090a8:	bf00      	nop
 80090aa:	e7fd      	b.n	80090a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090ac:	4b3e      	ldr	r3, [pc, #248]	@ (80091a8 <xPortStartScheduler+0x124>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a3f      	ldr	r2, [pc, #252]	@ (80091b0 <xPortStartScheduler+0x12c>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d10b      	bne.n	80090ce <xPortStartScheduler+0x4a>
        __asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	60fb      	str	r3, [r7, #12]
    }
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	e7fd      	b.n	80090ca <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090ce:	4b39      	ldr	r3, [pc, #228]	@ (80091b4 <xPortStartScheduler+0x130>)
 80090d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	22ff      	movs	r2, #255	@ 0xff
 80090de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	4b31      	ldr	r3, [pc, #196]	@ (80091b8 <xPortStartScheduler+0x134>)
 80090f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090f6:	4b31      	ldr	r3, [pc, #196]	@ (80091bc <xPortStartScheduler+0x138>)
 80090f8:	2207      	movs	r2, #7
 80090fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090fc:	e009      	b.n	8009112 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80090fe:	4b2f      	ldr	r3, [pc, #188]	@ (80091bc <xPortStartScheduler+0x138>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3b01      	subs	r3, #1
 8009104:	4a2d      	ldr	r2, [pc, #180]	@ (80091bc <xPortStartScheduler+0x138>)
 8009106:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	b2db      	uxtb	r3, r3
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	b2db      	uxtb	r3, r3
 8009110:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800911a:	2b80      	cmp	r3, #128	@ 0x80
 800911c:	d0ef      	beq.n	80090fe <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800911e:	4b27      	ldr	r3, [pc, #156]	@ (80091bc <xPortStartScheduler+0x138>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f1c3 0307 	rsb	r3, r3, #7
 8009126:	2b04      	cmp	r3, #4
 8009128:	d00b      	beq.n	8009142 <xPortStartScheduler+0xbe>
        __asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	60bb      	str	r3, [r7, #8]
    }
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009142:	4b1e      	ldr	r3, [pc, #120]	@ (80091bc <xPortStartScheduler+0x138>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	021b      	lsls	r3, r3, #8
 8009148:	4a1c      	ldr	r2, [pc, #112]	@ (80091bc <xPortStartScheduler+0x138>)
 800914a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800914c:	4b1b      	ldr	r3, [pc, #108]	@ (80091bc <xPortStartScheduler+0x138>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009154:	4a19      	ldr	r2, [pc, #100]	@ (80091bc <xPortStartScheduler+0x138>)
 8009156:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	b2da      	uxtb	r2, r3
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009160:	4b17      	ldr	r3, [pc, #92]	@ (80091c0 <xPortStartScheduler+0x13c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a16      	ldr	r2, [pc, #88]	@ (80091c0 <xPortStartScheduler+0x13c>)
 8009166:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800916a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800916c:	4b14      	ldr	r3, [pc, #80]	@ (80091c0 <xPortStartScheduler+0x13c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a13      	ldr	r2, [pc, #76]	@ (80091c0 <xPortStartScheduler+0x13c>)
 8009172:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009176:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009178:	f000 f8e0 	bl	800933c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800917c:	4b11      	ldr	r3, [pc, #68]	@ (80091c4 <xPortStartScheduler+0x140>)
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8009182:	f000 f8ff 	bl	8009384 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009186:	4b10      	ldr	r3, [pc, #64]	@ (80091c8 <xPortStartScheduler+0x144>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a0f      	ldr	r2, [pc, #60]	@ (80091c8 <xPortStartScheduler+0x144>)
 800918c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009190:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8009192:	f7ff ff61 	bl	8009058 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009196:	f7fe ff63 	bl	8008060 <vTaskSwitchContext>
    prvTaskExitError();
 800919a:	f7ff ff1b 	bl	8008fd4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed00 	.word	0xe000ed00
 80091ac:	410fc271 	.word	0x410fc271
 80091b0:	410fc270 	.word	0x410fc270
 80091b4:	e000e400 	.word	0xe000e400
 80091b8:	2000107c 	.word	0x2000107c
 80091bc:	20001080 	.word	0x20001080
 80091c0:	e000ed20 	.word	0xe000ed20
 80091c4:	20000010 	.word	0x20000010
 80091c8:	e000ef34 	.word	0xe000ef34

080091cc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
        __asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	607b      	str	r3, [r7, #4]
    }
 80091e4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80091e6:	4b10      	ldr	r3, [pc, #64]	@ (8009228 <vPortEnterCritical+0x5c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3301      	adds	r3, #1
 80091ec:	4a0e      	ldr	r2, [pc, #56]	@ (8009228 <vPortEnterCritical+0x5c>)
 80091ee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80091f0:	4b0d      	ldr	r3, [pc, #52]	@ (8009228 <vPortEnterCritical+0x5c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d110      	bne.n	800921a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091f8:	4b0c      	ldr	r3, [pc, #48]	@ (800922c <vPortEnterCritical+0x60>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00b      	beq.n	800921a <vPortEnterCritical+0x4e>
        __asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	603b      	str	r3, [r7, #0]
    }
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	e7fd      	b.n	8009216 <vPortEnterCritical+0x4a>
    }
}
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	20000010 	.word	0x20000010
 800922c:	e000ed04 	.word	0xe000ed04

08009230 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8009236:	4b12      	ldr	r3, [pc, #72]	@ (8009280 <vPortExitCritical+0x50>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10b      	bne.n	8009256 <vPortExitCritical+0x26>
        __asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	607b      	str	r3, [r7, #4]
    }
 8009250:	bf00      	nop
 8009252:	bf00      	nop
 8009254:	e7fd      	b.n	8009252 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009256:	4b0a      	ldr	r3, [pc, #40]	@ (8009280 <vPortExitCritical+0x50>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3b01      	subs	r3, #1
 800925c:	4a08      	ldr	r2, [pc, #32]	@ (8009280 <vPortExitCritical+0x50>)
 800925e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009260:	4b07      	ldr	r3, [pc, #28]	@ (8009280 <vPortExitCritical+0x50>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d105      	bne.n	8009274 <vPortExitCritical+0x44>
 8009268:	2300      	movs	r3, #0
 800926a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	f383 8811 	msr	BASEPRI, r3
    }
 8009272:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	20000010 	.word	0x20000010
	...

08009290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009290:	f3ef 8009 	mrs	r0, PSP
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	4b15      	ldr	r3, [pc, #84]	@ (80092f0 <pxCurrentTCBConst>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	f01e 0f10 	tst.w	lr, #16
 80092a0:	bf08      	it	eq
 80092a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092aa:	6010      	str	r0, [r2, #0]
 80092ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80092b4:	f380 8811 	msr	BASEPRI, r0
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f7fe fece 	bl	8008060 <vTaskSwitchContext>
 80092c4:	f04f 0000 	mov.w	r0, #0
 80092c8:	f380 8811 	msr	BASEPRI, r0
 80092cc:	bc09      	pop	{r0, r3}
 80092ce:	6819      	ldr	r1, [r3, #0]
 80092d0:	6808      	ldr	r0, [r1, #0]
 80092d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d6:	f01e 0f10 	tst.w	lr, #16
 80092da:	bf08      	it	eq
 80092dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092e0:	f380 8809 	msr	PSP, r0
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	f3af 8000 	nop.w

080092f0 <pxCurrentTCBConst>:
 80092f0:	20000f3c 	.word	0x20000f3c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop

080092f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
        __asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	607b      	str	r3, [r7, #4]
    }
 8009310:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009312:	f7fe fdeb 	bl	8007eec <xTaskIncrementTick>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800931c:	4b06      	ldr	r3, [pc, #24]	@ (8009338 <SysTick_Handler+0x40>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	2300      	movs	r3, #0
 8009326:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f383 8811 	msr	BASEPRI, r3
    }
 800932e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009340:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <vPortSetupTimerInterrupt+0x34>)
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009346:	4b0b      	ldr	r3, [pc, #44]	@ (8009374 <vPortSetupTimerInterrupt+0x38>)
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800934c:	4b0a      	ldr	r3, [pc, #40]	@ (8009378 <vPortSetupTimerInterrupt+0x3c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a0a      	ldr	r2, [pc, #40]	@ (800937c <vPortSetupTimerInterrupt+0x40>)
 8009352:	fba2 2303 	umull	r2, r3, r2, r3
 8009356:	099b      	lsrs	r3, r3, #6
 8009358:	4a09      	ldr	r2, [pc, #36]	@ (8009380 <vPortSetupTimerInterrupt+0x44>)
 800935a:	3b01      	subs	r3, #1
 800935c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800935e:	4b04      	ldr	r3, [pc, #16]	@ (8009370 <vPortSetupTimerInterrupt+0x34>)
 8009360:	2207      	movs	r2, #7
 8009362:	601a      	str	r2, [r3, #0]
}
 8009364:	bf00      	nop
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	e000e010 	.word	0xe000e010
 8009374:	e000e018 	.word	0xe000e018
 8009378:	20000000 	.word	0x20000000
 800937c:	10624dd3 	.word	0x10624dd3
 8009380:	e000e014 	.word	0xe000e014

08009384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009384:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009394 <vPortEnableVFP+0x10>
 8009388:	6801      	ldr	r1, [r0, #0]
 800938a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800938e:	6001      	str	r1, [r0, #0]
 8009390:	4770      	bx	lr
 8009392:	0000      	.short	0x0000
 8009394:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop

0800939c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80093a2:	f3ef 8305 	mrs	r3, IPSR
 80093a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b0f      	cmp	r3, #15
 80093ac:	d915      	bls.n	80093da <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093ae:	4a18      	ldr	r2, [pc, #96]	@ (8009410 <vPortValidateInterruptPriority+0x74>)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093b8:	4b16      	ldr	r3, [pc, #88]	@ (8009414 <vPortValidateInterruptPriority+0x78>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	7afa      	ldrb	r2, [r7, #11]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d20b      	bcs.n	80093da <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	607b      	str	r3, [r7, #4]
    }
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	e7fd      	b.n	80093d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093da:	4b0f      	ldr	r3, [pc, #60]	@ (8009418 <vPortValidateInterruptPriority+0x7c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80093e2:	4b0e      	ldr	r3, [pc, #56]	@ (800941c <vPortValidateInterruptPriority+0x80>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d90b      	bls.n	8009402 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	603b      	str	r3, [r7, #0]
    }
 80093fc:	bf00      	nop
 80093fe:	bf00      	nop
 8009400:	e7fd      	b.n	80093fe <vPortValidateInterruptPriority+0x62>
    }
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	e000e3f0 	.word	0xe000e3f0
 8009414:	2000107c 	.word	0x2000107c
 8009418:	e000ed0c 	.word	0xe000ed0c
 800941c:	20001080 	.word	0x20001080

08009420 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08a      	sub	sp, #40	@ 0x28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8009428:	2300      	movs	r3, #0
 800942a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800942c:	f7fe fca2 	bl	8007d74 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009430:	4b66      	ldr	r3, [pc, #408]	@ (80095cc <pvPortMalloc+0x1ac>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009438:	f000 f938 	bl	80096ac <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800943c:	4b64      	ldr	r3, [pc, #400]	@ (80095d0 <pvPortMalloc+0x1b0>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4013      	ands	r3, r2
 8009444:	2b00      	cmp	r3, #0
 8009446:	f040 80a9 	bne.w	800959c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d02e      	beq.n	80094ae <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8009450:	2208      	movs	r2, #8
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	429a      	cmp	r2, r3
 800945a:	d228      	bcs.n	80094ae <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800945c:	2208      	movs	r2, #8
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4413      	add	r3, r2
 8009462:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f003 0307 	and.w	r3, r3, #7
 800946a:	2b00      	cmp	r3, #0
 800946c:	d022      	beq.n	80094b4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f023 0307 	bic.w	r3, r3, #7
 8009474:	3308      	adds	r3, #8
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	429a      	cmp	r2, r3
 800947a:	d215      	bcs.n	80094a8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f023 0307 	bic.w	r3, r3, #7
 8009482:	3308      	adds	r3, #8
 8009484:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	2b00      	cmp	r3, #0
 800948e:	d011      	beq.n	80094b4 <pvPortMalloc+0x94>
        __asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	617b      	str	r3, [r7, #20]
    }
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	e7fd      	b.n	80094a4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094ac:	e002      	b.n	80094b4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	607b      	str	r3, [r7, #4]
 80094b2:	e000      	b.n	80094b6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094b4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d06f      	beq.n	800959c <pvPortMalloc+0x17c>
 80094bc:	4b45      	ldr	r3, [pc, #276]	@ (80095d4 <pvPortMalloc+0x1b4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d86a      	bhi.n	800959c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80094c6:	4b44      	ldr	r3, [pc, #272]	@ (80095d8 <pvPortMalloc+0x1b8>)
 80094c8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80094ca:	4b43      	ldr	r3, [pc, #268]	@ (80095d8 <pvPortMalloc+0x1b8>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094d0:	e004      	b.n	80094dc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d903      	bls.n	80094ee <pvPortMalloc+0xce>
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1f1      	bne.n	80094d2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80094ee:	4b37      	ldr	r3, [pc, #220]	@ (80095cc <pvPortMalloc+0x1ac>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d051      	beq.n	800959c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2208      	movs	r2, #8
 80094fe:	4413      	add	r3, r2
 8009500:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	1ad2      	subs	r2, r2, r3
 8009512:	2308      	movs	r3, #8
 8009514:	005b      	lsls	r3, r3, #1
 8009516:	429a      	cmp	r2, r3
 8009518:	d920      	bls.n	800955c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800951a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4413      	add	r3, r2
 8009520:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	f003 0307 	and.w	r3, r3, #7
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00b      	beq.n	8009544 <pvPortMalloc+0x124>
        __asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	613b      	str	r3, [r7, #16]
    }
 800953e:	bf00      	nop
 8009540:	bf00      	nop
 8009542:	e7fd      	b.n	8009540 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	1ad2      	subs	r2, r2, r3
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009556:	69b8      	ldr	r0, [r7, #24]
 8009558:	f000 f90a 	bl	8009770 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800955c:	4b1d      	ldr	r3, [pc, #116]	@ (80095d4 <pvPortMalloc+0x1b4>)
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	4a1b      	ldr	r2, [pc, #108]	@ (80095d4 <pvPortMalloc+0x1b4>)
 8009568:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800956a:	4b1a      	ldr	r3, [pc, #104]	@ (80095d4 <pvPortMalloc+0x1b4>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b1b      	ldr	r3, [pc, #108]	@ (80095dc <pvPortMalloc+0x1bc>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	429a      	cmp	r2, r3
 8009574:	d203      	bcs.n	800957e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009576:	4b17      	ldr	r3, [pc, #92]	@ (80095d4 <pvPortMalloc+0x1b4>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a18      	ldr	r2, [pc, #96]	@ (80095dc <pvPortMalloc+0x1bc>)
 800957c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	4b13      	ldr	r3, [pc, #76]	@ (80095d0 <pvPortMalloc+0x1b0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	431a      	orrs	r2, r3
 8009588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800958c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958e:	2200      	movs	r2, #0
 8009590:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009592:	4b13      	ldr	r3, [pc, #76]	@ (80095e0 <pvPortMalloc+0x1c0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3301      	adds	r3, #1
 8009598:	4a11      	ldr	r2, [pc, #68]	@ (80095e0 <pvPortMalloc+0x1c0>)
 800959a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800959c:	f7fe fbf8 	bl	8007d90 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <pvPortMalloc+0x1a2>
        __asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	60fb      	str	r3, [r7, #12]
    }
 80095bc:	bf00      	nop
 80095be:	bf00      	nop
 80095c0:	e7fd      	b.n	80095be <pvPortMalloc+0x19e>
    return pvReturn;
 80095c2:	69fb      	ldr	r3, [r7, #28]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3728      	adds	r7, #40	@ 0x28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20013c8c 	.word	0x20013c8c
 80095d0:	20013ca0 	.word	0x20013ca0
 80095d4:	20013c90 	.word	0x20013c90
 80095d8:	20013c84 	.word	0x20013c84
 80095dc:	20013c94 	.word	0x20013c94
 80095e0:	20013c98 	.word	0x20013c98

080095e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d04f      	beq.n	8009696 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80095f6:	2308      	movs	r3, #8
 80095f8:	425b      	negs	r3, r3
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	4413      	add	r3, r2
 80095fe:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	4b25      	ldr	r3, [pc, #148]	@ (80096a0 <vPortFree+0xbc>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4013      	ands	r3, r2
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10b      	bne.n	800962a <vPortFree+0x46>
        __asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	60fb      	str	r3, [r7, #12]
    }
 8009624:	bf00      	nop
 8009626:	bf00      	nop
 8009628:	e7fd      	b.n	8009626 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <vPortFree+0x66>
        __asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	60bb      	str	r3, [r7, #8]
    }
 8009644:	bf00      	nop
 8009646:	bf00      	nop
 8009648:	e7fd      	b.n	8009646 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	4b14      	ldr	r3, [pc, #80]	@ (80096a0 <vPortFree+0xbc>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4013      	ands	r3, r2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d01e      	beq.n	8009696 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d11a      	bne.n	8009696 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	4b0e      	ldr	r3, [pc, #56]	@ (80096a0 <vPortFree+0xbc>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	43db      	mvns	r3, r3
 800966a:	401a      	ands	r2, r3
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8009670:	f7fe fb80 	bl	8007d74 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	4b0a      	ldr	r3, [pc, #40]	@ (80096a4 <vPortFree+0xc0>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4413      	add	r3, r2
 800967e:	4a09      	ldr	r2, [pc, #36]	@ (80096a4 <vPortFree+0xc0>)
 8009680:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009682:	6938      	ldr	r0, [r7, #16]
 8009684:	f000 f874 	bl	8009770 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009688:	4b07      	ldr	r3, [pc, #28]	@ (80096a8 <vPortFree+0xc4>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3301      	adds	r3, #1
 800968e:	4a06      	ldr	r2, [pc, #24]	@ (80096a8 <vPortFree+0xc4>)
 8009690:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009692:	f7fe fb7d 	bl	8007d90 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8009696:	bf00      	nop
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20013ca0 	.word	0x20013ca0
 80096a4:	20013c90 	.word	0x20013c90
 80096a8:	20013c9c 	.word	0x20013c9c

080096ac <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096b2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80096b6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80096b8:	4b27      	ldr	r3, [pc, #156]	@ (8009758 <prvHeapInit+0xac>)
 80096ba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f003 0307 	and.w	r3, r3, #7
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00c      	beq.n	80096e0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3307      	adds	r3, #7
 80096ca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f023 0307 	bic.w	r3, r3, #7
 80096d2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	4a1f      	ldr	r2, [pc, #124]	@ (8009758 <prvHeapInit+0xac>)
 80096dc:	4413      	add	r3, r2
 80096de:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096e4:	4a1d      	ldr	r2, [pc, #116]	@ (800975c <prvHeapInit+0xb0>)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80096ea:	4b1c      	ldr	r3, [pc, #112]	@ (800975c <prvHeapInit+0xb0>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	4413      	add	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80096f8:	2208      	movs	r2, #8
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	1a9b      	subs	r3, r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f023 0307 	bic.w	r3, r3, #7
 8009706:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4a15      	ldr	r2, [pc, #84]	@ (8009760 <prvHeapInit+0xb4>)
 800970c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800970e:	4b14      	ldr	r3, [pc, #80]	@ (8009760 <prvHeapInit+0xb4>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2200      	movs	r2, #0
 8009714:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8009716:	4b12      	ldr	r3, [pc, #72]	@ (8009760 <prvHeapInit+0xb4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	1ad2      	subs	r2, r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800972c:	4b0c      	ldr	r3, [pc, #48]	@ (8009760 <prvHeapInit+0xb4>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	4a0a      	ldr	r2, [pc, #40]	@ (8009764 <prvHeapInit+0xb8>)
 800973a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	4a09      	ldr	r2, [pc, #36]	@ (8009768 <prvHeapInit+0xbc>)
 8009742:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009744:	4b09      	ldr	r3, [pc, #36]	@ (800976c <prvHeapInit+0xc0>)
 8009746:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800974a:	601a      	str	r2, [r3, #0]
}
 800974c:	bf00      	nop
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	20001084 	.word	0x20001084
 800975c:	20013c84 	.word	0x20013c84
 8009760:	20013c8c 	.word	0x20013c8c
 8009764:	20013c94 	.word	0x20013c94
 8009768:	20013c90 	.word	0x20013c90
 800976c:	20013ca0 	.word	0x20013ca0

08009770 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009778:	4b28      	ldr	r3, [pc, #160]	@ (800981c <prvInsertBlockIntoFreeList+0xac>)
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	e002      	b.n	8009784 <prvInsertBlockIntoFreeList+0x14>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	429a      	cmp	r2, r3
 800978c:	d8f7      	bhi.n	800977e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	4413      	add	r3, r2
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	429a      	cmp	r2, r3
 800979e:	d108      	bne.n	80097b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	441a      	add	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	441a      	add	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d118      	bne.n	80097f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4b15      	ldr	r3, [pc, #84]	@ (8009820 <prvInsertBlockIntoFreeList+0xb0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d00d      	beq.n	80097ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	441a      	add	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	e008      	b.n	8009800 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009820 <prvInsertBlockIntoFreeList+0xb0>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e003      	b.n	8009800 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	429a      	cmp	r2, r3
 8009806:	d002      	beq.n	800980e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800980e:	bf00      	nop
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20013c84 	.word	0x20013c84
 8009820:	20013c8c 	.word	0x20013c8c

08009824 <std>:
 8009824:	2300      	movs	r3, #0
 8009826:	b510      	push	{r4, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	e9c0 3300 	strd	r3, r3, [r0]
 800982e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009832:	6083      	str	r3, [r0, #8]
 8009834:	8181      	strh	r1, [r0, #12]
 8009836:	6643      	str	r3, [r0, #100]	@ 0x64
 8009838:	81c2      	strh	r2, [r0, #14]
 800983a:	6183      	str	r3, [r0, #24]
 800983c:	4619      	mov	r1, r3
 800983e:	2208      	movs	r2, #8
 8009840:	305c      	adds	r0, #92	@ 0x5c
 8009842:	f000 fa4d 	bl	8009ce0 <memset>
 8009846:	4b0d      	ldr	r3, [pc, #52]	@ (800987c <std+0x58>)
 8009848:	6263      	str	r3, [r4, #36]	@ 0x24
 800984a:	4b0d      	ldr	r3, [pc, #52]	@ (8009880 <std+0x5c>)
 800984c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800984e:	4b0d      	ldr	r3, [pc, #52]	@ (8009884 <std+0x60>)
 8009850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009852:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <std+0x64>)
 8009854:	6323      	str	r3, [r4, #48]	@ 0x30
 8009856:	4b0d      	ldr	r3, [pc, #52]	@ (800988c <std+0x68>)
 8009858:	6224      	str	r4, [r4, #32]
 800985a:	429c      	cmp	r4, r3
 800985c:	d006      	beq.n	800986c <std+0x48>
 800985e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009862:	4294      	cmp	r4, r2
 8009864:	d002      	beq.n	800986c <std+0x48>
 8009866:	33d0      	adds	r3, #208	@ 0xd0
 8009868:	429c      	cmp	r4, r3
 800986a:	d105      	bne.n	8009878 <std+0x54>
 800986c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009874:	f000 babc 	b.w	8009df0 <__retarget_lock_init_recursive>
 8009878:	bd10      	pop	{r4, pc}
 800987a:	bf00      	nop
 800987c:	08009b31 	.word	0x08009b31
 8009880:	08009b53 	.word	0x08009b53
 8009884:	08009b8b 	.word	0x08009b8b
 8009888:	08009baf 	.word	0x08009baf
 800988c:	20013ca4 	.word	0x20013ca4

08009890 <stdio_exit_handler>:
 8009890:	4a02      	ldr	r2, [pc, #8]	@ (800989c <stdio_exit_handler+0xc>)
 8009892:	4903      	ldr	r1, [pc, #12]	@ (80098a0 <stdio_exit_handler+0x10>)
 8009894:	4803      	ldr	r0, [pc, #12]	@ (80098a4 <stdio_exit_handler+0x14>)
 8009896:	f000 b869 	b.w	800996c <_fwalk_sglue>
 800989a:	bf00      	nop
 800989c:	20000014 	.word	0x20000014
 80098a0:	0800a95d 	.word	0x0800a95d
 80098a4:	20000024 	.word	0x20000024

080098a8 <cleanup_stdio>:
 80098a8:	6841      	ldr	r1, [r0, #4]
 80098aa:	4b0c      	ldr	r3, [pc, #48]	@ (80098dc <cleanup_stdio+0x34>)
 80098ac:	4299      	cmp	r1, r3
 80098ae:	b510      	push	{r4, lr}
 80098b0:	4604      	mov	r4, r0
 80098b2:	d001      	beq.n	80098b8 <cleanup_stdio+0x10>
 80098b4:	f001 f852 	bl	800a95c <_fflush_r>
 80098b8:	68a1      	ldr	r1, [r4, #8]
 80098ba:	4b09      	ldr	r3, [pc, #36]	@ (80098e0 <cleanup_stdio+0x38>)
 80098bc:	4299      	cmp	r1, r3
 80098be:	d002      	beq.n	80098c6 <cleanup_stdio+0x1e>
 80098c0:	4620      	mov	r0, r4
 80098c2:	f001 f84b 	bl	800a95c <_fflush_r>
 80098c6:	68e1      	ldr	r1, [r4, #12]
 80098c8:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <cleanup_stdio+0x3c>)
 80098ca:	4299      	cmp	r1, r3
 80098cc:	d004      	beq.n	80098d8 <cleanup_stdio+0x30>
 80098ce:	4620      	mov	r0, r4
 80098d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d4:	f001 b842 	b.w	800a95c <_fflush_r>
 80098d8:	bd10      	pop	{r4, pc}
 80098da:	bf00      	nop
 80098dc:	20013ca4 	.word	0x20013ca4
 80098e0:	20013d0c 	.word	0x20013d0c
 80098e4:	20013d74 	.word	0x20013d74

080098e8 <global_stdio_init.part.0>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009918 <global_stdio_init.part.0+0x30>)
 80098ec:	4c0b      	ldr	r4, [pc, #44]	@ (800991c <global_stdio_init.part.0+0x34>)
 80098ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009920 <global_stdio_init.part.0+0x38>)
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	4620      	mov	r0, r4
 80098f4:	2200      	movs	r2, #0
 80098f6:	2104      	movs	r1, #4
 80098f8:	f7ff ff94 	bl	8009824 <std>
 80098fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009900:	2201      	movs	r2, #1
 8009902:	2109      	movs	r1, #9
 8009904:	f7ff ff8e 	bl	8009824 <std>
 8009908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800990c:	2202      	movs	r2, #2
 800990e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009912:	2112      	movs	r1, #18
 8009914:	f7ff bf86 	b.w	8009824 <std>
 8009918:	20013ddc 	.word	0x20013ddc
 800991c:	20013ca4 	.word	0x20013ca4
 8009920:	08009891 	.word	0x08009891

08009924 <__sfp_lock_acquire>:
 8009924:	4801      	ldr	r0, [pc, #4]	@ (800992c <__sfp_lock_acquire+0x8>)
 8009926:	f000 ba64 	b.w	8009df2 <__retarget_lock_acquire_recursive>
 800992a:	bf00      	nop
 800992c:	20013de5 	.word	0x20013de5

08009930 <__sfp_lock_release>:
 8009930:	4801      	ldr	r0, [pc, #4]	@ (8009938 <__sfp_lock_release+0x8>)
 8009932:	f000 ba5f 	b.w	8009df4 <__retarget_lock_release_recursive>
 8009936:	bf00      	nop
 8009938:	20013de5 	.word	0x20013de5

0800993c <__sinit>:
 800993c:	b510      	push	{r4, lr}
 800993e:	4604      	mov	r4, r0
 8009940:	f7ff fff0 	bl	8009924 <__sfp_lock_acquire>
 8009944:	6a23      	ldr	r3, [r4, #32]
 8009946:	b11b      	cbz	r3, 8009950 <__sinit+0x14>
 8009948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800994c:	f7ff bff0 	b.w	8009930 <__sfp_lock_release>
 8009950:	4b04      	ldr	r3, [pc, #16]	@ (8009964 <__sinit+0x28>)
 8009952:	6223      	str	r3, [r4, #32]
 8009954:	4b04      	ldr	r3, [pc, #16]	@ (8009968 <__sinit+0x2c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1f5      	bne.n	8009948 <__sinit+0xc>
 800995c:	f7ff ffc4 	bl	80098e8 <global_stdio_init.part.0>
 8009960:	e7f2      	b.n	8009948 <__sinit+0xc>
 8009962:	bf00      	nop
 8009964:	080098a9 	.word	0x080098a9
 8009968:	20013ddc 	.word	0x20013ddc

0800996c <_fwalk_sglue>:
 800996c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009970:	4607      	mov	r7, r0
 8009972:	4688      	mov	r8, r1
 8009974:	4614      	mov	r4, r2
 8009976:	2600      	movs	r6, #0
 8009978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800997c:	f1b9 0901 	subs.w	r9, r9, #1
 8009980:	d505      	bpl.n	800998e <_fwalk_sglue+0x22>
 8009982:	6824      	ldr	r4, [r4, #0]
 8009984:	2c00      	cmp	r4, #0
 8009986:	d1f7      	bne.n	8009978 <_fwalk_sglue+0xc>
 8009988:	4630      	mov	r0, r6
 800998a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d907      	bls.n	80099a4 <_fwalk_sglue+0x38>
 8009994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009998:	3301      	adds	r3, #1
 800999a:	d003      	beq.n	80099a4 <_fwalk_sglue+0x38>
 800999c:	4629      	mov	r1, r5
 800999e:	4638      	mov	r0, r7
 80099a0:	47c0      	blx	r8
 80099a2:	4306      	orrs	r6, r0
 80099a4:	3568      	adds	r5, #104	@ 0x68
 80099a6:	e7e9      	b.n	800997c <_fwalk_sglue+0x10>

080099a8 <iprintf>:
 80099a8:	b40f      	push	{r0, r1, r2, r3}
 80099aa:	b507      	push	{r0, r1, r2, lr}
 80099ac:	4906      	ldr	r1, [pc, #24]	@ (80099c8 <iprintf+0x20>)
 80099ae:	ab04      	add	r3, sp, #16
 80099b0:	6808      	ldr	r0, [r1, #0]
 80099b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b6:	6881      	ldr	r1, [r0, #8]
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	f000 fca5 	bl	800a308 <_vfiprintf_r>
 80099be:	b003      	add	sp, #12
 80099c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c4:	b004      	add	sp, #16
 80099c6:	4770      	bx	lr
 80099c8:	20000020 	.word	0x20000020

080099cc <_puts_r>:
 80099cc:	6a03      	ldr	r3, [r0, #32]
 80099ce:	b570      	push	{r4, r5, r6, lr}
 80099d0:	6884      	ldr	r4, [r0, #8]
 80099d2:	4605      	mov	r5, r0
 80099d4:	460e      	mov	r6, r1
 80099d6:	b90b      	cbnz	r3, 80099dc <_puts_r+0x10>
 80099d8:	f7ff ffb0 	bl	800993c <__sinit>
 80099dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099de:	07db      	lsls	r3, r3, #31
 80099e0:	d405      	bmi.n	80099ee <_puts_r+0x22>
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	0598      	lsls	r0, r3, #22
 80099e6:	d402      	bmi.n	80099ee <_puts_r+0x22>
 80099e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ea:	f000 fa02 	bl	8009df2 <__retarget_lock_acquire_recursive>
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	0719      	lsls	r1, r3, #28
 80099f2:	d502      	bpl.n	80099fa <_puts_r+0x2e>
 80099f4:	6923      	ldr	r3, [r4, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d135      	bne.n	8009a66 <_puts_r+0x9a>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f000 f919 	bl	8009c34 <__swsetup_r>
 8009a02:	b380      	cbz	r0, 8009a66 <_puts_r+0x9a>
 8009a04:	f04f 35ff 	mov.w	r5, #4294967295
 8009a08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a0a:	07da      	lsls	r2, r3, #31
 8009a0c:	d405      	bmi.n	8009a1a <_puts_r+0x4e>
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	059b      	lsls	r3, r3, #22
 8009a12:	d402      	bmi.n	8009a1a <_puts_r+0x4e>
 8009a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a16:	f000 f9ed 	bl	8009df4 <__retarget_lock_release_recursive>
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	bd70      	pop	{r4, r5, r6, pc}
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	da04      	bge.n	8009a2c <_puts_r+0x60>
 8009a22:	69a2      	ldr	r2, [r4, #24]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	dc17      	bgt.n	8009a58 <_puts_r+0x8c>
 8009a28:	290a      	cmp	r1, #10
 8009a2a:	d015      	beq.n	8009a58 <_puts_r+0x8c>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	6022      	str	r2, [r4, #0]
 8009a32:	7019      	strb	r1, [r3, #0]
 8009a34:	68a3      	ldr	r3, [r4, #8]
 8009a36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	60a3      	str	r3, [r4, #8]
 8009a3e:	2900      	cmp	r1, #0
 8009a40:	d1ed      	bne.n	8009a1e <_puts_r+0x52>
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	da11      	bge.n	8009a6a <_puts_r+0x9e>
 8009a46:	4622      	mov	r2, r4
 8009a48:	210a      	movs	r1, #10
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f000 f8b3 	bl	8009bb6 <__swbuf_r>
 8009a50:	3001      	adds	r0, #1
 8009a52:	d0d7      	beq.n	8009a04 <_puts_r+0x38>
 8009a54:	250a      	movs	r5, #10
 8009a56:	e7d7      	b.n	8009a08 <_puts_r+0x3c>
 8009a58:	4622      	mov	r2, r4
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f000 f8ab 	bl	8009bb6 <__swbuf_r>
 8009a60:	3001      	adds	r0, #1
 8009a62:	d1e7      	bne.n	8009a34 <_puts_r+0x68>
 8009a64:	e7ce      	b.n	8009a04 <_puts_r+0x38>
 8009a66:	3e01      	subs	r6, #1
 8009a68:	e7e4      	b.n	8009a34 <_puts_r+0x68>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	6022      	str	r2, [r4, #0]
 8009a70:	220a      	movs	r2, #10
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	e7ee      	b.n	8009a54 <_puts_r+0x88>
	...

08009a78 <puts>:
 8009a78:	4b02      	ldr	r3, [pc, #8]	@ (8009a84 <puts+0xc>)
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	f7ff bfa5 	b.w	80099cc <_puts_r>
 8009a82:	bf00      	nop
 8009a84:	20000020 	.word	0x20000020

08009a88 <sniprintf>:
 8009a88:	b40c      	push	{r2, r3}
 8009a8a:	b530      	push	{r4, r5, lr}
 8009a8c:	4b17      	ldr	r3, [pc, #92]	@ (8009aec <sniprintf+0x64>)
 8009a8e:	1e0c      	subs	r4, r1, #0
 8009a90:	681d      	ldr	r5, [r3, #0]
 8009a92:	b09d      	sub	sp, #116	@ 0x74
 8009a94:	da08      	bge.n	8009aa8 <sniprintf+0x20>
 8009a96:	238b      	movs	r3, #139	@ 0x8b
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9e:	b01d      	add	sp, #116	@ 0x74
 8009aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009aa4:	b002      	add	sp, #8
 8009aa6:	4770      	bx	lr
 8009aa8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009aac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009ab0:	bf14      	ite	ne
 8009ab2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009ab6:	4623      	moveq	r3, r4
 8009ab8:	9304      	str	r3, [sp, #16]
 8009aba:	9307      	str	r3, [sp, #28]
 8009abc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ac0:	9002      	str	r0, [sp, #8]
 8009ac2:	9006      	str	r0, [sp, #24]
 8009ac4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ac8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009aca:	ab21      	add	r3, sp, #132	@ 0x84
 8009acc:	a902      	add	r1, sp, #8
 8009ace:	4628      	mov	r0, r5
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	f000 faf3 	bl	800a0bc <_svfiprintf_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	bfbc      	itt	lt
 8009ada:	238b      	movlt	r3, #139	@ 0x8b
 8009adc:	602b      	strlt	r3, [r5, #0]
 8009ade:	2c00      	cmp	r4, #0
 8009ae0:	d0dd      	beq.n	8009a9e <sniprintf+0x16>
 8009ae2:	9b02      	ldr	r3, [sp, #8]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	701a      	strb	r2, [r3, #0]
 8009ae8:	e7d9      	b.n	8009a9e <sniprintf+0x16>
 8009aea:	bf00      	nop
 8009aec:	20000020 	.word	0x20000020

08009af0 <siprintf>:
 8009af0:	b40e      	push	{r1, r2, r3}
 8009af2:	b500      	push	{lr}
 8009af4:	b09c      	sub	sp, #112	@ 0x70
 8009af6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009af8:	9002      	str	r0, [sp, #8]
 8009afa:	9006      	str	r0, [sp, #24]
 8009afc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b00:	4809      	ldr	r0, [pc, #36]	@ (8009b28 <siprintf+0x38>)
 8009b02:	9107      	str	r1, [sp, #28]
 8009b04:	9104      	str	r1, [sp, #16]
 8009b06:	4909      	ldr	r1, [pc, #36]	@ (8009b2c <siprintf+0x3c>)
 8009b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0c:	9105      	str	r1, [sp, #20]
 8009b0e:	6800      	ldr	r0, [r0, #0]
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	a902      	add	r1, sp, #8
 8009b14:	f000 fad2 	bl	800a0bc <_svfiprintf_r>
 8009b18:	9b02      	ldr	r3, [sp, #8]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	701a      	strb	r2, [r3, #0]
 8009b1e:	b01c      	add	sp, #112	@ 0x70
 8009b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b24:	b003      	add	sp, #12
 8009b26:	4770      	bx	lr
 8009b28:	20000020 	.word	0x20000020
 8009b2c:	ffff0208 	.word	0xffff0208

08009b30 <__sread>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	460c      	mov	r4, r1
 8009b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b38:	f000 f912 	bl	8009d60 <_read_r>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	bfab      	itete	ge
 8009b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b42:	89a3      	ldrhlt	r3, [r4, #12]
 8009b44:	181b      	addge	r3, r3, r0
 8009b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b4a:	bfac      	ite	ge
 8009b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b4e:	81a3      	strhlt	r3, [r4, #12]
 8009b50:	bd10      	pop	{r4, pc}

08009b52 <__swrite>:
 8009b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	461f      	mov	r7, r3
 8009b58:	898b      	ldrh	r3, [r1, #12]
 8009b5a:	05db      	lsls	r3, r3, #23
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	4616      	mov	r6, r2
 8009b62:	d505      	bpl.n	8009b70 <__swrite+0x1e>
 8009b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b68:	2302      	movs	r3, #2
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f000 f8e6 	bl	8009d3c <_lseek_r>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	4632      	mov	r2, r6
 8009b7e:	463b      	mov	r3, r7
 8009b80:	4628      	mov	r0, r5
 8009b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b86:	f000 b8fd 	b.w	8009d84 <_write_r>

08009b8a <__sseek>:
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b92:	f000 f8d3 	bl	8009d3c <_lseek_r>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	bf15      	itete	ne
 8009b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ba6:	81a3      	strheq	r3, [r4, #12]
 8009ba8:	bf18      	it	ne
 8009baa:	81a3      	strhne	r3, [r4, #12]
 8009bac:	bd10      	pop	{r4, pc}

08009bae <__sclose>:
 8009bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb2:	f000 b8b3 	b.w	8009d1c <_close_r>

08009bb6 <__swbuf_r>:
 8009bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb8:	460e      	mov	r6, r1
 8009bba:	4614      	mov	r4, r2
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	b118      	cbz	r0, 8009bc8 <__swbuf_r+0x12>
 8009bc0:	6a03      	ldr	r3, [r0, #32]
 8009bc2:	b90b      	cbnz	r3, 8009bc8 <__swbuf_r+0x12>
 8009bc4:	f7ff feba 	bl	800993c <__sinit>
 8009bc8:	69a3      	ldr	r3, [r4, #24]
 8009bca:	60a3      	str	r3, [r4, #8]
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	071a      	lsls	r2, r3, #28
 8009bd0:	d501      	bpl.n	8009bd6 <__swbuf_r+0x20>
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	b943      	cbnz	r3, 8009be8 <__swbuf_r+0x32>
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f000 f82b 	bl	8009c34 <__swsetup_r>
 8009bde:	b118      	cbz	r0, 8009be8 <__swbuf_r+0x32>
 8009be0:	f04f 37ff 	mov.w	r7, #4294967295
 8009be4:	4638      	mov	r0, r7
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	6922      	ldr	r2, [r4, #16]
 8009bec:	1a98      	subs	r0, r3, r2
 8009bee:	6963      	ldr	r3, [r4, #20]
 8009bf0:	b2f6      	uxtb	r6, r6
 8009bf2:	4283      	cmp	r3, r0
 8009bf4:	4637      	mov	r7, r6
 8009bf6:	dc05      	bgt.n	8009c04 <__swbuf_r+0x4e>
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f000 feae 	bl	800a95c <_fflush_r>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d1ed      	bne.n	8009be0 <__swbuf_r+0x2a>
 8009c04:	68a3      	ldr	r3, [r4, #8]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	60a3      	str	r3, [r4, #8]
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	6022      	str	r2, [r4, #0]
 8009c10:	701e      	strb	r6, [r3, #0]
 8009c12:	6962      	ldr	r2, [r4, #20]
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d004      	beq.n	8009c24 <__swbuf_r+0x6e>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	07db      	lsls	r3, r3, #31
 8009c1e:	d5e1      	bpl.n	8009be4 <__swbuf_r+0x2e>
 8009c20:	2e0a      	cmp	r6, #10
 8009c22:	d1df      	bne.n	8009be4 <__swbuf_r+0x2e>
 8009c24:	4621      	mov	r1, r4
 8009c26:	4628      	mov	r0, r5
 8009c28:	f000 fe98 	bl	800a95c <_fflush_r>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d0d9      	beq.n	8009be4 <__swbuf_r+0x2e>
 8009c30:	e7d6      	b.n	8009be0 <__swbuf_r+0x2a>
	...

08009c34 <__swsetup_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4b29      	ldr	r3, [pc, #164]	@ (8009cdc <__swsetup_r+0xa8>)
 8009c38:	4605      	mov	r5, r0
 8009c3a:	6818      	ldr	r0, [r3, #0]
 8009c3c:	460c      	mov	r4, r1
 8009c3e:	b118      	cbz	r0, 8009c48 <__swsetup_r+0x14>
 8009c40:	6a03      	ldr	r3, [r0, #32]
 8009c42:	b90b      	cbnz	r3, 8009c48 <__swsetup_r+0x14>
 8009c44:	f7ff fe7a 	bl	800993c <__sinit>
 8009c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c4c:	0719      	lsls	r1, r3, #28
 8009c4e:	d422      	bmi.n	8009c96 <__swsetup_r+0x62>
 8009c50:	06da      	lsls	r2, r3, #27
 8009c52:	d407      	bmi.n	8009c64 <__swsetup_r+0x30>
 8009c54:	2209      	movs	r2, #9
 8009c56:	602a      	str	r2, [r5, #0]
 8009c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c5c:	81a3      	strh	r3, [r4, #12]
 8009c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c62:	e033      	b.n	8009ccc <__swsetup_r+0x98>
 8009c64:	0758      	lsls	r0, r3, #29
 8009c66:	d512      	bpl.n	8009c8e <__swsetup_r+0x5a>
 8009c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c6a:	b141      	cbz	r1, 8009c7e <__swsetup_r+0x4a>
 8009c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d002      	beq.n	8009c7a <__swsetup_r+0x46>
 8009c74:	4628      	mov	r0, r5
 8009c76:	f000 f8cd 	bl	8009e14 <_free_r>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	2300      	movs	r3, #0
 8009c88:	6063      	str	r3, [r4, #4]
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f043 0308 	orr.w	r3, r3, #8
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	6923      	ldr	r3, [r4, #16]
 8009c98:	b94b      	cbnz	r3, 8009cae <__swsetup_r+0x7a>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ca4:	d003      	beq.n	8009cae <__swsetup_r+0x7a>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4628      	mov	r0, r5
 8009caa:	f000 fea5 	bl	800a9f8 <__smakebuf_r>
 8009cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb2:	f013 0201 	ands.w	r2, r3, #1
 8009cb6:	d00a      	beq.n	8009cce <__swsetup_r+0x9a>
 8009cb8:	2200      	movs	r2, #0
 8009cba:	60a2      	str	r2, [r4, #8]
 8009cbc:	6962      	ldr	r2, [r4, #20]
 8009cbe:	4252      	negs	r2, r2
 8009cc0:	61a2      	str	r2, [r4, #24]
 8009cc2:	6922      	ldr	r2, [r4, #16]
 8009cc4:	b942      	cbnz	r2, 8009cd8 <__swsetup_r+0xa4>
 8009cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cca:	d1c5      	bne.n	8009c58 <__swsetup_r+0x24>
 8009ccc:	bd38      	pop	{r3, r4, r5, pc}
 8009cce:	0799      	lsls	r1, r3, #30
 8009cd0:	bf58      	it	pl
 8009cd2:	6962      	ldrpl	r2, [r4, #20]
 8009cd4:	60a2      	str	r2, [r4, #8]
 8009cd6:	e7f4      	b.n	8009cc2 <__swsetup_r+0x8e>
 8009cd8:	2000      	movs	r0, #0
 8009cda:	e7f7      	b.n	8009ccc <__swsetup_r+0x98>
 8009cdc:	20000020 	.word	0x20000020

08009ce0 <memset>:
 8009ce0:	4402      	add	r2, r0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d100      	bne.n	8009cea <memset+0xa>
 8009ce8:	4770      	bx	lr
 8009cea:	f803 1b01 	strb.w	r1, [r3], #1
 8009cee:	e7f9      	b.n	8009ce4 <memset+0x4>

08009cf0 <strstr>:
 8009cf0:	780a      	ldrb	r2, [r1, #0]
 8009cf2:	b570      	push	{r4, r5, r6, lr}
 8009cf4:	b96a      	cbnz	r2, 8009d12 <strstr+0x22>
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d109      	bne.n	8009d10 <strstr+0x20>
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	4605      	mov	r5, r0
 8009d00:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d0f6      	beq.n	8009cf6 <strstr+0x6>
 8009d08:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009d0c:	429e      	cmp	r6, r3
 8009d0e:	d0f7      	beq.n	8009d00 <strstr+0x10>
 8009d10:	3001      	adds	r0, #1
 8009d12:	7803      	ldrb	r3, [r0, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1ef      	bne.n	8009cf8 <strstr+0x8>
 8009d18:	4618      	mov	r0, r3
 8009d1a:	e7ec      	b.n	8009cf6 <strstr+0x6>

08009d1c <_close_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4d06      	ldr	r5, [pc, #24]	@ (8009d38 <_close_r+0x1c>)
 8009d20:	2300      	movs	r3, #0
 8009d22:	4604      	mov	r4, r0
 8009d24:	4608      	mov	r0, r1
 8009d26:	602b      	str	r3, [r5, #0]
 8009d28:	f7f8 fc27 	bl	800257a <_close>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d102      	bne.n	8009d36 <_close_r+0x1a>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	b103      	cbz	r3, 8009d36 <_close_r+0x1a>
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	20013de0 	.word	0x20013de0

08009d3c <_lseek_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4d07      	ldr	r5, [pc, #28]	@ (8009d5c <_lseek_r+0x20>)
 8009d40:	4604      	mov	r4, r0
 8009d42:	4608      	mov	r0, r1
 8009d44:	4611      	mov	r1, r2
 8009d46:	2200      	movs	r2, #0
 8009d48:	602a      	str	r2, [r5, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f7f8 fc3c 	bl	80025c8 <_lseek>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_lseek_r+0x1e>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_lseek_r+0x1e>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	20013de0 	.word	0x20013de0

08009d60 <_read_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d07      	ldr	r5, [pc, #28]	@ (8009d80 <_read_r+0x20>)
 8009d64:	4604      	mov	r4, r0
 8009d66:	4608      	mov	r0, r1
 8009d68:	4611      	mov	r1, r2
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	602a      	str	r2, [r5, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f7f8 fbca 	bl	8002508 <_read>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d102      	bne.n	8009d7e <_read_r+0x1e>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	b103      	cbz	r3, 8009d7e <_read_r+0x1e>
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	20013de0 	.word	0x20013de0

08009d84 <_write_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4d07      	ldr	r5, [pc, #28]	@ (8009da4 <_write_r+0x20>)
 8009d88:	4604      	mov	r4, r0
 8009d8a:	4608      	mov	r0, r1
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	2200      	movs	r2, #0
 8009d90:	602a      	str	r2, [r5, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	f7f8 fbd5 	bl	8002542 <_write>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d102      	bne.n	8009da2 <_write_r+0x1e>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	b103      	cbz	r3, 8009da2 <_write_r+0x1e>
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	20013de0 	.word	0x20013de0

08009da8 <__libc_init_array>:
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	4d0d      	ldr	r5, [pc, #52]	@ (8009de0 <__libc_init_array+0x38>)
 8009dac:	4c0d      	ldr	r4, [pc, #52]	@ (8009de4 <__libc_init_array+0x3c>)
 8009dae:	1b64      	subs	r4, r4, r5
 8009db0:	10a4      	asrs	r4, r4, #2
 8009db2:	2600      	movs	r6, #0
 8009db4:	42a6      	cmp	r6, r4
 8009db6:	d109      	bne.n	8009dcc <__libc_init_array+0x24>
 8009db8:	4d0b      	ldr	r5, [pc, #44]	@ (8009de8 <__libc_init_array+0x40>)
 8009dba:	4c0c      	ldr	r4, [pc, #48]	@ (8009dec <__libc_init_array+0x44>)
 8009dbc:	f000 fee8 	bl	800ab90 <_init>
 8009dc0:	1b64      	subs	r4, r4, r5
 8009dc2:	10a4      	asrs	r4, r4, #2
 8009dc4:	2600      	movs	r6, #0
 8009dc6:	42a6      	cmp	r6, r4
 8009dc8:	d105      	bne.n	8009dd6 <__libc_init_array+0x2e>
 8009dca:	bd70      	pop	{r4, r5, r6, pc}
 8009dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dd0:	4798      	blx	r3
 8009dd2:	3601      	adds	r6, #1
 8009dd4:	e7ee      	b.n	8009db4 <__libc_init_array+0xc>
 8009dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dda:	4798      	blx	r3
 8009ddc:	3601      	adds	r6, #1
 8009dde:	e7f2      	b.n	8009dc6 <__libc_init_array+0x1e>
 8009de0:	0800b208 	.word	0x0800b208
 8009de4:	0800b208 	.word	0x0800b208
 8009de8:	0800b208 	.word	0x0800b208
 8009dec:	0800b20c 	.word	0x0800b20c

08009df0 <__retarget_lock_init_recursive>:
 8009df0:	4770      	bx	lr

08009df2 <__retarget_lock_acquire_recursive>:
 8009df2:	4770      	bx	lr

08009df4 <__retarget_lock_release_recursive>:
 8009df4:	4770      	bx	lr

08009df6 <memcpy>:
 8009df6:	440a      	add	r2, r1
 8009df8:	4291      	cmp	r1, r2
 8009dfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dfe:	d100      	bne.n	8009e02 <memcpy+0xc>
 8009e00:	4770      	bx	lr
 8009e02:	b510      	push	{r4, lr}
 8009e04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e0c:	4291      	cmp	r1, r2
 8009e0e:	d1f9      	bne.n	8009e04 <memcpy+0xe>
 8009e10:	bd10      	pop	{r4, pc}
	...

08009e14 <_free_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4605      	mov	r5, r0
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	d041      	beq.n	8009ea0 <_free_r+0x8c>
 8009e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e20:	1f0c      	subs	r4, r1, #4
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bfb8      	it	lt
 8009e26:	18e4      	addlt	r4, r4, r3
 8009e28:	f000 f8e0 	bl	8009fec <__malloc_lock>
 8009e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea4 <_free_r+0x90>)
 8009e2e:	6813      	ldr	r3, [r2, #0]
 8009e30:	b933      	cbnz	r3, 8009e40 <_free_r+0x2c>
 8009e32:	6063      	str	r3, [r4, #4]
 8009e34:	6014      	str	r4, [r2, #0]
 8009e36:	4628      	mov	r0, r5
 8009e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e3c:	f000 b8dc 	b.w	8009ff8 <__malloc_unlock>
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	d908      	bls.n	8009e56 <_free_r+0x42>
 8009e44:	6820      	ldr	r0, [r4, #0]
 8009e46:	1821      	adds	r1, r4, r0
 8009e48:	428b      	cmp	r3, r1
 8009e4a:	bf01      	itttt	eq
 8009e4c:	6819      	ldreq	r1, [r3, #0]
 8009e4e:	685b      	ldreq	r3, [r3, #4]
 8009e50:	1809      	addeq	r1, r1, r0
 8009e52:	6021      	streq	r1, [r4, #0]
 8009e54:	e7ed      	b.n	8009e32 <_free_r+0x1e>
 8009e56:	461a      	mov	r2, r3
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	b10b      	cbz	r3, 8009e60 <_free_r+0x4c>
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	d9fa      	bls.n	8009e56 <_free_r+0x42>
 8009e60:	6811      	ldr	r1, [r2, #0]
 8009e62:	1850      	adds	r0, r2, r1
 8009e64:	42a0      	cmp	r0, r4
 8009e66:	d10b      	bne.n	8009e80 <_free_r+0x6c>
 8009e68:	6820      	ldr	r0, [r4, #0]
 8009e6a:	4401      	add	r1, r0
 8009e6c:	1850      	adds	r0, r2, r1
 8009e6e:	4283      	cmp	r3, r0
 8009e70:	6011      	str	r1, [r2, #0]
 8009e72:	d1e0      	bne.n	8009e36 <_free_r+0x22>
 8009e74:	6818      	ldr	r0, [r3, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	6053      	str	r3, [r2, #4]
 8009e7a:	4408      	add	r0, r1
 8009e7c:	6010      	str	r0, [r2, #0]
 8009e7e:	e7da      	b.n	8009e36 <_free_r+0x22>
 8009e80:	d902      	bls.n	8009e88 <_free_r+0x74>
 8009e82:	230c      	movs	r3, #12
 8009e84:	602b      	str	r3, [r5, #0]
 8009e86:	e7d6      	b.n	8009e36 <_free_r+0x22>
 8009e88:	6820      	ldr	r0, [r4, #0]
 8009e8a:	1821      	adds	r1, r4, r0
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	bf04      	itt	eq
 8009e90:	6819      	ldreq	r1, [r3, #0]
 8009e92:	685b      	ldreq	r3, [r3, #4]
 8009e94:	6063      	str	r3, [r4, #4]
 8009e96:	bf04      	itt	eq
 8009e98:	1809      	addeq	r1, r1, r0
 8009e9a:	6021      	streq	r1, [r4, #0]
 8009e9c:	6054      	str	r4, [r2, #4]
 8009e9e:	e7ca      	b.n	8009e36 <_free_r+0x22>
 8009ea0:	bd38      	pop	{r3, r4, r5, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20013dec 	.word	0x20013dec

08009ea8 <sbrk_aligned>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	4e0f      	ldr	r6, [pc, #60]	@ (8009ee8 <sbrk_aligned+0x40>)
 8009eac:	460c      	mov	r4, r1
 8009eae:	6831      	ldr	r1, [r6, #0]
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	b911      	cbnz	r1, 8009eba <sbrk_aligned+0x12>
 8009eb4:	f000 fe18 	bl	800aae8 <_sbrk_r>
 8009eb8:	6030      	str	r0, [r6, #0]
 8009eba:	4621      	mov	r1, r4
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	f000 fe13 	bl	800aae8 <_sbrk_r>
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	d103      	bne.n	8009ece <sbrk_aligned+0x26>
 8009ec6:	f04f 34ff 	mov.w	r4, #4294967295
 8009eca:	4620      	mov	r0, r4
 8009ecc:	bd70      	pop	{r4, r5, r6, pc}
 8009ece:	1cc4      	adds	r4, r0, #3
 8009ed0:	f024 0403 	bic.w	r4, r4, #3
 8009ed4:	42a0      	cmp	r0, r4
 8009ed6:	d0f8      	beq.n	8009eca <sbrk_aligned+0x22>
 8009ed8:	1a21      	subs	r1, r4, r0
 8009eda:	4628      	mov	r0, r5
 8009edc:	f000 fe04 	bl	800aae8 <_sbrk_r>
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d1f2      	bne.n	8009eca <sbrk_aligned+0x22>
 8009ee4:	e7ef      	b.n	8009ec6 <sbrk_aligned+0x1e>
 8009ee6:	bf00      	nop
 8009ee8:	20013de8 	.word	0x20013de8

08009eec <_malloc_r>:
 8009eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef0:	1ccd      	adds	r5, r1, #3
 8009ef2:	f025 0503 	bic.w	r5, r5, #3
 8009ef6:	3508      	adds	r5, #8
 8009ef8:	2d0c      	cmp	r5, #12
 8009efa:	bf38      	it	cc
 8009efc:	250c      	movcc	r5, #12
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	4606      	mov	r6, r0
 8009f02:	db01      	blt.n	8009f08 <_malloc_r+0x1c>
 8009f04:	42a9      	cmp	r1, r5
 8009f06:	d904      	bls.n	8009f12 <_malloc_r+0x26>
 8009f08:	230c      	movs	r3, #12
 8009f0a:	6033      	str	r3, [r6, #0]
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fe8 <_malloc_r+0xfc>
 8009f16:	f000 f869 	bl	8009fec <__malloc_lock>
 8009f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f1e:	461c      	mov	r4, r3
 8009f20:	bb44      	cbnz	r4, 8009f74 <_malloc_r+0x88>
 8009f22:	4629      	mov	r1, r5
 8009f24:	4630      	mov	r0, r6
 8009f26:	f7ff ffbf 	bl	8009ea8 <sbrk_aligned>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	d158      	bne.n	8009fe2 <_malloc_r+0xf6>
 8009f30:	f8d8 4000 	ldr.w	r4, [r8]
 8009f34:	4627      	mov	r7, r4
 8009f36:	2f00      	cmp	r7, #0
 8009f38:	d143      	bne.n	8009fc2 <_malloc_r+0xd6>
 8009f3a:	2c00      	cmp	r4, #0
 8009f3c:	d04b      	beq.n	8009fd6 <_malloc_r+0xea>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	4639      	mov	r1, r7
 8009f42:	4630      	mov	r0, r6
 8009f44:	eb04 0903 	add.w	r9, r4, r3
 8009f48:	f000 fdce 	bl	800aae8 <_sbrk_r>
 8009f4c:	4581      	cmp	r9, r0
 8009f4e:	d142      	bne.n	8009fd6 <_malloc_r+0xea>
 8009f50:	6821      	ldr	r1, [r4, #0]
 8009f52:	1a6d      	subs	r5, r5, r1
 8009f54:	4629      	mov	r1, r5
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7ff ffa6 	bl	8009ea8 <sbrk_aligned>
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d03a      	beq.n	8009fd6 <_malloc_r+0xea>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	442b      	add	r3, r5
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	f8d8 3000 	ldr.w	r3, [r8]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	bb62      	cbnz	r2, 8009fc8 <_malloc_r+0xdc>
 8009f6e:	f8c8 7000 	str.w	r7, [r8]
 8009f72:	e00f      	b.n	8009f94 <_malloc_r+0xa8>
 8009f74:	6822      	ldr	r2, [r4, #0]
 8009f76:	1b52      	subs	r2, r2, r5
 8009f78:	d420      	bmi.n	8009fbc <_malloc_r+0xd0>
 8009f7a:	2a0b      	cmp	r2, #11
 8009f7c:	d917      	bls.n	8009fae <_malloc_r+0xc2>
 8009f7e:	1961      	adds	r1, r4, r5
 8009f80:	42a3      	cmp	r3, r4
 8009f82:	6025      	str	r5, [r4, #0]
 8009f84:	bf18      	it	ne
 8009f86:	6059      	strne	r1, [r3, #4]
 8009f88:	6863      	ldr	r3, [r4, #4]
 8009f8a:	bf08      	it	eq
 8009f8c:	f8c8 1000 	streq.w	r1, [r8]
 8009f90:	5162      	str	r2, [r4, r5]
 8009f92:	604b      	str	r3, [r1, #4]
 8009f94:	4630      	mov	r0, r6
 8009f96:	f000 f82f 	bl	8009ff8 <__malloc_unlock>
 8009f9a:	f104 000b 	add.w	r0, r4, #11
 8009f9e:	1d23      	adds	r3, r4, #4
 8009fa0:	f020 0007 	bic.w	r0, r0, #7
 8009fa4:	1ac2      	subs	r2, r0, r3
 8009fa6:	bf1c      	itt	ne
 8009fa8:	1a1b      	subne	r3, r3, r0
 8009faa:	50a3      	strne	r3, [r4, r2]
 8009fac:	e7af      	b.n	8009f0e <_malloc_r+0x22>
 8009fae:	6862      	ldr	r2, [r4, #4]
 8009fb0:	42a3      	cmp	r3, r4
 8009fb2:	bf0c      	ite	eq
 8009fb4:	f8c8 2000 	streq.w	r2, [r8]
 8009fb8:	605a      	strne	r2, [r3, #4]
 8009fba:	e7eb      	b.n	8009f94 <_malloc_r+0xa8>
 8009fbc:	4623      	mov	r3, r4
 8009fbe:	6864      	ldr	r4, [r4, #4]
 8009fc0:	e7ae      	b.n	8009f20 <_malloc_r+0x34>
 8009fc2:	463c      	mov	r4, r7
 8009fc4:	687f      	ldr	r7, [r7, #4]
 8009fc6:	e7b6      	b.n	8009f36 <_malloc_r+0x4a>
 8009fc8:	461a      	mov	r2, r3
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	42a3      	cmp	r3, r4
 8009fce:	d1fb      	bne.n	8009fc8 <_malloc_r+0xdc>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	6053      	str	r3, [r2, #4]
 8009fd4:	e7de      	b.n	8009f94 <_malloc_r+0xa8>
 8009fd6:	230c      	movs	r3, #12
 8009fd8:	6033      	str	r3, [r6, #0]
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f000 f80c 	bl	8009ff8 <__malloc_unlock>
 8009fe0:	e794      	b.n	8009f0c <_malloc_r+0x20>
 8009fe2:	6005      	str	r5, [r0, #0]
 8009fe4:	e7d6      	b.n	8009f94 <_malloc_r+0xa8>
 8009fe6:	bf00      	nop
 8009fe8:	20013dec 	.word	0x20013dec

08009fec <__malloc_lock>:
 8009fec:	4801      	ldr	r0, [pc, #4]	@ (8009ff4 <__malloc_lock+0x8>)
 8009fee:	f7ff bf00 	b.w	8009df2 <__retarget_lock_acquire_recursive>
 8009ff2:	bf00      	nop
 8009ff4:	20013de4 	.word	0x20013de4

08009ff8 <__malloc_unlock>:
 8009ff8:	4801      	ldr	r0, [pc, #4]	@ (800a000 <__malloc_unlock+0x8>)
 8009ffa:	f7ff befb 	b.w	8009df4 <__retarget_lock_release_recursive>
 8009ffe:	bf00      	nop
 800a000:	20013de4 	.word	0x20013de4

0800a004 <__ssputs_r>:
 800a004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a008:	688e      	ldr	r6, [r1, #8]
 800a00a:	461f      	mov	r7, r3
 800a00c:	42be      	cmp	r6, r7
 800a00e:	680b      	ldr	r3, [r1, #0]
 800a010:	4682      	mov	sl, r0
 800a012:	460c      	mov	r4, r1
 800a014:	4690      	mov	r8, r2
 800a016:	d82d      	bhi.n	800a074 <__ssputs_r+0x70>
 800a018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a01c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a020:	d026      	beq.n	800a070 <__ssputs_r+0x6c>
 800a022:	6965      	ldr	r5, [r4, #20]
 800a024:	6909      	ldr	r1, [r1, #16]
 800a026:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a02a:	eba3 0901 	sub.w	r9, r3, r1
 800a02e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a032:	1c7b      	adds	r3, r7, #1
 800a034:	444b      	add	r3, r9
 800a036:	106d      	asrs	r5, r5, #1
 800a038:	429d      	cmp	r5, r3
 800a03a:	bf38      	it	cc
 800a03c:	461d      	movcc	r5, r3
 800a03e:	0553      	lsls	r3, r2, #21
 800a040:	d527      	bpl.n	800a092 <__ssputs_r+0x8e>
 800a042:	4629      	mov	r1, r5
 800a044:	f7ff ff52 	bl	8009eec <_malloc_r>
 800a048:	4606      	mov	r6, r0
 800a04a:	b360      	cbz	r0, 800a0a6 <__ssputs_r+0xa2>
 800a04c:	6921      	ldr	r1, [r4, #16]
 800a04e:	464a      	mov	r2, r9
 800a050:	f7ff fed1 	bl	8009df6 <memcpy>
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	6126      	str	r6, [r4, #16]
 800a062:	6165      	str	r5, [r4, #20]
 800a064:	444e      	add	r6, r9
 800a066:	eba5 0509 	sub.w	r5, r5, r9
 800a06a:	6026      	str	r6, [r4, #0]
 800a06c:	60a5      	str	r5, [r4, #8]
 800a06e:	463e      	mov	r6, r7
 800a070:	42be      	cmp	r6, r7
 800a072:	d900      	bls.n	800a076 <__ssputs_r+0x72>
 800a074:	463e      	mov	r6, r7
 800a076:	6820      	ldr	r0, [r4, #0]
 800a078:	4632      	mov	r2, r6
 800a07a:	4641      	mov	r1, r8
 800a07c:	f000 fcf8 	bl	800aa70 <memmove>
 800a080:	68a3      	ldr	r3, [r4, #8]
 800a082:	1b9b      	subs	r3, r3, r6
 800a084:	60a3      	str	r3, [r4, #8]
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	4433      	add	r3, r6
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	2000      	movs	r0, #0
 800a08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a092:	462a      	mov	r2, r5
 800a094:	f000 fd38 	bl	800ab08 <_realloc_r>
 800a098:	4606      	mov	r6, r0
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d1e0      	bne.n	800a060 <__ssputs_r+0x5c>
 800a09e:	6921      	ldr	r1, [r4, #16]
 800a0a0:	4650      	mov	r0, sl
 800a0a2:	f7ff feb7 	bl	8009e14 <_free_r>
 800a0a6:	230c      	movs	r3, #12
 800a0a8:	f8ca 3000 	str.w	r3, [sl]
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b8:	e7e9      	b.n	800a08e <__ssputs_r+0x8a>
	...

0800a0bc <_svfiprintf_r>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	4698      	mov	r8, r3
 800a0c2:	898b      	ldrh	r3, [r1, #12]
 800a0c4:	061b      	lsls	r3, r3, #24
 800a0c6:	b09d      	sub	sp, #116	@ 0x74
 800a0c8:	4607      	mov	r7, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	d510      	bpl.n	800a0f2 <_svfiprintf_r+0x36>
 800a0d0:	690b      	ldr	r3, [r1, #16]
 800a0d2:	b973      	cbnz	r3, 800a0f2 <_svfiprintf_r+0x36>
 800a0d4:	2140      	movs	r1, #64	@ 0x40
 800a0d6:	f7ff ff09 	bl	8009eec <_malloc_r>
 800a0da:	6028      	str	r0, [r5, #0]
 800a0dc:	6128      	str	r0, [r5, #16]
 800a0de:	b930      	cbnz	r0, 800a0ee <_svfiprintf_r+0x32>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	603b      	str	r3, [r7, #0]
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	b01d      	add	sp, #116	@ 0x74
 800a0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ee:	2340      	movs	r3, #64	@ 0x40
 800a0f0:	616b      	str	r3, [r5, #20]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f6:	2320      	movs	r3, #32
 800a0f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a100:	2330      	movs	r3, #48	@ 0x30
 800a102:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2a0 <_svfiprintf_r+0x1e4>
 800a106:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a10a:	f04f 0901 	mov.w	r9, #1
 800a10e:	4623      	mov	r3, r4
 800a110:	469a      	mov	sl, r3
 800a112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a116:	b10a      	cbz	r2, 800a11c <_svfiprintf_r+0x60>
 800a118:	2a25      	cmp	r2, #37	@ 0x25
 800a11a:	d1f9      	bne.n	800a110 <_svfiprintf_r+0x54>
 800a11c:	ebba 0b04 	subs.w	fp, sl, r4
 800a120:	d00b      	beq.n	800a13a <_svfiprintf_r+0x7e>
 800a122:	465b      	mov	r3, fp
 800a124:	4622      	mov	r2, r4
 800a126:	4629      	mov	r1, r5
 800a128:	4638      	mov	r0, r7
 800a12a:	f7ff ff6b 	bl	800a004 <__ssputs_r>
 800a12e:	3001      	adds	r0, #1
 800a130:	f000 80a7 	beq.w	800a282 <_svfiprintf_r+0x1c6>
 800a134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a136:	445a      	add	r2, fp
 800a138:	9209      	str	r2, [sp, #36]	@ 0x24
 800a13a:	f89a 3000 	ldrb.w	r3, [sl]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f000 809f 	beq.w	800a282 <_svfiprintf_r+0x1c6>
 800a144:	2300      	movs	r3, #0
 800a146:	f04f 32ff 	mov.w	r2, #4294967295
 800a14a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a14e:	f10a 0a01 	add.w	sl, sl, #1
 800a152:	9304      	str	r3, [sp, #16]
 800a154:	9307      	str	r3, [sp, #28]
 800a156:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a15a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a15c:	4654      	mov	r4, sl
 800a15e:	2205      	movs	r2, #5
 800a160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a164:	484e      	ldr	r0, [pc, #312]	@ (800a2a0 <_svfiprintf_r+0x1e4>)
 800a166:	f7f6 f86b 	bl	8000240 <memchr>
 800a16a:	9a04      	ldr	r2, [sp, #16]
 800a16c:	b9d8      	cbnz	r0, 800a1a6 <_svfiprintf_r+0xea>
 800a16e:	06d0      	lsls	r0, r2, #27
 800a170:	bf44      	itt	mi
 800a172:	2320      	movmi	r3, #32
 800a174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a178:	0711      	lsls	r1, r2, #28
 800a17a:	bf44      	itt	mi
 800a17c:	232b      	movmi	r3, #43	@ 0x2b
 800a17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a182:	f89a 3000 	ldrb.w	r3, [sl]
 800a186:	2b2a      	cmp	r3, #42	@ 0x2a
 800a188:	d015      	beq.n	800a1b6 <_svfiprintf_r+0xfa>
 800a18a:	9a07      	ldr	r2, [sp, #28]
 800a18c:	4654      	mov	r4, sl
 800a18e:	2000      	movs	r0, #0
 800a190:	f04f 0c0a 	mov.w	ip, #10
 800a194:	4621      	mov	r1, r4
 800a196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a19a:	3b30      	subs	r3, #48	@ 0x30
 800a19c:	2b09      	cmp	r3, #9
 800a19e:	d94b      	bls.n	800a238 <_svfiprintf_r+0x17c>
 800a1a0:	b1b0      	cbz	r0, 800a1d0 <_svfiprintf_r+0x114>
 800a1a2:	9207      	str	r2, [sp, #28]
 800a1a4:	e014      	b.n	800a1d0 <_svfiprintf_r+0x114>
 800a1a6:	eba0 0308 	sub.w	r3, r0, r8
 800a1aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	46a2      	mov	sl, r4
 800a1b4:	e7d2      	b.n	800a15c <_svfiprintf_r+0xa0>
 800a1b6:	9b03      	ldr	r3, [sp, #12]
 800a1b8:	1d19      	adds	r1, r3, #4
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	9103      	str	r1, [sp, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	bfbb      	ittet	lt
 800a1c2:	425b      	neglt	r3, r3
 800a1c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a1c8:	9307      	strge	r3, [sp, #28]
 800a1ca:	9307      	strlt	r3, [sp, #28]
 800a1cc:	bfb8      	it	lt
 800a1ce:	9204      	strlt	r2, [sp, #16]
 800a1d0:	7823      	ldrb	r3, [r4, #0]
 800a1d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1d4:	d10a      	bne.n	800a1ec <_svfiprintf_r+0x130>
 800a1d6:	7863      	ldrb	r3, [r4, #1]
 800a1d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1da:	d132      	bne.n	800a242 <_svfiprintf_r+0x186>
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	1d1a      	adds	r2, r3, #4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	9203      	str	r2, [sp, #12]
 800a1e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1e8:	3402      	adds	r4, #2
 800a1ea:	9305      	str	r3, [sp, #20]
 800a1ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2b0 <_svfiprintf_r+0x1f4>
 800a1f0:	7821      	ldrb	r1, [r4, #0]
 800a1f2:	2203      	movs	r2, #3
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	f7f6 f823 	bl	8000240 <memchr>
 800a1fa:	b138      	cbz	r0, 800a20c <_svfiprintf_r+0x150>
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	eba0 000a 	sub.w	r0, r0, sl
 800a202:	2240      	movs	r2, #64	@ 0x40
 800a204:	4082      	lsls	r2, r0
 800a206:	4313      	orrs	r3, r2
 800a208:	3401      	adds	r4, #1
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a210:	4824      	ldr	r0, [pc, #144]	@ (800a2a4 <_svfiprintf_r+0x1e8>)
 800a212:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a216:	2206      	movs	r2, #6
 800a218:	f7f6 f812 	bl	8000240 <memchr>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d036      	beq.n	800a28e <_svfiprintf_r+0x1d2>
 800a220:	4b21      	ldr	r3, [pc, #132]	@ (800a2a8 <_svfiprintf_r+0x1ec>)
 800a222:	bb1b      	cbnz	r3, 800a26c <_svfiprintf_r+0x1b0>
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	3307      	adds	r3, #7
 800a228:	f023 0307 	bic.w	r3, r3, #7
 800a22c:	3308      	adds	r3, #8
 800a22e:	9303      	str	r3, [sp, #12]
 800a230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a232:	4433      	add	r3, r6
 800a234:	9309      	str	r3, [sp, #36]	@ 0x24
 800a236:	e76a      	b.n	800a10e <_svfiprintf_r+0x52>
 800a238:	fb0c 3202 	mla	r2, ip, r2, r3
 800a23c:	460c      	mov	r4, r1
 800a23e:	2001      	movs	r0, #1
 800a240:	e7a8      	b.n	800a194 <_svfiprintf_r+0xd8>
 800a242:	2300      	movs	r3, #0
 800a244:	3401      	adds	r4, #1
 800a246:	9305      	str	r3, [sp, #20]
 800a248:	4619      	mov	r1, r3
 800a24a:	f04f 0c0a 	mov.w	ip, #10
 800a24e:	4620      	mov	r0, r4
 800a250:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a254:	3a30      	subs	r2, #48	@ 0x30
 800a256:	2a09      	cmp	r2, #9
 800a258:	d903      	bls.n	800a262 <_svfiprintf_r+0x1a6>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0c6      	beq.n	800a1ec <_svfiprintf_r+0x130>
 800a25e:	9105      	str	r1, [sp, #20]
 800a260:	e7c4      	b.n	800a1ec <_svfiprintf_r+0x130>
 800a262:	fb0c 2101 	mla	r1, ip, r1, r2
 800a266:	4604      	mov	r4, r0
 800a268:	2301      	movs	r3, #1
 800a26a:	e7f0      	b.n	800a24e <_svfiprintf_r+0x192>
 800a26c:	ab03      	add	r3, sp, #12
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	462a      	mov	r2, r5
 800a272:	4b0e      	ldr	r3, [pc, #56]	@ (800a2ac <_svfiprintf_r+0x1f0>)
 800a274:	a904      	add	r1, sp, #16
 800a276:	4638      	mov	r0, r7
 800a278:	f3af 8000 	nop.w
 800a27c:	1c42      	adds	r2, r0, #1
 800a27e:	4606      	mov	r6, r0
 800a280:	d1d6      	bne.n	800a230 <_svfiprintf_r+0x174>
 800a282:	89ab      	ldrh	r3, [r5, #12]
 800a284:	065b      	lsls	r3, r3, #25
 800a286:	f53f af2d 	bmi.w	800a0e4 <_svfiprintf_r+0x28>
 800a28a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a28c:	e72c      	b.n	800a0e8 <_svfiprintf_r+0x2c>
 800a28e:	ab03      	add	r3, sp, #12
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	462a      	mov	r2, r5
 800a294:	4b05      	ldr	r3, [pc, #20]	@ (800a2ac <_svfiprintf_r+0x1f0>)
 800a296:	a904      	add	r1, sp, #16
 800a298:	4638      	mov	r0, r7
 800a29a:	f000 f9bb 	bl	800a614 <_printf_i>
 800a29e:	e7ed      	b.n	800a27c <_svfiprintf_r+0x1c0>
 800a2a0:	0800b1cc 	.word	0x0800b1cc
 800a2a4:	0800b1d6 	.word	0x0800b1d6
 800a2a8:	00000000 	.word	0x00000000
 800a2ac:	0800a005 	.word	0x0800a005
 800a2b0:	0800b1d2 	.word	0x0800b1d2

0800a2b4 <__sfputc_r>:
 800a2b4:	6893      	ldr	r3, [r2, #8]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	b410      	push	{r4}
 800a2bc:	6093      	str	r3, [r2, #8]
 800a2be:	da08      	bge.n	800a2d2 <__sfputc_r+0x1e>
 800a2c0:	6994      	ldr	r4, [r2, #24]
 800a2c2:	42a3      	cmp	r3, r4
 800a2c4:	db01      	blt.n	800a2ca <__sfputc_r+0x16>
 800a2c6:	290a      	cmp	r1, #10
 800a2c8:	d103      	bne.n	800a2d2 <__sfputc_r+0x1e>
 800a2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ce:	f7ff bc72 	b.w	8009bb6 <__swbuf_r>
 800a2d2:	6813      	ldr	r3, [r2, #0]
 800a2d4:	1c58      	adds	r0, r3, #1
 800a2d6:	6010      	str	r0, [r2, #0]
 800a2d8:	7019      	strb	r1, [r3, #0]
 800a2da:	4608      	mov	r0, r1
 800a2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <__sfputs_r>:
 800a2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	460f      	mov	r7, r1
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	18d5      	adds	r5, r2, r3
 800a2ec:	42ac      	cmp	r4, r5
 800a2ee:	d101      	bne.n	800a2f4 <__sfputs_r+0x12>
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	e007      	b.n	800a304 <__sfputs_r+0x22>
 800a2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f8:	463a      	mov	r2, r7
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f7ff ffda 	bl	800a2b4 <__sfputc_r>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d1f3      	bne.n	800a2ec <__sfputs_r+0xa>
 800a304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a308 <_vfiprintf_r>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	460d      	mov	r5, r1
 800a30e:	b09d      	sub	sp, #116	@ 0x74
 800a310:	4614      	mov	r4, r2
 800a312:	4698      	mov	r8, r3
 800a314:	4606      	mov	r6, r0
 800a316:	b118      	cbz	r0, 800a320 <_vfiprintf_r+0x18>
 800a318:	6a03      	ldr	r3, [r0, #32]
 800a31a:	b90b      	cbnz	r3, 800a320 <_vfiprintf_r+0x18>
 800a31c:	f7ff fb0e 	bl	800993c <__sinit>
 800a320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a322:	07d9      	lsls	r1, r3, #31
 800a324:	d405      	bmi.n	800a332 <_vfiprintf_r+0x2a>
 800a326:	89ab      	ldrh	r3, [r5, #12]
 800a328:	059a      	lsls	r2, r3, #22
 800a32a:	d402      	bmi.n	800a332 <_vfiprintf_r+0x2a>
 800a32c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a32e:	f7ff fd60 	bl	8009df2 <__retarget_lock_acquire_recursive>
 800a332:	89ab      	ldrh	r3, [r5, #12]
 800a334:	071b      	lsls	r3, r3, #28
 800a336:	d501      	bpl.n	800a33c <_vfiprintf_r+0x34>
 800a338:	692b      	ldr	r3, [r5, #16]
 800a33a:	b99b      	cbnz	r3, 800a364 <_vfiprintf_r+0x5c>
 800a33c:	4629      	mov	r1, r5
 800a33e:	4630      	mov	r0, r6
 800a340:	f7ff fc78 	bl	8009c34 <__swsetup_r>
 800a344:	b170      	cbz	r0, 800a364 <_vfiprintf_r+0x5c>
 800a346:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a348:	07dc      	lsls	r4, r3, #31
 800a34a:	d504      	bpl.n	800a356 <_vfiprintf_r+0x4e>
 800a34c:	f04f 30ff 	mov.w	r0, #4294967295
 800a350:	b01d      	add	sp, #116	@ 0x74
 800a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a356:	89ab      	ldrh	r3, [r5, #12]
 800a358:	0598      	lsls	r0, r3, #22
 800a35a:	d4f7      	bmi.n	800a34c <_vfiprintf_r+0x44>
 800a35c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a35e:	f7ff fd49 	bl	8009df4 <__retarget_lock_release_recursive>
 800a362:	e7f3      	b.n	800a34c <_vfiprintf_r+0x44>
 800a364:	2300      	movs	r3, #0
 800a366:	9309      	str	r3, [sp, #36]	@ 0x24
 800a368:	2320      	movs	r3, #32
 800a36a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a36e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a372:	2330      	movs	r3, #48	@ 0x30
 800a374:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a524 <_vfiprintf_r+0x21c>
 800a378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a37c:	f04f 0901 	mov.w	r9, #1
 800a380:	4623      	mov	r3, r4
 800a382:	469a      	mov	sl, r3
 800a384:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a388:	b10a      	cbz	r2, 800a38e <_vfiprintf_r+0x86>
 800a38a:	2a25      	cmp	r2, #37	@ 0x25
 800a38c:	d1f9      	bne.n	800a382 <_vfiprintf_r+0x7a>
 800a38e:	ebba 0b04 	subs.w	fp, sl, r4
 800a392:	d00b      	beq.n	800a3ac <_vfiprintf_r+0xa4>
 800a394:	465b      	mov	r3, fp
 800a396:	4622      	mov	r2, r4
 800a398:	4629      	mov	r1, r5
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7ff ffa1 	bl	800a2e2 <__sfputs_r>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	f000 80a7 	beq.w	800a4f4 <_vfiprintf_r+0x1ec>
 800a3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3a8:	445a      	add	r2, fp
 800a3aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 809f 	beq.w	800a4f4 <_vfiprintf_r+0x1ec>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3c0:	f10a 0a01 	add.w	sl, sl, #1
 800a3c4:	9304      	str	r3, [sp, #16]
 800a3c6:	9307      	str	r3, [sp, #28]
 800a3c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3ce:	4654      	mov	r4, sl
 800a3d0:	2205      	movs	r2, #5
 800a3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3d6:	4853      	ldr	r0, [pc, #332]	@ (800a524 <_vfiprintf_r+0x21c>)
 800a3d8:	f7f5 ff32 	bl	8000240 <memchr>
 800a3dc:	9a04      	ldr	r2, [sp, #16]
 800a3de:	b9d8      	cbnz	r0, 800a418 <_vfiprintf_r+0x110>
 800a3e0:	06d1      	lsls	r1, r2, #27
 800a3e2:	bf44      	itt	mi
 800a3e4:	2320      	movmi	r3, #32
 800a3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3ea:	0713      	lsls	r3, r2, #28
 800a3ec:	bf44      	itt	mi
 800a3ee:	232b      	movmi	r3, #43	@ 0x2b
 800a3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3fa:	d015      	beq.n	800a428 <_vfiprintf_r+0x120>
 800a3fc:	9a07      	ldr	r2, [sp, #28]
 800a3fe:	4654      	mov	r4, sl
 800a400:	2000      	movs	r0, #0
 800a402:	f04f 0c0a 	mov.w	ip, #10
 800a406:	4621      	mov	r1, r4
 800a408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a40c:	3b30      	subs	r3, #48	@ 0x30
 800a40e:	2b09      	cmp	r3, #9
 800a410:	d94b      	bls.n	800a4aa <_vfiprintf_r+0x1a2>
 800a412:	b1b0      	cbz	r0, 800a442 <_vfiprintf_r+0x13a>
 800a414:	9207      	str	r2, [sp, #28]
 800a416:	e014      	b.n	800a442 <_vfiprintf_r+0x13a>
 800a418:	eba0 0308 	sub.w	r3, r0, r8
 800a41c:	fa09 f303 	lsl.w	r3, r9, r3
 800a420:	4313      	orrs	r3, r2
 800a422:	9304      	str	r3, [sp, #16]
 800a424:	46a2      	mov	sl, r4
 800a426:	e7d2      	b.n	800a3ce <_vfiprintf_r+0xc6>
 800a428:	9b03      	ldr	r3, [sp, #12]
 800a42a:	1d19      	adds	r1, r3, #4
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	9103      	str	r1, [sp, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	bfbb      	ittet	lt
 800a434:	425b      	neglt	r3, r3
 800a436:	f042 0202 	orrlt.w	r2, r2, #2
 800a43a:	9307      	strge	r3, [sp, #28]
 800a43c:	9307      	strlt	r3, [sp, #28]
 800a43e:	bfb8      	it	lt
 800a440:	9204      	strlt	r2, [sp, #16]
 800a442:	7823      	ldrb	r3, [r4, #0]
 800a444:	2b2e      	cmp	r3, #46	@ 0x2e
 800a446:	d10a      	bne.n	800a45e <_vfiprintf_r+0x156>
 800a448:	7863      	ldrb	r3, [r4, #1]
 800a44a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a44c:	d132      	bne.n	800a4b4 <_vfiprintf_r+0x1ac>
 800a44e:	9b03      	ldr	r3, [sp, #12]
 800a450:	1d1a      	adds	r2, r3, #4
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	9203      	str	r2, [sp, #12]
 800a456:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a45a:	3402      	adds	r4, #2
 800a45c:	9305      	str	r3, [sp, #20]
 800a45e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a534 <_vfiprintf_r+0x22c>
 800a462:	7821      	ldrb	r1, [r4, #0]
 800a464:	2203      	movs	r2, #3
 800a466:	4650      	mov	r0, sl
 800a468:	f7f5 feea 	bl	8000240 <memchr>
 800a46c:	b138      	cbz	r0, 800a47e <_vfiprintf_r+0x176>
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	eba0 000a 	sub.w	r0, r0, sl
 800a474:	2240      	movs	r2, #64	@ 0x40
 800a476:	4082      	lsls	r2, r0
 800a478:	4313      	orrs	r3, r2
 800a47a:	3401      	adds	r4, #1
 800a47c:	9304      	str	r3, [sp, #16]
 800a47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a482:	4829      	ldr	r0, [pc, #164]	@ (800a528 <_vfiprintf_r+0x220>)
 800a484:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a488:	2206      	movs	r2, #6
 800a48a:	f7f5 fed9 	bl	8000240 <memchr>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d03f      	beq.n	800a512 <_vfiprintf_r+0x20a>
 800a492:	4b26      	ldr	r3, [pc, #152]	@ (800a52c <_vfiprintf_r+0x224>)
 800a494:	bb1b      	cbnz	r3, 800a4de <_vfiprintf_r+0x1d6>
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	3307      	adds	r3, #7
 800a49a:	f023 0307 	bic.w	r3, r3, #7
 800a49e:	3308      	adds	r3, #8
 800a4a0:	9303      	str	r3, [sp, #12]
 800a4a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4a4:	443b      	add	r3, r7
 800a4a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4a8:	e76a      	b.n	800a380 <_vfiprintf_r+0x78>
 800a4aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	2001      	movs	r0, #1
 800a4b2:	e7a8      	b.n	800a406 <_vfiprintf_r+0xfe>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	3401      	adds	r4, #1
 800a4b8:	9305      	str	r3, [sp, #20]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	f04f 0c0a 	mov.w	ip, #10
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4c6:	3a30      	subs	r2, #48	@ 0x30
 800a4c8:	2a09      	cmp	r2, #9
 800a4ca:	d903      	bls.n	800a4d4 <_vfiprintf_r+0x1cc>
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d0c6      	beq.n	800a45e <_vfiprintf_r+0x156>
 800a4d0:	9105      	str	r1, [sp, #20]
 800a4d2:	e7c4      	b.n	800a45e <_vfiprintf_r+0x156>
 800a4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4d8:	4604      	mov	r4, r0
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e7f0      	b.n	800a4c0 <_vfiprintf_r+0x1b8>
 800a4de:	ab03      	add	r3, sp, #12
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	462a      	mov	r2, r5
 800a4e4:	4b12      	ldr	r3, [pc, #72]	@ (800a530 <_vfiprintf_r+0x228>)
 800a4e6:	a904      	add	r1, sp, #16
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f3af 8000 	nop.w
 800a4ee:	4607      	mov	r7, r0
 800a4f0:	1c78      	adds	r0, r7, #1
 800a4f2:	d1d6      	bne.n	800a4a2 <_vfiprintf_r+0x19a>
 800a4f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4f6:	07d9      	lsls	r1, r3, #31
 800a4f8:	d405      	bmi.n	800a506 <_vfiprintf_r+0x1fe>
 800a4fa:	89ab      	ldrh	r3, [r5, #12]
 800a4fc:	059a      	lsls	r2, r3, #22
 800a4fe:	d402      	bmi.n	800a506 <_vfiprintf_r+0x1fe>
 800a500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a502:	f7ff fc77 	bl	8009df4 <__retarget_lock_release_recursive>
 800a506:	89ab      	ldrh	r3, [r5, #12]
 800a508:	065b      	lsls	r3, r3, #25
 800a50a:	f53f af1f 	bmi.w	800a34c <_vfiprintf_r+0x44>
 800a50e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a510:	e71e      	b.n	800a350 <_vfiprintf_r+0x48>
 800a512:	ab03      	add	r3, sp, #12
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	462a      	mov	r2, r5
 800a518:	4b05      	ldr	r3, [pc, #20]	@ (800a530 <_vfiprintf_r+0x228>)
 800a51a:	a904      	add	r1, sp, #16
 800a51c:	4630      	mov	r0, r6
 800a51e:	f000 f879 	bl	800a614 <_printf_i>
 800a522:	e7e4      	b.n	800a4ee <_vfiprintf_r+0x1e6>
 800a524:	0800b1cc 	.word	0x0800b1cc
 800a528:	0800b1d6 	.word	0x0800b1d6
 800a52c:	00000000 	.word	0x00000000
 800a530:	0800a2e3 	.word	0x0800a2e3
 800a534:	0800b1d2 	.word	0x0800b1d2

0800a538 <_printf_common>:
 800a538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	4616      	mov	r6, r2
 800a53e:	4698      	mov	r8, r3
 800a540:	688a      	ldr	r2, [r1, #8]
 800a542:	690b      	ldr	r3, [r1, #16]
 800a544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a548:	4293      	cmp	r3, r2
 800a54a:	bfb8      	it	lt
 800a54c:	4613      	movlt	r3, r2
 800a54e:	6033      	str	r3, [r6, #0]
 800a550:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a554:	4607      	mov	r7, r0
 800a556:	460c      	mov	r4, r1
 800a558:	b10a      	cbz	r2, 800a55e <_printf_common+0x26>
 800a55a:	3301      	adds	r3, #1
 800a55c:	6033      	str	r3, [r6, #0]
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	0699      	lsls	r1, r3, #26
 800a562:	bf42      	ittt	mi
 800a564:	6833      	ldrmi	r3, [r6, #0]
 800a566:	3302      	addmi	r3, #2
 800a568:	6033      	strmi	r3, [r6, #0]
 800a56a:	6825      	ldr	r5, [r4, #0]
 800a56c:	f015 0506 	ands.w	r5, r5, #6
 800a570:	d106      	bne.n	800a580 <_printf_common+0x48>
 800a572:	f104 0a19 	add.w	sl, r4, #25
 800a576:	68e3      	ldr	r3, [r4, #12]
 800a578:	6832      	ldr	r2, [r6, #0]
 800a57a:	1a9b      	subs	r3, r3, r2
 800a57c:	42ab      	cmp	r3, r5
 800a57e:	dc26      	bgt.n	800a5ce <_printf_common+0x96>
 800a580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a584:	6822      	ldr	r2, [r4, #0]
 800a586:	3b00      	subs	r3, #0
 800a588:	bf18      	it	ne
 800a58a:	2301      	movne	r3, #1
 800a58c:	0692      	lsls	r2, r2, #26
 800a58e:	d42b      	bmi.n	800a5e8 <_printf_common+0xb0>
 800a590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a594:	4641      	mov	r1, r8
 800a596:	4638      	mov	r0, r7
 800a598:	47c8      	blx	r9
 800a59a:	3001      	adds	r0, #1
 800a59c:	d01e      	beq.n	800a5dc <_printf_common+0xa4>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	6922      	ldr	r2, [r4, #16]
 800a5a2:	f003 0306 	and.w	r3, r3, #6
 800a5a6:	2b04      	cmp	r3, #4
 800a5a8:	bf02      	ittt	eq
 800a5aa:	68e5      	ldreq	r5, [r4, #12]
 800a5ac:	6833      	ldreq	r3, [r6, #0]
 800a5ae:	1aed      	subeq	r5, r5, r3
 800a5b0:	68a3      	ldr	r3, [r4, #8]
 800a5b2:	bf0c      	ite	eq
 800a5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5b8:	2500      	movne	r5, #0
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	bfc4      	itt	gt
 800a5be:	1a9b      	subgt	r3, r3, r2
 800a5c0:	18ed      	addgt	r5, r5, r3
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	341a      	adds	r4, #26
 800a5c6:	42b5      	cmp	r5, r6
 800a5c8:	d11a      	bne.n	800a600 <_printf_common+0xc8>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e008      	b.n	800a5e0 <_printf_common+0xa8>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	4652      	mov	r2, sl
 800a5d2:	4641      	mov	r1, r8
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	47c8      	blx	r9
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d103      	bne.n	800a5e4 <_printf_common+0xac>
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	e7c6      	b.n	800a576 <_printf_common+0x3e>
 800a5e8:	18e1      	adds	r1, r4, r3
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	2030      	movs	r0, #48	@ 0x30
 800a5ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5f2:	4422      	add	r2, r4
 800a5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	e7c7      	b.n	800a590 <_printf_common+0x58>
 800a600:	2301      	movs	r3, #1
 800a602:	4622      	mov	r2, r4
 800a604:	4641      	mov	r1, r8
 800a606:	4638      	mov	r0, r7
 800a608:	47c8      	blx	r9
 800a60a:	3001      	adds	r0, #1
 800a60c:	d0e6      	beq.n	800a5dc <_printf_common+0xa4>
 800a60e:	3601      	adds	r6, #1
 800a610:	e7d9      	b.n	800a5c6 <_printf_common+0x8e>
	...

0800a614 <_printf_i>:
 800a614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	7e0f      	ldrb	r7, [r1, #24]
 800a61a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a61c:	2f78      	cmp	r7, #120	@ 0x78
 800a61e:	4691      	mov	r9, r2
 800a620:	4680      	mov	r8, r0
 800a622:	460c      	mov	r4, r1
 800a624:	469a      	mov	sl, r3
 800a626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a62a:	d807      	bhi.n	800a63c <_printf_i+0x28>
 800a62c:	2f62      	cmp	r7, #98	@ 0x62
 800a62e:	d80a      	bhi.n	800a646 <_printf_i+0x32>
 800a630:	2f00      	cmp	r7, #0
 800a632:	f000 80d2 	beq.w	800a7da <_printf_i+0x1c6>
 800a636:	2f58      	cmp	r7, #88	@ 0x58
 800a638:	f000 80b9 	beq.w	800a7ae <_printf_i+0x19a>
 800a63c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a644:	e03a      	b.n	800a6bc <_printf_i+0xa8>
 800a646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a64a:	2b15      	cmp	r3, #21
 800a64c:	d8f6      	bhi.n	800a63c <_printf_i+0x28>
 800a64e:	a101      	add	r1, pc, #4	@ (adr r1, 800a654 <_printf_i+0x40>)
 800a650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a654:	0800a6ad 	.word	0x0800a6ad
 800a658:	0800a6c1 	.word	0x0800a6c1
 800a65c:	0800a63d 	.word	0x0800a63d
 800a660:	0800a63d 	.word	0x0800a63d
 800a664:	0800a63d 	.word	0x0800a63d
 800a668:	0800a63d 	.word	0x0800a63d
 800a66c:	0800a6c1 	.word	0x0800a6c1
 800a670:	0800a63d 	.word	0x0800a63d
 800a674:	0800a63d 	.word	0x0800a63d
 800a678:	0800a63d 	.word	0x0800a63d
 800a67c:	0800a63d 	.word	0x0800a63d
 800a680:	0800a7c1 	.word	0x0800a7c1
 800a684:	0800a6eb 	.word	0x0800a6eb
 800a688:	0800a77b 	.word	0x0800a77b
 800a68c:	0800a63d 	.word	0x0800a63d
 800a690:	0800a63d 	.word	0x0800a63d
 800a694:	0800a7e3 	.word	0x0800a7e3
 800a698:	0800a63d 	.word	0x0800a63d
 800a69c:	0800a6eb 	.word	0x0800a6eb
 800a6a0:	0800a63d 	.word	0x0800a63d
 800a6a4:	0800a63d 	.word	0x0800a63d
 800a6a8:	0800a783 	.word	0x0800a783
 800a6ac:	6833      	ldr	r3, [r6, #0]
 800a6ae:	1d1a      	adds	r2, r3, #4
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6032      	str	r2, [r6, #0]
 800a6b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e09d      	b.n	800a7fc <_printf_i+0x1e8>
 800a6c0:	6833      	ldr	r3, [r6, #0]
 800a6c2:	6820      	ldr	r0, [r4, #0]
 800a6c4:	1d19      	adds	r1, r3, #4
 800a6c6:	6031      	str	r1, [r6, #0]
 800a6c8:	0606      	lsls	r6, r0, #24
 800a6ca:	d501      	bpl.n	800a6d0 <_printf_i+0xbc>
 800a6cc:	681d      	ldr	r5, [r3, #0]
 800a6ce:	e003      	b.n	800a6d8 <_printf_i+0xc4>
 800a6d0:	0645      	lsls	r5, r0, #25
 800a6d2:	d5fb      	bpl.n	800a6cc <_printf_i+0xb8>
 800a6d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6d8:	2d00      	cmp	r5, #0
 800a6da:	da03      	bge.n	800a6e4 <_printf_i+0xd0>
 800a6dc:	232d      	movs	r3, #45	@ 0x2d
 800a6de:	426d      	negs	r5, r5
 800a6e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6e4:	4859      	ldr	r0, [pc, #356]	@ (800a84c <_printf_i+0x238>)
 800a6e6:	230a      	movs	r3, #10
 800a6e8:	e011      	b.n	800a70e <_printf_i+0xfa>
 800a6ea:	6821      	ldr	r1, [r4, #0]
 800a6ec:	6833      	ldr	r3, [r6, #0]
 800a6ee:	0608      	lsls	r0, r1, #24
 800a6f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6f4:	d402      	bmi.n	800a6fc <_printf_i+0xe8>
 800a6f6:	0649      	lsls	r1, r1, #25
 800a6f8:	bf48      	it	mi
 800a6fa:	b2ad      	uxthmi	r5, r5
 800a6fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6fe:	4853      	ldr	r0, [pc, #332]	@ (800a84c <_printf_i+0x238>)
 800a700:	6033      	str	r3, [r6, #0]
 800a702:	bf14      	ite	ne
 800a704:	230a      	movne	r3, #10
 800a706:	2308      	moveq	r3, #8
 800a708:	2100      	movs	r1, #0
 800a70a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a70e:	6866      	ldr	r6, [r4, #4]
 800a710:	60a6      	str	r6, [r4, #8]
 800a712:	2e00      	cmp	r6, #0
 800a714:	bfa2      	ittt	ge
 800a716:	6821      	ldrge	r1, [r4, #0]
 800a718:	f021 0104 	bicge.w	r1, r1, #4
 800a71c:	6021      	strge	r1, [r4, #0]
 800a71e:	b90d      	cbnz	r5, 800a724 <_printf_i+0x110>
 800a720:	2e00      	cmp	r6, #0
 800a722:	d04b      	beq.n	800a7bc <_printf_i+0x1a8>
 800a724:	4616      	mov	r6, r2
 800a726:	fbb5 f1f3 	udiv	r1, r5, r3
 800a72a:	fb03 5711 	mls	r7, r3, r1, r5
 800a72e:	5dc7      	ldrb	r7, [r0, r7]
 800a730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a734:	462f      	mov	r7, r5
 800a736:	42bb      	cmp	r3, r7
 800a738:	460d      	mov	r5, r1
 800a73a:	d9f4      	bls.n	800a726 <_printf_i+0x112>
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	d10b      	bne.n	800a758 <_printf_i+0x144>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	07df      	lsls	r7, r3, #31
 800a744:	d508      	bpl.n	800a758 <_printf_i+0x144>
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	6861      	ldr	r1, [r4, #4]
 800a74a:	4299      	cmp	r1, r3
 800a74c:	bfde      	ittt	le
 800a74e:	2330      	movle	r3, #48	@ 0x30
 800a750:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a754:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a758:	1b92      	subs	r2, r2, r6
 800a75a:	6122      	str	r2, [r4, #16]
 800a75c:	f8cd a000 	str.w	sl, [sp]
 800a760:	464b      	mov	r3, r9
 800a762:	aa03      	add	r2, sp, #12
 800a764:	4621      	mov	r1, r4
 800a766:	4640      	mov	r0, r8
 800a768:	f7ff fee6 	bl	800a538 <_printf_common>
 800a76c:	3001      	adds	r0, #1
 800a76e:	d14a      	bne.n	800a806 <_printf_i+0x1f2>
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	b004      	add	sp, #16
 800a776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	f043 0320 	orr.w	r3, r3, #32
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	4833      	ldr	r0, [pc, #204]	@ (800a850 <_printf_i+0x23c>)
 800a784:	2778      	movs	r7, #120	@ 0x78
 800a786:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	6831      	ldr	r1, [r6, #0]
 800a78e:	061f      	lsls	r7, r3, #24
 800a790:	f851 5b04 	ldr.w	r5, [r1], #4
 800a794:	d402      	bmi.n	800a79c <_printf_i+0x188>
 800a796:	065f      	lsls	r7, r3, #25
 800a798:	bf48      	it	mi
 800a79a:	b2ad      	uxthmi	r5, r5
 800a79c:	6031      	str	r1, [r6, #0]
 800a79e:	07d9      	lsls	r1, r3, #31
 800a7a0:	bf44      	itt	mi
 800a7a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a7a6:	6023      	strmi	r3, [r4, #0]
 800a7a8:	b11d      	cbz	r5, 800a7b2 <_printf_i+0x19e>
 800a7aa:	2310      	movs	r3, #16
 800a7ac:	e7ac      	b.n	800a708 <_printf_i+0xf4>
 800a7ae:	4827      	ldr	r0, [pc, #156]	@ (800a84c <_printf_i+0x238>)
 800a7b0:	e7e9      	b.n	800a786 <_printf_i+0x172>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	f023 0320 	bic.w	r3, r3, #32
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	e7f6      	b.n	800a7aa <_printf_i+0x196>
 800a7bc:	4616      	mov	r6, r2
 800a7be:	e7bd      	b.n	800a73c <_printf_i+0x128>
 800a7c0:	6833      	ldr	r3, [r6, #0]
 800a7c2:	6825      	ldr	r5, [r4, #0]
 800a7c4:	6961      	ldr	r1, [r4, #20]
 800a7c6:	1d18      	adds	r0, r3, #4
 800a7c8:	6030      	str	r0, [r6, #0]
 800a7ca:	062e      	lsls	r6, r5, #24
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	d501      	bpl.n	800a7d4 <_printf_i+0x1c0>
 800a7d0:	6019      	str	r1, [r3, #0]
 800a7d2:	e002      	b.n	800a7da <_printf_i+0x1c6>
 800a7d4:	0668      	lsls	r0, r5, #25
 800a7d6:	d5fb      	bpl.n	800a7d0 <_printf_i+0x1bc>
 800a7d8:	8019      	strh	r1, [r3, #0]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	6123      	str	r3, [r4, #16]
 800a7de:	4616      	mov	r6, r2
 800a7e0:	e7bc      	b.n	800a75c <_printf_i+0x148>
 800a7e2:	6833      	ldr	r3, [r6, #0]
 800a7e4:	1d1a      	adds	r2, r3, #4
 800a7e6:	6032      	str	r2, [r6, #0]
 800a7e8:	681e      	ldr	r6, [r3, #0]
 800a7ea:	6862      	ldr	r2, [r4, #4]
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f7f5 fd26 	bl	8000240 <memchr>
 800a7f4:	b108      	cbz	r0, 800a7fa <_printf_i+0x1e6>
 800a7f6:	1b80      	subs	r0, r0, r6
 800a7f8:	6060      	str	r0, [r4, #4]
 800a7fa:	6863      	ldr	r3, [r4, #4]
 800a7fc:	6123      	str	r3, [r4, #16]
 800a7fe:	2300      	movs	r3, #0
 800a800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a804:	e7aa      	b.n	800a75c <_printf_i+0x148>
 800a806:	6923      	ldr	r3, [r4, #16]
 800a808:	4632      	mov	r2, r6
 800a80a:	4649      	mov	r1, r9
 800a80c:	4640      	mov	r0, r8
 800a80e:	47d0      	blx	sl
 800a810:	3001      	adds	r0, #1
 800a812:	d0ad      	beq.n	800a770 <_printf_i+0x15c>
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	079b      	lsls	r3, r3, #30
 800a818:	d413      	bmi.n	800a842 <_printf_i+0x22e>
 800a81a:	68e0      	ldr	r0, [r4, #12]
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	4298      	cmp	r0, r3
 800a820:	bfb8      	it	lt
 800a822:	4618      	movlt	r0, r3
 800a824:	e7a6      	b.n	800a774 <_printf_i+0x160>
 800a826:	2301      	movs	r3, #1
 800a828:	4632      	mov	r2, r6
 800a82a:	4649      	mov	r1, r9
 800a82c:	4640      	mov	r0, r8
 800a82e:	47d0      	blx	sl
 800a830:	3001      	adds	r0, #1
 800a832:	d09d      	beq.n	800a770 <_printf_i+0x15c>
 800a834:	3501      	adds	r5, #1
 800a836:	68e3      	ldr	r3, [r4, #12]
 800a838:	9903      	ldr	r1, [sp, #12]
 800a83a:	1a5b      	subs	r3, r3, r1
 800a83c:	42ab      	cmp	r3, r5
 800a83e:	dcf2      	bgt.n	800a826 <_printf_i+0x212>
 800a840:	e7eb      	b.n	800a81a <_printf_i+0x206>
 800a842:	2500      	movs	r5, #0
 800a844:	f104 0619 	add.w	r6, r4, #25
 800a848:	e7f5      	b.n	800a836 <_printf_i+0x222>
 800a84a:	bf00      	nop
 800a84c:	0800b1dd 	.word	0x0800b1dd
 800a850:	0800b1ee 	.word	0x0800b1ee

0800a854 <__sflush_r>:
 800a854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85c:	0716      	lsls	r6, r2, #28
 800a85e:	4605      	mov	r5, r0
 800a860:	460c      	mov	r4, r1
 800a862:	d454      	bmi.n	800a90e <__sflush_r+0xba>
 800a864:	684b      	ldr	r3, [r1, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	dc02      	bgt.n	800a870 <__sflush_r+0x1c>
 800a86a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dd48      	ble.n	800a902 <__sflush_r+0xae>
 800a870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a872:	2e00      	cmp	r6, #0
 800a874:	d045      	beq.n	800a902 <__sflush_r+0xae>
 800a876:	2300      	movs	r3, #0
 800a878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a87c:	682f      	ldr	r7, [r5, #0]
 800a87e:	6a21      	ldr	r1, [r4, #32]
 800a880:	602b      	str	r3, [r5, #0]
 800a882:	d030      	beq.n	800a8e6 <__sflush_r+0x92>
 800a884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	0759      	lsls	r1, r3, #29
 800a88a:	d505      	bpl.n	800a898 <__sflush_r+0x44>
 800a88c:	6863      	ldr	r3, [r4, #4]
 800a88e:	1ad2      	subs	r2, r2, r3
 800a890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a892:	b10b      	cbz	r3, 800a898 <__sflush_r+0x44>
 800a894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a896:	1ad2      	subs	r2, r2, r3
 800a898:	2300      	movs	r3, #0
 800a89a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a89c:	6a21      	ldr	r1, [r4, #32]
 800a89e:	4628      	mov	r0, r5
 800a8a0:	47b0      	blx	r6
 800a8a2:	1c43      	adds	r3, r0, #1
 800a8a4:	89a3      	ldrh	r3, [r4, #12]
 800a8a6:	d106      	bne.n	800a8b6 <__sflush_r+0x62>
 800a8a8:	6829      	ldr	r1, [r5, #0]
 800a8aa:	291d      	cmp	r1, #29
 800a8ac:	d82b      	bhi.n	800a906 <__sflush_r+0xb2>
 800a8ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a958 <__sflush_r+0x104>)
 800a8b0:	410a      	asrs	r2, r1
 800a8b2:	07d6      	lsls	r6, r2, #31
 800a8b4:	d427      	bmi.n	800a906 <__sflush_r+0xb2>
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	6062      	str	r2, [r4, #4]
 800a8ba:	04d9      	lsls	r1, r3, #19
 800a8bc:	6922      	ldr	r2, [r4, #16]
 800a8be:	6022      	str	r2, [r4, #0]
 800a8c0:	d504      	bpl.n	800a8cc <__sflush_r+0x78>
 800a8c2:	1c42      	adds	r2, r0, #1
 800a8c4:	d101      	bne.n	800a8ca <__sflush_r+0x76>
 800a8c6:	682b      	ldr	r3, [r5, #0]
 800a8c8:	b903      	cbnz	r3, 800a8cc <__sflush_r+0x78>
 800a8ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8ce:	602f      	str	r7, [r5, #0]
 800a8d0:	b1b9      	cbz	r1, 800a902 <__sflush_r+0xae>
 800a8d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8d6:	4299      	cmp	r1, r3
 800a8d8:	d002      	beq.n	800a8e0 <__sflush_r+0x8c>
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f7ff fa9a 	bl	8009e14 <_free_r>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8e4:	e00d      	b.n	800a902 <__sflush_r+0xae>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	47b0      	blx	r6
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	1c50      	adds	r0, r2, #1
 800a8f0:	d1c9      	bne.n	800a886 <__sflush_r+0x32>
 800a8f2:	682b      	ldr	r3, [r5, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0c6      	beq.n	800a886 <__sflush_r+0x32>
 800a8f8:	2b1d      	cmp	r3, #29
 800a8fa:	d001      	beq.n	800a900 <__sflush_r+0xac>
 800a8fc:	2b16      	cmp	r3, #22
 800a8fe:	d11e      	bne.n	800a93e <__sflush_r+0xea>
 800a900:	602f      	str	r7, [r5, #0]
 800a902:	2000      	movs	r0, #0
 800a904:	e022      	b.n	800a94c <__sflush_r+0xf8>
 800a906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a90a:	b21b      	sxth	r3, r3
 800a90c:	e01b      	b.n	800a946 <__sflush_r+0xf2>
 800a90e:	690f      	ldr	r7, [r1, #16]
 800a910:	2f00      	cmp	r7, #0
 800a912:	d0f6      	beq.n	800a902 <__sflush_r+0xae>
 800a914:	0793      	lsls	r3, r2, #30
 800a916:	680e      	ldr	r6, [r1, #0]
 800a918:	bf08      	it	eq
 800a91a:	694b      	ldreq	r3, [r1, #20]
 800a91c:	600f      	str	r7, [r1, #0]
 800a91e:	bf18      	it	ne
 800a920:	2300      	movne	r3, #0
 800a922:	eba6 0807 	sub.w	r8, r6, r7
 800a926:	608b      	str	r3, [r1, #8]
 800a928:	f1b8 0f00 	cmp.w	r8, #0
 800a92c:	dde9      	ble.n	800a902 <__sflush_r+0xae>
 800a92e:	6a21      	ldr	r1, [r4, #32]
 800a930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a932:	4643      	mov	r3, r8
 800a934:	463a      	mov	r2, r7
 800a936:	4628      	mov	r0, r5
 800a938:	47b0      	blx	r6
 800a93a:	2800      	cmp	r0, #0
 800a93c:	dc08      	bgt.n	800a950 <__sflush_r+0xfc>
 800a93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	f04f 30ff 	mov.w	r0, #4294967295
 800a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a950:	4407      	add	r7, r0
 800a952:	eba8 0800 	sub.w	r8, r8, r0
 800a956:	e7e7      	b.n	800a928 <__sflush_r+0xd4>
 800a958:	dfbffffe 	.word	0xdfbffffe

0800a95c <_fflush_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	690b      	ldr	r3, [r1, #16]
 800a960:	4605      	mov	r5, r0
 800a962:	460c      	mov	r4, r1
 800a964:	b913      	cbnz	r3, 800a96c <_fflush_r+0x10>
 800a966:	2500      	movs	r5, #0
 800a968:	4628      	mov	r0, r5
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	b118      	cbz	r0, 800a976 <_fflush_r+0x1a>
 800a96e:	6a03      	ldr	r3, [r0, #32]
 800a970:	b90b      	cbnz	r3, 800a976 <_fflush_r+0x1a>
 800a972:	f7fe ffe3 	bl	800993c <__sinit>
 800a976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0f3      	beq.n	800a966 <_fflush_r+0xa>
 800a97e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a980:	07d0      	lsls	r0, r2, #31
 800a982:	d404      	bmi.n	800a98e <_fflush_r+0x32>
 800a984:	0599      	lsls	r1, r3, #22
 800a986:	d402      	bmi.n	800a98e <_fflush_r+0x32>
 800a988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a98a:	f7ff fa32 	bl	8009df2 <__retarget_lock_acquire_recursive>
 800a98e:	4628      	mov	r0, r5
 800a990:	4621      	mov	r1, r4
 800a992:	f7ff ff5f 	bl	800a854 <__sflush_r>
 800a996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a998:	07da      	lsls	r2, r3, #31
 800a99a:	4605      	mov	r5, r0
 800a99c:	d4e4      	bmi.n	800a968 <_fflush_r+0xc>
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	059b      	lsls	r3, r3, #22
 800a9a2:	d4e1      	bmi.n	800a968 <_fflush_r+0xc>
 800a9a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9a6:	f7ff fa25 	bl	8009df4 <__retarget_lock_release_recursive>
 800a9aa:	e7dd      	b.n	800a968 <_fflush_r+0xc>

0800a9ac <__swhatbuf_r>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b4:	2900      	cmp	r1, #0
 800a9b6:	b096      	sub	sp, #88	@ 0x58
 800a9b8:	4615      	mov	r5, r2
 800a9ba:	461e      	mov	r6, r3
 800a9bc:	da0d      	bge.n	800a9da <__swhatbuf_r+0x2e>
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9c4:	f04f 0100 	mov.w	r1, #0
 800a9c8:	bf14      	ite	ne
 800a9ca:	2340      	movne	r3, #64	@ 0x40
 800a9cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	6031      	str	r1, [r6, #0]
 800a9d4:	602b      	str	r3, [r5, #0]
 800a9d6:	b016      	add	sp, #88	@ 0x58
 800a9d8:	bd70      	pop	{r4, r5, r6, pc}
 800a9da:	466a      	mov	r2, sp
 800a9dc:	f000 f862 	bl	800aaa4 <_fstat_r>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	dbec      	blt.n	800a9be <__swhatbuf_r+0x12>
 800a9e4:	9901      	ldr	r1, [sp, #4]
 800a9e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9ee:	4259      	negs	r1, r3
 800a9f0:	4159      	adcs	r1, r3
 800a9f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9f6:	e7eb      	b.n	800a9d0 <__swhatbuf_r+0x24>

0800a9f8 <__smakebuf_r>:
 800a9f8:	898b      	ldrh	r3, [r1, #12]
 800a9fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9fc:	079d      	lsls	r5, r3, #30
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460c      	mov	r4, r1
 800aa02:	d507      	bpl.n	800aa14 <__smakebuf_r+0x1c>
 800aa04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	6123      	str	r3, [r4, #16]
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	6163      	str	r3, [r4, #20]
 800aa10:	b003      	add	sp, #12
 800aa12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa14:	ab01      	add	r3, sp, #4
 800aa16:	466a      	mov	r2, sp
 800aa18:	f7ff ffc8 	bl	800a9ac <__swhatbuf_r>
 800aa1c:	9f00      	ldr	r7, [sp, #0]
 800aa1e:	4605      	mov	r5, r0
 800aa20:	4639      	mov	r1, r7
 800aa22:	4630      	mov	r0, r6
 800aa24:	f7ff fa62 	bl	8009eec <_malloc_r>
 800aa28:	b948      	cbnz	r0, 800aa3e <__smakebuf_r+0x46>
 800aa2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa2e:	059a      	lsls	r2, r3, #22
 800aa30:	d4ee      	bmi.n	800aa10 <__smakebuf_r+0x18>
 800aa32:	f023 0303 	bic.w	r3, r3, #3
 800aa36:	f043 0302 	orr.w	r3, r3, #2
 800aa3a:	81a3      	strh	r3, [r4, #12]
 800aa3c:	e7e2      	b.n	800aa04 <__smakebuf_r+0xc>
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	6020      	str	r0, [r4, #0]
 800aa42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa46:	81a3      	strh	r3, [r4, #12]
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa4e:	b15b      	cbz	r3, 800aa68 <__smakebuf_r+0x70>
 800aa50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa54:	4630      	mov	r0, r6
 800aa56:	f000 f837 	bl	800aac8 <_isatty_r>
 800aa5a:	b128      	cbz	r0, 800aa68 <__smakebuf_r+0x70>
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	f023 0303 	bic.w	r3, r3, #3
 800aa62:	f043 0301 	orr.w	r3, r3, #1
 800aa66:	81a3      	strh	r3, [r4, #12]
 800aa68:	89a3      	ldrh	r3, [r4, #12]
 800aa6a:	431d      	orrs	r5, r3
 800aa6c:	81a5      	strh	r5, [r4, #12]
 800aa6e:	e7cf      	b.n	800aa10 <__smakebuf_r+0x18>

0800aa70 <memmove>:
 800aa70:	4288      	cmp	r0, r1
 800aa72:	b510      	push	{r4, lr}
 800aa74:	eb01 0402 	add.w	r4, r1, r2
 800aa78:	d902      	bls.n	800aa80 <memmove+0x10>
 800aa7a:	4284      	cmp	r4, r0
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	d807      	bhi.n	800aa90 <memmove+0x20>
 800aa80:	1e43      	subs	r3, r0, #1
 800aa82:	42a1      	cmp	r1, r4
 800aa84:	d008      	beq.n	800aa98 <memmove+0x28>
 800aa86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa8e:	e7f8      	b.n	800aa82 <memmove+0x12>
 800aa90:	4402      	add	r2, r0
 800aa92:	4601      	mov	r1, r0
 800aa94:	428a      	cmp	r2, r1
 800aa96:	d100      	bne.n	800aa9a <memmove+0x2a>
 800aa98:	bd10      	pop	{r4, pc}
 800aa9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaa2:	e7f7      	b.n	800aa94 <memmove+0x24>

0800aaa4 <_fstat_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d07      	ldr	r5, [pc, #28]	@ (800aac4 <_fstat_r+0x20>)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	4611      	mov	r1, r2
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	f7f7 fd6e 	bl	8002592 <_fstat>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	d102      	bne.n	800aac0 <_fstat_r+0x1c>
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	b103      	cbz	r3, 800aac0 <_fstat_r+0x1c>
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	bd38      	pop	{r3, r4, r5, pc}
 800aac2:	bf00      	nop
 800aac4:	20013de0 	.word	0x20013de0

0800aac8 <_isatty_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	@ (800aae4 <_isatty_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f7 fd6d 	bl	80025b2 <_isatty>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_isatty_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_isatty_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	20013de0 	.word	0x20013de0

0800aae8 <_sbrk_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d06      	ldr	r5, [pc, #24]	@ (800ab04 <_sbrk_r+0x1c>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	f000 f83e 	bl	800ab74 <_sbrk>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_sbrk_r+0x1a>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_sbrk_r+0x1a>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	20013de0 	.word	0x20013de0

0800ab08 <_realloc_r>:
 800ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0c:	4680      	mov	r8, r0
 800ab0e:	4615      	mov	r5, r2
 800ab10:	460c      	mov	r4, r1
 800ab12:	b921      	cbnz	r1, 800ab1e <_realloc_r+0x16>
 800ab14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab18:	4611      	mov	r1, r2
 800ab1a:	f7ff b9e7 	b.w	8009eec <_malloc_r>
 800ab1e:	b92a      	cbnz	r2, 800ab2c <_realloc_r+0x24>
 800ab20:	f7ff f978 	bl	8009e14 <_free_r>
 800ab24:	2400      	movs	r4, #0
 800ab26:	4620      	mov	r0, r4
 800ab28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab2c:	f000 f81a 	bl	800ab64 <_malloc_usable_size_r>
 800ab30:	4285      	cmp	r5, r0
 800ab32:	4606      	mov	r6, r0
 800ab34:	d802      	bhi.n	800ab3c <_realloc_r+0x34>
 800ab36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab3a:	d8f4      	bhi.n	800ab26 <_realloc_r+0x1e>
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f7ff f9d4 	bl	8009eec <_malloc_r>
 800ab44:	4607      	mov	r7, r0
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d0ec      	beq.n	800ab24 <_realloc_r+0x1c>
 800ab4a:	42b5      	cmp	r5, r6
 800ab4c:	462a      	mov	r2, r5
 800ab4e:	4621      	mov	r1, r4
 800ab50:	bf28      	it	cs
 800ab52:	4632      	movcs	r2, r6
 800ab54:	f7ff f94f 	bl	8009df6 <memcpy>
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	f7ff f95a 	bl	8009e14 <_free_r>
 800ab60:	463c      	mov	r4, r7
 800ab62:	e7e0      	b.n	800ab26 <_realloc_r+0x1e>

0800ab64 <_malloc_usable_size_r>:
 800ab64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab68:	1f18      	subs	r0, r3, #4
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	bfbc      	itt	lt
 800ab6e:	580b      	ldrlt	r3, [r1, r0]
 800ab70:	18c0      	addlt	r0, r0, r3
 800ab72:	4770      	bx	lr

0800ab74 <_sbrk>:
 800ab74:	4a04      	ldr	r2, [pc, #16]	@ (800ab88 <_sbrk+0x14>)
 800ab76:	6811      	ldr	r1, [r2, #0]
 800ab78:	4603      	mov	r3, r0
 800ab7a:	b909      	cbnz	r1, 800ab80 <_sbrk+0xc>
 800ab7c:	4903      	ldr	r1, [pc, #12]	@ (800ab8c <_sbrk+0x18>)
 800ab7e:	6011      	str	r1, [r2, #0]
 800ab80:	6810      	ldr	r0, [r2, #0]
 800ab82:	4403      	add	r3, r0
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	4770      	bx	lr
 800ab88:	20013df0 	.word	0x20013df0
 800ab8c:	20013df8 	.word	0x20013df8

0800ab90 <_init>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr

0800ab9c <_fini>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

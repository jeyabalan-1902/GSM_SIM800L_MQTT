
SIM800MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005854  08005854  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005854  08005854  00006854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800585c  0800585c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800585c  0800585c  0000685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005860  08005860  00006860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005864  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  20000068  080058cc  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea0  080058cc  00007ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cba9  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bc  00000000  00000000  00013c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00016600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f6  00000000  00000000  00017080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f8d  00000000  00000000  00017876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef77  00000000  00000000  0003a803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cafbe  00000000  00000000  0004977a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031dc  00000000  00000000  0011477c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00117958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005590 	.word	0x08005590

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005590 	.word	0x08005590

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	int len = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7a1b      	ldrb	r3, [r3, #8]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d102      	bne.n	80005ea <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80005e4:	230c      	movs	r3, #12
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e005      	b.n	80005f6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7a1b      	ldrb	r3, [r3, #8]
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d101      	bne.n	80005f6 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80005f2:	230a      	movs	r3, #10
 80005f4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	330c      	adds	r3, #12
 80005fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005fe:	f000 fb5e 	bl	8000cbe <MQTTstrlen>
 8000602:	4603      	mov	r3, r0
 8000604:	3302      	adds	r3, #2
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7edb      	ldrb	r3, [r3, #27]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d013      	beq.n	800063c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3324      	adds	r3, #36	@ 0x24
 8000618:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800061c:	f000 fb4f 	bl	8000cbe <MQTTstrlen>
 8000620:	4603      	mov	r3, r0
 8000622:	1c9c      	adds	r4, r3, #2
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3330      	adds	r3, #48	@ 0x30
 8000628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800062c:	f000 fb47 	bl	8000cbe <MQTTstrlen>
 8000630:	4603      	mov	r3, r0
 8000632:	4423      	add	r3, r4
 8000634:	3302      	adds	r3, #2
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	4413      	add	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <MQTTSerialize_connectLength+0x7c>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00a      	beq.n	8000662 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3340      	adds	r3, #64	@ 0x40
 8000650:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000654:	f000 fb33 	bl	8000cbe <MQTTstrlen>
 8000658:	4603      	mov	r3, r0
 800065a:	3302      	adds	r3, #2
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	2b00      	cmp	r3, #0
 8000668:	d103      	bne.n	8000672 <MQTTSerialize_connectLength+0xa2>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00a      	beq.n	8000688 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	334c      	adds	r3, #76	@ 0x4c
 8000676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800067a:	f000 fb20 	bl	8000cbe <MQTTstrlen>
 800067e:	4603      	mov	r3, r0
 8000680:	3302      	adds	r3, #2
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000688:	68fb      	ldr	r3, [r7, #12]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
	...

08000694 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
	int len = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff8a 	bl	80005d0 <MQTTSerialize_connectLength>
 80006bc:	6238      	str	r0, [r7, #32]
 80006be:	6a38      	ldr	r0, [r7, #32]
 80006c0:	f000 f9b2 	bl	8000a28 <MQTTPacket_len>
 80006c4:	4602      	mov	r2, r0
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	da03      	bge.n	80006d4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80006cc:	f06f 0301 	mvn.w	r3, #1
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 80006d2:	e0c2      	b.n	800085a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80006d8:	7e3b      	ldrb	r3, [r7, #24]
 80006da:	2201      	movs	r2, #1
 80006dc:	f362 1307 	bfi	r3, r2, #4, #4
 80006e0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80006e2:	7e3a      	ldrb	r2, [r7, #24]
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fa2b 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	6a39      	ldr	r1, [r7, #32]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f92b 	bl	8000950 <MQTTPacket_encode>
 80006fa:	4602      	mov	r2, r0
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	4413      	add	r3, r2
 8000700:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7a1b      	ldrb	r3, [r3, #8]
 8000706:	2b04      	cmp	r3, #4
 8000708:	d10c      	bne.n	8000724 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4955      	ldr	r1, [pc, #340]	@ (8000864 <MQTTSerialize_connect+0x1d0>)
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fa56 	bl	8000bc2 <writeCString>
		writeChar(&ptr, (char) 4);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2104      	movs	r1, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fa12 	bl	8000b46 <writeChar>
 8000722:	e00b      	b.n	800073c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	494f      	ldr	r1, [pc, #316]	@ (8000868 <MQTTSerialize_connect+0x1d4>)
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fa49 	bl	8000bc2 <writeCString>
		writeChar(&ptr, (char) 3);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2103      	movs	r1, #3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fa05 	bl	8000b46 <writeChar>
	}

	flags.all = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7e9b      	ldrb	r3, [r3, #26]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	7d3b      	ldrb	r3, [r7, #20]
 800074c:	f362 0341 	bfi	r3, r2, #1, #1
 8000750:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7edb      	ldrb	r3, [r3, #27]
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf14      	ite	ne
 800075a:	2301      	movne	r3, #1
 800075c:	2300      	moveq	r3, #0
 800075e:	b2da      	uxtb	r2, r3
 8000760:	7d3b      	ldrb	r3, [r7, #20]
 8000762:	f362 0382 	bfi	r3, r2, #2, #1
 8000766:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000768:	7d3b      	ldrb	r3, [r7, #20]
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800077a:	f003 0303 	and.w	r3, r3, #3
 800077e:	b2da      	uxtb	r2, r3
 8000780:	7d3b      	ldrb	r3, [r7, #20]
 8000782:	f362 03c4 	bfi	r3, r2, #3, #2
 8000786:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	7d3b      	ldrb	r3, [r7, #20]
 8000796:	f362 1345 	bfi	r3, r2, #5, #1
 800079a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d103      	bne.n	80007ac <MQTTSerialize_connect+0x118>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80007ac:	7d3b      	ldrb	r3, [r7, #20]
 80007ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d103      	bne.n	80007c4 <MQTTSerialize_connect+0x130>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80007c4:	7d3b      	ldrb	r3, [r7, #20]
 80007c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ca:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80007cc:	7d3a      	ldrb	r2, [r7, #20]
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f9b6 	bl	8000b46 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	8b1b      	ldrh	r3, [r3, #24]
 80007de:	461a      	mov	r2, r3
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4611      	mov	r1, r2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f9c2 	bl	8000b70 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f107 001c 	add.w	r0, r7, #28
 80007f2:	330c      	adds	r3, #12
 80007f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f6:	f000 fa03 	bl	8000c00 <writeMQTTString>
	if (options->willFlag)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7edb      	ldrb	r3, [r3, #27]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00d      	beq.n	800081e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f107 001c 	add.w	r0, r7, #28
 8000808:	3324      	adds	r3, #36	@ 0x24
 800080a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800080c:	f000 f9f8 	bl	8000c00 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f107 001c 	add.w	r0, r7, #28
 8000816:	3330      	adds	r3, #48	@ 0x30
 8000818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800081a:	f000 f9f1 	bl	8000c00 <writeMQTTString>
	}
	if (flags.bits.username)
 800081e:	7d3b      	ldrb	r3, [r7, #20]
 8000820:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f107 001c 	add.w	r0, r7, #28
 8000830:	3340      	adds	r3, #64	@ 0x40
 8000832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000834:	f000 f9e4 	bl	8000c00 <writeMQTTString>
	if (flags.bits.password)
 8000838:	7d3b      	ldrb	r3, [r7, #20]
 800083a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d006      	beq.n	8000852 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f107 001c 	add.w	r0, r7, #28
 800084a:	334c      	adds	r3, #76	@ 0x4c
 800084c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084e:	f000 f9d7 	bl	8000c00 <writeMQTTString>

	rc = ptr - buf;
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800085c:	4618      	mov	r0, r3
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	080055a8 	.word	0x080055a8
 8000868:	080055b0 	.word	0x080055b0

0800086c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800087e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000880:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f943 	bl	8000b1e <readChar>
 8000898:	4603      	mov	r3, r0
 800089a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800089c:	7f3b      	ldrb	r3, [r7, #28]
 800089e:	f023 030f 	bic.w	r3, r3, #15
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b30      	cmp	r3, #48	@ 0x30
 80008a6:	d14b      	bne.n	8000940 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 80008a8:	7f3b      	ldrb	r3, [r7, #28]
 80008aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80008b6:	7f3b      	ldrb	r3, [r7, #28]
 80008b8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80008c4:	7f3b      	ldrb	r3, [r7, #28]
 80008c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	f107 0214 	add.w	r2, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f8ee 	bl	8000abc <MQTTPacket_decodeBuf>
 80008e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80008e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	4413      	add	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	4413      	add	r3, r2
 80008f0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	6a3a      	ldr	r2, [r7, #32]
 80008f8:	4619      	mov	r1, r3
 80008fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008fc:	f000 f9ae 	bl	8000c5c <readMQTTLenString>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01e      	beq.n	8000944 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	6a3a      	ldr	r2, [r7, #32]
 800090a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800090c:	2b00      	cmp	r3, #0
 800090e:	db19      	blt.n	8000944 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dd08      	ble.n	800092a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f8e3 	bl	8000ae8 <readInt>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	6a3a      	ldr	r2, [r7, #32]
 800092e:	1ad2      	subs	r2, r2, r3
 8000930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000932:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000938:	601a      	str	r2, [r3, #0]
	rc = 1;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
 800093e:	e002      	b.n	8000946 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000944:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000948:	4618      	mov	r0, r3
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	425a      	negs	r2, r3
 8000962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000966:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800096a:	bf58      	it	pl
 800096c:	4253      	negpl	r3, r2
 800096e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da00      	bge.n	8000978 <MQTTPacket_encode+0x28>
 8000976:	337f      	adds	r3, #127	@ 0x7f
 8000978:	11db      	asrs	r3, r3, #7
 800097a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	dd03      	ble.n	800098a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000982:	7afb      	ldrb	r3, [r7, #11]
 8000984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000988:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	60fa      	str	r2, [r7, #12]
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	7afa      	ldrb	r2, [r7, #11]
 8000998:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dcde      	bgt.n	800095e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80009a0:	68fb      	ldr	r3, [r7, #12]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
	int len = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	3301      	adds	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	dd03      	ble.n	80009e0 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	60fb      	str	r3, [r7, #12]
			goto exit;
 80009de:	e01d      	b.n	8000a1c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80009e0:	f107 020b 	add.w	r2, r7, #11
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2101      	movs	r1, #1
 80009e8:	4610      	mov	r0, r2
 80009ea:	4798      	blx	r3
 80009ec:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d112      	bne.n	8000a1a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009fe:	6979      	ldr	r1, [r7, #20]
 8000a00:	fb01 f303 	mul.w	r3, r1, r3
 8000a04:	441a      	add	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	01db      	lsls	r3, r3, #7
 8000a0e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dbd6      	blt.n	80009c6 <MQTTPacket_decode+0x18>
exit:
 8000a18:	e000      	b.n	8000a1c <MQTTPacket_decode+0x6e>
			goto exit;
 8000a1a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8000a1c:	693b      	ldr	r3, [r7, #16]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a3a:	dc03      	bgt.n	8000a44 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e012      	b.n	8000a6a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a4a:	da03      	bge.n	8000a54 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3302      	adds	r3, #2
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	e00a      	b.n	8000a6a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <MQTTPacket_len+0x50>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	dc03      	bgt.n	8000a64 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3303      	adds	r3, #3
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	e002      	b.n	8000a6a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3304      	adds	r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	001ffffe 	.word	0x001ffffe

08000a7c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e00a      	b.n	8000aa2 <bufchar+0x26>
		*c = *bufptr++;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <bufchar+0x3c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	4909      	ldr	r1, [pc, #36]	@ (8000ab8 <bufchar+0x3c>)
 8000a94:	600a      	str	r2, [r1, #0]
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbf0      	blt.n	8000a8c <bufchar+0x10>
	return count;
 8000aaa:	683b      	ldr	r3, [r7, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	20000084 	.word	0x20000084

08000abc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000ac6:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <MQTTPacket_decodeBuf+0x24>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000acc:	6839      	ldr	r1, [r7, #0]
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MQTTPacket_decodeBuf+0x28>)
 8000ad0:	f7ff ff6d 	bl	80009ae <MQTTPacket_decode>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000084 	.word	0x20000084
 8000ae4:	08000a7d 	.word	0x08000a7d

08000ae8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	3201      	adds	r2, #1
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1c9a      	adds	r2, r3, #2
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	601a      	str	r2, [r3, #0]
	return len;
 8000b10:	68bb      	ldr	r3, [r7, #8]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
	return c;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	78fa      	ldrb	r2, [r7, #3]
 8000b58:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	da00      	bge.n	8000b82 <writeInt+0x12>
 8000b80:	33ff      	adds	r3, #255	@ 0xff
 8000b82:	121b      	asrs	r3, r3, #8
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	425a      	negs	r2, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	bf58      	it	pl
 8000ba2:	4253      	negpl	r3, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000bcc:	6838      	ldr	r0, [r7, #0]
 8000bce:	f7ff fb29 	bl	8000224 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000bd6:	68f9      	ldr	r1, [r7, #12]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffc9 	bl	8000b70 <writeInt>
	memcpy(*pptr, string, len);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	6839      	ldr	r1, [r7, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fd7f 	bl	80046ea <memcpy>
	*pptr += len;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	441a      	add	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	4638      	mov	r0, r7
 8000c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd12      	ble.n	8000c3a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4619      	mov	r1, r3
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ffa9 	bl	8000b70 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fd5f 	bl	80046ea <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	441a      	add	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000c38:	e00c      	b.n	8000c54 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff ffbc 	bl	8000bc2 <writeCString>
}
 8000c4a:	e003      	b.n	8000c54 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f7ff ff8e 	bl	8000b70 <writeInt>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	dd1a      	ble.n	8000cae <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff ff35 	bl	8000ae8 <readInt>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	6852      	ldr	r2, [r2, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d30c      	bcc.n	8000cae <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	6852      	ldr	r2, [r2, #4]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	601a      	str	r2, [r3, #0]
			rc = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8000cb4:	697b      	ldr	r3, [r7, #20]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff faa4 	bl	8000224 <strlen>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e001      	b.n	8000ce6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	617b      	str	r3, [r7, #20]
	return rc;
 8000ce6:	697b      	ldr	r3, [r7, #20]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000d02:	463b      	mov	r3, r7
 8000d04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d08:	f7ff ffd9 	bl	8000cbe <MQTTstrlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	1c9a      	adds	r2, r3, #2
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	4413      	add	r3, r2
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	4413      	add	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dd02      	ble.n	8000d26 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3302      	adds	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
	return len;
 8000d26:	697b      	ldr	r3, [r7, #20]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5a:	6838      	ldr	r0, [r7, #0]
 8000d5c:	f7ff ffc8 	bl	8000cf0 <MQTTSerialize_publishLength>
 8000d60:	61b8      	str	r0, [r7, #24]
 8000d62:	69b8      	ldr	r0, [r7, #24]
 8000d64:	f7ff fe60 	bl	8000a28 <MQTTPacket_len>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	da03      	bge.n	8000d78 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000d70:	f06f 0301 	mvn.w	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
		goto exit;
 8000d76:	e04c      	b.n	8000e12 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8000d78:	7c3b      	ldrb	r3, [r7, #16]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	f362 1307 	bfi	r3, r2, #4, #4
 8000d80:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	7c3b      	ldrb	r3, [r7, #16]
 8000d8c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000d90:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	7c3b      	ldrb	r3, [r7, #16]
 8000d9c:	f362 0342 	bfi	r3, r2, #1, #2
 8000da0:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8000da2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	7c3b      	ldrb	r3, [r7, #16]
 8000dae:	f362 0300 	bfi	r3, r2, #0, #1
 8000db2:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8000db4:	7c3a      	ldrb	r2, [r7, #16]
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fec2 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	69b9      	ldr	r1, [r7, #24]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fdc2 	bl	8000950 <MQTTPacket_encode>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8000dd4:	f107 0014 	add.w	r0, r7, #20
 8000dd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dde:	f7ff ff0f 	bl	8000c00 <writeMQTTString>

	if (qos > 0)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dd06      	ble.n	8000df6 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8000de8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff febd 	bl	8000b70 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000dfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fc74 	bl	80046ea <memcpy>
	ptr += payloadlen;
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e06:	4413      	add	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000e12:	69fb      	ldr	r3, [r7, #28]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8000e20:	4b50      	ldr	r3, [pc, #320]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	b291      	uxth	r1, r2
 8000e28:	4a4e      	ldr	r2, [pc, #312]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e2a:	8011      	strh	r1, [r2, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000e30:	7819      	ldrb	r1, [r3, #0]
 8000e32:	4b4e      	ldr	r3, [pc, #312]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e34:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 8000e36:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000e38:	7c9b      	ldrb	r3, [r3, #18]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d135      	bne.n	8000eaa <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 8000e3e:	494d      	ldr	r1, [pc, #308]	@ (8000f74 <Sim800_RxCallBack+0x158>)
 8000e40:	484a      	ldr	r0, [pc, #296]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e42:	f003 fbc8 	bl	80045d6 <strstr>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <Sim800_RxCallBack+0x40>
 8000e4c:	4b45      	ldr	r3, [pc, #276]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d103      	bne.n	8000e5c <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 8000e54:	4b43      	ldr	r3, [pc, #268]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	e026      	b.n	8000eaa <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 8000e5c:	4945      	ldr	r1, [pc, #276]	@ (8000f74 <Sim800_RxCallBack+0x158>)
 8000e5e:	4843      	ldr	r0, [pc, #268]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e60:	f003 fbb9 	bl	80045d6 <strstr>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d01f      	beq.n	8000eaa <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8000e6a:	4a43      	ldr	r2, [pc, #268]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8000e76:	461a      	mov	r2, r3
 8000e78:	f003 fc37 	bl	80046ea <memcpy>
            clearRxBuffer();
 8000e7c:	f000 f88e 	bl	8000f9c <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8000e80:	493e      	ldr	r1, [pc, #248]	@ (8000f7c <Sim800_RxCallBack+0x160>)
 8000e82:	483d      	ldr	r0, [pc, #244]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e84:	f003 fba7 	bl	80045d6 <strstr>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	749a      	strb	r2, [r3, #18]
 8000e94:	e009      	b.n	8000eaa <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8000e96:	493a      	ldr	r1, [pc, #232]	@ (8000f80 <Sim800_RxCallBack+0x164>)
 8000e98:	4837      	ldr	r0, [pc, #220]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e9a:	f003 fb9c 	bl	80045d6 <strstr>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 8000eaa:	4936      	ldr	r1, [pc, #216]	@ (8000f84 <Sim800_RxCallBack+0x168>)
 8000eac:	482f      	ldr	r0, [pc, #188]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000eae:	f003 fb92 	bl	80045d6 <strstr>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10d      	bne.n	8000ed4 <Sim800_RxCallBack+0xb8>
 8000eb8:	4933      	ldr	r1, [pc, #204]	@ (8000f88 <Sim800_RxCallBack+0x16c>)
 8000eba:	482c      	ldr	r0, [pc, #176]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000ebc:	f003 fb8b 	bl	80045d6 <strstr>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <Sim800_RxCallBack+0xb8>
 8000ec6:	4931      	ldr	r1, [pc, #196]	@ (8000f8c <Sim800_RxCallBack+0x170>)
 8000ec8:	4828      	ldr	r0, [pc, #160]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000eca:	f003 fb84 	bl	80045d6 <strstr>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000edc:	7c9b      	ldrb	r3, [r3, #18]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d106      	bne.n	8000ef0 <Sim800_RxCallBack+0xd4>
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b30      	cmp	r3, #48	@ 0x30
 8000ee8:	d102      	bne.n	8000ef0 <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 8000eea:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <Sim800_RxCallBack+0x174>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8000ef0:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <Sim800_RxCallBack+0x174>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d124      	bne.n	8000f42 <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	b291      	uxth	r1, r2
 8000f00:	4a24      	ldr	r2, [pc, #144]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f02:	8011      	strh	r1, [r2, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000f08:	7819      	ldrb	r1, [r3, #0]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f0c:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d90d      	bls.n	8000f32 <Sim800_RxCallBack+0x116>
 8000f16:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f1e:	7852      	ldrb	r2, [r2, #1]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	dd06      	ble.n	8000f32 <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 8000f24:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f26:	f000 fa95 	bl	8001454 <MQTT_Receive>
            clearRxBuffer();
 8000f2a:	f000 f837 	bl	8000f9c <clearRxBuffer>
            clearMqttBuffer();
 8000f2e:	f000 f847 	bl	8000fc0 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d901      	bls.n	8000f42 <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 8000f3e:	f000 f83f 	bl	8000fc0 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d903      	bls.n	8000f56 <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 8000f4e:	f000 f825 	bl	8000f9c <clearRxBuffer>
        clearMqttBuffer();
 8000f52:	f000 f835 	bl	8000fc0 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4903      	ldr	r1, [pc, #12]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000f5a:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <Sim800_RxCallBack+0x17c>)
 8000f5c:	f002 fa4d 	bl	80033fa <HAL_UART_Receive_IT>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000640 	.word	0x20000640
 8000f68:	20000088 	.word	0x20000088
 8000f6c:	2000008c 	.word	0x2000008c
 8000f70:	20000bfc 	.word	0x20000bfc
 8000f74:	080055b8 	.word	0x080055b8
 8000f78:	20000644 	.word	0x20000644
 8000f7c:	080055bc 	.word	0x080055bc
 8000f80:	080055cc 	.word	0x080055cc
 8000f84:	080055d8 	.word	0x080055d8
 8000f88:	080055e4 	.word	0x080055e4
 8000f8c:	080055ec 	.word	0x080055ec
 8000f90:	20000642 	.word	0x20000642
 8000f94:	20000bf8 	.word	0x20000bf8
 8000f98:	20000d08 	.word	0x20000d08

08000f9c <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <clearRxBuffer+0x1c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000fa6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000faa:	2100      	movs	r1, #0
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <clearRxBuffer+0x20>)
 8000fae:	f003 fb0a 	bl	80045c6 <memset>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000640 	.word	0x20000640
 8000fbc:	2000008c 	.word	0x2000008c

08000fc0 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <clearMqttBuffer+0x20>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <clearMqttBuffer+0x24>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000fd0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <clearMqttBuffer+0x28>)
 8000fd8:	f003 faf5 	bl	80045c6 <memset>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000642 	.word	0x20000642
 8000fe4:	20000bf8 	.word	0x20000bf8
 8000fe8:	20000644 	.word	0x20000644

08000fec <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff f912 	bl	8000224 <strlen>
 8001000:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8001002:	b29b      	uxth	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	68f9      	ldr	r1, [r7, #12]
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <SIM800_SendCommand+0x50>)
 800100a:	f002 f9c0 	bl	800338e <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 ffd7 	bl	8001fc4 <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	4809      	ldr	r0, [pc, #36]	@ (8001040 <SIM800_SendCommand+0x54>)
 800101a:	f003 fadc 	bl	80045d6 <strstr>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <SIM800_SendCommand+0x40>
    {
        clearRxBuffer();
 8001024:	f7ff ffba 	bl	8000f9c <clearRxBuffer>
        return 0;
 8001028:	2300      	movs	r3, #0
 800102a:	e002      	b.n	8001032 <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 800102c:	f7ff ffb6 	bl	8000f9c <clearRxBuffer>
    return 1;
 8001030:	2301      	movs	r3, #1
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000d08 	.word	0x20000d08
 8001040:	20000644 	.word	0x20000644

08001044 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	@ 0x30
 8001048:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 800104a:	4b3a      	ldr	r3, [pc, #232]	@ (8001134 <MQTT_Init+0xf0>)
 800104c:	2200      	movs	r2, #0
 800104e:	749a      	strb	r2, [r3, #18]
    int error = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    char str[32] = {0};
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	4932      	ldr	r1, [pc, #200]	@ (8001138 <MQTT_Init+0xf4>)
 8001070:	4832      	ldr	r0, [pc, #200]	@ (800113c <MQTT_Init+0xf8>)
 8001072:	f002 f9c2 	bl	80033fa <HAL_UART_Receive_IT>

    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 8001076:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800107a:	4931      	ldr	r1, [pc, #196]	@ (8001140 <MQTT_Init+0xfc>)
 800107c:	4831      	ldr	r0, [pc, #196]	@ (8001144 <MQTT_Init+0x100>)
 800107e:	f7ff ffb5 	bl	8000fec <SIM800_SendCommand>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 8001082:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001086:	492e      	ldr	r1, [pc, #184]	@ (8001140 <MQTT_Init+0xfc>)
 8001088:	482f      	ldr	r0, [pc, #188]	@ (8001148 <MQTT_Init+0x104>)
 800108a:	f7ff ffaf 	bl	8000fec <SIM800_SendCommand>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 800108e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001092:	492e      	ldr	r1, [pc, #184]	@ (800114c <MQTT_Init+0x108>)
 8001094:	482e      	ldr	r0, [pc, #184]	@ (8001150 <MQTT_Init+0x10c>)
 8001096:	f7ff ffa9 	bl	8000fec <SIM800_SendCommand>
 800109a:	4602      	mov	r2, r0
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	4413      	add	r3, r2
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 80010a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010a6:	4926      	ldr	r1, [pc, #152]	@ (8001140 <MQTT_Init+0xfc>)
 80010a8:	482a      	ldr	r0, [pc, #168]	@ (8001154 <MQTT_Init+0x110>)
 80010aa:	f7ff ff9f 	bl	8000fec <SIM800_SendCommand>
 80010ae:	4602      	mov	r2, r0
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	4413      	add	r3, r2
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 80010b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010ba:	4921      	ldr	r1, [pc, #132]	@ (8001140 <MQTT_Init+0xfc>)
 80010bc:	4826      	ldr	r0, [pc, #152]	@ (8001158 <MQTT_Init+0x114>)
 80010be:	f7ff ff95 	bl	8000fec <SIM800_SendCommand>
 80010c2:	4602      	mov	r2, r0
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	4413      	add	r3, r2
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24

    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MQTT_Init+0xf0>)
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <MQTT_Init+0xf0>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <MQTT_Init+0xf0>)
 80010d4:	6892      	ldr	r2, [r2, #8]
 80010d6:	1d38      	adds	r0, r7, #4
 80010d8:	9201      	str	r2, [sp, #4]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	460b      	mov	r3, r1
 80010de:	4a1f      	ldr	r2, [pc, #124]	@ (800115c <MQTT_Init+0x118>)
 80010e0:	2120      	movs	r1, #32
 80010e2:	f003 f9d9 	bl	8004498 <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010ec:	4914      	ldr	r1, [pc, #80]	@ (8001140 <MQTT_Init+0xfc>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff7c 	bl	8000fec <SIM800_SendCommand>
 80010f4:	4602      	mov	r2, r0
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	4413      	add	r3, r2
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24

    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 80010fc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001100:	490f      	ldr	r1, [pc, #60]	@ (8001140 <MQTT_Init+0xfc>)
 8001102:	4817      	ldr	r0, [pc, #92]	@ (8001160 <MQTT_Init+0x11c>)
 8001104:	f7ff ff72 	bl	8000fec <SIM800_SendCommand>
 8001108:	4602      	mov	r2, r0
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	4413      	add	r3, r2
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 8001110:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001114:	4913      	ldr	r1, [pc, #76]	@ (8001164 <MQTT_Init+0x120>)
 8001116:	4814      	ldr	r0, [pc, #80]	@ (8001168 <MQTT_Init+0x124>)
 8001118:	f7ff ff68 	bl	8000fec <SIM800_SendCommand>
    if (error == 0)
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	2b00      	cmp	r3, #0
 8001120:	d103      	bne.n	800112a <MQTT_Init+0xe6>
    {
        MQTT_Connect();
 8001122:	f000 f823 	bl	800116c <MQTT_Connect>
        return error;
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	e000      	b.n	800112c <MQTT_Init+0xe8>
    }
    else
    {
        return error;
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
}
 800112c:	4618      	mov	r0, r3
 800112e:	3728      	adds	r7, #40	@ 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000bfc 	.word	0x20000bfc
 8001138:	20000088 	.word	0x20000088
 800113c:	20000d08 	.word	0x20000d08
 8001140:	080055f4 	.word	0x080055f4
 8001144:	080055fc 	.word	0x080055fc
 8001148:	08005604 	.word	0x08005604
 800114c:	0800560c 	.word	0x0800560c
 8001150:	08005618 	.word	0x08005618
 8001154:	08005628 	.word	0x08005628
 8001158:	08005638 	.word	0x08005638
 800115c:	08005648 	.word	0x08005648
 8001160:	08005664 	.word	0x08005664
 8001164:	08005670 	.word	0x08005670
 8001168:	08005674 	.word	0x08005674

0800116c <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0d8      	sub	sp, #352	@ 0x160
 8001170:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8001172:	4b3f      	ldr	r3, [pc, #252]	@ (8001270 <MQTT_Connect+0x104>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    SIM800.mqttServer.connect = 0;
 800117a:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <MQTT_Connect+0x104>)
 800117c:	2200      	movs	r2, #0
 800117e:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001186:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800118a:	227c      	movs	r2, #124	@ 0x7c
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fa19 	bl	80045c6 <memset>
    unsigned char buf[128] = {0};
 8001194:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	3304      	adds	r3, #4
 80011a2:	227c      	movs	r2, #124	@ 0x7c
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 fa0d 	bl	80045c6 <memset>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 80011ac:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <MQTT_Connect+0x104>)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001270 <MQTT_Connect+0x104>)
 80011b2:	8a1b      	ldrh	r3, [r3, #16]
 80011b4:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80011b8:	492e      	ldr	r1, [pc, #184]	@ (8001274 <MQTT_Connect+0x108>)
 80011ba:	f003 f9a1 	bl	8004500 <siprintf>
    SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 80011be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011c2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80011c6:	492c      	ldr	r1, [pc, #176]	@ (8001278 <MQTT_Connect+0x10c>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff0f 	bl	8000fec <SIM800_SendCommand>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 80011ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011d2:	f000 fef7 	bl	8001fc4 <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1)
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <MQTT_Connect+0x104>)
 80011d8:	7c9b      	ldrb	r3, [r3, #18]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d142      	bne.n	8001264 <MQTT_Connect+0xf8>
    {
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 80011de:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80011e2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80011e6:	4a25      	ldr	r2, [pc, #148]	@ (800127c <MQTT_Connect+0x110>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	4611      	mov	r1, r2
 80011ec:	2358      	movs	r3, #88	@ 0x58
 80011ee:	461a      	mov	r2, r3
 80011f0:	f003 fa7b 	bl	80046ea <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <MQTT_Connect+0x104>)
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80011fc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MQTT_Connect+0x104>)
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800120a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800120e:	64da      	str	r2, [r3, #76]	@ 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 8001210:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <MQTT_Connect+0x104>)
 8001212:	69da      	ldr	r2, [r3, #28]
 8001214:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001218:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800121c:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 800121e:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <MQTT_Connect+0x104>)
 8001220:	8c1a      	ldrh	r2, [r3, #32]
 8001222:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001226:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800122a:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 800122c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001230:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001234:	2201      	movs	r2, #1
 8001236:	769a      	strb	r2, [r3, #26]
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8001238:	1d3a      	adds	r2, r7, #4
 800123a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800123e:	2180      	movs	r1, #128	@ 0x80
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fa27 	bl	8000694 <MQTTSerialize_connect>
 8001246:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800124a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800124e:	b29a      	uxth	r2, r3
 8001250:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001254:	4619      	mov	r1, r3
 8001256:	480a      	ldr	r0, [pc, #40]	@ (8001280 <MQTT_Connect+0x114>)
 8001258:	f002 f899 	bl	800338e <HAL_UART_Transmit_IT>
#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 800125c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001260:	f000 feb0 	bl	8001fc4 <HAL_Delay>
#endif
    }
}
 8001264:	bf00      	nop
 8001266:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000bfc 	.word	0x20000bfc
 8001274:	08005680 	.word	0x08005680
 8001278:	080055f4 	.word	0x080055f4
 800127c:	0800569c 	.word	0x0800569c
 8001280:	20000d08 	.word	0x20000d08

08001284 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b0cf      	sub	sp, #316	@ 0x13c
 8001288:	af08      	add	r7, sp, #32
 800128a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800128e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001292:	6018      	str	r0, [r3, #0]
 8001294:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001298:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800129c:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 800129e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	3304      	adds	r3, #4
 80012ac:	22fc      	movs	r2, #252	@ 0xfc
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 f988 	bl	80045c6 <memset>

    MQTTString topicString = MQTTString_initializer;
 80012b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 80012da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012e2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80012e6:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 80012ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012f2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	f7fe ff94 	bl	8000224 <strlen>
 80012fc:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 80012fe:	f107 0414 	add.w	r4, r7, #20
 8001302:	9306      	str	r3, [sp, #24]
 8001304:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001308:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	9305      	str	r3, [sp, #20]
 8001310:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001314:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8001318:	ab02      	add	r3, sp, #8
 800131a:	ca07      	ldmia	r2, {r0, r1, r2}
 800131c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001320:	2300      	movs	r3, #0
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	2300      	movs	r3, #0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff fcfd 	bl	8000d30 <MQTTSerialize_publish>
 8001336:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800133a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800133e:	b29a      	uxth	r2, r3
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MQTT_Pub+0xd8>)
 8001348:	f002 f821 	bl	800338e <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 800134c:	2064      	movs	r0, #100	@ 0x64
 800134e:	f000 fe39 	bl	8001fc4 <HAL_Delay>
#endif
}
 8001352:	bf00      	nop
 8001354:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	20000d08 	.word	0x20000d08

08001360 <MQTT_PubUint8>:
 * @param topic (uint8_t)  to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_PubUint8(char *topic, uint8_t payload)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
    char str[32] = {0};
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]
    sprintf(str, "%u", payload);
 8001384:	78fa      	ldrb	r2, [r7, #3]
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <MQTT_PubUint8+0x48>)
 800138c:	4618      	mov	r0, r3
 800138e:	f003 f8b7 	bl	8004500 <siprintf>
    MQTT_Pub(topic, str);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff73 	bl	8001284 <MQTT_Pub>
}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	080056f4 	.word	0x080056f4

080013ac <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0ca      	sub	sp, #296	@ 0x128
 80013b0:	af04      	add	r7, sp, #16
 80013b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013ba:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 80013bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	3304      	adds	r3, #4
 80013ca:	22fc      	movs	r2, #252	@ 0xfc
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 f8f9 	bl	80045c6 <memset>

    MQTTString topicString = MQTTString_initializer;
 80013d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 80013f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001400:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001404:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 800140c:	f107 0014 	add.w	r0, r7, #20
 8001410:	2300      	movs	r3, #0
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2301      	movs	r3, #1
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001426:	f000 f886 	bl	8001536 <MQTTSerialize_subscribe>
 800142a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800142e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001432:	b29a      	uxth	r2, r3
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MQTT_Sub+0xa4>)
 800143c:	f001 ffa7 	bl	800338e <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8001440:	2064      	movs	r0, #100	@ 0x64
 8001442:	f000 fdbf 	bl	8001fc4 <HAL_Delay>
#endif
}
 8001446:	bf00      	nop
 8001448:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000d08 	.word	0x20000d08

08001454 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	@ 0x30
 8001458:	af06      	add	r7, sp, #24
 800145a:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 800145c:	2240      	movs	r2, #64	@ 0x40
 800145e:	2100      	movs	r1, #0
 8001460:	4819      	ldr	r0, [pc, #100]	@ (80014c8 <MQTT_Receive+0x74>)
 8001462:	f003 f8b0 	bl	80045c6 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8001466:	2240      	movs	r2, #64	@ 0x40
 8001468:	2100      	movs	r1, #0
 800146a:	4818      	ldr	r0, [pc, #96]	@ (80014cc <MQTT_Receive+0x78>)
 800146c:	f003 f8ab 	bl	80045c6 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8001470:	2304      	movs	r3, #4
 8001472:	9304      	str	r3, [sp, #16]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	9303      	str	r3, [sp, #12]
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <MQTT_Receive+0x7c>)
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <MQTT_Receive+0x80>)
 800148a:	4a13      	ldr	r2, [pc, #76]	@ (80014d8 <MQTT_Receive+0x84>)
 800148c:	4913      	ldr	r1, [pc, #76]	@ (80014dc <MQTT_Receive+0x88>)
 800148e:	4814      	ldr	r0, [pc, #80]	@ (80014e0 <MQTT_Receive+0x8c>)
 8001490:	f7ff f9ec 	bl	800086c <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4619      	mov	r1, r3
 800149a:	480b      	ldr	r0, [pc, #44]	@ (80014c8 <MQTT_Receive+0x74>)
 800149c:	f003 f925 	bl	80046ea <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <MQTT_Receive+0x90>)
 80014a4:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <MQTT_Receive+0x90>)
 80014ac:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80014ae:	4619      	mov	r1, r3
 80014b0:	4806      	ldr	r0, [pc, #24]	@ (80014cc <MQTT_Receive+0x78>)
 80014b2:	f003 f91a 	bl	80046ea <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MQTT_Receive+0x90>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000c70 	.word	0x20000c70
 80014cc:	20000c2c 	.word	0x20000c2c
 80014d0:	20000c6c 	.word	0x20000c6c
 80014d4:	20000c2a 	.word	0x20000c2a
 80014d8:	20000c28 	.word	0x20000c28
 80014dc:	20000c24 	.word	0x20000c24
 80014e0:	20000c21 	.word	0x20000c21
 80014e4:	20000bfc 	.word	0x20000bfc

080014e8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80014f2:	2302      	movs	r3, #2
 80014f4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e013      	b.n	8001524 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	461a      	mov	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4413      	add	r3, r2
 800150c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001510:	f7ff fbd5 	bl	8000cbe <MQTTstrlen>
 8001514:	4603      	mov	r3, r0
 8001516:	3303      	adds	r3, #3
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	4413      	add	r3, r2
 800151c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3301      	adds	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbe7      	blt.n	80014fc <MQTTSerialize_subscribeLength+0x14>
	return len;
 800152c:	68bb      	ldr	r3, [r7, #8]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b08a      	sub	sp, #40	@ 0x28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	4611      	mov	r1, r2
 8001542:	461a      	mov	r2, r3
 8001544:	460b      	mov	r3, r1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	4613      	mov	r3, r2
 800154a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001560:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001562:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001564:	f7ff ffc0 	bl	80014e8 <MQTTSerialize_subscribeLength>
 8001568:	61f8      	str	r0, [r7, #28]
 800156a:	69f8      	ldr	r0, [r7, #28]
 800156c:	f7ff fa5c 	bl	8000a28 <MQTTPacket_len>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	4293      	cmp	r3, r2
 8001576:	da03      	bge.n	8001580 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001578:	f06f 0301 	mvn.w	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800157e:	e051      	b.n	8001624 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8001584:	7d3b      	ldrb	r3, [r7, #20]
 8001586:	2208      	movs	r2, #8
 8001588:	f362 1307 	bfi	r3, r2, #4, #4
 800158c:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	b2da      	uxtb	r2, r3
 8001596:	7d3b      	ldrb	r3, [r7, #20]
 8001598:	f362 03c3 	bfi	r3, r2, #3, #1
 800159c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800159e:	7d3b      	ldrb	r3, [r7, #20]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f362 0342 	bfi	r3, r2, #1, #2
 80015a6:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80015a8:	7d3a      	ldrb	r2, [r7, #20]
 80015aa:	f107 0318 	add.w	r3, r7, #24
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fac8 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	69f9      	ldr	r1, [r7, #28]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f9c8 	bl	8000950 <MQTTPacket_encode>
 80015c0:	4602      	mov	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4413      	add	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 80015c8:	88ba      	ldrh	r2, [r7, #4]
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff facd 	bl	8000b70 <writeInt>

	for (i = 0; i < count; ++i)
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
 80015da:	e01b      	b.n	8001614 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80015dc:	6a3a      	ldr	r2, [r7, #32]
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	461a      	mov	r2, r3
 80015e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ea:	4413      	add	r3, r2
 80015ec:	f107 0018 	add.w	r0, r7, #24
 80015f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f2:	f7ff fb05 	bl	8000c00 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015fc:	4413      	add	r3, r2
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa9c 	bl	8000b46 <writeChar>
	for (i = 0; i < count; ++i)
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	3301      	adds	r3, #1
 8001612:	623b      	str	r3, [r7, #32]
 8001614:	6a3a      	ldr	r2, [r7, #32]
 8001616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001618:	429a      	cmp	r2, r3
 800161a:	dbdf      	blt.n	80015dc <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001626:	4618      	mov	r0, r3
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b34      	ldr	r3, [pc, #208]	@ (800171c <MX_GPIO_Init+0xec>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a33      	ldr	r2, [pc, #204]	@ (800171c <MX_GPIO_Init+0xec>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b31      	ldr	r3, [pc, #196]	@ (800171c <MX_GPIO_Init+0xec>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <MX_GPIO_Init+0xec>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a2c      	ldr	r2, [pc, #176]	@ (800171c <MX_GPIO_Init+0xec>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <MX_GPIO_Init+0xec>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <MX_GPIO_Init+0xec>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a25      	ldr	r2, [pc, #148]	@ (800171c <MX_GPIO_Init+0xec>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b23      	ldr	r3, [pc, #140]	@ (800171c <MX_GPIO_Init+0xec>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2120      	movs	r1, #32
 800169e:	4820      	ldr	r0, [pc, #128]	@ (8001720 <MX_GPIO_Init+0xf0>)
 80016a0:	f000 ffec 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2101      	movs	r1, #1
 80016a8:	481e      	ldr	r0, [pc, #120]	@ (8001724 <MX_GPIO_Init+0xf4>)
 80016aa:	f000 ffe7 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BT_Pin */
  GPIO_InitStruct.Pin = USER_BT_Pin;
 80016ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BT_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	4818      	ldr	r0, [pc, #96]	@ (8001728 <MX_GPIO_Init+0xf8>)
 80016c6:	f000 fe45 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016ca:	2320      	movs	r3, #32
 80016cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	480f      	ldr	r0, [pc, #60]	@ (8001720 <MX_GPIO_Init+0xf0>)
 80016e2:	f000 fe37 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4619      	mov	r1, r3
 80016fc:	4809      	ldr	r0, [pc, #36]	@ (8001724 <MX_GPIO_Init+0xf4>)
 80016fe:	f000 fe29 	bl	8002354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2028      	movs	r0, #40	@ 0x28
 8001708:	f000 fd5b 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800170c:	2028      	movs	r0, #40	@ 0x28
 800170e:	f000 fd74 	bl	80021fa <HAL_NVIC_EnableIRQ>

}
 8001712:	bf00      	nop
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	40020800 	.word	0x40020800

0800172c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    if (huart == UART_SIM800)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_UART_RxCpltCallback+0x38>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10f      	bne.n	800175c <HAL_UART_RxCpltCallback+0x30>
    {
        Sim800_RxCallBack();
 800173c:	f7ff fb6e 	bl	8000e1c <Sim800_RxCallBack>
        if (SIM800.mqttServer.connect == 1 && rx_data == 0xD0) {
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_UART_RxCpltCallback+0x3c>)
 8001742:	7c9b      	ldrb	r3, [r3, #18]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d109      	bne.n	800175c <HAL_UART_RxCpltCallback+0x30>
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <HAL_UART_RxCpltCallback+0x40>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2bd0      	cmp	r3, #208	@ 0xd0
 800174e:	d105      	bne.n	800175c <HAL_UART_RxCpltCallback+0x30>
            printf("Received MQTT PINGRESP\n\r");
 8001750:	4807      	ldr	r0, [pc, #28]	@ (8001770 <HAL_UART_RxCpltCallback+0x44>)
 8001752:	f002 fe8f 	bl	8004474 <iprintf>
            mqtt_receive = 1;
 8001756:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <HAL_UART_RxCpltCallback+0x48>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000d08 	.word	0x20000d08
 8001768:	20000bfc 	.word	0x20000bfc
 800176c:	20000088 	.word	0x20000088
 8001770:	08005700 	.word	0x08005700
 8001774:	20000642 	.word	0x20000642

08001778 <millis>:

uint32_t millis() {
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
    // HAL_GetTick() returns milliseconds since startup
    return HAL_GetTick();
 800177c:	f000 fc16 	bl	8001fac <HAL_GetTick>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178e:	f000 fba7 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001792:	f000 f8c5 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001796:	f7ff ff4b 	bl	8001630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800179a:	f000 fa7d 	bl	8001c98 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800179e:	f000 faa5 	bl	8001cec <MX_USART3_UART_Init>
//  HAL_Delay(3000);
//  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
//  HAL_Delay(10000);


  SIM800.sim.apn = "internet";
 80017a2:	4b49      	ldr	r3, [pc, #292]	@ (80018c8 <main+0x140>)
 80017a4:	4a49      	ldr	r2, [pc, #292]	@ (80018cc <main+0x144>)
 80017a6:	601a      	str	r2, [r3, #0]
  SIM800.sim.apn_user = "";
 80017a8:	4b47      	ldr	r3, [pc, #284]	@ (80018c8 <main+0x140>)
 80017aa:	4a49      	ldr	r2, [pc, #292]	@ (80018d0 <main+0x148>)
 80017ac:	605a      	str	r2, [r3, #4]
  SIM800.sim.apn_pass = "";
 80017ae:	4b46      	ldr	r3, [pc, #280]	@ (80018c8 <main+0x140>)
 80017b0:	4a47      	ldr	r2, [pc, #284]	@ (80018d0 <main+0x148>)
 80017b2:	609a      	str	r2, [r3, #8]
  SIM800.mqttServer.host = "mqtt.onwords.in";
 80017b4:	4b44      	ldr	r3, [pc, #272]	@ (80018c8 <main+0x140>)
 80017b6:	4a47      	ldr	r2, [pc, #284]	@ (80018d4 <main+0x14c>)
 80017b8:	60da      	str	r2, [r3, #12]
  SIM800.mqttServer.port = 1883;
 80017ba:	4b43      	ldr	r3, [pc, #268]	@ (80018c8 <main+0x140>)
 80017bc:	f240 725b 	movw	r2, #1883	@ 0x75b
 80017c0:	821a      	strh	r2, [r3, #16]
  SIM800.mqttClient.username = "Nikhil";
 80017c2:	4b41      	ldr	r3, [pc, #260]	@ (80018c8 <main+0x140>)
 80017c4:	4a44      	ldr	r2, [pc, #272]	@ (80018d8 <main+0x150>)
 80017c6:	615a      	str	r2, [r3, #20]
  SIM800.mqttClient.pass = "Nikhil8182";
 80017c8:	4b3f      	ldr	r3, [pc, #252]	@ (80018c8 <main+0x140>)
 80017ca:	4a44      	ldr	r2, [pc, #272]	@ (80018dc <main+0x154>)
 80017cc:	619a      	str	r2, [r3, #24]
  SIM800.mqttClient.clientID = "TestSub";
 80017ce:	4b3e      	ldr	r3, [pc, #248]	@ (80018c8 <main+0x140>)
 80017d0:	4a43      	ldr	r2, [pc, #268]	@ (80018e0 <main+0x158>)
 80017d2:	61da      	str	r2, [r3, #28]
  SIM800.mqttClient.keepAliveInterval = 60;
 80017d4:	4b3c      	ldr	r3, [pc, #240]	@ (80018c8 <main+0x140>)
 80017d6:	223c      	movs	r2, #60	@ 0x3c
 80017d8:	841a      	strh	r2, [r3, #32]
  MQTT_Init();
 80017da:	f7ff fc33 	bl	8001044 <MQTT_Init>
  uint8_t sub = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
  uint8_t pub_uint8 = 1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	73bb      	strb	r3, [r7, #14]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (SIM800.mqttServer.connect == 0)
 80017e6:	4b38      	ldr	r3, [pc, #224]	@ (80018c8 <main+0x140>)
 80017e8:	7c9b      	ldrb	r3, [r3, #18]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d108      	bne.n	8001800 <main+0x78>
	  {
		   MQTT_Init();
 80017ee:	f7ff fc29 	bl	8001044 <MQTT_Init>
		   sub = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
		   lastKeepAliveTime = millis();
 80017f6:	f7ff ffbf 	bl	8001778 <millis>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4a39      	ldr	r2, [pc, #228]	@ (80018e4 <main+0x15c>)
 80017fe:	6013      	str	r3, [r2, #0]
	   }
	   if (SIM800.mqttServer.connect == 1)
 8001800:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <main+0x140>)
 8001802:	7c9b      	ldrb	r3, [r3, #18]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d1ee      	bne.n	80017e6 <main+0x5e>
	   {
		   if(sub == 0){
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d104      	bne.n	8001818 <main+0x90>
			   MQTT_Sub("STM32/subscribe");
 800180e:	4836      	ldr	r0, [pc, #216]	@ (80018e8 <main+0x160>)
 8001810:	f7ff fdcc 	bl	80013ac <MQTT_Sub>
			   sub = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
		   }
		   if(interrupt)
 8001818:	4b34      	ldr	r3, [pc, #208]	@ (80018ec <main+0x164>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <main+0xc0>
		   {
			   HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001822:	2120      	movs	r1, #32
 8001824:	4832      	ldr	r0, [pc, #200]	@ (80018f0 <main+0x168>)
 8001826:	f000 ff42 	bl	80026ae <HAL_GPIO_TogglePin>
			   MQTT_Pub("STM32/publish", "LED Toggled");
 800182a:	4932      	ldr	r1, [pc, #200]	@ (80018f4 <main+0x16c>)
 800182c:	4832      	ldr	r0, [pc, #200]	@ (80018f8 <main+0x170>)
 800182e:	f7ff fd29 	bl	8001284 <MQTT_Pub>
			   printf("data published\n\r");
 8001832:	4832      	ldr	r0, [pc, #200]	@ (80018fc <main+0x174>)
 8001834:	f002 fe1e 	bl	8004474 <iprintf>
			   interrupt = 0;
 8001838:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <main+0x164>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
			   lastKeepAliveTime = millis();
 800183e:	f7ff ff9b 	bl	8001778 <millis>
 8001842:	4603      	mov	r3, r0
 8001844:	4a27      	ldr	r2, [pc, #156]	@ (80018e4 <main+0x15c>)
 8001846:	6013      	str	r3, [r2, #0]
		   }
		   if(SIM800.mqttReceive.newEvent) {
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <main+0x140>)
 800184a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800184e:	2b00      	cmp	r3, #0
 8001850:	d021      	beq.n	8001896 <main+0x10e>
			   printf("data received\n\r");
 8001852:	482b      	ldr	r0, [pc, #172]	@ (8001900 <main+0x178>)
 8001854:	f002 fe0e 	bl	8004474 <iprintf>
			   unsigned char *topic = SIM800.mqttReceive.topic;
 8001858:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <main+0x17c>)
 800185a:	60bb      	str	r3, [r7, #8]
			   unsigned char *payload = SIM800.mqttReceive.payload;
 800185c:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <main+0x180>)
 800185e:	607b      	str	r3, [r7, #4]

			   // Print topic and payload
			   printf("Topic: %s\n\r", topic);
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	482a      	ldr	r0, [pc, #168]	@ (800190c <main+0x184>)
 8001864:	f002 fe06 	bl	8004474 <iprintf>
			   printf("Payload: %s\n\r", payload);
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4829      	ldr	r0, [pc, #164]	@ (8001910 <main+0x188>)
 800186c:	f002 fe02 	bl	8004474 <iprintf>
			   if(strcmp((char *)payload, "LED") == 0)
 8001870:	4928      	ldr	r1, [pc, #160]	@ (8001914 <main+0x18c>)
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fccc 	bl	8000210 <strcmp>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d107      	bne.n	800188e <main+0x106>
			   {
				   HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800187e:	2120      	movs	r1, #32
 8001880:	481b      	ldr	r0, [pc, #108]	@ (80018f0 <main+0x168>)
 8001882:	f000 ff14 	bl	80026ae <HAL_GPIO_TogglePin>
				   MQTT_Pub("STM32/publish", "LED Toggled");
 8001886:	491b      	ldr	r1, [pc, #108]	@ (80018f4 <main+0x16c>)
 8001888:	481b      	ldr	r0, [pc, #108]	@ (80018f8 <main+0x170>)
 800188a:	f7ff fcfb 	bl	8001284 <MQTT_Pub>

			   }
//			   unsigned char *topic = SIM800.mqttReceive.topic;
//			   int payload = atoi(SIM800.mqttReceive.payload);
			  /// printf("%s", payload);
			   SIM800.mqttReceive.newEvent = 0;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <main+0x140>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		   }
		   if ((millis() - lastKeepAliveTime) >= (KEEP_ALIVE_INTERVAL * 100)) {
 8001896:	f7ff ff6f 	bl	8001778 <millis>
 800189a:	4602      	mov	r2, r0
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <main+0x15c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 726f 	movw	r2, #5999	@ 0x176f
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d99d      	bls.n	80017e6 <main+0x5e>
			   MQTT_PubUint8("STM32/pingreq", pub_uint8);
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	4619      	mov	r1, r3
 80018ae:	481a      	ldr	r0, [pc, #104]	@ (8001918 <main+0x190>)
 80018b0:	f7ff fd56 	bl	8001360 <MQTT_PubUint8>
			   printf("Sending MQTT PINGREQ\n\r");
 80018b4:	4819      	ldr	r0, [pc, #100]	@ (800191c <main+0x194>)
 80018b6:	f002 fddd 	bl	8004474 <iprintf>
			   lastKeepAliveTime = millis();
 80018ba:	f7ff ff5d 	bl	8001778 <millis>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a08      	ldr	r2, [pc, #32]	@ (80018e4 <main+0x15c>)
 80018c2:	6013      	str	r3, [r2, #0]
	  if (SIM800.mqttServer.connect == 0)
 80018c4:	e78f      	b.n	80017e6 <main+0x5e>
 80018c6:	bf00      	nop
 80018c8:	20000bfc 	.word	0x20000bfc
 80018cc:	0800571c 	.word	0x0800571c
 80018d0:	08005728 	.word	0x08005728
 80018d4:	0800572c 	.word	0x0800572c
 80018d8:	0800573c 	.word	0x0800573c
 80018dc:	08005744 	.word	0x08005744
 80018e0:	08005750 	.word	0x08005750
 80018e4:	20000cb8 	.word	0x20000cb8
 80018e8:	08005758 	.word	0x08005758
 80018ec:	20000cb4 	.word	0x20000cb4
 80018f0:	40020000 	.word	0x40020000
 80018f4:	08005768 	.word	0x08005768
 80018f8:	08005774 	.word	0x08005774
 80018fc:	08005784 	.word	0x08005784
 8001900:	08005798 	.word	0x08005798
 8001904:	20000c70 	.word	0x20000c70
 8001908:	20000c2c 	.word	0x20000c2c
 800190c:	080057a8 	.word	0x080057a8
 8001910:	080057b4 	.word	0x080057b4
 8001914:	080057c4 	.word	0x080057c4
 8001918:	080057c8 	.word	0x080057c8
 800191c:	080057d8 	.word	0x080057d8

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	@ 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	2234      	movs	r2, #52	@ 0x34
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fe49 	bl	80045c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <SystemClock_Config+0xd0>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	4a28      	ldr	r2, [pc, #160]	@ (80019f0 <SystemClock_Config+0xd0>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001952:	6413      	str	r3, [r2, #64]	@ 0x40
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <SystemClock_Config+0xd0>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001960:	2300      	movs	r3, #0
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4b23      	ldr	r3, [pc, #140]	@ (80019f4 <SystemClock_Config+0xd4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800196c:	4a21      	ldr	r2, [pc, #132]	@ (80019f4 <SystemClock_Config+0xd4>)
 800196e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <SystemClock_Config+0xd4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001980:	2302      	movs	r3, #2
 8001982:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001984:	2301      	movs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001988:	2310      	movs	r3, #16
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198c:	2302      	movs	r3, #2
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001994:	2308      	movs	r3, #8
 8001996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001998:	2348      	movs	r3, #72	@ 0x48
 800199a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800199c:	2302      	movs	r3, #2
 800199e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019a4:	2302      	movs	r3, #2
 80019a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 f975 	bl	8002c9c <HAL_RCC_OscConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019b8:	f000 f848 	bl	8001a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019bc:	230f      	movs	r3, #15
 80019be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c0:	2302      	movs	r3, #2
 80019c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	2102      	movs	r1, #2
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fe9b 	bl	8002714 <HAL_RCC_ClockConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80019e4:	f000 f832 	bl	8001a4c <Error_Handler>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3750      	adds	r7, #80	@ 0x50
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <__io_putchar>:
/* USER CODE BEGIN 4 */

#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001a00:	1d39      	adds	r1, r7, #4
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	2201      	movs	r2, #1
 8001a08:	4803      	ldr	r0, [pc, #12]	@ (8001a18 <__io_putchar+0x20>)
 8001a0a:	f001 fc35 	bl	8003278 <HAL_UART_Transmit>
	return ch;
 8001a0e:	687b      	ldr	r3, [r7, #4]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000cc0 	.word	0x20000cc0

08001a1c <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BT_Pin)
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a2c:	d105      	bne.n	8001a3a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		interrupt = 1;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_GPIO_EXTI_Callback+0x28>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
		printf("interrupt triggered\n\r");
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001a36:	f002 fd1d 	bl	8004474 <iprintf>
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000cb4 	.word	0x20000cb4
 8001a48:	080057f0 	.word	0x080057f0

08001a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
}
 8001a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <Error_Handler+0x8>

08001a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <NMI_Handler+0x4>

08001ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <MemManage_Handler+0x4>

08001ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <UsageFault_Handler+0x4>

08001ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afe:	f000 fa41 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <USART3_IRQHandler+0x10>)
 8001b0e:	f001 fc99 	bl	8003444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000d08 	.word	0x20000d08

08001b1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BT_Pin);
 8001b20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b24:	f000 fdde 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e00a      	b.n	8001b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b3e:	f3af 8000 	nop.w
 8001b42:	4601      	mov	r1, r0
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	b2ca      	uxtb	r2, r1
 8001b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbf0      	blt.n	8001b3e <_read+0x12>
  }

  return len;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e009      	b.n	8001b8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	60ba      	str	r2, [r7, #8]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff39 	bl	80019f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf1      	blt.n	8001b78 <_write+0x12>
  }
  return len;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_close>:

int _close(int file)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_isatty>:

int _isatty(int file)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f002 fd2a 	bl	8004690 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20020000 	.word	0x20020000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	20000cbc 	.word	0x20000cbc
 8001c70:	20000ea0 	.word	0x20000ea0

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <MX_USART2_UART_Init+0x50>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	f001 fa82 	bl	80031d8 <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cda:	f7ff feb7 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000cc0 	.word	0x20000cc0
 8001ce8:	40004400 	.word	0x40004400

08001cec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <MX_USART3_UART_Init+0x4c>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <MX_USART3_UART_Init+0x50>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <MX_USART3_UART_Init+0x4c>)
 8001cf8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <MX_USART3_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <MX_USART3_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <MX_USART3_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <MX_USART3_UART_Init+0x4c>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <MX_USART3_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <MX_USART3_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <MX_USART3_UART_Init+0x4c>)
 8001d24:	f001 fa58 	bl	80031d8 <HAL_UART_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d2e:	f7ff fe8d 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000d08 	.word	0x20000d08
 8001d3c:	40004800 	.word	0x40004800

08001d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	@ 0x30
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a45      	ldr	r2, [pc, #276]	@ (8001e74 <HAL_UART_MspInit+0x134>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d12c      	bne.n	8001dbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	4b44      	ldr	r3, [pc, #272]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a43      	ldr	r2, [pc, #268]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b41      	ldr	r3, [pc, #260]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	4b3d      	ldr	r3, [pc, #244]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a3c      	ldr	r2, [pc, #240]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001daa:	2307      	movs	r3, #7
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	4831      	ldr	r0, [pc, #196]	@ (8001e7c <HAL_UART_MspInit+0x13c>)
 8001db6:	f000 facd 	bl	8002354 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dba:	e057      	b.n	8001e6c <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001e80 <HAL_UART_MspInit+0x140>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d152      	bne.n	8001e6c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b2b      	ldr	r3, [pc, #172]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a2a      	ldr	r2, [pc, #168]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a23      	ldr	r2, [pc, #140]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e78 <HAL_UART_MspInit+0x138>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	4813      	ldr	r0, [pc, #76]	@ (8001e84 <HAL_UART_MspInit+0x144>)
 8001e36:	f000 fa8d 	bl	8002354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <HAL_UART_MspInit+0x148>)
 8001e58:	f000 fa7c 	bl	8002354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2027      	movs	r0, #39	@ 0x27
 8001e62:	f000 f9ae 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e66:	2027      	movs	r0, #39	@ 0x27
 8001e68:	f000 f9c7 	bl	80021fa <HAL_NVIC_EnableIRQ>
}
 8001e6c:	bf00      	nop
 8001e6e:	3730      	adds	r7, #48	@ 0x30
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40004400 	.word	0x40004400
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40004800 	.word	0x40004800
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020400 	.word	0x40020400

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e90:	f7ff fef0 	bl	8001c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f002 fbef 	bl	800469c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff fc63 	bl	8001788 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ed0:	08005864 	.word	0x08005864
  ldr r2, =_sbss
 8001ed4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ed8:	20000ea0 	.word	0x20000ea0

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>
	...

08001ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <HAL_Init+0x40>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_Init+0x40>)
 8001ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	@ (8001f20 <HAL_Init+0x40>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 f94f 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f000 f808 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7ff fda0 	bl	8001a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_InitTick+0x54>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_InitTick+0x58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f967 	bl	8002216 <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f000 f92f 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <HAL_InitTick+0x5c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000008 	.word	0x20000008
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	20000d50 	.word	0x20000d50

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000d50 	.word	0x20000d50

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff ffee 	bl	8001fac <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffde 	bl	8001fac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000008 	.word	0x20000008

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	@ (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	@ (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	@ (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	@ (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	@ 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff29 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff3e 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff8e 	bl	8002100 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5d 	bl	80020ac <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff31 	bl	8002070 <__NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffa2 	bl	8002168 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff feb6 	bl	8001fac <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d008      	beq.n	8002260 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2280      	movs	r2, #128	@ 0x80
 8002252:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e052      	b.n	8002306 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0216 	bic.w	r2, r2, #22
 800226e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800227e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	2b00      	cmp	r3, #0
 8002286:	d103      	bne.n	8002290 <HAL_DMA_Abort+0x62>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0208 	bic.w	r2, r2, #8
 800229e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b0:	e013      	b.n	80022da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b2:	f7ff fe7b 	bl	8001fac <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d90c      	bls.n	80022da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2203      	movs	r2, #3
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e015      	b.n	8002306 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e4      	bne.n	80022b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ec:	223f      	movs	r2, #63	@ 0x3f
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d004      	beq.n	800232c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2280      	movs	r2, #128	@ 0x80
 8002326:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e00c      	b.n	8002346 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2205      	movs	r2, #5
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e165      	b.n	800263c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	f040 8154 	bne.w	8002636 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d005      	beq.n	80023a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d130      	bne.n	8002408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b03      	cmp	r3, #3
 8002412:	d017      	beq.n	8002444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d123      	bne.n	8002498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	69b9      	ldr	r1, [r7, #24]
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80ae 	beq.w	8002636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b5d      	ldr	r3, [pc, #372]	@ (8002654 <HAL_GPIO_Init+0x300>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002654 <HAL_GPIO_Init+0x300>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002654 <HAL_GPIO_Init+0x300>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f6:	4a58      	ldr	r2, [pc, #352]	@ (8002658 <HAL_GPIO_Init+0x304>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4f      	ldr	r2, [pc, #316]	@ (800265c <HAL_GPIO_Init+0x308>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d025      	beq.n	800256e <HAL_GPIO_Init+0x21a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4e      	ldr	r2, [pc, #312]	@ (8002660 <HAL_GPIO_Init+0x30c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <HAL_GPIO_Init+0x216>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4d      	ldr	r2, [pc, #308]	@ (8002664 <HAL_GPIO_Init+0x310>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x212>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4c      	ldr	r2, [pc, #304]	@ (8002668 <HAL_GPIO_Init+0x314>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4b      	ldr	r2, [pc, #300]	@ (800266c <HAL_GPIO_Init+0x318>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x20a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4a      	ldr	r2, [pc, #296]	@ (8002670 <HAL_GPIO_Init+0x31c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x206>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a49      	ldr	r2, [pc, #292]	@ (8002674 <HAL_GPIO_Init+0x320>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x202>
 8002552:	2306      	movs	r3, #6
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 8002556:	2307      	movs	r3, #7
 8002558:	e00a      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800255a:	2305      	movs	r3, #5
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800255e:	2304      	movs	r3, #4
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800256e:	2300      	movs	r3, #0
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002580:	4935      	ldr	r1, [pc, #212]	@ (8002658 <HAL_GPIO_Init+0x304>)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b3a      	ldr	r3, [pc, #232]	@ (8002678 <HAL_GPIO_Init+0x324>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b2:	4a31      	ldr	r2, [pc, #196]	@ (8002678 <HAL_GPIO_Init+0x324>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002678 <HAL_GPIO_Init+0x324>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025dc:	4a26      	ldr	r2, [pc, #152]	@ (8002678 <HAL_GPIO_Init+0x324>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e2:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <HAL_GPIO_Init+0x324>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002606:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <HAL_GPIO_Init+0x324>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260c:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <HAL_GPIO_Init+0x324>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002630:	4a11      	ldr	r2, [pc, #68]	@ (8002678 <HAL_GPIO_Init+0x324>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	f67f ae96 	bls.w	8002370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3724      	adds	r7, #36	@ 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40013800 	.word	0x40013800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400
 8002664:	40020800 	.word	0x40020800
 8002668:	40020c00 	.word	0x40020c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40021400 	.word	0x40021400
 8002674:	40021800 	.word	0x40021800
 8002678:	40013c00 	.word	0x40013c00

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002698:	e003      	b.n	80026a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269a:	887b      	ldrh	r3, [r7, #2]
 800269c:	041a      	lsls	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	619a      	str	r2, [r3, #24]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026c0:	887a      	ldrh	r2, [r7, #2]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	041a      	lsls	r2, r3, #16
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43d9      	mvns	r1, r3
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	400b      	ands	r3, r1
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026fa:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f98a 	bl	8001a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0cc      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b68      	ldr	r3, [pc, #416]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d90c      	bls.n	8002750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b65      	ldr	r3, [pc, #404]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b63      	ldr	r3, [pc, #396]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b59      	ldr	r3, [pc, #356]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a58      	ldr	r2, [pc, #352]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002780:	4b53      	ldr	r3, [pc, #332]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a52      	ldr	r2, [pc, #328]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800278a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b50      	ldr	r3, [pc, #320]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	494d      	ldr	r1, [pc, #308]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d044      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d119      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3b      	ldr	r3, [pc, #236]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e067      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4934      	ldr	r1, [pc, #208]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7ff fbd2 	bl	8001fac <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7ff fbce 	bl	8001fac <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e04f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d20c      	bcs.n	800285c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e032      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4916      	ldr	r1, [pc, #88]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289a:	f000 f855 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490a      	ldr	r1, [pc, #40]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028b6:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fb32 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023c00 	.word	0x40023c00
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08005808 	.word	0x08005808
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000004 	.word	0x20000004

080028e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000000 	.word	0x20000000

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028fc:	f7ff fff0 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0a9b      	lsrs	r3, r3, #10
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	@ (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	08005818 	.word	0x08005818

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002924:	f7ff ffdc 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0b5b      	lsrs	r3, r3, #13
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	@ (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	08005818 	.word	0x08005818

08002948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800294c:	b0a6      	sub	sp, #152	@ 0x98
 800294e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296e:	4bc8      	ldr	r3, [pc, #800]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b0c      	cmp	r3, #12
 8002978:	f200 817e 	bhi.w	8002c78 <HAL_RCC_GetSysClockFreq+0x330>
 800297c:	a201      	add	r2, pc, #4	@ (adr r2, 8002984 <HAL_RCC_GetSysClockFreq+0x3c>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	080029b9 	.word	0x080029b9
 8002988:	08002c79 	.word	0x08002c79
 800298c:	08002c79 	.word	0x08002c79
 8002990:	08002c79 	.word	0x08002c79
 8002994:	080029c1 	.word	0x080029c1
 8002998:	08002c79 	.word	0x08002c79
 800299c:	08002c79 	.word	0x08002c79
 80029a0:	08002c79 	.word	0x08002c79
 80029a4:	080029c9 	.word	0x080029c9
 80029a8:	08002c79 	.word	0x08002c79
 80029ac:	08002c79 	.word	0x08002c79
 80029b0:	08002c79 	.word	0x08002c79
 80029b4:	08002b33 	.word	0x08002b33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4bb6      	ldr	r3, [pc, #728]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x34c>)
 80029ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029be:	e15f      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x350>)
 80029c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029c6:	e15b      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c8:	4bb1      	ldr	r3, [pc, #708]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d4:	4bae      	ldr	r3, [pc, #696]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d031      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e0:	4bab      	ldr	r3, [pc, #684]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	2200      	movs	r2, #0
 80029e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80029f4:	2300      	movs	r3, #0
 80029f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80029f8:	4ba7      	ldr	r3, [pc, #668]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x350>)
 80029fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80029fe:	462a      	mov	r2, r5
 8002a00:	fb03 f202 	mul.w	r2, r3, r2
 8002a04:	2300      	movs	r3, #0
 8002a06:	4621      	mov	r1, r4
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4aa2      	ldr	r2, [pc, #648]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a10:	4621      	mov	r1, r4
 8002a12:	fba1 1202 	umull	r1, r2, r1, r2
 8002a16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a18:	460a      	mov	r2, r1
 8002a1a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002a1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002a1e:	4413      	add	r3, r2
 8002a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a26:	2200      	movs	r2, #0
 8002a28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a2a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a30:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002a34:	f7fd fc54 	bl	80002e0 <__aeabi_uldivmod>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a42:	e064      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a44:	4b92      	ldr	r3, [pc, #584]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a4e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a58:	2300      	movs	r3, #0
 8002a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002a60:	4622      	mov	r2, r4
 8002a62:	462b      	mov	r3, r5
 8002a64:	f04f 0000 	mov.w	r0, #0
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	0159      	lsls	r1, r3, #5
 8002a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a72:	0150      	lsls	r0, r2, #5
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4621      	mov	r1, r4
 8002a7a:	1a51      	subs	r1, r2, r1
 8002a7c:	6139      	str	r1, [r7, #16]
 8002a7e:	4629      	mov	r1, r5
 8002a80:	eb63 0301 	sbc.w	r3, r3, r1
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a92:	4659      	mov	r1, fp
 8002a94:	018b      	lsls	r3, r1, #6
 8002a96:	4651      	mov	r1, sl
 8002a98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a9c:	4651      	mov	r1, sl
 8002a9e:	018a      	lsls	r2, r1, #6
 8002aa0:	4651      	mov	r1, sl
 8002aa2:	ebb2 0801 	subs.w	r8, r2, r1
 8002aa6:	4659      	mov	r1, fp
 8002aa8:	eb63 0901 	sbc.w	r9, r3, r1
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002abc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ac0:	4690      	mov	r8, r2
 8002ac2:	4699      	mov	r9, r3
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	eb18 0303 	adds.w	r3, r8, r3
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	462b      	mov	r3, r5
 8002ace:	eb49 0303 	adc.w	r3, r9, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	028b      	lsls	r3, r1, #10
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aea:	4621      	mov	r1, r4
 8002aec:	028a      	lsls	r2, r1, #10
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	2200      	movs	r2, #0
 8002af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002afa:	647a      	str	r2, [r7, #68]	@ 0x44
 8002afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b00:	f7fd fbee 	bl	80002e0 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b0e:	4b60      	ldr	r3, [pc, #384]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002b20:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002b30:	e0a6      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b32:	4b57      	ldr	r3, [pc, #348]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3e:	4b54      	ldr	r3, [pc, #336]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d02a      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4a:	4b51      	ldr	r3, [pc, #324]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	099b      	lsrs	r3, r3, #6
 8002b50:	2200      	movs	r2, #0
 8002b52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b60:	fb03 f201 	mul.w	r2, r3, r1
 8002b64:	2300      	movs	r3, #0
 8002b66:	fb00 f303 	mul.w	r3, r0, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b6e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b72:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b74:	460a      	mov	r2, r1
 8002b76:	673a      	str	r2, [r7, #112]	@ 0x70
 8002b78:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b7a:	4413      	add	r3, r2
 8002b7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b82:	2200      	movs	r2, #0
 8002b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b86:	637a      	str	r2, [r7, #52]	@ 0x34
 8002b88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b8c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002b90:	f7fd fba6 	bl	80002e0 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4613      	mov	r3, r2
 8002b9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b9e:	e05b      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bbc:	4642      	mov	r2, r8
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	f04f 0000 	mov.w	r0, #0
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	0159      	lsls	r1, r3, #5
 8002bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bce:	0150      	lsls	r0, r2, #5
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bda:	4649      	mov	r1, r9
 8002bdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bf4:	ebb2 040a 	subs.w	r4, r2, sl
 8002bf8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	00eb      	lsls	r3, r5, #3
 8002c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c0a:	00e2      	lsls	r2, r4, #3
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	461d      	mov	r5, r3
 8002c10:	4643      	mov	r3, r8
 8002c12:	18e3      	adds	r3, r4, r3
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	464b      	mov	r3, r9
 8002c18:	eb45 0303 	adc.w	r3, r5, r3
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	028b      	lsls	r3, r1, #10
 8002c2e:	4621      	mov	r1, r4
 8002c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c34:	4621      	mov	r1, r4
 8002c36:	028a      	lsls	r2, r1, #10
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c40:	2200      	movs	r2, #0
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	61fa      	str	r2, [r7, #28]
 8002c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c4a:	f7fd fb49 	bl	80002e0 <__aeabi_uldivmod>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4613      	mov	r3, r2
 8002c54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c58:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0f1b      	lsrs	r3, r3, #28
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c76:	e003      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002c7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3798      	adds	r7, #152	@ 0x98
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	017d7840 	.word	0x017d7840

08002c9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e28d      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8083 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cbc:	4b94      	ldr	r3, [pc, #592]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d019      	beq.n	8002cfc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cc8:	4b91      	ldr	r3, [pc, #580]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cd4:	4b8e      	ldr	r3, [pc, #568]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ce0:	d00c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d112      	bne.n	8002d14 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cee:	4b88      	ldr	r3, [pc, #544]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cfa:	d10b      	bne.n	8002d14 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	4b84      	ldr	r3, [pc, #528]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d05b      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x124>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d157      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e25a      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCC_OscConfig+0x90>
 8002d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7b      	ldr	r2, [pc, #492]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e01d      	b.n	8002d68 <HAL_RCC_OscConfig+0xcc>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0xb4>
 8002d36:	4b76      	ldr	r3, [pc, #472]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a75      	ldr	r2, [pc, #468]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4b73      	ldr	r3, [pc, #460]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a72      	ldr	r2, [pc, #456]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0xcc>
 8002d50:	4b6f      	ldr	r3, [pc, #444]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a6e      	ldr	r2, [pc, #440]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6b      	ldr	r2, [pc, #428]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7ff f91c 	bl	8001fac <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d78:	f7ff f918 	bl	8001fac <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	@ 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e21f      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b61      	ldr	r3, [pc, #388]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0xdc>
 8002d96:	e014      	b.n	8002dc2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7ff f908 	bl	8001fac <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7ff f904 	bl	8001fac <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	@ 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e20b      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db2:	4b57      	ldr	r3, [pc, #348]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x104>
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d06f      	beq.n	8002eae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dce:	4b50      	ldr	r3, [pc, #320]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d017      	beq.n	8002e0a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dda:	4b4d      	ldr	r3, [pc, #308]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
        || \
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d105      	bne.n	8002df2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002de6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df2:	4b47      	ldr	r3, [pc, #284]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d11c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b44      	ldr	r3, [pc, #272]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	4b41      	ldr	r3, [pc, #260]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_RCC_OscConfig+0x186>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1d3      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4937      	ldr	r1, [pc, #220]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	e03a      	b.n	8002eae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e40:	4b34      	ldr	r3, [pc, #208]	@ (8002f14 <HAL_RCC_OscConfig+0x278>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7ff f8b1 	bl	8001fac <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7ff f8ad 	bl	8001fac <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1b4      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b28      	ldr	r3, [pc, #160]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4925      	ldr	r1, [pc, #148]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	e015      	b.n	8002eae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e82:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <HAL_RCC_OscConfig+0x278>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7ff f890 	bl	8001fac <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7ff f88c 	bl	8001fac <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e193      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d036      	beq.n	8002f28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7ff f870 	bl	8001fac <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7ff f86c 	bl	8001fac <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e173      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x234>
 8002eee:	e01b      	b.n	8002f28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef0:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RCC_OscConfig+0x27c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7ff f859 	bl	8001fac <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	e00e      	b.n	8002f1c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efe:	f7ff f855 	bl	8001fac <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d907      	bls.n	8002f1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e15c      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	42470000 	.word	0x42470000
 8002f18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	4b8a      	ldr	r3, [pc, #552]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ea      	bne.n	8002efe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8097 	beq.w	8003064 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3a:	4b83      	ldr	r3, [pc, #524]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f56:	4b7c      	ldr	r3, [pc, #496]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b79      	ldr	r3, [pc, #484]	@ (800314c <HAL_RCC_OscConfig+0x4b0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f72:	4b76      	ldr	r3, [pc, #472]	@ (800314c <HAL_RCC_OscConfig+0x4b0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a75      	ldr	r2, [pc, #468]	@ (800314c <HAL_RCC_OscConfig+0x4b0>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7ff f815 	bl	8001fac <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7ff f811 	bl	8001fac <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e118      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	4b6c      	ldr	r3, [pc, #432]	@ (800314c <HAL_RCC_OscConfig+0x4b0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x31e>
 8002fac:	4b66      	ldr	r3, [pc, #408]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb0:	4a65      	ldr	r2, [pc, #404]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb8:	e01c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x358>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x340>
 8002fc2:	4b61      	ldr	r3, [pc, #388]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	4a60      	ldr	r2, [pc, #384]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fc8:	f043 0304 	orr.w	r3, r3, #4
 8002fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fce:	4b5e      	ldr	r3, [pc, #376]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	4a5d      	ldr	r2, [pc, #372]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x358>
 8002fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe0:	4a59      	ldr	r2, [pc, #356]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe8:	4b57      	ldr	r3, [pc, #348]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fec:	4a56      	ldr	r2, [pc, #344]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8002fee:	f023 0304 	bic.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fe ffd6 	bl	8001fac <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe ffd2 	bl	8001fac <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0d7      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	4b4b      	ldr	r3, [pc, #300]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ee      	beq.n	8003004 <HAL_RCC_OscConfig+0x368>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fe ffc0 	bl	8001fac <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe ffbc 	bl	8001fac <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0c1      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003046:	4b40      	ldr	r3, [pc, #256]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ee      	bne.n	8003030 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d105      	bne.n	8003064 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003058:	4b3b      	ldr	r3, [pc, #236]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	4a3a      	ldr	r2, [pc, #232]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 800305e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003062:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80ad 	beq.w	80031c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800306e:	4b36      	ldr	r3, [pc, #216]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b08      	cmp	r3, #8
 8003078:	d060      	beq.n	800313c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d145      	bne.n	800310e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b33      	ldr	r3, [pc, #204]	@ (8003150 <HAL_RCC_OscConfig+0x4b4>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe ff90 	bl	8001fac <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe ff8c 	bl	8001fac <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e093      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	071b      	lsls	r3, r3, #28
 80030da:	491b      	ldr	r1, [pc, #108]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <HAL_RCC_OscConfig+0x4b4>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe ff61 	bl	8001fac <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe ff5d 	bl	8001fac <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e064      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003100:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x452>
 800310c:	e05c      	b.n	80031c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <HAL_RCC_OscConfig+0x4b4>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe ff4a 	bl	8001fac <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe ff46 	bl	8001fac <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e04d      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <HAL_RCC_OscConfig+0x4ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x480>
 800313a:	e045      	b.n	80031c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e040      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000
 8003150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003154:	4b1f      	ldr	r3, [pc, #124]	@ (80031d4 <HAL_RCC_OscConfig+0x538>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d030      	beq.n	80031c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d129      	bne.n	80031c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d122      	bne.n	80031c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800318a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800318c:	4293      	cmp	r3, r2
 800318e:	d119      	bne.n	80031c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	3b01      	subs	r3, #1
 800319e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d10f      	bne.n	80031c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800

080031d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e042      	b.n	8003270 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe fd9e 	bl	8001d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	@ 0x24
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800321a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fdf3 	bl	8003e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	@ 0x28
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b20      	cmp	r3, #32
 8003296:	d175      	bne.n	8003384 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_UART_Transmit+0x2c>
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e06e      	b.n	8003386 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2221      	movs	r2, #33	@ 0x21
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032b6:	f7fe fe79 	bl	8001fac <HAL_GetTick>
 80032ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d0:	d108      	bne.n	80032e4 <HAL_UART_Transmit+0x6c>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d104      	bne.n	80032e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	e003      	b.n	80032ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032ec:	e02e      	b.n	800334c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2180      	movs	r1, #128	@ 0x80
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fb55 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e03a      	b.n	8003386 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	3302      	adds	r3, #2
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	e007      	b.n	800333e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3301      	adds	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1cb      	bne.n	80032ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2200      	movs	r2, #0
 800335e:	2140      	movs	r1, #64	@ 0x40
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fb21 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e006      	b.n	8003386 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	4613      	mov	r3, r2
 800339a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d121      	bne.n	80033ec <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_UART_Transmit_IT+0x26>
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e01a      	b.n	80033ee <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	88fa      	ldrh	r2, [r7, #6]
 80033c2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2221      	movs	r2, #33	@ 0x21
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033e6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	4613      	mov	r3, r2
 8003406:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b20      	cmp	r3, #32
 8003412:	d112      	bne.n	800343a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_UART_Receive_IT+0x26>
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e00b      	b.n	800343c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	461a      	mov	r2, r3
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fb12 	bl	8003a5a <UART_Start_Receive_IT>
 8003436:	4603      	mov	r3, r0
 8003438:	e000      	b.n	800343c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
  }
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b0ba      	sub	sp, #232	@ 0xe8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800348a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_UART_IRQHandler+0x66>
 8003496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fbf2 	bl	8003c8c <UART_Receive_IT>
      return;
 80034a8:	e25b      	b.n	8003962 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80de 	beq.w	8003670 <HAL_UART_IRQHandler+0x22c>
 80034b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d106      	bne.n	80034ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80d1 	beq.w	8003670 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_UART_IRQHandler+0xae>
 80034da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_UART_IRQHandler+0xd2>
 80034fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	f043 0202 	orr.w	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_UART_IRQHandler+0xf6>
 8003522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d011      	beq.n	800356a <HAL_UART_IRQHandler+0x126>
 8003546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003562:	f043 0208 	orr.w	r2, r3, #8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 81f2 	beq.w	8003958 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_UART_IRQHandler+0x14e>
 8003580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fb7d 	bl	8003c8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359c:	2b40      	cmp	r3, #64	@ 0x40
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <HAL_UART_IRQHandler+0x17a>
 80035b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d04f      	beq.n	800365e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa85 	bl	8003ace <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ce:	2b40      	cmp	r3, #64	@ 0x40
 80035d0:	d141      	bne.n	8003656 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3314      	adds	r3, #20
 80035d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800360a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1d9      	bne.n	80035d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d013      	beq.n	800364e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362a:	4a7e      	ldr	r2, [pc, #504]	@ (8003824 <HAL_UART_IRQHandler+0x3e0>)
 800362c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe fe6b 	bl	800230e <HAL_DMA_Abort_IT>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d016      	beq.n	800366c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003648:	4610      	mov	r0, r2
 800364a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	e00e      	b.n	800366c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f994 	bl	800397c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e00a      	b.n	800366c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f990 	bl	800397c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	e006      	b.n	800366c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f98c 	bl	800397c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800366a:	e175      	b.n	8003958 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366c:	bf00      	nop
    return;
 800366e:	e173      	b.n	8003958 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	2b01      	cmp	r3, #1
 8003676:	f040 814f 	bne.w	8003918 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8148 	beq.w	8003918 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8141 	beq.w	8003918 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b6:	2b40      	cmp	r3, #64	@ 0x40
 80036b8:	f040 80b6 	bne.w	8003828 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8145 	beq.w	800395c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036da:	429a      	cmp	r2, r3
 80036dc:	f080 813e 	bcs.w	800395c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036f2:	f000 8088 	beq.w	8003806 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800370c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003722:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800372e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800373a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1d9      	bne.n	80036f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003752:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003766:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800376a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800376e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003778:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e1      	bne.n	8003742 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800378e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003794:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e3      	bne.n	800377e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037d6:	f023 0310 	bic.w	r3, r3, #16
 80037da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e3      	bne.n	80037c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fd14 	bl	800222e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003814:	b29b      	uxth	r3, r3
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	b29b      	uxth	r3, r3
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8b7 	bl	8003990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003822:	e09b      	b.n	800395c <HAL_UART_IRQHandler+0x518>
 8003824:	08003b95 	.word	0x08003b95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003830:	b29b      	uxth	r3, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 808e 	beq.w	8003960 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8089 	beq.w	8003960 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800385e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003864:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003872:	647a      	str	r2, [r7, #68]	@ 0x44
 8003874:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003878:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e3      	bne.n	800384e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3314      	adds	r3, #20
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	623b      	str	r3, [r7, #32]
   return(result);
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3314      	adds	r3, #20
 80038a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80038ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e3      	bne.n	8003886 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	60fb      	str	r3, [r7, #12]
   return(result);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0310 	bic.w	r3, r3, #16
 80038e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	330c      	adds	r3, #12
 80038ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038f0:	61fa      	str	r2, [r7, #28]
 80038f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	69b9      	ldr	r1, [r7, #24]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	617b      	str	r3, [r7, #20]
   return(result);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e3      	bne.n	80038cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800390a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f83d 	bl	8003990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003916:	e023      	b.n	8003960 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <HAL_UART_IRQHandler+0x4f4>
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f943 	bl	8003bbc <UART_Transmit_IT>
    return;
 8003936:	e014      	b.n	8003962 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <HAL_UART_IRQHandler+0x51e>
 8003944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f983 	bl	8003c5c <UART_EndTransmit_IT>
    return;
 8003956:	e004      	b.n	8003962 <HAL_UART_IRQHandler+0x51e>
    return;
 8003958:	bf00      	nop
 800395a:	e002      	b.n	8003962 <HAL_UART_IRQHandler+0x51e>
      return;
 800395c:	bf00      	nop
 800395e:	e000      	b.n	8003962 <HAL_UART_IRQHandler+0x51e>
      return;
 8003960:	bf00      	nop
  }
}
 8003962:	37e8      	adds	r7, #232	@ 0xe8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b8:	e03b      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d037      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c2:	f7fe faf3 	bl	8001fac <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e03a      	b.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d023      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b80      	cmp	r3, #128	@ 0x80
 80039ee:	d020      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b40      	cmp	r3, #64	@ 0x40
 80039f4:	d01d      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d116      	bne.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f857 	bl	8003ace <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2208      	movs	r2, #8
 8003a24:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00f      	b.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	bf0c      	ite	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	2300      	movne	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d0b4      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	4613      	mov	r3, r2
 8003a66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2222      	movs	r2, #34	@ 0x22
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a9e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0220 	orr.w	r2, r2, #32
 8003abe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b095      	sub	sp, #84	@ 0x54
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003af6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003afc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e5      	bne.n	8003ad6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3314      	adds	r3, #20
 8003b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3314      	adds	r3, #20
 8003b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e5      	bne.n	8003b0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d119      	bne.n	8003b7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f023 0310 	bic.w	r3, r3, #16
 8003b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b66:	61ba      	str	r2, [r7, #24]
 8003b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6979      	ldr	r1, [r7, #20]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	613b      	str	r3, [r7, #16]
   return(result);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e5      	bne.n	8003b46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b88:	bf00      	nop
 8003b8a:	3754      	adds	r7, #84	@ 0x54
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff fee4 	bl	800397c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b21      	cmp	r3, #33	@ 0x21
 8003bce:	d13e      	bne.n	8003c4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd8:	d114      	bne.n	8003c04 <UART_Transmit_IT+0x48>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d110      	bne.n	8003c04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]
 8003c02:	e008      	b.n	8003c16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	1c59      	adds	r1, r3, #1
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6211      	str	r1, [r2, #32]
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4619      	mov	r1, r3
 8003c24:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e000      	b.n	8003c50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
  }
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fe73 	bl	8003968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08c      	sub	sp, #48	@ 0x30
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b22      	cmp	r3, #34	@ 0x22
 8003c9e:	f040 80ae 	bne.w	8003dfe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003caa:	d117      	bne.n	8003cdc <UART_Receive_IT+0x50>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d113      	bne.n	8003cdc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cda:	e026      	b.n	8003d2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cee:	d007      	beq.n	8003d00 <UART_Receive_IT+0x74>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <UART_Receive_IT+0x82>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e008      	b.n	8003d20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4619      	mov	r1, r3
 8003d38:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d15d      	bne.n	8003dfa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0220 	bic.w	r2, r2, #32
 8003d4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d135      	bne.n	8003df0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f023 0310 	bic.w	r3, r3, #16
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003daa:	623a      	str	r2, [r7, #32]
 8003dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69f9      	ldr	r1, [r7, #28]
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d10a      	bne.n	8003de2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff fdd1 	bl	8003990 <HAL_UARTEx_RxEventCallback>
 8003dee:	e002      	b.n	8003df6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fd fc9b 	bl	800172c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e002      	b.n	8003e00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3730      	adds	r7, #48	@ 0x30
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e0c:	b0c0      	sub	sp, #256	@ 0x100
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e24:	68d9      	ldr	r1, [r3, #12]
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	ea40 0301 	orr.w	r3, r0, r1
 8003e30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e60:	f021 010c 	bic.w	r1, r1, #12
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e82:	6999      	ldr	r1, [r3, #24]
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	ea40 0301 	orr.w	r3, r0, r1
 8003e8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b8f      	ldr	r3, [pc, #572]	@ (80040d4 <UART_SetConfig+0x2cc>)
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d005      	beq.n	8003ea8 <UART_SetConfig+0xa0>
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b8d      	ldr	r3, [pc, #564]	@ (80040d8 <UART_SetConfig+0x2d0>)
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d104      	bne.n	8003eb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ea8:	f7fe fd3a 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8003eac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003eb0:	e003      	b.n	8003eba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eb2:	f7fe fd21 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 8003eb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ec4:	f040 810c 	bne.w	80040e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ed2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ed6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eda:	4622      	mov	r2, r4
 8003edc:	462b      	mov	r3, r5
 8003ede:	1891      	adds	r1, r2, r2
 8003ee0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ee2:	415b      	adcs	r3, r3
 8003ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ee6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eea:	4621      	mov	r1, r4
 8003eec:	eb12 0801 	adds.w	r8, r2, r1
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	eb43 0901 	adc.w	r9, r3, r1
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0a:	4690      	mov	r8, r2
 8003f0c:	4699      	mov	r9, r3
 8003f0e:	4623      	mov	r3, r4
 8003f10:	eb18 0303 	adds.w	r3, r8, r3
 8003f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f18:	462b      	mov	r3, r5
 8003f1a:	eb49 0303 	adc.w	r3, r9, r3
 8003f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f36:	460b      	mov	r3, r1
 8003f38:	18db      	adds	r3, r3, r3
 8003f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	eb42 0303 	adc.w	r3, r2, r3
 8003f42:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f4c:	f7fc f9c8 	bl	80002e0 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4b61      	ldr	r3, [pc, #388]	@ (80040dc <UART_SetConfig+0x2d4>)
 8003f56:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	011c      	lsls	r4, r3, #4
 8003f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	1891      	adds	r1, r2, r2
 8003f76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f78:	415b      	adcs	r3, r3
 8003f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f80:	4641      	mov	r1, r8
 8003f82:	eb12 0a01 	adds.w	sl, r2, r1
 8003f86:	4649      	mov	r1, r9
 8003f88:	eb43 0b01 	adc.w	fp, r3, r1
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa0:	4692      	mov	sl, r2
 8003fa2:	469b      	mov	fp, r3
 8003fa4:	4643      	mov	r3, r8
 8003fa6:	eb1a 0303 	adds.w	r3, sl, r3
 8003faa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fae:	464b      	mov	r3, r9
 8003fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	18db      	adds	r3, r3, r3
 8003fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	eb42 0303 	adc.w	r3, r2, r3
 8003fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fe2:	f7fc f97d 	bl	80002e0 <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <UART_SetConfig+0x2d4>)
 8003fee:	fba3 2301 	umull	r2, r3, r3, r1
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2264      	movs	r2, #100	@ 0x64
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	1acb      	subs	r3, r1, r3
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004002:	4b36      	ldr	r3, [pc, #216]	@ (80040dc <UART_SetConfig+0x2d4>)
 8004004:	fba3 2302 	umull	r2, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004010:	441c      	add	r4, r3
 8004012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004016:	2200      	movs	r2, #0
 8004018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800401c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004020:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	1891      	adds	r1, r2, r2
 800402a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800402c:	415b      	adcs	r3, r3
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004030:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004034:	4641      	mov	r1, r8
 8004036:	1851      	adds	r1, r2, r1
 8004038:	6339      	str	r1, [r7, #48]	@ 0x30
 800403a:	4649      	mov	r1, r9
 800403c:	414b      	adcs	r3, r1
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800404c:	4659      	mov	r1, fp
 800404e:	00cb      	lsls	r3, r1, #3
 8004050:	4651      	mov	r1, sl
 8004052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004056:	4651      	mov	r1, sl
 8004058:	00ca      	lsls	r2, r1, #3
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	4603      	mov	r3, r0
 8004060:	4642      	mov	r2, r8
 8004062:	189b      	adds	r3, r3, r2
 8004064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004068:	464b      	mov	r3, r9
 800406a:	460a      	mov	r2, r1
 800406c:	eb42 0303 	adc.w	r3, r2, r3
 8004070:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004080:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004084:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004088:	460b      	mov	r3, r1
 800408a:	18db      	adds	r3, r3, r3
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800408e:	4613      	mov	r3, r2
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004096:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800409a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800409e:	f7fc f91f 	bl	80002e0 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <UART_SetConfig+0x2d4>)
 80040a8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	2164      	movs	r1, #100	@ 0x64
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	3332      	adds	r3, #50	@ 0x32
 80040ba:	4a08      	ldr	r2, [pc, #32]	@ (80040dc <UART_SetConfig+0x2d4>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	f003 0207 	and.w	r2, r3, #7
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4422      	add	r2, r4
 80040ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040d0:	e106      	b.n	80042e0 <UART_SetConfig+0x4d8>
 80040d2:	bf00      	nop
 80040d4:	40011000 	.word	0x40011000
 80040d8:	40011400 	.word	0x40011400
 80040dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040f2:	4642      	mov	r2, r8
 80040f4:	464b      	mov	r3, r9
 80040f6:	1891      	adds	r1, r2, r2
 80040f8:	6239      	str	r1, [r7, #32]
 80040fa:	415b      	adcs	r3, r3
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004102:	4641      	mov	r1, r8
 8004104:	1854      	adds	r4, r2, r1
 8004106:	4649      	mov	r1, r9
 8004108:	eb43 0501 	adc.w	r5, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	00eb      	lsls	r3, r5, #3
 8004116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800411a:	00e2      	lsls	r2, r4, #3
 800411c:	4614      	mov	r4, r2
 800411e:	461d      	mov	r5, r3
 8004120:	4643      	mov	r3, r8
 8004122:	18e3      	adds	r3, r4, r3
 8004124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004128:	464b      	mov	r3, r9
 800412a:	eb45 0303 	adc.w	r3, r5, r3
 800412e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800413e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800414e:	4629      	mov	r1, r5
 8004150:	008b      	lsls	r3, r1, #2
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004158:	4621      	mov	r1, r4
 800415a:	008a      	lsls	r2, r1, #2
 800415c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004160:	f7fc f8be 	bl	80002e0 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4b60      	ldr	r3, [pc, #384]	@ (80042ec <UART_SetConfig+0x4e4>)
 800416a:	fba3 2302 	umull	r2, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	011c      	lsls	r4, r3, #4
 8004172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800417c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004180:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	1891      	adds	r1, r2, r2
 800418a:	61b9      	str	r1, [r7, #24]
 800418c:	415b      	adcs	r3, r3
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004194:	4641      	mov	r1, r8
 8004196:	1851      	adds	r1, r2, r1
 8004198:	6139      	str	r1, [r7, #16]
 800419a:	4649      	mov	r1, r9
 800419c:	414b      	adcs	r3, r1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ac:	4659      	mov	r1, fp
 80041ae:	00cb      	lsls	r3, r1, #3
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041b6:	4651      	mov	r1, sl
 80041b8:	00ca      	lsls	r2, r1, #3
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	4642      	mov	r2, r8
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041c8:	464b      	mov	r3, r9
 80041ca:	460a      	mov	r2, r1
 80041cc:	eb42 0303 	adc.w	r3, r2, r3
 80041d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041ec:	4649      	mov	r1, r9
 80041ee:	008b      	lsls	r3, r1, #2
 80041f0:	4641      	mov	r1, r8
 80041f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f6:	4641      	mov	r1, r8
 80041f8:	008a      	lsls	r2, r1, #2
 80041fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041fe:	f7fc f86f 	bl	80002e0 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4611      	mov	r1, r2
 8004208:	4b38      	ldr	r3, [pc, #224]	@ (80042ec <UART_SetConfig+0x4e4>)
 800420a:	fba3 2301 	umull	r2, r3, r3, r1
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2264      	movs	r2, #100	@ 0x64
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	1acb      	subs	r3, r1, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	@ 0x32
 800421c:	4a33      	ldr	r2, [pc, #204]	@ (80042ec <UART_SetConfig+0x4e4>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004228:	441c      	add	r4, r3
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	673b      	str	r3, [r7, #112]	@ 0x70
 8004232:	677a      	str	r2, [r7, #116]	@ 0x74
 8004234:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004238:	4642      	mov	r2, r8
 800423a:	464b      	mov	r3, r9
 800423c:	1891      	adds	r1, r2, r2
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	415b      	adcs	r3, r3
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004248:	4641      	mov	r1, r8
 800424a:	1851      	adds	r1, r2, r1
 800424c:	6039      	str	r1, [r7, #0]
 800424e:	4649      	mov	r1, r9
 8004250:	414b      	adcs	r3, r1
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004260:	4659      	mov	r1, fp
 8004262:	00cb      	lsls	r3, r1, #3
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426a:	4651      	mov	r1, sl
 800426c:	00ca      	lsls	r2, r1, #3
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	4603      	mov	r3, r0
 8004274:	4642      	mov	r2, r8
 8004276:	189b      	adds	r3, r3, r2
 8004278:	66bb      	str	r3, [r7, #104]	@ 0x68
 800427a:	464b      	mov	r3, r9
 800427c:	460a      	mov	r2, r1
 800427e:	eb42 0303 	adc.w	r3, r2, r3
 8004282:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	663b      	str	r3, [r7, #96]	@ 0x60
 800428e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800429c:	4649      	mov	r1, r9
 800429e:	008b      	lsls	r3, r1, #2
 80042a0:	4641      	mov	r1, r8
 80042a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a6:	4641      	mov	r1, r8
 80042a8:	008a      	lsls	r2, r1, #2
 80042aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042ae:	f7fc f817 	bl	80002e0 <__aeabi_uldivmod>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <UART_SetConfig+0x4e4>)
 80042b8:	fba3 1302 	umull	r1, r3, r3, r2
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	2164      	movs	r1, #100	@ 0x64
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	3332      	adds	r3, #50	@ 0x32
 80042ca:	4a08      	ldr	r2, [pc, #32]	@ (80042ec <UART_SetConfig+0x4e4>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4422      	add	r2, r4
 80042de:	609a      	str	r2, [r3, #8]
}
 80042e0:	bf00      	nop
 80042e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042e6:	46bd      	mov	sp, r7
 80042e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ec:	51eb851f 	.word	0x51eb851f

080042f0 <std>:
 80042f0:	2300      	movs	r3, #0
 80042f2:	b510      	push	{r4, lr}
 80042f4:	4604      	mov	r4, r0
 80042f6:	e9c0 3300 	strd	r3, r3, [r0]
 80042fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042fe:	6083      	str	r3, [r0, #8]
 8004300:	8181      	strh	r1, [r0, #12]
 8004302:	6643      	str	r3, [r0, #100]	@ 0x64
 8004304:	81c2      	strh	r2, [r0, #14]
 8004306:	6183      	str	r3, [r0, #24]
 8004308:	4619      	mov	r1, r3
 800430a:	2208      	movs	r2, #8
 800430c:	305c      	adds	r0, #92	@ 0x5c
 800430e:	f000 f95a 	bl	80045c6 <memset>
 8004312:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <std+0x58>)
 8004314:	6263      	str	r3, [r4, #36]	@ 0x24
 8004316:	4b0d      	ldr	r3, [pc, #52]	@ (800434c <std+0x5c>)
 8004318:	62a3      	str	r3, [r4, #40]	@ 0x28
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <std+0x60>)
 800431c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <std+0x64>)
 8004320:	6323      	str	r3, [r4, #48]	@ 0x30
 8004322:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <std+0x68>)
 8004324:	6224      	str	r4, [r4, #32]
 8004326:	429c      	cmp	r4, r3
 8004328:	d006      	beq.n	8004338 <std+0x48>
 800432a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800432e:	4294      	cmp	r4, r2
 8004330:	d002      	beq.n	8004338 <std+0x48>
 8004332:	33d0      	adds	r3, #208	@ 0xd0
 8004334:	429c      	cmp	r4, r3
 8004336:	d105      	bne.n	8004344 <std+0x54>
 8004338:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004340:	f000 b9d0 	b.w	80046e4 <__retarget_lock_init_recursive>
 8004344:	bd10      	pop	{r4, pc}
 8004346:	bf00      	nop
 8004348:	08004541 	.word	0x08004541
 800434c:	08004563 	.word	0x08004563
 8004350:	0800459b 	.word	0x0800459b
 8004354:	080045bf 	.word	0x080045bf
 8004358:	20000d54 	.word	0x20000d54

0800435c <stdio_exit_handler>:
 800435c:	4a02      	ldr	r2, [pc, #8]	@ (8004368 <stdio_exit_handler+0xc>)
 800435e:	4903      	ldr	r1, [pc, #12]	@ (800436c <stdio_exit_handler+0x10>)
 8004360:	4803      	ldr	r0, [pc, #12]	@ (8004370 <stdio_exit_handler+0x14>)
 8004362:	f000 b869 	b.w	8004438 <_fwalk_sglue>
 8004366:	bf00      	nop
 8004368:	2000000c 	.word	0x2000000c
 800436c:	08005251 	.word	0x08005251
 8004370:	2000001c 	.word	0x2000001c

08004374 <cleanup_stdio>:
 8004374:	6841      	ldr	r1, [r0, #4]
 8004376:	4b0c      	ldr	r3, [pc, #48]	@ (80043a8 <cleanup_stdio+0x34>)
 8004378:	4299      	cmp	r1, r3
 800437a:	b510      	push	{r4, lr}
 800437c:	4604      	mov	r4, r0
 800437e:	d001      	beq.n	8004384 <cleanup_stdio+0x10>
 8004380:	f000 ff66 	bl	8005250 <_fflush_r>
 8004384:	68a1      	ldr	r1, [r4, #8]
 8004386:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <cleanup_stdio+0x38>)
 8004388:	4299      	cmp	r1, r3
 800438a:	d002      	beq.n	8004392 <cleanup_stdio+0x1e>
 800438c:	4620      	mov	r0, r4
 800438e:	f000 ff5f 	bl	8005250 <_fflush_r>
 8004392:	68e1      	ldr	r1, [r4, #12]
 8004394:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <cleanup_stdio+0x3c>)
 8004396:	4299      	cmp	r1, r3
 8004398:	d004      	beq.n	80043a4 <cleanup_stdio+0x30>
 800439a:	4620      	mov	r0, r4
 800439c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a0:	f000 bf56 	b.w	8005250 <_fflush_r>
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	bf00      	nop
 80043a8:	20000d54 	.word	0x20000d54
 80043ac:	20000dbc 	.word	0x20000dbc
 80043b0:	20000e24 	.word	0x20000e24

080043b4 <global_stdio_init.part.0>:
 80043b4:	b510      	push	{r4, lr}
 80043b6:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <global_stdio_init.part.0+0x30>)
 80043b8:	4c0b      	ldr	r4, [pc, #44]	@ (80043e8 <global_stdio_init.part.0+0x34>)
 80043ba:	4a0c      	ldr	r2, [pc, #48]	@ (80043ec <global_stdio_init.part.0+0x38>)
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	4620      	mov	r0, r4
 80043c0:	2200      	movs	r2, #0
 80043c2:	2104      	movs	r1, #4
 80043c4:	f7ff ff94 	bl	80042f0 <std>
 80043c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043cc:	2201      	movs	r2, #1
 80043ce:	2109      	movs	r1, #9
 80043d0:	f7ff ff8e 	bl	80042f0 <std>
 80043d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043d8:	2202      	movs	r2, #2
 80043da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043de:	2112      	movs	r1, #18
 80043e0:	f7ff bf86 	b.w	80042f0 <std>
 80043e4:	20000e8c 	.word	0x20000e8c
 80043e8:	20000d54 	.word	0x20000d54
 80043ec:	0800435d 	.word	0x0800435d

080043f0 <__sfp_lock_acquire>:
 80043f0:	4801      	ldr	r0, [pc, #4]	@ (80043f8 <__sfp_lock_acquire+0x8>)
 80043f2:	f000 b978 	b.w	80046e6 <__retarget_lock_acquire_recursive>
 80043f6:	bf00      	nop
 80043f8:	20000e95 	.word	0x20000e95

080043fc <__sfp_lock_release>:
 80043fc:	4801      	ldr	r0, [pc, #4]	@ (8004404 <__sfp_lock_release+0x8>)
 80043fe:	f000 b973 	b.w	80046e8 <__retarget_lock_release_recursive>
 8004402:	bf00      	nop
 8004404:	20000e95 	.word	0x20000e95

08004408 <__sinit>:
 8004408:	b510      	push	{r4, lr}
 800440a:	4604      	mov	r4, r0
 800440c:	f7ff fff0 	bl	80043f0 <__sfp_lock_acquire>
 8004410:	6a23      	ldr	r3, [r4, #32]
 8004412:	b11b      	cbz	r3, 800441c <__sinit+0x14>
 8004414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004418:	f7ff bff0 	b.w	80043fc <__sfp_lock_release>
 800441c:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <__sinit+0x28>)
 800441e:	6223      	str	r3, [r4, #32]
 8004420:	4b04      	ldr	r3, [pc, #16]	@ (8004434 <__sinit+0x2c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f5      	bne.n	8004414 <__sinit+0xc>
 8004428:	f7ff ffc4 	bl	80043b4 <global_stdio_init.part.0>
 800442c:	e7f2      	b.n	8004414 <__sinit+0xc>
 800442e:	bf00      	nop
 8004430:	08004375 	.word	0x08004375
 8004434:	20000e8c 	.word	0x20000e8c

08004438 <_fwalk_sglue>:
 8004438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800443c:	4607      	mov	r7, r0
 800443e:	4688      	mov	r8, r1
 8004440:	4614      	mov	r4, r2
 8004442:	2600      	movs	r6, #0
 8004444:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004448:	f1b9 0901 	subs.w	r9, r9, #1
 800444c:	d505      	bpl.n	800445a <_fwalk_sglue+0x22>
 800444e:	6824      	ldr	r4, [r4, #0]
 8004450:	2c00      	cmp	r4, #0
 8004452:	d1f7      	bne.n	8004444 <_fwalk_sglue+0xc>
 8004454:	4630      	mov	r0, r6
 8004456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445a:	89ab      	ldrh	r3, [r5, #12]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d907      	bls.n	8004470 <_fwalk_sglue+0x38>
 8004460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004464:	3301      	adds	r3, #1
 8004466:	d003      	beq.n	8004470 <_fwalk_sglue+0x38>
 8004468:	4629      	mov	r1, r5
 800446a:	4638      	mov	r0, r7
 800446c:	47c0      	blx	r8
 800446e:	4306      	orrs	r6, r0
 8004470:	3568      	adds	r5, #104	@ 0x68
 8004472:	e7e9      	b.n	8004448 <_fwalk_sglue+0x10>

08004474 <iprintf>:
 8004474:	b40f      	push	{r0, r1, r2, r3}
 8004476:	b507      	push	{r0, r1, r2, lr}
 8004478:	4906      	ldr	r1, [pc, #24]	@ (8004494 <iprintf+0x20>)
 800447a:	ab04      	add	r3, sp, #16
 800447c:	6808      	ldr	r0, [r1, #0]
 800447e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004482:	6881      	ldr	r1, [r0, #8]
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	f000 fbb9 	bl	8004bfc <_vfiprintf_r>
 800448a:	b003      	add	sp, #12
 800448c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004490:	b004      	add	sp, #16
 8004492:	4770      	bx	lr
 8004494:	20000018 	.word	0x20000018

08004498 <sniprintf>:
 8004498:	b40c      	push	{r2, r3}
 800449a:	b530      	push	{r4, r5, lr}
 800449c:	4b17      	ldr	r3, [pc, #92]	@ (80044fc <sniprintf+0x64>)
 800449e:	1e0c      	subs	r4, r1, #0
 80044a0:	681d      	ldr	r5, [r3, #0]
 80044a2:	b09d      	sub	sp, #116	@ 0x74
 80044a4:	da08      	bge.n	80044b8 <sniprintf+0x20>
 80044a6:	238b      	movs	r3, #139	@ 0x8b
 80044a8:	602b      	str	r3, [r5, #0]
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	b01d      	add	sp, #116	@ 0x74
 80044b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044b4:	b002      	add	sp, #8
 80044b6:	4770      	bx	lr
 80044b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80044bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044c0:	bf14      	ite	ne
 80044c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80044c6:	4623      	moveq	r3, r4
 80044c8:	9304      	str	r3, [sp, #16]
 80044ca:	9307      	str	r3, [sp, #28]
 80044cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044d0:	9002      	str	r0, [sp, #8]
 80044d2:	9006      	str	r0, [sp, #24]
 80044d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80044da:	ab21      	add	r3, sp, #132	@ 0x84
 80044dc:	a902      	add	r1, sp, #8
 80044de:	4628      	mov	r0, r5
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	f000 fa65 	bl	80049b0 <_svfiprintf_r>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	bfbc      	itt	lt
 80044ea:	238b      	movlt	r3, #139	@ 0x8b
 80044ec:	602b      	strlt	r3, [r5, #0]
 80044ee:	2c00      	cmp	r4, #0
 80044f0:	d0dd      	beq.n	80044ae <sniprintf+0x16>
 80044f2:	9b02      	ldr	r3, [sp, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	e7d9      	b.n	80044ae <sniprintf+0x16>
 80044fa:	bf00      	nop
 80044fc:	20000018 	.word	0x20000018

08004500 <siprintf>:
 8004500:	b40e      	push	{r1, r2, r3}
 8004502:	b500      	push	{lr}
 8004504:	b09c      	sub	sp, #112	@ 0x70
 8004506:	ab1d      	add	r3, sp, #116	@ 0x74
 8004508:	9002      	str	r0, [sp, #8]
 800450a:	9006      	str	r0, [sp, #24]
 800450c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004510:	4809      	ldr	r0, [pc, #36]	@ (8004538 <siprintf+0x38>)
 8004512:	9107      	str	r1, [sp, #28]
 8004514:	9104      	str	r1, [sp, #16]
 8004516:	4909      	ldr	r1, [pc, #36]	@ (800453c <siprintf+0x3c>)
 8004518:	f853 2b04 	ldr.w	r2, [r3], #4
 800451c:	9105      	str	r1, [sp, #20]
 800451e:	6800      	ldr	r0, [r0, #0]
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	a902      	add	r1, sp, #8
 8004524:	f000 fa44 	bl	80049b0 <_svfiprintf_r>
 8004528:	9b02      	ldr	r3, [sp, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	b01c      	add	sp, #112	@ 0x70
 8004530:	f85d eb04 	ldr.w	lr, [sp], #4
 8004534:	b003      	add	sp, #12
 8004536:	4770      	bx	lr
 8004538:	20000018 	.word	0x20000018
 800453c:	ffff0208 	.word	0xffff0208

08004540 <__sread>:
 8004540:	b510      	push	{r4, lr}
 8004542:	460c      	mov	r4, r1
 8004544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004548:	f000 f87e 	bl	8004648 <_read_r>
 800454c:	2800      	cmp	r0, #0
 800454e:	bfab      	itete	ge
 8004550:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004552:	89a3      	ldrhlt	r3, [r4, #12]
 8004554:	181b      	addge	r3, r3, r0
 8004556:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800455a:	bfac      	ite	ge
 800455c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800455e:	81a3      	strhlt	r3, [r4, #12]
 8004560:	bd10      	pop	{r4, pc}

08004562 <__swrite>:
 8004562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004566:	461f      	mov	r7, r3
 8004568:	898b      	ldrh	r3, [r1, #12]
 800456a:	05db      	lsls	r3, r3, #23
 800456c:	4605      	mov	r5, r0
 800456e:	460c      	mov	r4, r1
 8004570:	4616      	mov	r6, r2
 8004572:	d505      	bpl.n	8004580 <__swrite+0x1e>
 8004574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004578:	2302      	movs	r3, #2
 800457a:	2200      	movs	r2, #0
 800457c:	f000 f852 	bl	8004624 <_lseek_r>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	4632      	mov	r2, r6
 800458e:	463b      	mov	r3, r7
 8004590:	4628      	mov	r0, r5
 8004592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004596:	f000 b869 	b.w	800466c <_write_r>

0800459a <__sseek>:
 800459a:	b510      	push	{r4, lr}
 800459c:	460c      	mov	r4, r1
 800459e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a2:	f000 f83f 	bl	8004624 <_lseek_r>
 80045a6:	1c43      	adds	r3, r0, #1
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	bf15      	itete	ne
 80045ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045b6:	81a3      	strheq	r3, [r4, #12]
 80045b8:	bf18      	it	ne
 80045ba:	81a3      	strhne	r3, [r4, #12]
 80045bc:	bd10      	pop	{r4, pc}

080045be <__sclose>:
 80045be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c2:	f000 b81f 	b.w	8004604 <_close_r>

080045c6 <memset>:
 80045c6:	4402      	add	r2, r0
 80045c8:	4603      	mov	r3, r0
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d100      	bne.n	80045d0 <memset+0xa>
 80045ce:	4770      	bx	lr
 80045d0:	f803 1b01 	strb.w	r1, [r3], #1
 80045d4:	e7f9      	b.n	80045ca <memset+0x4>

080045d6 <strstr>:
 80045d6:	780a      	ldrb	r2, [r1, #0]
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	b96a      	cbnz	r2, 80045f8 <strstr+0x22>
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
 80045de:	429a      	cmp	r2, r3
 80045e0:	d109      	bne.n	80045f6 <strstr+0x20>
 80045e2:	460c      	mov	r4, r1
 80045e4:	4605      	mov	r5, r0
 80045e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f6      	beq.n	80045dc <strstr+0x6>
 80045ee:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80045f2:	429e      	cmp	r6, r3
 80045f4:	d0f7      	beq.n	80045e6 <strstr+0x10>
 80045f6:	3001      	adds	r0, #1
 80045f8:	7803      	ldrb	r3, [r0, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ef      	bne.n	80045de <strstr+0x8>
 80045fe:	4618      	mov	r0, r3
 8004600:	e7ec      	b.n	80045dc <strstr+0x6>
	...

08004604 <_close_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4d06      	ldr	r5, [pc, #24]	@ (8004620 <_close_r+0x1c>)
 8004608:	2300      	movs	r3, #0
 800460a:	4604      	mov	r4, r0
 800460c:	4608      	mov	r0, r1
 800460e:	602b      	str	r3, [r5, #0]
 8004610:	f7fd fac5 	bl	8001b9e <_close>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d102      	bne.n	800461e <_close_r+0x1a>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	b103      	cbz	r3, 800461e <_close_r+0x1a>
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	bd38      	pop	{r3, r4, r5, pc}
 8004620:	20000e90 	.word	0x20000e90

08004624 <_lseek_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d07      	ldr	r5, [pc, #28]	@ (8004644 <_lseek_r+0x20>)
 8004628:	4604      	mov	r4, r0
 800462a:	4608      	mov	r0, r1
 800462c:	4611      	mov	r1, r2
 800462e:	2200      	movs	r2, #0
 8004630:	602a      	str	r2, [r5, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	f7fd fada 	bl	8001bec <_lseek>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d102      	bne.n	8004642 <_lseek_r+0x1e>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b103      	cbz	r3, 8004642 <_lseek_r+0x1e>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	20000e90 	.word	0x20000e90

08004648 <_read_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d07      	ldr	r5, [pc, #28]	@ (8004668 <_read_r+0x20>)
 800464c:	4604      	mov	r4, r0
 800464e:	4608      	mov	r0, r1
 8004650:	4611      	mov	r1, r2
 8004652:	2200      	movs	r2, #0
 8004654:	602a      	str	r2, [r5, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	f7fd fa68 	bl	8001b2c <_read>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_read_r+0x1e>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_read_r+0x1e>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	20000e90 	.word	0x20000e90

0800466c <_write_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4d07      	ldr	r5, [pc, #28]	@ (800468c <_write_r+0x20>)
 8004670:	4604      	mov	r4, r0
 8004672:	4608      	mov	r0, r1
 8004674:	4611      	mov	r1, r2
 8004676:	2200      	movs	r2, #0
 8004678:	602a      	str	r2, [r5, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	f7fd fa73 	bl	8001b66 <_write>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_write_r+0x1e>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_write_r+0x1e>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	20000e90 	.word	0x20000e90

08004690 <__errno>:
 8004690:	4b01      	ldr	r3, [pc, #4]	@ (8004698 <__errno+0x8>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000018 	.word	0x20000018

0800469c <__libc_init_array>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	4d0d      	ldr	r5, [pc, #52]	@ (80046d4 <__libc_init_array+0x38>)
 80046a0:	4c0d      	ldr	r4, [pc, #52]	@ (80046d8 <__libc_init_array+0x3c>)
 80046a2:	1b64      	subs	r4, r4, r5
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	2600      	movs	r6, #0
 80046a8:	42a6      	cmp	r6, r4
 80046aa:	d109      	bne.n	80046c0 <__libc_init_array+0x24>
 80046ac:	4d0b      	ldr	r5, [pc, #44]	@ (80046dc <__libc_init_array+0x40>)
 80046ae:	4c0c      	ldr	r4, [pc, #48]	@ (80046e0 <__libc_init_array+0x44>)
 80046b0:	f000 ff6e 	bl	8005590 <_init>
 80046b4:	1b64      	subs	r4, r4, r5
 80046b6:	10a4      	asrs	r4, r4, #2
 80046b8:	2600      	movs	r6, #0
 80046ba:	42a6      	cmp	r6, r4
 80046bc:	d105      	bne.n	80046ca <__libc_init_array+0x2e>
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c4:	4798      	blx	r3
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7ee      	b.n	80046a8 <__libc_init_array+0xc>
 80046ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ce:	4798      	blx	r3
 80046d0:	3601      	adds	r6, #1
 80046d2:	e7f2      	b.n	80046ba <__libc_init_array+0x1e>
 80046d4:	0800585c 	.word	0x0800585c
 80046d8:	0800585c 	.word	0x0800585c
 80046dc:	0800585c 	.word	0x0800585c
 80046e0:	08005860 	.word	0x08005860

080046e4 <__retarget_lock_init_recursive>:
 80046e4:	4770      	bx	lr

080046e6 <__retarget_lock_acquire_recursive>:
 80046e6:	4770      	bx	lr

080046e8 <__retarget_lock_release_recursive>:
 80046e8:	4770      	bx	lr

080046ea <memcpy>:
 80046ea:	440a      	add	r2, r1
 80046ec:	4291      	cmp	r1, r2
 80046ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80046f2:	d100      	bne.n	80046f6 <memcpy+0xc>
 80046f4:	4770      	bx	lr
 80046f6:	b510      	push	{r4, lr}
 80046f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004700:	4291      	cmp	r1, r2
 8004702:	d1f9      	bne.n	80046f8 <memcpy+0xe>
 8004704:	bd10      	pop	{r4, pc}
	...

08004708 <_free_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4605      	mov	r5, r0
 800470c:	2900      	cmp	r1, #0
 800470e:	d041      	beq.n	8004794 <_free_r+0x8c>
 8004710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004714:	1f0c      	subs	r4, r1, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfb8      	it	lt
 800471a:	18e4      	addlt	r4, r4, r3
 800471c:	f000 f8e0 	bl	80048e0 <__malloc_lock>
 8004720:	4a1d      	ldr	r2, [pc, #116]	@ (8004798 <_free_r+0x90>)
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	b933      	cbnz	r3, 8004734 <_free_r+0x2c>
 8004726:	6063      	str	r3, [r4, #4]
 8004728:	6014      	str	r4, [r2, #0]
 800472a:	4628      	mov	r0, r5
 800472c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004730:	f000 b8dc 	b.w	80048ec <__malloc_unlock>
 8004734:	42a3      	cmp	r3, r4
 8004736:	d908      	bls.n	800474a <_free_r+0x42>
 8004738:	6820      	ldr	r0, [r4, #0]
 800473a:	1821      	adds	r1, r4, r0
 800473c:	428b      	cmp	r3, r1
 800473e:	bf01      	itttt	eq
 8004740:	6819      	ldreq	r1, [r3, #0]
 8004742:	685b      	ldreq	r3, [r3, #4]
 8004744:	1809      	addeq	r1, r1, r0
 8004746:	6021      	streq	r1, [r4, #0]
 8004748:	e7ed      	b.n	8004726 <_free_r+0x1e>
 800474a:	461a      	mov	r2, r3
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	b10b      	cbz	r3, 8004754 <_free_r+0x4c>
 8004750:	42a3      	cmp	r3, r4
 8004752:	d9fa      	bls.n	800474a <_free_r+0x42>
 8004754:	6811      	ldr	r1, [r2, #0]
 8004756:	1850      	adds	r0, r2, r1
 8004758:	42a0      	cmp	r0, r4
 800475a:	d10b      	bne.n	8004774 <_free_r+0x6c>
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	4401      	add	r1, r0
 8004760:	1850      	adds	r0, r2, r1
 8004762:	4283      	cmp	r3, r0
 8004764:	6011      	str	r1, [r2, #0]
 8004766:	d1e0      	bne.n	800472a <_free_r+0x22>
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	6053      	str	r3, [r2, #4]
 800476e:	4408      	add	r0, r1
 8004770:	6010      	str	r0, [r2, #0]
 8004772:	e7da      	b.n	800472a <_free_r+0x22>
 8004774:	d902      	bls.n	800477c <_free_r+0x74>
 8004776:	230c      	movs	r3, #12
 8004778:	602b      	str	r3, [r5, #0]
 800477a:	e7d6      	b.n	800472a <_free_r+0x22>
 800477c:	6820      	ldr	r0, [r4, #0]
 800477e:	1821      	adds	r1, r4, r0
 8004780:	428b      	cmp	r3, r1
 8004782:	bf04      	itt	eq
 8004784:	6819      	ldreq	r1, [r3, #0]
 8004786:	685b      	ldreq	r3, [r3, #4]
 8004788:	6063      	str	r3, [r4, #4]
 800478a:	bf04      	itt	eq
 800478c:	1809      	addeq	r1, r1, r0
 800478e:	6021      	streq	r1, [r4, #0]
 8004790:	6054      	str	r4, [r2, #4]
 8004792:	e7ca      	b.n	800472a <_free_r+0x22>
 8004794:	bd38      	pop	{r3, r4, r5, pc}
 8004796:	bf00      	nop
 8004798:	20000e9c 	.word	0x20000e9c

0800479c <sbrk_aligned>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	4e0f      	ldr	r6, [pc, #60]	@ (80047dc <sbrk_aligned+0x40>)
 80047a0:	460c      	mov	r4, r1
 80047a2:	6831      	ldr	r1, [r6, #0]
 80047a4:	4605      	mov	r5, r0
 80047a6:	b911      	cbnz	r1, 80047ae <sbrk_aligned+0x12>
 80047a8:	f000 fe28 	bl	80053fc <_sbrk_r>
 80047ac:	6030      	str	r0, [r6, #0]
 80047ae:	4621      	mov	r1, r4
 80047b0:	4628      	mov	r0, r5
 80047b2:	f000 fe23 	bl	80053fc <_sbrk_r>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	d103      	bne.n	80047c2 <sbrk_aligned+0x26>
 80047ba:	f04f 34ff 	mov.w	r4, #4294967295
 80047be:	4620      	mov	r0, r4
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	1cc4      	adds	r4, r0, #3
 80047c4:	f024 0403 	bic.w	r4, r4, #3
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d0f8      	beq.n	80047be <sbrk_aligned+0x22>
 80047cc:	1a21      	subs	r1, r4, r0
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 fe14 	bl	80053fc <_sbrk_r>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d1f2      	bne.n	80047be <sbrk_aligned+0x22>
 80047d8:	e7ef      	b.n	80047ba <sbrk_aligned+0x1e>
 80047da:	bf00      	nop
 80047dc:	20000e98 	.word	0x20000e98

080047e0 <_malloc_r>:
 80047e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e4:	1ccd      	adds	r5, r1, #3
 80047e6:	f025 0503 	bic.w	r5, r5, #3
 80047ea:	3508      	adds	r5, #8
 80047ec:	2d0c      	cmp	r5, #12
 80047ee:	bf38      	it	cc
 80047f0:	250c      	movcc	r5, #12
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	4606      	mov	r6, r0
 80047f6:	db01      	blt.n	80047fc <_malloc_r+0x1c>
 80047f8:	42a9      	cmp	r1, r5
 80047fa:	d904      	bls.n	8004806 <_malloc_r+0x26>
 80047fc:	230c      	movs	r3, #12
 80047fe:	6033      	str	r3, [r6, #0]
 8004800:	2000      	movs	r0, #0
 8004802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004806:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048dc <_malloc_r+0xfc>
 800480a:	f000 f869 	bl	80048e0 <__malloc_lock>
 800480e:	f8d8 3000 	ldr.w	r3, [r8]
 8004812:	461c      	mov	r4, r3
 8004814:	bb44      	cbnz	r4, 8004868 <_malloc_r+0x88>
 8004816:	4629      	mov	r1, r5
 8004818:	4630      	mov	r0, r6
 800481a:	f7ff ffbf 	bl	800479c <sbrk_aligned>
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	4604      	mov	r4, r0
 8004822:	d158      	bne.n	80048d6 <_malloc_r+0xf6>
 8004824:	f8d8 4000 	ldr.w	r4, [r8]
 8004828:	4627      	mov	r7, r4
 800482a:	2f00      	cmp	r7, #0
 800482c:	d143      	bne.n	80048b6 <_malloc_r+0xd6>
 800482e:	2c00      	cmp	r4, #0
 8004830:	d04b      	beq.n	80048ca <_malloc_r+0xea>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	4639      	mov	r1, r7
 8004836:	4630      	mov	r0, r6
 8004838:	eb04 0903 	add.w	r9, r4, r3
 800483c:	f000 fdde 	bl	80053fc <_sbrk_r>
 8004840:	4581      	cmp	r9, r0
 8004842:	d142      	bne.n	80048ca <_malloc_r+0xea>
 8004844:	6821      	ldr	r1, [r4, #0]
 8004846:	1a6d      	subs	r5, r5, r1
 8004848:	4629      	mov	r1, r5
 800484a:	4630      	mov	r0, r6
 800484c:	f7ff ffa6 	bl	800479c <sbrk_aligned>
 8004850:	3001      	adds	r0, #1
 8004852:	d03a      	beq.n	80048ca <_malloc_r+0xea>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	442b      	add	r3, r5
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	f8d8 3000 	ldr.w	r3, [r8]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	bb62      	cbnz	r2, 80048bc <_malloc_r+0xdc>
 8004862:	f8c8 7000 	str.w	r7, [r8]
 8004866:	e00f      	b.n	8004888 <_malloc_r+0xa8>
 8004868:	6822      	ldr	r2, [r4, #0]
 800486a:	1b52      	subs	r2, r2, r5
 800486c:	d420      	bmi.n	80048b0 <_malloc_r+0xd0>
 800486e:	2a0b      	cmp	r2, #11
 8004870:	d917      	bls.n	80048a2 <_malloc_r+0xc2>
 8004872:	1961      	adds	r1, r4, r5
 8004874:	42a3      	cmp	r3, r4
 8004876:	6025      	str	r5, [r4, #0]
 8004878:	bf18      	it	ne
 800487a:	6059      	strne	r1, [r3, #4]
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	bf08      	it	eq
 8004880:	f8c8 1000 	streq.w	r1, [r8]
 8004884:	5162      	str	r2, [r4, r5]
 8004886:	604b      	str	r3, [r1, #4]
 8004888:	4630      	mov	r0, r6
 800488a:	f000 f82f 	bl	80048ec <__malloc_unlock>
 800488e:	f104 000b 	add.w	r0, r4, #11
 8004892:	1d23      	adds	r3, r4, #4
 8004894:	f020 0007 	bic.w	r0, r0, #7
 8004898:	1ac2      	subs	r2, r0, r3
 800489a:	bf1c      	itt	ne
 800489c:	1a1b      	subne	r3, r3, r0
 800489e:	50a3      	strne	r3, [r4, r2]
 80048a0:	e7af      	b.n	8004802 <_malloc_r+0x22>
 80048a2:	6862      	ldr	r2, [r4, #4]
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	bf0c      	ite	eq
 80048a8:	f8c8 2000 	streq.w	r2, [r8]
 80048ac:	605a      	strne	r2, [r3, #4]
 80048ae:	e7eb      	b.n	8004888 <_malloc_r+0xa8>
 80048b0:	4623      	mov	r3, r4
 80048b2:	6864      	ldr	r4, [r4, #4]
 80048b4:	e7ae      	b.n	8004814 <_malloc_r+0x34>
 80048b6:	463c      	mov	r4, r7
 80048b8:	687f      	ldr	r7, [r7, #4]
 80048ba:	e7b6      	b.n	800482a <_malloc_r+0x4a>
 80048bc:	461a      	mov	r2, r3
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d1fb      	bne.n	80048bc <_malloc_r+0xdc>
 80048c4:	2300      	movs	r3, #0
 80048c6:	6053      	str	r3, [r2, #4]
 80048c8:	e7de      	b.n	8004888 <_malloc_r+0xa8>
 80048ca:	230c      	movs	r3, #12
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	4630      	mov	r0, r6
 80048d0:	f000 f80c 	bl	80048ec <__malloc_unlock>
 80048d4:	e794      	b.n	8004800 <_malloc_r+0x20>
 80048d6:	6005      	str	r5, [r0, #0]
 80048d8:	e7d6      	b.n	8004888 <_malloc_r+0xa8>
 80048da:	bf00      	nop
 80048dc:	20000e9c 	.word	0x20000e9c

080048e0 <__malloc_lock>:
 80048e0:	4801      	ldr	r0, [pc, #4]	@ (80048e8 <__malloc_lock+0x8>)
 80048e2:	f7ff bf00 	b.w	80046e6 <__retarget_lock_acquire_recursive>
 80048e6:	bf00      	nop
 80048e8:	20000e94 	.word	0x20000e94

080048ec <__malloc_unlock>:
 80048ec:	4801      	ldr	r0, [pc, #4]	@ (80048f4 <__malloc_unlock+0x8>)
 80048ee:	f7ff befb 	b.w	80046e8 <__retarget_lock_release_recursive>
 80048f2:	bf00      	nop
 80048f4:	20000e94 	.word	0x20000e94

080048f8 <__ssputs_r>:
 80048f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048fc:	688e      	ldr	r6, [r1, #8]
 80048fe:	461f      	mov	r7, r3
 8004900:	42be      	cmp	r6, r7
 8004902:	680b      	ldr	r3, [r1, #0]
 8004904:	4682      	mov	sl, r0
 8004906:	460c      	mov	r4, r1
 8004908:	4690      	mov	r8, r2
 800490a:	d82d      	bhi.n	8004968 <__ssputs_r+0x70>
 800490c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004910:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004914:	d026      	beq.n	8004964 <__ssputs_r+0x6c>
 8004916:	6965      	ldr	r5, [r4, #20]
 8004918:	6909      	ldr	r1, [r1, #16]
 800491a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800491e:	eba3 0901 	sub.w	r9, r3, r1
 8004922:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004926:	1c7b      	adds	r3, r7, #1
 8004928:	444b      	add	r3, r9
 800492a:	106d      	asrs	r5, r5, #1
 800492c:	429d      	cmp	r5, r3
 800492e:	bf38      	it	cc
 8004930:	461d      	movcc	r5, r3
 8004932:	0553      	lsls	r3, r2, #21
 8004934:	d527      	bpl.n	8004986 <__ssputs_r+0x8e>
 8004936:	4629      	mov	r1, r5
 8004938:	f7ff ff52 	bl	80047e0 <_malloc_r>
 800493c:	4606      	mov	r6, r0
 800493e:	b360      	cbz	r0, 800499a <__ssputs_r+0xa2>
 8004940:	6921      	ldr	r1, [r4, #16]
 8004942:	464a      	mov	r2, r9
 8004944:	f7ff fed1 	bl	80046ea <memcpy>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800494e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	6126      	str	r6, [r4, #16]
 8004956:	6165      	str	r5, [r4, #20]
 8004958:	444e      	add	r6, r9
 800495a:	eba5 0509 	sub.w	r5, r5, r9
 800495e:	6026      	str	r6, [r4, #0]
 8004960:	60a5      	str	r5, [r4, #8]
 8004962:	463e      	mov	r6, r7
 8004964:	42be      	cmp	r6, r7
 8004966:	d900      	bls.n	800496a <__ssputs_r+0x72>
 8004968:	463e      	mov	r6, r7
 800496a:	6820      	ldr	r0, [r4, #0]
 800496c:	4632      	mov	r2, r6
 800496e:	4641      	mov	r1, r8
 8004970:	f000 fd2a 	bl	80053c8 <memmove>
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	1b9b      	subs	r3, r3, r6
 8004978:	60a3      	str	r3, [r4, #8]
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	4433      	add	r3, r6
 800497e:	6023      	str	r3, [r4, #0]
 8004980:	2000      	movs	r0, #0
 8004982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004986:	462a      	mov	r2, r5
 8004988:	f000 fd48 	bl	800541c <_realloc_r>
 800498c:	4606      	mov	r6, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	d1e0      	bne.n	8004954 <__ssputs_r+0x5c>
 8004992:	6921      	ldr	r1, [r4, #16]
 8004994:	4650      	mov	r0, sl
 8004996:	f7ff feb7 	bl	8004708 <_free_r>
 800499a:	230c      	movs	r3, #12
 800499c:	f8ca 3000 	str.w	r3, [sl]
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	e7e9      	b.n	8004982 <__ssputs_r+0x8a>
	...

080049b0 <_svfiprintf_r>:
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	4698      	mov	r8, r3
 80049b6:	898b      	ldrh	r3, [r1, #12]
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	b09d      	sub	sp, #116	@ 0x74
 80049bc:	4607      	mov	r7, r0
 80049be:	460d      	mov	r5, r1
 80049c0:	4614      	mov	r4, r2
 80049c2:	d510      	bpl.n	80049e6 <_svfiprintf_r+0x36>
 80049c4:	690b      	ldr	r3, [r1, #16]
 80049c6:	b973      	cbnz	r3, 80049e6 <_svfiprintf_r+0x36>
 80049c8:	2140      	movs	r1, #64	@ 0x40
 80049ca:	f7ff ff09 	bl	80047e0 <_malloc_r>
 80049ce:	6028      	str	r0, [r5, #0]
 80049d0:	6128      	str	r0, [r5, #16]
 80049d2:	b930      	cbnz	r0, 80049e2 <_svfiprintf_r+0x32>
 80049d4:	230c      	movs	r3, #12
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	b01d      	add	sp, #116	@ 0x74
 80049de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e2:	2340      	movs	r3, #64	@ 0x40
 80049e4:	616b      	str	r3, [r5, #20]
 80049e6:	2300      	movs	r3, #0
 80049e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ea:	2320      	movs	r3, #32
 80049ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80049f4:	2330      	movs	r3, #48	@ 0x30
 80049f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b94 <_svfiprintf_r+0x1e4>
 80049fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049fe:	f04f 0901 	mov.w	r9, #1
 8004a02:	4623      	mov	r3, r4
 8004a04:	469a      	mov	sl, r3
 8004a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a0a:	b10a      	cbz	r2, 8004a10 <_svfiprintf_r+0x60>
 8004a0c:	2a25      	cmp	r2, #37	@ 0x25
 8004a0e:	d1f9      	bne.n	8004a04 <_svfiprintf_r+0x54>
 8004a10:	ebba 0b04 	subs.w	fp, sl, r4
 8004a14:	d00b      	beq.n	8004a2e <_svfiprintf_r+0x7e>
 8004a16:	465b      	mov	r3, fp
 8004a18:	4622      	mov	r2, r4
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	f7ff ff6b 	bl	80048f8 <__ssputs_r>
 8004a22:	3001      	adds	r0, #1
 8004a24:	f000 80a7 	beq.w	8004b76 <_svfiprintf_r+0x1c6>
 8004a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a2a:	445a      	add	r2, fp
 8004a2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 809f 	beq.w	8004b76 <_svfiprintf_r+0x1c6>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a42:	f10a 0a01 	add.w	sl, sl, #1
 8004a46:	9304      	str	r3, [sp, #16]
 8004a48:	9307      	str	r3, [sp, #28]
 8004a4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a50:	4654      	mov	r4, sl
 8004a52:	2205      	movs	r2, #5
 8004a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a58:	484e      	ldr	r0, [pc, #312]	@ (8004b94 <_svfiprintf_r+0x1e4>)
 8004a5a:	f7fb fbf1 	bl	8000240 <memchr>
 8004a5e:	9a04      	ldr	r2, [sp, #16]
 8004a60:	b9d8      	cbnz	r0, 8004a9a <_svfiprintf_r+0xea>
 8004a62:	06d0      	lsls	r0, r2, #27
 8004a64:	bf44      	itt	mi
 8004a66:	2320      	movmi	r3, #32
 8004a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a6c:	0711      	lsls	r1, r2, #28
 8004a6e:	bf44      	itt	mi
 8004a70:	232b      	movmi	r3, #43	@ 0x2b
 8004a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a76:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a7c:	d015      	beq.n	8004aaa <_svfiprintf_r+0xfa>
 8004a7e:	9a07      	ldr	r2, [sp, #28]
 8004a80:	4654      	mov	r4, sl
 8004a82:	2000      	movs	r0, #0
 8004a84:	f04f 0c0a 	mov.w	ip, #10
 8004a88:	4621      	mov	r1, r4
 8004a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a8e:	3b30      	subs	r3, #48	@ 0x30
 8004a90:	2b09      	cmp	r3, #9
 8004a92:	d94b      	bls.n	8004b2c <_svfiprintf_r+0x17c>
 8004a94:	b1b0      	cbz	r0, 8004ac4 <_svfiprintf_r+0x114>
 8004a96:	9207      	str	r2, [sp, #28]
 8004a98:	e014      	b.n	8004ac4 <_svfiprintf_r+0x114>
 8004a9a:	eba0 0308 	sub.w	r3, r0, r8
 8004a9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	9304      	str	r3, [sp, #16]
 8004aa6:	46a2      	mov	sl, r4
 8004aa8:	e7d2      	b.n	8004a50 <_svfiprintf_r+0xa0>
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	1d19      	adds	r1, r3, #4
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	9103      	str	r1, [sp, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	bfbb      	ittet	lt
 8004ab6:	425b      	neglt	r3, r3
 8004ab8:	f042 0202 	orrlt.w	r2, r2, #2
 8004abc:	9307      	strge	r3, [sp, #28]
 8004abe:	9307      	strlt	r3, [sp, #28]
 8004ac0:	bfb8      	it	lt
 8004ac2:	9204      	strlt	r2, [sp, #16]
 8004ac4:	7823      	ldrb	r3, [r4, #0]
 8004ac6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ac8:	d10a      	bne.n	8004ae0 <_svfiprintf_r+0x130>
 8004aca:	7863      	ldrb	r3, [r4, #1]
 8004acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ace:	d132      	bne.n	8004b36 <_svfiprintf_r+0x186>
 8004ad0:	9b03      	ldr	r3, [sp, #12]
 8004ad2:	1d1a      	adds	r2, r3, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	9203      	str	r2, [sp, #12]
 8004ad8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004adc:	3402      	adds	r4, #2
 8004ade:	9305      	str	r3, [sp, #20]
 8004ae0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ba4 <_svfiprintf_r+0x1f4>
 8004ae4:	7821      	ldrb	r1, [r4, #0]
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	4650      	mov	r0, sl
 8004aea:	f7fb fba9 	bl	8000240 <memchr>
 8004aee:	b138      	cbz	r0, 8004b00 <_svfiprintf_r+0x150>
 8004af0:	9b04      	ldr	r3, [sp, #16]
 8004af2:	eba0 000a 	sub.w	r0, r0, sl
 8004af6:	2240      	movs	r2, #64	@ 0x40
 8004af8:	4082      	lsls	r2, r0
 8004afa:	4313      	orrs	r3, r2
 8004afc:	3401      	adds	r4, #1
 8004afe:	9304      	str	r3, [sp, #16]
 8004b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b04:	4824      	ldr	r0, [pc, #144]	@ (8004b98 <_svfiprintf_r+0x1e8>)
 8004b06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b0a:	2206      	movs	r2, #6
 8004b0c:	f7fb fb98 	bl	8000240 <memchr>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d036      	beq.n	8004b82 <_svfiprintf_r+0x1d2>
 8004b14:	4b21      	ldr	r3, [pc, #132]	@ (8004b9c <_svfiprintf_r+0x1ec>)
 8004b16:	bb1b      	cbnz	r3, 8004b60 <_svfiprintf_r+0x1b0>
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	3307      	adds	r3, #7
 8004b1c:	f023 0307 	bic.w	r3, r3, #7
 8004b20:	3308      	adds	r3, #8
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b26:	4433      	add	r3, r6
 8004b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b2a:	e76a      	b.n	8004a02 <_svfiprintf_r+0x52>
 8004b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b30:	460c      	mov	r4, r1
 8004b32:	2001      	movs	r0, #1
 8004b34:	e7a8      	b.n	8004a88 <_svfiprintf_r+0xd8>
 8004b36:	2300      	movs	r3, #0
 8004b38:	3401      	adds	r4, #1
 8004b3a:	9305      	str	r3, [sp, #20]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f04f 0c0a 	mov.w	ip, #10
 8004b42:	4620      	mov	r0, r4
 8004b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b48:	3a30      	subs	r2, #48	@ 0x30
 8004b4a:	2a09      	cmp	r2, #9
 8004b4c:	d903      	bls.n	8004b56 <_svfiprintf_r+0x1a6>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0c6      	beq.n	8004ae0 <_svfiprintf_r+0x130>
 8004b52:	9105      	str	r1, [sp, #20]
 8004b54:	e7c4      	b.n	8004ae0 <_svfiprintf_r+0x130>
 8004b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e7f0      	b.n	8004b42 <_svfiprintf_r+0x192>
 8004b60:	ab03      	add	r3, sp, #12
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	462a      	mov	r2, r5
 8004b66:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba0 <_svfiprintf_r+0x1f0>)
 8004b68:	a904      	add	r1, sp, #16
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	f3af 8000 	nop.w
 8004b70:	1c42      	adds	r2, r0, #1
 8004b72:	4606      	mov	r6, r0
 8004b74:	d1d6      	bne.n	8004b24 <_svfiprintf_r+0x174>
 8004b76:	89ab      	ldrh	r3, [r5, #12]
 8004b78:	065b      	lsls	r3, r3, #25
 8004b7a:	f53f af2d 	bmi.w	80049d8 <_svfiprintf_r+0x28>
 8004b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b80:	e72c      	b.n	80049dc <_svfiprintf_r+0x2c>
 8004b82:	ab03      	add	r3, sp, #12
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	462a      	mov	r2, r5
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <_svfiprintf_r+0x1f0>)
 8004b8a:	a904      	add	r1, sp, #16
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f000 f9bb 	bl	8004f08 <_printf_i>
 8004b92:	e7ed      	b.n	8004b70 <_svfiprintf_r+0x1c0>
 8004b94:	08005820 	.word	0x08005820
 8004b98:	0800582a 	.word	0x0800582a
 8004b9c:	00000000 	.word	0x00000000
 8004ba0:	080048f9 	.word	0x080048f9
 8004ba4:	08005826 	.word	0x08005826

08004ba8 <__sfputc_r>:
 8004ba8:	6893      	ldr	r3, [r2, #8]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	b410      	push	{r4}
 8004bb0:	6093      	str	r3, [r2, #8]
 8004bb2:	da08      	bge.n	8004bc6 <__sfputc_r+0x1e>
 8004bb4:	6994      	ldr	r4, [r2, #24]
 8004bb6:	42a3      	cmp	r3, r4
 8004bb8:	db01      	blt.n	8004bbe <__sfputc_r+0x16>
 8004bba:	290a      	cmp	r1, #10
 8004bbc:	d103      	bne.n	8004bc6 <__sfputc_r+0x1e>
 8004bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc2:	f000 bb6d 	b.w	80052a0 <__swbuf_r>
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	1c58      	adds	r0, r3, #1
 8004bca:	6010      	str	r0, [r2, #0]
 8004bcc:	7019      	strb	r1, [r3, #0]
 8004bce:	4608      	mov	r0, r1
 8004bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <__sfputs_r>:
 8004bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd8:	4606      	mov	r6, r0
 8004bda:	460f      	mov	r7, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	18d5      	adds	r5, r2, r3
 8004be0:	42ac      	cmp	r4, r5
 8004be2:	d101      	bne.n	8004be8 <__sfputs_r+0x12>
 8004be4:	2000      	movs	r0, #0
 8004be6:	e007      	b.n	8004bf8 <__sfputs_r+0x22>
 8004be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bec:	463a      	mov	r2, r7
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f7ff ffda 	bl	8004ba8 <__sfputc_r>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d1f3      	bne.n	8004be0 <__sfputs_r+0xa>
 8004bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bfc <_vfiprintf_r>:
 8004bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	460d      	mov	r5, r1
 8004c02:	b09d      	sub	sp, #116	@ 0x74
 8004c04:	4614      	mov	r4, r2
 8004c06:	4698      	mov	r8, r3
 8004c08:	4606      	mov	r6, r0
 8004c0a:	b118      	cbz	r0, 8004c14 <_vfiprintf_r+0x18>
 8004c0c:	6a03      	ldr	r3, [r0, #32]
 8004c0e:	b90b      	cbnz	r3, 8004c14 <_vfiprintf_r+0x18>
 8004c10:	f7ff fbfa 	bl	8004408 <__sinit>
 8004c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c16:	07d9      	lsls	r1, r3, #31
 8004c18:	d405      	bmi.n	8004c26 <_vfiprintf_r+0x2a>
 8004c1a:	89ab      	ldrh	r3, [r5, #12]
 8004c1c:	059a      	lsls	r2, r3, #22
 8004c1e:	d402      	bmi.n	8004c26 <_vfiprintf_r+0x2a>
 8004c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c22:	f7ff fd60 	bl	80046e6 <__retarget_lock_acquire_recursive>
 8004c26:	89ab      	ldrh	r3, [r5, #12]
 8004c28:	071b      	lsls	r3, r3, #28
 8004c2a:	d501      	bpl.n	8004c30 <_vfiprintf_r+0x34>
 8004c2c:	692b      	ldr	r3, [r5, #16]
 8004c2e:	b99b      	cbnz	r3, 8004c58 <_vfiprintf_r+0x5c>
 8004c30:	4629      	mov	r1, r5
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 fb72 	bl	800531c <__swsetup_r>
 8004c38:	b170      	cbz	r0, 8004c58 <_vfiprintf_r+0x5c>
 8004c3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c3c:	07dc      	lsls	r4, r3, #31
 8004c3e:	d504      	bpl.n	8004c4a <_vfiprintf_r+0x4e>
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	b01d      	add	sp, #116	@ 0x74
 8004c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4a:	89ab      	ldrh	r3, [r5, #12]
 8004c4c:	0598      	lsls	r0, r3, #22
 8004c4e:	d4f7      	bmi.n	8004c40 <_vfiprintf_r+0x44>
 8004c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c52:	f7ff fd49 	bl	80046e8 <__retarget_lock_release_recursive>
 8004c56:	e7f3      	b.n	8004c40 <_vfiprintf_r+0x44>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c66:	2330      	movs	r3, #48	@ 0x30
 8004c68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e18 <_vfiprintf_r+0x21c>
 8004c6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c70:	f04f 0901 	mov.w	r9, #1
 8004c74:	4623      	mov	r3, r4
 8004c76:	469a      	mov	sl, r3
 8004c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c7c:	b10a      	cbz	r2, 8004c82 <_vfiprintf_r+0x86>
 8004c7e:	2a25      	cmp	r2, #37	@ 0x25
 8004c80:	d1f9      	bne.n	8004c76 <_vfiprintf_r+0x7a>
 8004c82:	ebba 0b04 	subs.w	fp, sl, r4
 8004c86:	d00b      	beq.n	8004ca0 <_vfiprintf_r+0xa4>
 8004c88:	465b      	mov	r3, fp
 8004c8a:	4622      	mov	r2, r4
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f7ff ffa1 	bl	8004bd6 <__sfputs_r>
 8004c94:	3001      	adds	r0, #1
 8004c96:	f000 80a7 	beq.w	8004de8 <_vfiprintf_r+0x1ec>
 8004c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c9c:	445a      	add	r2, fp
 8004c9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 809f 	beq.w	8004de8 <_vfiprintf_r+0x1ec>
 8004caa:	2300      	movs	r3, #0
 8004cac:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cb4:	f10a 0a01 	add.w	sl, sl, #1
 8004cb8:	9304      	str	r3, [sp, #16]
 8004cba:	9307      	str	r3, [sp, #28]
 8004cbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cc2:	4654      	mov	r4, sl
 8004cc4:	2205      	movs	r2, #5
 8004cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cca:	4853      	ldr	r0, [pc, #332]	@ (8004e18 <_vfiprintf_r+0x21c>)
 8004ccc:	f7fb fab8 	bl	8000240 <memchr>
 8004cd0:	9a04      	ldr	r2, [sp, #16]
 8004cd2:	b9d8      	cbnz	r0, 8004d0c <_vfiprintf_r+0x110>
 8004cd4:	06d1      	lsls	r1, r2, #27
 8004cd6:	bf44      	itt	mi
 8004cd8:	2320      	movmi	r3, #32
 8004cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cde:	0713      	lsls	r3, r2, #28
 8004ce0:	bf44      	itt	mi
 8004ce2:	232b      	movmi	r3, #43	@ 0x2b
 8004ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cee:	d015      	beq.n	8004d1c <_vfiprintf_r+0x120>
 8004cf0:	9a07      	ldr	r2, [sp, #28]
 8004cf2:	4654      	mov	r4, sl
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	f04f 0c0a 	mov.w	ip, #10
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d00:	3b30      	subs	r3, #48	@ 0x30
 8004d02:	2b09      	cmp	r3, #9
 8004d04:	d94b      	bls.n	8004d9e <_vfiprintf_r+0x1a2>
 8004d06:	b1b0      	cbz	r0, 8004d36 <_vfiprintf_r+0x13a>
 8004d08:	9207      	str	r2, [sp, #28]
 8004d0a:	e014      	b.n	8004d36 <_vfiprintf_r+0x13a>
 8004d0c:	eba0 0308 	sub.w	r3, r0, r8
 8004d10:	fa09 f303 	lsl.w	r3, r9, r3
 8004d14:	4313      	orrs	r3, r2
 8004d16:	9304      	str	r3, [sp, #16]
 8004d18:	46a2      	mov	sl, r4
 8004d1a:	e7d2      	b.n	8004cc2 <_vfiprintf_r+0xc6>
 8004d1c:	9b03      	ldr	r3, [sp, #12]
 8004d1e:	1d19      	adds	r1, r3, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	9103      	str	r1, [sp, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bfbb      	ittet	lt
 8004d28:	425b      	neglt	r3, r3
 8004d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d2e:	9307      	strge	r3, [sp, #28]
 8004d30:	9307      	strlt	r3, [sp, #28]
 8004d32:	bfb8      	it	lt
 8004d34:	9204      	strlt	r2, [sp, #16]
 8004d36:	7823      	ldrb	r3, [r4, #0]
 8004d38:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d3a:	d10a      	bne.n	8004d52 <_vfiprintf_r+0x156>
 8004d3c:	7863      	ldrb	r3, [r4, #1]
 8004d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d40:	d132      	bne.n	8004da8 <_vfiprintf_r+0x1ac>
 8004d42:	9b03      	ldr	r3, [sp, #12]
 8004d44:	1d1a      	adds	r2, r3, #4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	9203      	str	r2, [sp, #12]
 8004d4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d4e:	3402      	adds	r4, #2
 8004d50:	9305      	str	r3, [sp, #20]
 8004d52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e28 <_vfiprintf_r+0x22c>
 8004d56:	7821      	ldrb	r1, [r4, #0]
 8004d58:	2203      	movs	r2, #3
 8004d5a:	4650      	mov	r0, sl
 8004d5c:	f7fb fa70 	bl	8000240 <memchr>
 8004d60:	b138      	cbz	r0, 8004d72 <_vfiprintf_r+0x176>
 8004d62:	9b04      	ldr	r3, [sp, #16]
 8004d64:	eba0 000a 	sub.w	r0, r0, sl
 8004d68:	2240      	movs	r2, #64	@ 0x40
 8004d6a:	4082      	lsls	r2, r0
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	3401      	adds	r4, #1
 8004d70:	9304      	str	r3, [sp, #16]
 8004d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d76:	4829      	ldr	r0, [pc, #164]	@ (8004e1c <_vfiprintf_r+0x220>)
 8004d78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d7c:	2206      	movs	r2, #6
 8004d7e:	f7fb fa5f 	bl	8000240 <memchr>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d03f      	beq.n	8004e06 <_vfiprintf_r+0x20a>
 8004d86:	4b26      	ldr	r3, [pc, #152]	@ (8004e20 <_vfiprintf_r+0x224>)
 8004d88:	bb1b      	cbnz	r3, 8004dd2 <_vfiprintf_r+0x1d6>
 8004d8a:	9b03      	ldr	r3, [sp, #12]
 8004d8c:	3307      	adds	r3, #7
 8004d8e:	f023 0307 	bic.w	r3, r3, #7
 8004d92:	3308      	adds	r3, #8
 8004d94:	9303      	str	r3, [sp, #12]
 8004d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d98:	443b      	add	r3, r7
 8004d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d9c:	e76a      	b.n	8004c74 <_vfiprintf_r+0x78>
 8004d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004da2:	460c      	mov	r4, r1
 8004da4:	2001      	movs	r0, #1
 8004da6:	e7a8      	b.n	8004cfa <_vfiprintf_r+0xfe>
 8004da8:	2300      	movs	r3, #0
 8004daa:	3401      	adds	r4, #1
 8004dac:	9305      	str	r3, [sp, #20]
 8004dae:	4619      	mov	r1, r3
 8004db0:	f04f 0c0a 	mov.w	ip, #10
 8004db4:	4620      	mov	r0, r4
 8004db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dba:	3a30      	subs	r2, #48	@ 0x30
 8004dbc:	2a09      	cmp	r2, #9
 8004dbe:	d903      	bls.n	8004dc8 <_vfiprintf_r+0x1cc>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0c6      	beq.n	8004d52 <_vfiprintf_r+0x156>
 8004dc4:	9105      	str	r1, [sp, #20]
 8004dc6:	e7c4      	b.n	8004d52 <_vfiprintf_r+0x156>
 8004dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dcc:	4604      	mov	r4, r0
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e7f0      	b.n	8004db4 <_vfiprintf_r+0x1b8>
 8004dd2:	ab03      	add	r3, sp, #12
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	462a      	mov	r2, r5
 8004dd8:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <_vfiprintf_r+0x228>)
 8004dda:	a904      	add	r1, sp, #16
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f3af 8000 	nop.w
 8004de2:	4607      	mov	r7, r0
 8004de4:	1c78      	adds	r0, r7, #1
 8004de6:	d1d6      	bne.n	8004d96 <_vfiprintf_r+0x19a>
 8004de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dea:	07d9      	lsls	r1, r3, #31
 8004dec:	d405      	bmi.n	8004dfa <_vfiprintf_r+0x1fe>
 8004dee:	89ab      	ldrh	r3, [r5, #12]
 8004df0:	059a      	lsls	r2, r3, #22
 8004df2:	d402      	bmi.n	8004dfa <_vfiprintf_r+0x1fe>
 8004df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004df6:	f7ff fc77 	bl	80046e8 <__retarget_lock_release_recursive>
 8004dfa:	89ab      	ldrh	r3, [r5, #12]
 8004dfc:	065b      	lsls	r3, r3, #25
 8004dfe:	f53f af1f 	bmi.w	8004c40 <_vfiprintf_r+0x44>
 8004e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e04:	e71e      	b.n	8004c44 <_vfiprintf_r+0x48>
 8004e06:	ab03      	add	r3, sp, #12
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	462a      	mov	r2, r5
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <_vfiprintf_r+0x228>)
 8004e0e:	a904      	add	r1, sp, #16
 8004e10:	4630      	mov	r0, r6
 8004e12:	f000 f879 	bl	8004f08 <_printf_i>
 8004e16:	e7e4      	b.n	8004de2 <_vfiprintf_r+0x1e6>
 8004e18:	08005820 	.word	0x08005820
 8004e1c:	0800582a 	.word	0x0800582a
 8004e20:	00000000 	.word	0x00000000
 8004e24:	08004bd7 	.word	0x08004bd7
 8004e28:	08005826 	.word	0x08005826

08004e2c <_printf_common>:
 8004e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	4616      	mov	r6, r2
 8004e32:	4698      	mov	r8, r3
 8004e34:	688a      	ldr	r2, [r1, #8]
 8004e36:	690b      	ldr	r3, [r1, #16]
 8004e38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	bfb8      	it	lt
 8004e40:	4613      	movlt	r3, r2
 8004e42:	6033      	str	r3, [r6, #0]
 8004e44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e48:	4607      	mov	r7, r0
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	b10a      	cbz	r2, 8004e52 <_printf_common+0x26>
 8004e4e:	3301      	adds	r3, #1
 8004e50:	6033      	str	r3, [r6, #0]
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	0699      	lsls	r1, r3, #26
 8004e56:	bf42      	ittt	mi
 8004e58:	6833      	ldrmi	r3, [r6, #0]
 8004e5a:	3302      	addmi	r3, #2
 8004e5c:	6033      	strmi	r3, [r6, #0]
 8004e5e:	6825      	ldr	r5, [r4, #0]
 8004e60:	f015 0506 	ands.w	r5, r5, #6
 8004e64:	d106      	bne.n	8004e74 <_printf_common+0x48>
 8004e66:	f104 0a19 	add.w	sl, r4, #25
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	6832      	ldr	r2, [r6, #0]
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	42ab      	cmp	r3, r5
 8004e72:	dc26      	bgt.n	8004ec2 <_printf_common+0x96>
 8004e74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e78:	6822      	ldr	r2, [r4, #0]
 8004e7a:	3b00      	subs	r3, #0
 8004e7c:	bf18      	it	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	0692      	lsls	r2, r2, #26
 8004e82:	d42b      	bmi.n	8004edc <_printf_common+0xb0>
 8004e84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e88:	4641      	mov	r1, r8
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	47c8      	blx	r9
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d01e      	beq.n	8004ed0 <_printf_common+0xa4>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	6922      	ldr	r2, [r4, #16]
 8004e96:	f003 0306 	and.w	r3, r3, #6
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	bf02      	ittt	eq
 8004e9e:	68e5      	ldreq	r5, [r4, #12]
 8004ea0:	6833      	ldreq	r3, [r6, #0]
 8004ea2:	1aed      	subeq	r5, r5, r3
 8004ea4:	68a3      	ldr	r3, [r4, #8]
 8004ea6:	bf0c      	ite	eq
 8004ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004eac:	2500      	movne	r5, #0
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	bfc4      	itt	gt
 8004eb2:	1a9b      	subgt	r3, r3, r2
 8004eb4:	18ed      	addgt	r5, r5, r3
 8004eb6:	2600      	movs	r6, #0
 8004eb8:	341a      	adds	r4, #26
 8004eba:	42b5      	cmp	r5, r6
 8004ebc:	d11a      	bne.n	8004ef4 <_printf_common+0xc8>
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	e008      	b.n	8004ed4 <_printf_common+0xa8>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4652      	mov	r2, sl
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	4638      	mov	r0, r7
 8004eca:	47c8      	blx	r9
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d103      	bne.n	8004ed8 <_printf_common+0xac>
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed8:	3501      	adds	r5, #1
 8004eda:	e7c6      	b.n	8004e6a <_printf_common+0x3e>
 8004edc:	18e1      	adds	r1, r4, r3
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	2030      	movs	r0, #48	@ 0x30
 8004ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ee6:	4422      	add	r2, r4
 8004ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	e7c7      	b.n	8004e84 <_printf_common+0x58>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	4641      	mov	r1, r8
 8004efa:	4638      	mov	r0, r7
 8004efc:	47c8      	blx	r9
 8004efe:	3001      	adds	r0, #1
 8004f00:	d0e6      	beq.n	8004ed0 <_printf_common+0xa4>
 8004f02:	3601      	adds	r6, #1
 8004f04:	e7d9      	b.n	8004eba <_printf_common+0x8e>
	...

08004f08 <_printf_i>:
 8004f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	7e0f      	ldrb	r7, [r1, #24]
 8004f0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f10:	2f78      	cmp	r7, #120	@ 0x78
 8004f12:	4691      	mov	r9, r2
 8004f14:	4680      	mov	r8, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	469a      	mov	sl, r3
 8004f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f1e:	d807      	bhi.n	8004f30 <_printf_i+0x28>
 8004f20:	2f62      	cmp	r7, #98	@ 0x62
 8004f22:	d80a      	bhi.n	8004f3a <_printf_i+0x32>
 8004f24:	2f00      	cmp	r7, #0
 8004f26:	f000 80d2 	beq.w	80050ce <_printf_i+0x1c6>
 8004f2a:	2f58      	cmp	r7, #88	@ 0x58
 8004f2c:	f000 80b9 	beq.w	80050a2 <_printf_i+0x19a>
 8004f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f38:	e03a      	b.n	8004fb0 <_printf_i+0xa8>
 8004f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f3e:	2b15      	cmp	r3, #21
 8004f40:	d8f6      	bhi.n	8004f30 <_printf_i+0x28>
 8004f42:	a101      	add	r1, pc, #4	@ (adr r1, 8004f48 <_printf_i+0x40>)
 8004f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f48:	08004fa1 	.word	0x08004fa1
 8004f4c:	08004fb5 	.word	0x08004fb5
 8004f50:	08004f31 	.word	0x08004f31
 8004f54:	08004f31 	.word	0x08004f31
 8004f58:	08004f31 	.word	0x08004f31
 8004f5c:	08004f31 	.word	0x08004f31
 8004f60:	08004fb5 	.word	0x08004fb5
 8004f64:	08004f31 	.word	0x08004f31
 8004f68:	08004f31 	.word	0x08004f31
 8004f6c:	08004f31 	.word	0x08004f31
 8004f70:	08004f31 	.word	0x08004f31
 8004f74:	080050b5 	.word	0x080050b5
 8004f78:	08004fdf 	.word	0x08004fdf
 8004f7c:	0800506f 	.word	0x0800506f
 8004f80:	08004f31 	.word	0x08004f31
 8004f84:	08004f31 	.word	0x08004f31
 8004f88:	080050d7 	.word	0x080050d7
 8004f8c:	08004f31 	.word	0x08004f31
 8004f90:	08004fdf 	.word	0x08004fdf
 8004f94:	08004f31 	.word	0x08004f31
 8004f98:	08004f31 	.word	0x08004f31
 8004f9c:	08005077 	.word	0x08005077
 8004fa0:	6833      	ldr	r3, [r6, #0]
 8004fa2:	1d1a      	adds	r2, r3, #4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6032      	str	r2, [r6, #0]
 8004fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e09d      	b.n	80050f0 <_printf_i+0x1e8>
 8004fb4:	6833      	ldr	r3, [r6, #0]
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	1d19      	adds	r1, r3, #4
 8004fba:	6031      	str	r1, [r6, #0]
 8004fbc:	0606      	lsls	r6, r0, #24
 8004fbe:	d501      	bpl.n	8004fc4 <_printf_i+0xbc>
 8004fc0:	681d      	ldr	r5, [r3, #0]
 8004fc2:	e003      	b.n	8004fcc <_printf_i+0xc4>
 8004fc4:	0645      	lsls	r5, r0, #25
 8004fc6:	d5fb      	bpl.n	8004fc0 <_printf_i+0xb8>
 8004fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	da03      	bge.n	8004fd8 <_printf_i+0xd0>
 8004fd0:	232d      	movs	r3, #45	@ 0x2d
 8004fd2:	426d      	negs	r5, r5
 8004fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fd8:	4859      	ldr	r0, [pc, #356]	@ (8005140 <_printf_i+0x238>)
 8004fda:	230a      	movs	r3, #10
 8004fdc:	e011      	b.n	8005002 <_printf_i+0xfa>
 8004fde:	6821      	ldr	r1, [r4, #0]
 8004fe0:	6833      	ldr	r3, [r6, #0]
 8004fe2:	0608      	lsls	r0, r1, #24
 8004fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fe8:	d402      	bmi.n	8004ff0 <_printf_i+0xe8>
 8004fea:	0649      	lsls	r1, r1, #25
 8004fec:	bf48      	it	mi
 8004fee:	b2ad      	uxthmi	r5, r5
 8004ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ff2:	4853      	ldr	r0, [pc, #332]	@ (8005140 <_printf_i+0x238>)
 8004ff4:	6033      	str	r3, [r6, #0]
 8004ff6:	bf14      	ite	ne
 8004ff8:	230a      	movne	r3, #10
 8004ffa:	2308      	moveq	r3, #8
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005002:	6866      	ldr	r6, [r4, #4]
 8005004:	60a6      	str	r6, [r4, #8]
 8005006:	2e00      	cmp	r6, #0
 8005008:	bfa2      	ittt	ge
 800500a:	6821      	ldrge	r1, [r4, #0]
 800500c:	f021 0104 	bicge.w	r1, r1, #4
 8005010:	6021      	strge	r1, [r4, #0]
 8005012:	b90d      	cbnz	r5, 8005018 <_printf_i+0x110>
 8005014:	2e00      	cmp	r6, #0
 8005016:	d04b      	beq.n	80050b0 <_printf_i+0x1a8>
 8005018:	4616      	mov	r6, r2
 800501a:	fbb5 f1f3 	udiv	r1, r5, r3
 800501e:	fb03 5711 	mls	r7, r3, r1, r5
 8005022:	5dc7      	ldrb	r7, [r0, r7]
 8005024:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005028:	462f      	mov	r7, r5
 800502a:	42bb      	cmp	r3, r7
 800502c:	460d      	mov	r5, r1
 800502e:	d9f4      	bls.n	800501a <_printf_i+0x112>
 8005030:	2b08      	cmp	r3, #8
 8005032:	d10b      	bne.n	800504c <_printf_i+0x144>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	07df      	lsls	r7, r3, #31
 8005038:	d508      	bpl.n	800504c <_printf_i+0x144>
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	6861      	ldr	r1, [r4, #4]
 800503e:	4299      	cmp	r1, r3
 8005040:	bfde      	ittt	le
 8005042:	2330      	movle	r3, #48	@ 0x30
 8005044:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005048:	f106 36ff 	addle.w	r6, r6, #4294967295
 800504c:	1b92      	subs	r2, r2, r6
 800504e:	6122      	str	r2, [r4, #16]
 8005050:	f8cd a000 	str.w	sl, [sp]
 8005054:	464b      	mov	r3, r9
 8005056:	aa03      	add	r2, sp, #12
 8005058:	4621      	mov	r1, r4
 800505a:	4640      	mov	r0, r8
 800505c:	f7ff fee6 	bl	8004e2c <_printf_common>
 8005060:	3001      	adds	r0, #1
 8005062:	d14a      	bne.n	80050fa <_printf_i+0x1f2>
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	b004      	add	sp, #16
 800506a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	f043 0320 	orr.w	r3, r3, #32
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	4833      	ldr	r0, [pc, #204]	@ (8005144 <_printf_i+0x23c>)
 8005078:	2778      	movs	r7, #120	@ 0x78
 800507a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	6831      	ldr	r1, [r6, #0]
 8005082:	061f      	lsls	r7, r3, #24
 8005084:	f851 5b04 	ldr.w	r5, [r1], #4
 8005088:	d402      	bmi.n	8005090 <_printf_i+0x188>
 800508a:	065f      	lsls	r7, r3, #25
 800508c:	bf48      	it	mi
 800508e:	b2ad      	uxthmi	r5, r5
 8005090:	6031      	str	r1, [r6, #0]
 8005092:	07d9      	lsls	r1, r3, #31
 8005094:	bf44      	itt	mi
 8005096:	f043 0320 	orrmi.w	r3, r3, #32
 800509a:	6023      	strmi	r3, [r4, #0]
 800509c:	b11d      	cbz	r5, 80050a6 <_printf_i+0x19e>
 800509e:	2310      	movs	r3, #16
 80050a0:	e7ac      	b.n	8004ffc <_printf_i+0xf4>
 80050a2:	4827      	ldr	r0, [pc, #156]	@ (8005140 <_printf_i+0x238>)
 80050a4:	e7e9      	b.n	800507a <_printf_i+0x172>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	f023 0320 	bic.w	r3, r3, #32
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	e7f6      	b.n	800509e <_printf_i+0x196>
 80050b0:	4616      	mov	r6, r2
 80050b2:	e7bd      	b.n	8005030 <_printf_i+0x128>
 80050b4:	6833      	ldr	r3, [r6, #0]
 80050b6:	6825      	ldr	r5, [r4, #0]
 80050b8:	6961      	ldr	r1, [r4, #20]
 80050ba:	1d18      	adds	r0, r3, #4
 80050bc:	6030      	str	r0, [r6, #0]
 80050be:	062e      	lsls	r6, r5, #24
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	d501      	bpl.n	80050c8 <_printf_i+0x1c0>
 80050c4:	6019      	str	r1, [r3, #0]
 80050c6:	e002      	b.n	80050ce <_printf_i+0x1c6>
 80050c8:	0668      	lsls	r0, r5, #25
 80050ca:	d5fb      	bpl.n	80050c4 <_printf_i+0x1bc>
 80050cc:	8019      	strh	r1, [r3, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	4616      	mov	r6, r2
 80050d4:	e7bc      	b.n	8005050 <_printf_i+0x148>
 80050d6:	6833      	ldr	r3, [r6, #0]
 80050d8:	1d1a      	adds	r2, r3, #4
 80050da:	6032      	str	r2, [r6, #0]
 80050dc:	681e      	ldr	r6, [r3, #0]
 80050de:	6862      	ldr	r2, [r4, #4]
 80050e0:	2100      	movs	r1, #0
 80050e2:	4630      	mov	r0, r6
 80050e4:	f7fb f8ac 	bl	8000240 <memchr>
 80050e8:	b108      	cbz	r0, 80050ee <_printf_i+0x1e6>
 80050ea:	1b80      	subs	r0, r0, r6
 80050ec:	6060      	str	r0, [r4, #4]
 80050ee:	6863      	ldr	r3, [r4, #4]
 80050f0:	6123      	str	r3, [r4, #16]
 80050f2:	2300      	movs	r3, #0
 80050f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050f8:	e7aa      	b.n	8005050 <_printf_i+0x148>
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	4632      	mov	r2, r6
 80050fe:	4649      	mov	r1, r9
 8005100:	4640      	mov	r0, r8
 8005102:	47d0      	blx	sl
 8005104:	3001      	adds	r0, #1
 8005106:	d0ad      	beq.n	8005064 <_printf_i+0x15c>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	079b      	lsls	r3, r3, #30
 800510c:	d413      	bmi.n	8005136 <_printf_i+0x22e>
 800510e:	68e0      	ldr	r0, [r4, #12]
 8005110:	9b03      	ldr	r3, [sp, #12]
 8005112:	4298      	cmp	r0, r3
 8005114:	bfb8      	it	lt
 8005116:	4618      	movlt	r0, r3
 8005118:	e7a6      	b.n	8005068 <_printf_i+0x160>
 800511a:	2301      	movs	r3, #1
 800511c:	4632      	mov	r2, r6
 800511e:	4649      	mov	r1, r9
 8005120:	4640      	mov	r0, r8
 8005122:	47d0      	blx	sl
 8005124:	3001      	adds	r0, #1
 8005126:	d09d      	beq.n	8005064 <_printf_i+0x15c>
 8005128:	3501      	adds	r5, #1
 800512a:	68e3      	ldr	r3, [r4, #12]
 800512c:	9903      	ldr	r1, [sp, #12]
 800512e:	1a5b      	subs	r3, r3, r1
 8005130:	42ab      	cmp	r3, r5
 8005132:	dcf2      	bgt.n	800511a <_printf_i+0x212>
 8005134:	e7eb      	b.n	800510e <_printf_i+0x206>
 8005136:	2500      	movs	r5, #0
 8005138:	f104 0619 	add.w	r6, r4, #25
 800513c:	e7f5      	b.n	800512a <_printf_i+0x222>
 800513e:	bf00      	nop
 8005140:	08005831 	.word	0x08005831
 8005144:	08005842 	.word	0x08005842

08005148 <__sflush_r>:
 8005148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005150:	0716      	lsls	r6, r2, #28
 8005152:	4605      	mov	r5, r0
 8005154:	460c      	mov	r4, r1
 8005156:	d454      	bmi.n	8005202 <__sflush_r+0xba>
 8005158:	684b      	ldr	r3, [r1, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	dc02      	bgt.n	8005164 <__sflush_r+0x1c>
 800515e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	dd48      	ble.n	80051f6 <__sflush_r+0xae>
 8005164:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005166:	2e00      	cmp	r6, #0
 8005168:	d045      	beq.n	80051f6 <__sflush_r+0xae>
 800516a:	2300      	movs	r3, #0
 800516c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005170:	682f      	ldr	r7, [r5, #0]
 8005172:	6a21      	ldr	r1, [r4, #32]
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	d030      	beq.n	80051da <__sflush_r+0x92>
 8005178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	0759      	lsls	r1, r3, #29
 800517e:	d505      	bpl.n	800518c <__sflush_r+0x44>
 8005180:	6863      	ldr	r3, [r4, #4]
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005186:	b10b      	cbz	r3, 800518c <__sflush_r+0x44>
 8005188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800518a:	1ad2      	subs	r2, r2, r3
 800518c:	2300      	movs	r3, #0
 800518e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005190:	6a21      	ldr	r1, [r4, #32]
 8005192:	4628      	mov	r0, r5
 8005194:	47b0      	blx	r6
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	d106      	bne.n	80051aa <__sflush_r+0x62>
 800519c:	6829      	ldr	r1, [r5, #0]
 800519e:	291d      	cmp	r1, #29
 80051a0:	d82b      	bhi.n	80051fa <__sflush_r+0xb2>
 80051a2:	4a2a      	ldr	r2, [pc, #168]	@ (800524c <__sflush_r+0x104>)
 80051a4:	410a      	asrs	r2, r1
 80051a6:	07d6      	lsls	r6, r2, #31
 80051a8:	d427      	bmi.n	80051fa <__sflush_r+0xb2>
 80051aa:	2200      	movs	r2, #0
 80051ac:	6062      	str	r2, [r4, #4]
 80051ae:	04d9      	lsls	r1, r3, #19
 80051b0:	6922      	ldr	r2, [r4, #16]
 80051b2:	6022      	str	r2, [r4, #0]
 80051b4:	d504      	bpl.n	80051c0 <__sflush_r+0x78>
 80051b6:	1c42      	adds	r2, r0, #1
 80051b8:	d101      	bne.n	80051be <__sflush_r+0x76>
 80051ba:	682b      	ldr	r3, [r5, #0]
 80051bc:	b903      	cbnz	r3, 80051c0 <__sflush_r+0x78>
 80051be:	6560      	str	r0, [r4, #84]	@ 0x54
 80051c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051c2:	602f      	str	r7, [r5, #0]
 80051c4:	b1b9      	cbz	r1, 80051f6 <__sflush_r+0xae>
 80051c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051ca:	4299      	cmp	r1, r3
 80051cc:	d002      	beq.n	80051d4 <__sflush_r+0x8c>
 80051ce:	4628      	mov	r0, r5
 80051d0:	f7ff fa9a 	bl	8004708 <_free_r>
 80051d4:	2300      	movs	r3, #0
 80051d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80051d8:	e00d      	b.n	80051f6 <__sflush_r+0xae>
 80051da:	2301      	movs	r3, #1
 80051dc:	4628      	mov	r0, r5
 80051de:	47b0      	blx	r6
 80051e0:	4602      	mov	r2, r0
 80051e2:	1c50      	adds	r0, r2, #1
 80051e4:	d1c9      	bne.n	800517a <__sflush_r+0x32>
 80051e6:	682b      	ldr	r3, [r5, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0c6      	beq.n	800517a <__sflush_r+0x32>
 80051ec:	2b1d      	cmp	r3, #29
 80051ee:	d001      	beq.n	80051f4 <__sflush_r+0xac>
 80051f0:	2b16      	cmp	r3, #22
 80051f2:	d11e      	bne.n	8005232 <__sflush_r+0xea>
 80051f4:	602f      	str	r7, [r5, #0]
 80051f6:	2000      	movs	r0, #0
 80051f8:	e022      	b.n	8005240 <__sflush_r+0xf8>
 80051fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051fe:	b21b      	sxth	r3, r3
 8005200:	e01b      	b.n	800523a <__sflush_r+0xf2>
 8005202:	690f      	ldr	r7, [r1, #16]
 8005204:	2f00      	cmp	r7, #0
 8005206:	d0f6      	beq.n	80051f6 <__sflush_r+0xae>
 8005208:	0793      	lsls	r3, r2, #30
 800520a:	680e      	ldr	r6, [r1, #0]
 800520c:	bf08      	it	eq
 800520e:	694b      	ldreq	r3, [r1, #20]
 8005210:	600f      	str	r7, [r1, #0]
 8005212:	bf18      	it	ne
 8005214:	2300      	movne	r3, #0
 8005216:	eba6 0807 	sub.w	r8, r6, r7
 800521a:	608b      	str	r3, [r1, #8]
 800521c:	f1b8 0f00 	cmp.w	r8, #0
 8005220:	dde9      	ble.n	80051f6 <__sflush_r+0xae>
 8005222:	6a21      	ldr	r1, [r4, #32]
 8005224:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005226:	4643      	mov	r3, r8
 8005228:	463a      	mov	r2, r7
 800522a:	4628      	mov	r0, r5
 800522c:	47b0      	blx	r6
 800522e:	2800      	cmp	r0, #0
 8005230:	dc08      	bgt.n	8005244 <__sflush_r+0xfc>
 8005232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005244:	4407      	add	r7, r0
 8005246:	eba8 0800 	sub.w	r8, r8, r0
 800524a:	e7e7      	b.n	800521c <__sflush_r+0xd4>
 800524c:	dfbffffe 	.word	0xdfbffffe

08005250 <_fflush_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	690b      	ldr	r3, [r1, #16]
 8005254:	4605      	mov	r5, r0
 8005256:	460c      	mov	r4, r1
 8005258:	b913      	cbnz	r3, 8005260 <_fflush_r+0x10>
 800525a:	2500      	movs	r5, #0
 800525c:	4628      	mov	r0, r5
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	b118      	cbz	r0, 800526a <_fflush_r+0x1a>
 8005262:	6a03      	ldr	r3, [r0, #32]
 8005264:	b90b      	cbnz	r3, 800526a <_fflush_r+0x1a>
 8005266:	f7ff f8cf 	bl	8004408 <__sinit>
 800526a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f3      	beq.n	800525a <_fflush_r+0xa>
 8005272:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005274:	07d0      	lsls	r0, r2, #31
 8005276:	d404      	bmi.n	8005282 <_fflush_r+0x32>
 8005278:	0599      	lsls	r1, r3, #22
 800527a:	d402      	bmi.n	8005282 <_fflush_r+0x32>
 800527c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800527e:	f7ff fa32 	bl	80046e6 <__retarget_lock_acquire_recursive>
 8005282:	4628      	mov	r0, r5
 8005284:	4621      	mov	r1, r4
 8005286:	f7ff ff5f 	bl	8005148 <__sflush_r>
 800528a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800528c:	07da      	lsls	r2, r3, #31
 800528e:	4605      	mov	r5, r0
 8005290:	d4e4      	bmi.n	800525c <_fflush_r+0xc>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	059b      	lsls	r3, r3, #22
 8005296:	d4e1      	bmi.n	800525c <_fflush_r+0xc>
 8005298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800529a:	f7ff fa25 	bl	80046e8 <__retarget_lock_release_recursive>
 800529e:	e7dd      	b.n	800525c <_fflush_r+0xc>

080052a0 <__swbuf_r>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	460e      	mov	r6, r1
 80052a4:	4614      	mov	r4, r2
 80052a6:	4605      	mov	r5, r0
 80052a8:	b118      	cbz	r0, 80052b2 <__swbuf_r+0x12>
 80052aa:	6a03      	ldr	r3, [r0, #32]
 80052ac:	b90b      	cbnz	r3, 80052b2 <__swbuf_r+0x12>
 80052ae:	f7ff f8ab 	bl	8004408 <__sinit>
 80052b2:	69a3      	ldr	r3, [r4, #24]
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	071a      	lsls	r2, r3, #28
 80052ba:	d501      	bpl.n	80052c0 <__swbuf_r+0x20>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	b943      	cbnz	r3, 80052d2 <__swbuf_r+0x32>
 80052c0:	4621      	mov	r1, r4
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 f82a 	bl	800531c <__swsetup_r>
 80052c8:	b118      	cbz	r0, 80052d2 <__swbuf_r+0x32>
 80052ca:	f04f 37ff 	mov.w	r7, #4294967295
 80052ce:	4638      	mov	r0, r7
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	6922      	ldr	r2, [r4, #16]
 80052d6:	1a98      	subs	r0, r3, r2
 80052d8:	6963      	ldr	r3, [r4, #20]
 80052da:	b2f6      	uxtb	r6, r6
 80052dc:	4283      	cmp	r3, r0
 80052de:	4637      	mov	r7, r6
 80052e0:	dc05      	bgt.n	80052ee <__swbuf_r+0x4e>
 80052e2:	4621      	mov	r1, r4
 80052e4:	4628      	mov	r0, r5
 80052e6:	f7ff ffb3 	bl	8005250 <_fflush_r>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d1ed      	bne.n	80052ca <__swbuf_r+0x2a>
 80052ee:	68a3      	ldr	r3, [r4, #8]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	60a3      	str	r3, [r4, #8]
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	6022      	str	r2, [r4, #0]
 80052fa:	701e      	strb	r6, [r3, #0]
 80052fc:	6962      	ldr	r2, [r4, #20]
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	429a      	cmp	r2, r3
 8005302:	d004      	beq.n	800530e <__swbuf_r+0x6e>
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	07db      	lsls	r3, r3, #31
 8005308:	d5e1      	bpl.n	80052ce <__swbuf_r+0x2e>
 800530a:	2e0a      	cmp	r6, #10
 800530c:	d1df      	bne.n	80052ce <__swbuf_r+0x2e>
 800530e:	4621      	mov	r1, r4
 8005310:	4628      	mov	r0, r5
 8005312:	f7ff ff9d 	bl	8005250 <_fflush_r>
 8005316:	2800      	cmp	r0, #0
 8005318:	d0d9      	beq.n	80052ce <__swbuf_r+0x2e>
 800531a:	e7d6      	b.n	80052ca <__swbuf_r+0x2a>

0800531c <__swsetup_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4b29      	ldr	r3, [pc, #164]	@ (80053c4 <__swsetup_r+0xa8>)
 8005320:	4605      	mov	r5, r0
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	460c      	mov	r4, r1
 8005326:	b118      	cbz	r0, 8005330 <__swsetup_r+0x14>
 8005328:	6a03      	ldr	r3, [r0, #32]
 800532a:	b90b      	cbnz	r3, 8005330 <__swsetup_r+0x14>
 800532c:	f7ff f86c 	bl	8004408 <__sinit>
 8005330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005334:	0719      	lsls	r1, r3, #28
 8005336:	d422      	bmi.n	800537e <__swsetup_r+0x62>
 8005338:	06da      	lsls	r2, r3, #27
 800533a:	d407      	bmi.n	800534c <__swsetup_r+0x30>
 800533c:	2209      	movs	r2, #9
 800533e:	602a      	str	r2, [r5, #0]
 8005340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005344:	81a3      	strh	r3, [r4, #12]
 8005346:	f04f 30ff 	mov.w	r0, #4294967295
 800534a:	e033      	b.n	80053b4 <__swsetup_r+0x98>
 800534c:	0758      	lsls	r0, r3, #29
 800534e:	d512      	bpl.n	8005376 <__swsetup_r+0x5a>
 8005350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005352:	b141      	cbz	r1, 8005366 <__swsetup_r+0x4a>
 8005354:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005358:	4299      	cmp	r1, r3
 800535a:	d002      	beq.n	8005362 <__swsetup_r+0x46>
 800535c:	4628      	mov	r0, r5
 800535e:	f7ff f9d3 	bl	8004708 <_free_r>
 8005362:	2300      	movs	r3, #0
 8005364:	6363      	str	r3, [r4, #52]	@ 0x34
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	2300      	movs	r3, #0
 8005370:	6063      	str	r3, [r4, #4]
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	f043 0308 	orr.w	r3, r3, #8
 800537c:	81a3      	strh	r3, [r4, #12]
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	b94b      	cbnz	r3, 8005396 <__swsetup_r+0x7a>
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538c:	d003      	beq.n	8005396 <__swsetup_r+0x7a>
 800538e:	4621      	mov	r1, r4
 8005390:	4628      	mov	r0, r5
 8005392:	f000 f897 	bl	80054c4 <__smakebuf_r>
 8005396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800539a:	f013 0201 	ands.w	r2, r3, #1
 800539e:	d00a      	beq.n	80053b6 <__swsetup_r+0x9a>
 80053a0:	2200      	movs	r2, #0
 80053a2:	60a2      	str	r2, [r4, #8]
 80053a4:	6962      	ldr	r2, [r4, #20]
 80053a6:	4252      	negs	r2, r2
 80053a8:	61a2      	str	r2, [r4, #24]
 80053aa:	6922      	ldr	r2, [r4, #16]
 80053ac:	b942      	cbnz	r2, 80053c0 <__swsetup_r+0xa4>
 80053ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053b2:	d1c5      	bne.n	8005340 <__swsetup_r+0x24>
 80053b4:	bd38      	pop	{r3, r4, r5, pc}
 80053b6:	0799      	lsls	r1, r3, #30
 80053b8:	bf58      	it	pl
 80053ba:	6962      	ldrpl	r2, [r4, #20]
 80053bc:	60a2      	str	r2, [r4, #8]
 80053be:	e7f4      	b.n	80053aa <__swsetup_r+0x8e>
 80053c0:	2000      	movs	r0, #0
 80053c2:	e7f7      	b.n	80053b4 <__swsetup_r+0x98>
 80053c4:	20000018 	.word	0x20000018

080053c8 <memmove>:
 80053c8:	4288      	cmp	r0, r1
 80053ca:	b510      	push	{r4, lr}
 80053cc:	eb01 0402 	add.w	r4, r1, r2
 80053d0:	d902      	bls.n	80053d8 <memmove+0x10>
 80053d2:	4284      	cmp	r4, r0
 80053d4:	4623      	mov	r3, r4
 80053d6:	d807      	bhi.n	80053e8 <memmove+0x20>
 80053d8:	1e43      	subs	r3, r0, #1
 80053da:	42a1      	cmp	r1, r4
 80053dc:	d008      	beq.n	80053f0 <memmove+0x28>
 80053de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053e6:	e7f8      	b.n	80053da <memmove+0x12>
 80053e8:	4402      	add	r2, r0
 80053ea:	4601      	mov	r1, r0
 80053ec:	428a      	cmp	r2, r1
 80053ee:	d100      	bne.n	80053f2 <memmove+0x2a>
 80053f0:	bd10      	pop	{r4, pc}
 80053f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053fa:	e7f7      	b.n	80053ec <memmove+0x24>

080053fc <_sbrk_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d06      	ldr	r5, [pc, #24]	@ (8005418 <_sbrk_r+0x1c>)
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	f7fc fbfe 	bl	8001c08 <_sbrk>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_sbrk_r+0x1a>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_sbrk_r+0x1a>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	20000e90 	.word	0x20000e90

0800541c <_realloc_r>:
 800541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005420:	4680      	mov	r8, r0
 8005422:	4615      	mov	r5, r2
 8005424:	460c      	mov	r4, r1
 8005426:	b921      	cbnz	r1, 8005432 <_realloc_r+0x16>
 8005428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542c:	4611      	mov	r1, r2
 800542e:	f7ff b9d7 	b.w	80047e0 <_malloc_r>
 8005432:	b92a      	cbnz	r2, 8005440 <_realloc_r+0x24>
 8005434:	f7ff f968 	bl	8004708 <_free_r>
 8005438:	2400      	movs	r4, #0
 800543a:	4620      	mov	r0, r4
 800543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005440:	f000 f89e 	bl	8005580 <_malloc_usable_size_r>
 8005444:	4285      	cmp	r5, r0
 8005446:	4606      	mov	r6, r0
 8005448:	d802      	bhi.n	8005450 <_realloc_r+0x34>
 800544a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800544e:	d8f4      	bhi.n	800543a <_realloc_r+0x1e>
 8005450:	4629      	mov	r1, r5
 8005452:	4640      	mov	r0, r8
 8005454:	f7ff f9c4 	bl	80047e0 <_malloc_r>
 8005458:	4607      	mov	r7, r0
 800545a:	2800      	cmp	r0, #0
 800545c:	d0ec      	beq.n	8005438 <_realloc_r+0x1c>
 800545e:	42b5      	cmp	r5, r6
 8005460:	462a      	mov	r2, r5
 8005462:	4621      	mov	r1, r4
 8005464:	bf28      	it	cs
 8005466:	4632      	movcs	r2, r6
 8005468:	f7ff f93f 	bl	80046ea <memcpy>
 800546c:	4621      	mov	r1, r4
 800546e:	4640      	mov	r0, r8
 8005470:	f7ff f94a 	bl	8004708 <_free_r>
 8005474:	463c      	mov	r4, r7
 8005476:	e7e0      	b.n	800543a <_realloc_r+0x1e>

08005478 <__swhatbuf_r>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	460c      	mov	r4, r1
 800547c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005480:	2900      	cmp	r1, #0
 8005482:	b096      	sub	sp, #88	@ 0x58
 8005484:	4615      	mov	r5, r2
 8005486:	461e      	mov	r6, r3
 8005488:	da0d      	bge.n	80054a6 <__swhatbuf_r+0x2e>
 800548a:	89a3      	ldrh	r3, [r4, #12]
 800548c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	bf14      	ite	ne
 8005496:	2340      	movne	r3, #64	@ 0x40
 8005498:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800549c:	2000      	movs	r0, #0
 800549e:	6031      	str	r1, [r6, #0]
 80054a0:	602b      	str	r3, [r5, #0]
 80054a2:	b016      	add	sp, #88	@ 0x58
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	466a      	mov	r2, sp
 80054a8:	f000 f848 	bl	800553c <_fstat_r>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	dbec      	blt.n	800548a <__swhatbuf_r+0x12>
 80054b0:	9901      	ldr	r1, [sp, #4]
 80054b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80054b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80054ba:	4259      	negs	r1, r3
 80054bc:	4159      	adcs	r1, r3
 80054be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054c2:	e7eb      	b.n	800549c <__swhatbuf_r+0x24>

080054c4 <__smakebuf_r>:
 80054c4:	898b      	ldrh	r3, [r1, #12]
 80054c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054c8:	079d      	lsls	r5, r3, #30
 80054ca:	4606      	mov	r6, r0
 80054cc:	460c      	mov	r4, r1
 80054ce:	d507      	bpl.n	80054e0 <__smakebuf_r+0x1c>
 80054d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	6123      	str	r3, [r4, #16]
 80054d8:	2301      	movs	r3, #1
 80054da:	6163      	str	r3, [r4, #20]
 80054dc:	b003      	add	sp, #12
 80054de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e0:	ab01      	add	r3, sp, #4
 80054e2:	466a      	mov	r2, sp
 80054e4:	f7ff ffc8 	bl	8005478 <__swhatbuf_r>
 80054e8:	9f00      	ldr	r7, [sp, #0]
 80054ea:	4605      	mov	r5, r0
 80054ec:	4639      	mov	r1, r7
 80054ee:	4630      	mov	r0, r6
 80054f0:	f7ff f976 	bl	80047e0 <_malloc_r>
 80054f4:	b948      	cbnz	r0, 800550a <__smakebuf_r+0x46>
 80054f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054fa:	059a      	lsls	r2, r3, #22
 80054fc:	d4ee      	bmi.n	80054dc <__smakebuf_r+0x18>
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	f043 0302 	orr.w	r3, r3, #2
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	e7e2      	b.n	80054d0 <__smakebuf_r+0xc>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	6020      	str	r0, [r4, #0]
 800550e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	9b01      	ldr	r3, [sp, #4]
 8005516:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800551a:	b15b      	cbz	r3, 8005534 <__smakebuf_r+0x70>
 800551c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f81d 	bl	8005560 <_isatty_r>
 8005526:	b128      	cbz	r0, 8005534 <__smakebuf_r+0x70>
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	81a3      	strh	r3, [r4, #12]
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	431d      	orrs	r5, r3
 8005538:	81a5      	strh	r5, [r4, #12]
 800553a:	e7cf      	b.n	80054dc <__smakebuf_r+0x18>

0800553c <_fstat_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d07      	ldr	r5, [pc, #28]	@ (800555c <_fstat_r+0x20>)
 8005540:	2300      	movs	r3, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	f7fc fb34 	bl	8001bb6 <_fstat>
 800554e:	1c43      	adds	r3, r0, #1
 8005550:	d102      	bne.n	8005558 <_fstat_r+0x1c>
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	b103      	cbz	r3, 8005558 <_fstat_r+0x1c>
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	bd38      	pop	{r3, r4, r5, pc}
 800555a:	bf00      	nop
 800555c:	20000e90 	.word	0x20000e90

08005560 <_isatty_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d06      	ldr	r5, [pc, #24]	@ (800557c <_isatty_r+0x1c>)
 8005564:	2300      	movs	r3, #0
 8005566:	4604      	mov	r4, r0
 8005568:	4608      	mov	r0, r1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	f7fc fb33 	bl	8001bd6 <_isatty>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_isatty_r+0x1a>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_isatty_r+0x1a>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000e90 	.word	0x20000e90

08005580 <_malloc_usable_size_r>:
 8005580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005584:	1f18      	subs	r0, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	bfbc      	itt	lt
 800558a:	580b      	ldrlt	r3, [r1, r0]
 800558c:	18c0      	addlt	r0, r0, r3
 800558e:	4770      	bx	lr

08005590 <_init>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr

0800559c <_fini>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr

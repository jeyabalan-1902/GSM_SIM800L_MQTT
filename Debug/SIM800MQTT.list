
SIM800MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08009780  08009780  0000a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e24  08009e24  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  08009e24  08009e24  0000ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e2c  08009e2c  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e2c  08009e2c  0000ae2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e30  08009e30  0000ae30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009e34  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013d48  20000070  08009ea4  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013db8  08009ea4  0000bdb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197f2  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004547  00000000  00000000  00024892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00028de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001203  00000000  00000000  0002a520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cbb  00000000  00000000  0002b723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d367  00000000  00000000  000513de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de2d0  00000000  00000000  0006e745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ca15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006944  00000000  00000000  0014ca58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0015339c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009768 	.word	0x08009768

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08009768 	.word	0x08009768

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	int len = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7a1b      	ldrb	r3, [r3, #8]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d102      	bne.n	80005ea <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80005e4:	230c      	movs	r3, #12
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e005      	b.n	80005f6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7a1b      	ldrb	r3, [r3, #8]
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d101      	bne.n	80005f6 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80005f2:	230a      	movs	r3, #10
 80005f4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	330c      	adds	r3, #12
 80005fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005fe:	f000 fb5e 	bl	8000cbe <MQTTstrlen>
 8000602:	4603      	mov	r3, r0
 8000604:	3302      	adds	r3, #2
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7edb      	ldrb	r3, [r3, #27]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d013      	beq.n	800063c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3324      	adds	r3, #36	@ 0x24
 8000618:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800061c:	f000 fb4f 	bl	8000cbe <MQTTstrlen>
 8000620:	4603      	mov	r3, r0
 8000622:	1c9c      	adds	r4, r3, #2
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3330      	adds	r3, #48	@ 0x30
 8000628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800062c:	f000 fb47 	bl	8000cbe <MQTTstrlen>
 8000630:	4603      	mov	r3, r0
 8000632:	4423      	add	r3, r4
 8000634:	3302      	adds	r3, #2
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	4413      	add	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <MQTTSerialize_connectLength+0x7c>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00a      	beq.n	8000662 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3340      	adds	r3, #64	@ 0x40
 8000650:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000654:	f000 fb33 	bl	8000cbe <MQTTstrlen>
 8000658:	4603      	mov	r3, r0
 800065a:	3302      	adds	r3, #2
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	2b00      	cmp	r3, #0
 8000668:	d103      	bne.n	8000672 <MQTTSerialize_connectLength+0xa2>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00a      	beq.n	8000688 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	334c      	adds	r3, #76	@ 0x4c
 8000676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800067a:	f000 fb20 	bl	8000cbe <MQTTstrlen>
 800067e:	4603      	mov	r3, r0
 8000680:	3302      	adds	r3, #2
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000688:	68fb      	ldr	r3, [r7, #12]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
	...

08000694 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
	int len = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff8a 	bl	80005d0 <MQTTSerialize_connectLength>
 80006bc:	6238      	str	r0, [r7, #32]
 80006be:	6a38      	ldr	r0, [r7, #32]
 80006c0:	f000 f9b2 	bl	8000a28 <MQTTPacket_len>
 80006c4:	4602      	mov	r2, r0
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	da03      	bge.n	80006d4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80006cc:	f06f 0301 	mvn.w	r3, #1
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 80006d2:	e0c2      	b.n	800085a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80006d8:	7e3b      	ldrb	r3, [r7, #24]
 80006da:	2201      	movs	r2, #1
 80006dc:	f362 1307 	bfi	r3, r2, #4, #4
 80006e0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80006e2:	7e3a      	ldrb	r2, [r7, #24]
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fa2b 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	6a39      	ldr	r1, [r7, #32]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f92b 	bl	8000950 <MQTTPacket_encode>
 80006fa:	4602      	mov	r2, r0
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	4413      	add	r3, r2
 8000700:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7a1b      	ldrb	r3, [r3, #8]
 8000706:	2b04      	cmp	r3, #4
 8000708:	d10c      	bne.n	8000724 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4955      	ldr	r1, [pc, #340]	@ (8000864 <MQTTSerialize_connect+0x1d0>)
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fa56 	bl	8000bc2 <writeCString>
		writeChar(&ptr, (char) 4);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2104      	movs	r1, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fa12 	bl	8000b46 <writeChar>
 8000722:	e00b      	b.n	800073c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	494f      	ldr	r1, [pc, #316]	@ (8000868 <MQTTSerialize_connect+0x1d4>)
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fa49 	bl	8000bc2 <writeCString>
		writeChar(&ptr, (char) 3);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2103      	movs	r1, #3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fa05 	bl	8000b46 <writeChar>
	}

	flags.all = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7e9b      	ldrb	r3, [r3, #26]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	7d3b      	ldrb	r3, [r7, #20]
 800074c:	f362 0341 	bfi	r3, r2, #1, #1
 8000750:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7edb      	ldrb	r3, [r3, #27]
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf14      	ite	ne
 800075a:	2301      	movne	r3, #1
 800075c:	2300      	moveq	r3, #0
 800075e:	b2da      	uxtb	r2, r3
 8000760:	7d3b      	ldrb	r3, [r7, #20]
 8000762:	f362 0382 	bfi	r3, r2, #2, #1
 8000766:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000768:	7d3b      	ldrb	r3, [r7, #20]
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800077a:	f003 0303 	and.w	r3, r3, #3
 800077e:	b2da      	uxtb	r2, r3
 8000780:	7d3b      	ldrb	r3, [r7, #20]
 8000782:	f362 03c4 	bfi	r3, r2, #3, #2
 8000786:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	7d3b      	ldrb	r3, [r7, #20]
 8000796:	f362 1345 	bfi	r3, r2, #5, #1
 800079a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d103      	bne.n	80007ac <MQTTSerialize_connect+0x118>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80007ac:	7d3b      	ldrb	r3, [r7, #20]
 80007ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d103      	bne.n	80007c4 <MQTTSerialize_connect+0x130>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80007c4:	7d3b      	ldrb	r3, [r7, #20]
 80007c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ca:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80007cc:	7d3a      	ldrb	r2, [r7, #20]
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f9b6 	bl	8000b46 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	8b1b      	ldrh	r3, [r3, #24]
 80007de:	461a      	mov	r2, r3
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4611      	mov	r1, r2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f9c2 	bl	8000b70 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f107 001c 	add.w	r0, r7, #28
 80007f2:	330c      	adds	r3, #12
 80007f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f6:	f000 fa03 	bl	8000c00 <writeMQTTString>
	if (options->willFlag)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7edb      	ldrb	r3, [r3, #27]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00d      	beq.n	800081e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f107 001c 	add.w	r0, r7, #28
 8000808:	3324      	adds	r3, #36	@ 0x24
 800080a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800080c:	f000 f9f8 	bl	8000c00 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f107 001c 	add.w	r0, r7, #28
 8000816:	3330      	adds	r3, #48	@ 0x30
 8000818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800081a:	f000 f9f1 	bl	8000c00 <writeMQTTString>
	}
	if (flags.bits.username)
 800081e:	7d3b      	ldrb	r3, [r7, #20]
 8000820:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f107 001c 	add.w	r0, r7, #28
 8000830:	3340      	adds	r3, #64	@ 0x40
 8000832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000834:	f000 f9e4 	bl	8000c00 <writeMQTTString>
	if (flags.bits.password)
 8000838:	7d3b      	ldrb	r3, [r7, #20]
 800083a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d006      	beq.n	8000852 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f107 001c 	add.w	r0, r7, #28
 800084a:	334c      	adds	r3, #76	@ 0x4c
 800084c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084e:	f000 f9d7 	bl	8000c00 <writeMQTTString>

	rc = ptr - buf;
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800085c:	4618      	mov	r0, r3
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	08009780 	.word	0x08009780
 8000868:	08009788 	.word	0x08009788

0800086c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800087e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000880:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f943 	bl	8000b1e <readChar>
 8000898:	4603      	mov	r3, r0
 800089a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800089c:	7f3b      	ldrb	r3, [r7, #28]
 800089e:	f023 030f 	bic.w	r3, r3, #15
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b30      	cmp	r3, #48	@ 0x30
 80008a6:	d14b      	bne.n	8000940 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 80008a8:	7f3b      	ldrb	r3, [r7, #28]
 80008aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80008b6:	7f3b      	ldrb	r3, [r7, #28]
 80008b8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80008c4:	7f3b      	ldrb	r3, [r7, #28]
 80008c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	f107 0214 	add.w	r2, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f8ee 	bl	8000abc <MQTTPacket_decodeBuf>
 80008e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80008e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	4413      	add	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	4413      	add	r3, r2
 80008f0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	6a3a      	ldr	r2, [r7, #32]
 80008f8:	4619      	mov	r1, r3
 80008fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008fc:	f000 f9ae 	bl	8000c5c <readMQTTLenString>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01e      	beq.n	8000944 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	6a3a      	ldr	r2, [r7, #32]
 800090a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800090c:	2b00      	cmp	r3, #0
 800090e:	db19      	blt.n	8000944 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dd08      	ble.n	800092a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f8e3 	bl	8000ae8 <readInt>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	6a3a      	ldr	r2, [r7, #32]
 800092e:	1ad2      	subs	r2, r2, r3
 8000930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000932:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000938:	601a      	str	r2, [r3, #0]
	rc = 1;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
 800093e:	e002      	b.n	8000946 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000944:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000948:	4618      	mov	r0, r3
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	425a      	negs	r2, r3
 8000962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000966:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800096a:	bf58      	it	pl
 800096c:	4253      	negpl	r3, r2
 800096e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da00      	bge.n	8000978 <MQTTPacket_encode+0x28>
 8000976:	337f      	adds	r3, #127	@ 0x7f
 8000978:	11db      	asrs	r3, r3, #7
 800097a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	dd03      	ble.n	800098a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000982:	7afb      	ldrb	r3, [r7, #11]
 8000984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000988:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	60fa      	str	r2, [r7, #12]
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	7afa      	ldrb	r2, [r7, #11]
 8000998:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dcde      	bgt.n	800095e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80009a0:	68fb      	ldr	r3, [r7, #12]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
	int len = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	3301      	adds	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	dd03      	ble.n	80009e0 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	60fb      	str	r3, [r7, #12]
			goto exit;
 80009de:	e01d      	b.n	8000a1c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80009e0:	f107 020b 	add.w	r2, r7, #11
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2101      	movs	r1, #1
 80009e8:	4610      	mov	r0, r2
 80009ea:	4798      	blx	r3
 80009ec:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d112      	bne.n	8000a1a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009fe:	6979      	ldr	r1, [r7, #20]
 8000a00:	fb01 f303 	mul.w	r3, r1, r3
 8000a04:	441a      	add	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	01db      	lsls	r3, r3, #7
 8000a0e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dbd6      	blt.n	80009c6 <MQTTPacket_decode+0x18>
exit:
 8000a18:	e000      	b.n	8000a1c <MQTTPacket_decode+0x6e>
			goto exit;
 8000a1a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8000a1c:	693b      	ldr	r3, [r7, #16]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a3a:	dc03      	bgt.n	8000a44 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e012      	b.n	8000a6a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a4a:	da03      	bge.n	8000a54 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3302      	adds	r3, #2
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	e00a      	b.n	8000a6a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <MQTTPacket_len+0x50>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	dc03      	bgt.n	8000a64 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3303      	adds	r3, #3
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	e002      	b.n	8000a6a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3304      	adds	r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	001ffffe 	.word	0x001ffffe

08000a7c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e00a      	b.n	8000aa2 <bufchar+0x26>
		*c = *bufptr++;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <bufchar+0x3c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	4909      	ldr	r1, [pc, #36]	@ (8000ab8 <bufchar+0x3c>)
 8000a94:	600a      	str	r2, [r1, #0]
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbf0      	blt.n	8000a8c <bufchar+0x10>
	return count;
 8000aaa:	683b      	ldr	r3, [r7, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	2000008c 	.word	0x2000008c

08000abc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000ac6:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <MQTTPacket_decodeBuf+0x24>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000acc:	6839      	ldr	r1, [r7, #0]
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MQTTPacket_decodeBuf+0x28>)
 8000ad0:	f7ff ff6d 	bl	80009ae <MQTTPacket_decode>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000008c 	.word	0x2000008c
 8000ae4:	08000a7d 	.word	0x08000a7d

08000ae8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	3201      	adds	r2, #1
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1c9a      	adds	r2, r3, #2
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	601a      	str	r2, [r3, #0]
	return len;
 8000b10:	68bb      	ldr	r3, [r7, #8]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
	return c;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	78fa      	ldrb	r2, [r7, #3]
 8000b58:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	da00      	bge.n	8000b82 <writeInt+0x12>
 8000b80:	33ff      	adds	r3, #255	@ 0xff
 8000b82:	121b      	asrs	r3, r3, #8
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	425a      	negs	r2, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	bf58      	it	pl
 8000ba2:	4253      	negpl	r3, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000bcc:	6838      	ldr	r0, [r7, #0]
 8000bce:	f7ff fb29 	bl	8000224 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000bd6:	68f9      	ldr	r1, [r7, #12]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffc9 	bl	8000b70 <writeInt>
	memcpy(*pptr, string, len);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	6839      	ldr	r1, [r7, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f007 fef1 	bl	80089ce <memcpy>
	*pptr += len;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	441a      	add	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	4638      	mov	r0, r7
 8000c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd12      	ble.n	8000c3a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4619      	mov	r1, r3
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ffa9 	bl	8000b70 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f007 fed1 	bl	80089ce <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	441a      	add	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000c38:	e00c      	b.n	8000c54 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff ffbc 	bl	8000bc2 <writeCString>
}
 8000c4a:	e003      	b.n	8000c54 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f7ff ff8e 	bl	8000b70 <writeInt>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	dd1a      	ble.n	8000cae <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff ff35 	bl	8000ae8 <readInt>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	6852      	ldr	r2, [r2, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d30c      	bcc.n	8000cae <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	6852      	ldr	r2, [r2, #4]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	601a      	str	r2, [r3, #0]
			rc = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8000cb4:	697b      	ldr	r3, [r7, #20]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff faa4 	bl	8000224 <strlen>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e001      	b.n	8000ce6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	617b      	str	r3, [r7, #20]
	return rc;
 8000ce6:	697b      	ldr	r3, [r7, #20]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000d02:	463b      	mov	r3, r7
 8000d04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d08:	f7ff ffd9 	bl	8000cbe <MQTTstrlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	1c9a      	adds	r2, r3, #2
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	4413      	add	r3, r2
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	4413      	add	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dd02      	ble.n	8000d26 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3302      	adds	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
	return len;
 8000d26:	697b      	ldr	r3, [r7, #20]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5a:	6838      	ldr	r0, [r7, #0]
 8000d5c:	f7ff ffc8 	bl	8000cf0 <MQTTSerialize_publishLength>
 8000d60:	61b8      	str	r0, [r7, #24]
 8000d62:	69b8      	ldr	r0, [r7, #24]
 8000d64:	f7ff fe60 	bl	8000a28 <MQTTPacket_len>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	da03      	bge.n	8000d78 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000d70:	f06f 0301 	mvn.w	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
		goto exit;
 8000d76:	e04c      	b.n	8000e12 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8000d78:	7c3b      	ldrb	r3, [r7, #16]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	f362 1307 	bfi	r3, r2, #4, #4
 8000d80:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	7c3b      	ldrb	r3, [r7, #16]
 8000d8c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000d90:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	7c3b      	ldrb	r3, [r7, #16]
 8000d9c:	f362 0342 	bfi	r3, r2, #1, #2
 8000da0:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8000da2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	7c3b      	ldrb	r3, [r7, #16]
 8000dae:	f362 0300 	bfi	r3, r2, #0, #1
 8000db2:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8000db4:	7c3a      	ldrb	r2, [r7, #16]
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fec2 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	69b9      	ldr	r1, [r7, #24]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fdc2 	bl	8000950 <MQTTPacket_encode>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8000dd4:	f107 0014 	add.w	r0, r7, #20
 8000dd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dde:	f7ff ff0f 	bl	8000c00 <writeMQTTString>

	if (qos > 0)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dd06      	ble.n	8000df6 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8000de8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff febd 	bl	8000b70 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000dfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fde6 	bl	80089ce <memcpy>
	ptr += payloadlen;
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e06:	4413      	add	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000e12:	69fb      	ldr	r3, [r7, #28]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8000e20:	4b50      	ldr	r3, [pc, #320]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	b291      	uxth	r1, r2
 8000e28:	4a4e      	ldr	r2, [pc, #312]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e2a:	8011      	strh	r1, [r2, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000e30:	7819      	ldrb	r1, [r3, #0]
 8000e32:	4b4e      	ldr	r3, [pc, #312]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e34:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 8000e36:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000e38:	7c9b      	ldrb	r3, [r3, #18]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d135      	bne.n	8000eaa <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 8000e3e:	494d      	ldr	r1, [pc, #308]	@ (8000f74 <Sim800_RxCallBack+0x158>)
 8000e40:	484a      	ldr	r0, [pc, #296]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e42:	f007 fd40 	bl	80088c6 <strstr>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <Sim800_RxCallBack+0x40>
 8000e4c:	4b45      	ldr	r3, [pc, #276]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d103      	bne.n	8000e5c <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 8000e54:	4b43      	ldr	r3, [pc, #268]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	e026      	b.n	8000eaa <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 8000e5c:	4945      	ldr	r1, [pc, #276]	@ (8000f74 <Sim800_RxCallBack+0x158>)
 8000e5e:	4843      	ldr	r0, [pc, #268]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e60:	f007 fd31 	bl	80088c6 <strstr>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d01f      	beq.n	8000eaa <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8000e6a:	4a43      	ldr	r2, [pc, #268]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8000e76:	461a      	mov	r2, r3
 8000e78:	f007 fda9 	bl	80089ce <memcpy>
            clearRxBuffer();
 8000e7c:	f000 f88e 	bl	8000f9c <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8000e80:	493e      	ldr	r1, [pc, #248]	@ (8000f7c <Sim800_RxCallBack+0x160>)
 8000e82:	483d      	ldr	r0, [pc, #244]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e84:	f007 fd1f 	bl	80088c6 <strstr>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	749a      	strb	r2, [r3, #18]
 8000e94:	e009      	b.n	8000eaa <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8000e96:	493a      	ldr	r1, [pc, #232]	@ (8000f80 <Sim800_RxCallBack+0x164>)
 8000e98:	4837      	ldr	r0, [pc, #220]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000e9a:	f007 fd14 	bl	80088c6 <strstr>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 8000eaa:	4936      	ldr	r1, [pc, #216]	@ (8000f84 <Sim800_RxCallBack+0x168>)
 8000eac:	482f      	ldr	r0, [pc, #188]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000eae:	f007 fd0a 	bl	80088c6 <strstr>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10d      	bne.n	8000ed4 <Sim800_RxCallBack+0xb8>
 8000eb8:	4933      	ldr	r1, [pc, #204]	@ (8000f88 <Sim800_RxCallBack+0x16c>)
 8000eba:	482c      	ldr	r0, [pc, #176]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000ebc:	f007 fd03 	bl	80088c6 <strstr>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <Sim800_RxCallBack+0xb8>
 8000ec6:	4931      	ldr	r1, [pc, #196]	@ (8000f8c <Sim800_RxCallBack+0x170>)
 8000ec8:	4828      	ldr	r0, [pc, #160]	@ (8000f6c <Sim800_RxCallBack+0x150>)
 8000eca:	f007 fcfc 	bl	80088c6 <strstr>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <Sim800_RxCallBack+0x154>)
 8000edc:	7c9b      	ldrb	r3, [r3, #18]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d106      	bne.n	8000ef0 <Sim800_RxCallBack+0xd4>
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b30      	cmp	r3, #48	@ 0x30
 8000ee8:	d102      	bne.n	8000ef0 <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 8000eea:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <Sim800_RxCallBack+0x174>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8000ef0:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <Sim800_RxCallBack+0x174>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d124      	bne.n	8000f42 <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	b291      	uxth	r1, r2
 8000f00:	4a24      	ldr	r2, [pc, #144]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f02:	8011      	strh	r1, [r2, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000f08:	7819      	ldrb	r1, [r3, #0]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f0c:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d90d      	bls.n	8000f32 <Sim800_RxCallBack+0x116>
 8000f16:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f1e:	7852      	ldrb	r2, [r2, #1]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	dd06      	ble.n	8000f32 <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 8000f24:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <Sim800_RxCallBack+0x15c>)
 8000f26:	f000 fb25 	bl	8001574 <MQTT_Receive>
            clearRxBuffer();
 8000f2a:	f000 f837 	bl	8000f9c <clearRxBuffer>
            clearMqttBuffer();
 8000f2e:	f000 f847 	bl	8000fc0 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <Sim800_RxCallBack+0x178>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d901      	bls.n	8000f42 <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 8000f3e:	f000 f83f 	bl	8000fc0 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <Sim800_RxCallBack+0x148>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d903      	bls.n	8000f56 <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 8000f4e:	f000 f825 	bl	8000f9c <clearRxBuffer>
        clearMqttBuffer();
 8000f52:	f000 f835 	bl	8000fc0 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4903      	ldr	r1, [pc, #12]	@ (8000f68 <Sim800_RxCallBack+0x14c>)
 8000f5a:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <Sim800_RxCallBack+0x17c>)
 8000f5c:	f003 fc29 	bl	80047b2 <HAL_UART_Receive_IT>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000648 	.word	0x20000648
 8000f68:	20000090 	.word	0x20000090
 8000f6c:	20000094 	.word	0x20000094
 8000f70:	20000c24 	.word	0x20000c24
 8000f74:	08009790 	.word	0x08009790
 8000f78:	2000064c 	.word	0x2000064c
 8000f7c:	08009794 	.word	0x08009794
 8000f80:	080097a4 	.word	0x080097a4
 8000f84:	080097b0 	.word	0x080097b0
 8000f88:	080097bc 	.word	0x080097bc
 8000f8c:	080097c4 	.word	0x080097c4
 8000f90:	2000064a 	.word	0x2000064a
 8000f94:	20000c00 	.word	0x20000c00
 8000f98:	20000e14 	.word	0x20000e14

08000f9c <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <clearRxBuffer+0x1c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000fa6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000faa:	2100      	movs	r1, #0
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <clearRxBuffer+0x20>)
 8000fae:	f007 fc6f 	bl	8008890 <memset>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000648 	.word	0x20000648
 8000fbc:	20000094 	.word	0x20000094

08000fc0 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <clearMqttBuffer+0x20>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <clearMqttBuffer+0x24>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000fd0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <clearMqttBuffer+0x28>)
 8000fd8:	f007 fc5a 	bl	8008890 <memset>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000064a 	.word	0x2000064a
 8000fe4:	20000c00 	.word	0x20000c00
 8000fe8:	2000064c 	.word	0x2000064c

08000fec <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff f912 	bl	8000224 <strlen>
 8001000:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8001002:	b29b      	uxth	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	68f9      	ldr	r1, [r7, #12]
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <SIM800_SendCommand+0x50>)
 800100a:	f003 fb9c 	bl	8004746 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fb9d 	bl	8002750 <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	4809      	ldr	r0, [pc, #36]	@ (8001040 <SIM800_SendCommand+0x54>)
 800101a:	f007 fc54 	bl	80088c6 <strstr>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <SIM800_SendCommand+0x40>
    {
        clearRxBuffer();
 8001024:	f7ff ffba 	bl	8000f9c <clearRxBuffer>
        return 0;
 8001028:	2300      	movs	r3, #0
 800102a:	e002      	b.n	8001032 <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 800102c:	f7ff ffb6 	bl	8000f9c <clearRxBuffer>
    return 1;
 8001030:	2301      	movs	r3, #1
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000e14 	.word	0x20000e14
 8001040:	2000064c 	.word	0x2000064c

08001044 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	@ 0x30
 8001048:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 800104a:	4b5e      	ldr	r3, [pc, #376]	@ (80011c4 <MQTT_Init+0x180>)
 800104c:	2200      	movs	r2, #0
 800104e:	749a      	strb	r2, [r3, #18]
    int error = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    char str[32] = {0};
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	4956      	ldr	r1, [pc, #344]	@ (80011c8 <MQTT_Init+0x184>)
 8001070:	4856      	ldr	r0, [pc, #344]	@ (80011cc <MQTT_Init+0x188>)
 8001072:	f003 fb9e 	bl	80047b2 <HAL_UART_Receive_IT>
    printf("Initializing MQTT...\r\n");
 8001076:	4856      	ldr	r0, [pc, #344]	@ (80011d0 <MQTT_Init+0x18c>)
 8001078:	f007 fad6 	bl	8008628 <puts>
    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 800107c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001080:	4954      	ldr	r1, [pc, #336]	@ (80011d4 <MQTT_Init+0x190>)
 8001082:	4855      	ldr	r0, [pc, #340]	@ (80011d8 <MQTT_Init+0x194>)
 8001084:	f7ff ffb2 	bl	8000fec <SIM800_SendCommand>
    printf("AT Command Sent: Checking Module Response\r\n");
 8001088:	4854      	ldr	r0, [pc, #336]	@ (80011dc <MQTT_Init+0x198>)
 800108a:	f007 facd 	bl	8008628 <puts>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 800108e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001092:	4950      	ldr	r1, [pc, #320]	@ (80011d4 <MQTT_Init+0x190>)
 8001094:	4852      	ldr	r0, [pc, #328]	@ (80011e0 <MQTT_Init+0x19c>)
 8001096:	f7ff ffa9 	bl	8000fec <SIM800_SendCommand>
    printf("Echo Disabled\r\n");
 800109a:	4852      	ldr	r0, [pc, #328]	@ (80011e4 <MQTT_Init+0x1a0>)
 800109c:	f007 fac4 	bl	8008628 <puts>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 80010a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010a4:	4950      	ldr	r1, [pc, #320]	@ (80011e8 <MQTT_Init+0x1a4>)
 80010a6:	4851      	ldr	r0, [pc, #324]	@ (80011ec <MQTT_Init+0x1a8>)
 80010a8:	f7ff ffa0 	bl	8000fec <SIM800_SendCommand>
 80010ac:	4602      	mov	r2, r0
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	4413      	add	r3, r2
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Shutting Down Previous Connections... %s\r\n", (error == 0) ? "Success" : "Failed");
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <MQTT_Init+0x7a>
 80010ba:	4b4d      	ldr	r3, [pc, #308]	@ (80011f0 <MQTT_Init+0x1ac>)
 80010bc:	e000      	b.n	80010c0 <MQTT_Init+0x7c>
 80010be:	4b4d      	ldr	r3, [pc, #308]	@ (80011f4 <MQTT_Init+0x1b0>)
 80010c0:	4619      	mov	r1, r3
 80010c2:	484d      	ldr	r0, [pc, #308]	@ (80011f8 <MQTT_Init+0x1b4>)
 80010c4:	f007 fa48 	bl	8008558 <iprintf>
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 80010c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010cc:	4941      	ldr	r1, [pc, #260]	@ (80011d4 <MQTT_Init+0x190>)
 80010ce:	484b      	ldr	r0, [pc, #300]	@ (80011fc <MQTT_Init+0x1b8>)
 80010d0:	f7ff ff8c 	bl	8000fec <SIM800_SendCommand>
 80010d4:	4602      	mov	r2, r0
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	4413      	add	r3, r2
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("GPRS Attach... %s\r\n", (error == 0) ? "Success" : "Failed");
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <MQTT_Init+0xa2>
 80010e2:	4b43      	ldr	r3, [pc, #268]	@ (80011f0 <MQTT_Init+0x1ac>)
 80010e4:	e000      	b.n	80010e8 <MQTT_Init+0xa4>
 80010e6:	4b43      	ldr	r3, [pc, #268]	@ (80011f4 <MQTT_Init+0x1b0>)
 80010e8:	4619      	mov	r1, r3
 80010ea:	4845      	ldr	r0, [pc, #276]	@ (8001200 <MQTT_Init+0x1bc>)
 80010ec:	f007 fa34 	bl	8008558 <iprintf>
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 80010f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010f4:	4937      	ldr	r1, [pc, #220]	@ (80011d4 <MQTT_Init+0x190>)
 80010f6:	4843      	ldr	r0, [pc, #268]	@ (8001204 <MQTT_Init+0x1c0>)
 80010f8:	f7ff ff78 	bl	8000fec <SIM800_SendCommand>
 80010fc:	4602      	mov	r2, r0
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	4413      	add	r3, r2
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Setting TCP/IP Mode... %s\r\n", (error == 0) ? "Success" : "Failed");
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <MQTT_Init+0xca>
 800110a:	4b39      	ldr	r3, [pc, #228]	@ (80011f0 <MQTT_Init+0x1ac>)
 800110c:	e000      	b.n	8001110 <MQTT_Init+0xcc>
 800110e:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <MQTT_Init+0x1b0>)
 8001110:	4619      	mov	r1, r3
 8001112:	483d      	ldr	r0, [pc, #244]	@ (8001208 <MQTT_Init+0x1c4>)
 8001114:	f007 fa20 	bl	8008558 <iprintf>
    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 8001118:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <MQTT_Init+0x180>)
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <MQTT_Init+0x180>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a28      	ldr	r2, [pc, #160]	@ (80011c4 <MQTT_Init+0x180>)
 8001122:	6892      	ldr	r2, [r2, #8]
 8001124:	1d38      	adds	r0, r7, #4
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	460b      	mov	r3, r1
 800112c:	4a37      	ldr	r2, [pc, #220]	@ (800120c <MQTT_Init+0x1c8>)
 800112e:	2120      	movs	r1, #32
 8001130:	f007 fa82 	bl	8008638 <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800113a:	4926      	ldr	r1, [pc, #152]	@ (80011d4 <MQTT_Init+0x190>)
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff55 	bl	8000fec <SIM800_SendCommand>
 8001142:	4602      	mov	r2, r0
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	4413      	add	r3, r2
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Setting APN: %s... %s\r\n", SIM800.sim.apn, (error == 0) ? "Success" : "Failed");
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <MQTT_Init+0x180>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <MQTT_Init+0x114>
 8001154:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <MQTT_Init+0x1ac>)
 8001156:	e000      	b.n	800115a <MQTT_Init+0x116>
 8001158:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MQTT_Init+0x1b0>)
 800115a:	461a      	mov	r2, r3
 800115c:	482c      	ldr	r0, [pc, #176]	@ (8001210 <MQTT_Init+0x1cc>)
 800115e:	f007 f9fb 	bl	8008558 <iprintf>
    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 8001162:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001166:	491b      	ldr	r1, [pc, #108]	@ (80011d4 <MQTT_Init+0x190>)
 8001168:	482a      	ldr	r0, [pc, #168]	@ (8001214 <MQTT_Init+0x1d0>)
 800116a:	f7ff ff3f 	bl	8000fec <SIM800_SendCommand>
 800116e:	4602      	mov	r2, r0
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	4413      	add	r3, r2
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Bringing Up Wireless Connection... %s\r\n", (error == 0) ? "Success" : "Failed");
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <MQTT_Init+0x13c>
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MQTT_Init+0x1ac>)
 800117e:	e000      	b.n	8001182 <MQTT_Init+0x13e>
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MQTT_Init+0x1b0>)
 8001182:	4619      	mov	r1, r3
 8001184:	4824      	ldr	r0, [pc, #144]	@ (8001218 <MQTT_Init+0x1d4>)
 8001186:	f007 f9e7 	bl	8008558 <iprintf>
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 800118a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800118e:	4923      	ldr	r1, [pc, #140]	@ (800121c <MQTT_Init+0x1d8>)
 8001190:	4823      	ldr	r0, [pc, #140]	@ (8001220 <MQTT_Init+0x1dc>)
 8001192:	f7ff ff2b 	bl	8000fec <SIM800_SendCommand>
    printf("Retrieving IP Address...\r\n");
 8001196:	4823      	ldr	r0, [pc, #140]	@ (8001224 <MQTT_Init+0x1e0>)
 8001198:	f007 fa46 	bl	8008628 <puts>
    if (error == 0)
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <MQTT_Init+0x16c>
    {
    	printf("MQTT Initialization Successful. Connecting to Broker...\r\n");
 80011a2:	4821      	ldr	r0, [pc, #132]	@ (8001228 <MQTT_Init+0x1e4>)
 80011a4:	f007 fa40 	bl	8008628 <puts>
        MQTT_Connect();
 80011a8:	f000 f842 	bl	8001230 <MQTT_Connect>
        return error;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	e004      	b.n	80011ba <MQTT_Init+0x176>
    }
    else
    {
    	printf("MQTT Initialization Failed! Error Code: %d\r\n", error);
 80011b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011b2:	481e      	ldr	r0, [pc, #120]	@ (800122c <MQTT_Init+0x1e8>)
 80011b4:	f007 f9d0 	bl	8008558 <iprintf>
        return error;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000c24 	.word	0x20000c24
 80011c8:	20000090 	.word	0x20000090
 80011cc:	20000e14 	.word	0x20000e14
 80011d0:	080097cc 	.word	0x080097cc
 80011d4:	080097e4 	.word	0x080097e4
 80011d8:	080097ec 	.word	0x080097ec
 80011dc:	080097f4 	.word	0x080097f4
 80011e0:	08009820 	.word	0x08009820
 80011e4:	08009828 	.word	0x08009828
 80011e8:	08009838 	.word	0x08009838
 80011ec:	08009844 	.word	0x08009844
 80011f0:	08009854 	.word	0x08009854
 80011f4:	0800985c 	.word	0x0800985c
 80011f8:	08009864 	.word	0x08009864
 80011fc:	08009890 	.word	0x08009890
 8001200:	080098a0 	.word	0x080098a0
 8001204:	080098b4 	.word	0x080098b4
 8001208:	080098c4 	.word	0x080098c4
 800120c:	080098e0 	.word	0x080098e0
 8001210:	080098fc 	.word	0x080098fc
 8001214:	08009914 	.word	0x08009914
 8001218:	08009920 	.word	0x08009920
 800121c:	08009948 	.word	0x08009948
 8001220:	0800994c 	.word	0x0800994c
 8001224:	08009958 	.word	0x08009958
 8001228:	08009974 	.word	0x08009974
 800122c:	080099b0 	.word	0x080099b0

08001230 <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0d8      	sub	sp, #352	@ 0x160
 8001234:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8001236:	4b5e      	ldr	r3, [pc, #376]	@ (80013b0 <MQTT_Connect+0x180>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    SIM800.mqttServer.connect = 0;
 800123e:	4b5c      	ldr	r3, [pc, #368]	@ (80013b0 <MQTT_Connect+0x180>)
 8001240:	2200      	movs	r2, #0
 8001242:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800124a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800124e:	227c      	movs	r2, #124	@ 0x7c
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fb1c 	bl	8008890 <memset>
    unsigned char buf[128] = {0};
 8001258:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800125c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	3304      	adds	r3, #4
 8001266:	227c      	movs	r2, #124	@ 0x7c
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f007 fb10 	bl	8008890 <memset>
    printf("MQTT Connection Starting...\r\n");
 8001270:	4850      	ldr	r0, [pc, #320]	@ (80013b4 <MQTT_Connect+0x184>)
 8001272:	f007 f9d9 	bl	8008628 <puts>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 8001276:	4b4e      	ldr	r3, [pc, #312]	@ (80013b0 <MQTT_Connect+0x180>)
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	4b4d      	ldr	r3, [pc, #308]	@ (80013b0 <MQTT_Connect+0x180>)
 800127c:	8a1b      	ldrh	r3, [r3, #16]
 800127e:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8001282:	494d      	ldr	r1, [pc, #308]	@ (80013b8 <MQTT_Connect+0x188>)
 8001284:	f007 fa0c 	bl	80086a0 <siprintf>
    printf("Sending: %s\r\n", str);
 8001288:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800128c:	4619      	mov	r1, r3
 800128e:	484b      	ldr	r0, [pc, #300]	@ (80013bc <MQTT_Connect+0x18c>)
 8001290:	f007 f962 	bl	8008558 <iprintf>
    if (SIM800_SendCommand(str, "OK\r\n", CMD_DELAY) != 0)
 8001294:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001298:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800129c:	4948      	ldr	r1, [pc, #288]	@ (80013c0 <MQTT_Connect+0x190>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fea4 	bl	8000fec <SIM800_SendCommand>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <MQTT_Connect+0x82>
	{
		printf("ERROR: TCP Connection Failed!\r\n");
 80012aa:	4846      	ldr	r0, [pc, #280]	@ (80013c4 <MQTT_Connect+0x194>)
 80012ac:	f007 f9bc 	bl	8008628 <puts>
 80012b0:	e07a      	b.n	80013a8 <MQTT_Connect+0x178>
		return;
	}

	printf("TCP Connection Established!\r\n");
 80012b2:	4845      	ldr	r0, [pc, #276]	@ (80013c8 <MQTT_Connect+0x198>)
 80012b4:	f007 f9b8 	bl	8008628 <puts>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 80012b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012bc:	f001 fa48 	bl	8002750 <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1)
 80012c0:	4b3b      	ldr	r3, [pc, #236]	@ (80013b0 <MQTT_Connect+0x180>)
 80012c2:	7c9b      	ldrb	r3, [r3, #18]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d16f      	bne.n	80013a8 <MQTT_Connect+0x178>
    {
    	printf("SIM800 Connected to MQTT Broker!\r\n");
 80012c8:	4840      	ldr	r0, [pc, #256]	@ (80013cc <MQTT_Connect+0x19c>)
 80012ca:	f007 f9ad 	bl	8008628 <puts>
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 80012ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012d2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012d6:	4a3e      	ldr	r2, [pc, #248]	@ (80013d0 <MQTT_Connect+0x1a0>)
 80012d8:	4618      	mov	r0, r3
 80012da:	4611      	mov	r1, r2
 80012dc:	2358      	movs	r3, #88	@ 0x58
 80012de:	461a      	mov	r2, r3
 80012e0:	f007 fb75 	bl	80089ce <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 80012e4:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <MQTT_Connect+0x180>)
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012ec:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012f0:	641a      	str	r2, [r3, #64]	@ 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 80012f2:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <MQTT_Connect+0x180>)
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012fa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012fe:	64da      	str	r2, [r3, #76]	@ 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 8001300:	4b2b      	ldr	r3, [pc, #172]	@ (80013b0 <MQTT_Connect+0x180>)
 8001302:	69da      	ldr	r2, [r3, #28]
 8001304:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001308:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800130c:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 800130e:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <MQTT_Connect+0x180>)
 8001310:	8c1a      	ldrh	r2, [r3, #32]
 8001312:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001316:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800131a:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 800131c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001320:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001324:	2201      	movs	r2, #1
 8001326:	769a      	strb	r2, [r3, #26]

        printf("MQTT Client ID: %s\r\n", datas.clientID.cstring);
 8001328:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800132c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	4619      	mov	r1, r3
 8001334:	4827      	ldr	r0, [pc, #156]	@ (80013d4 <MQTT_Connect+0x1a4>)
 8001336:	f007 f90f 	bl	8008558 <iprintf>
		printf("MQTT Username: %s\r\n", datas.username.cstring);
 800133a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800133e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	4619      	mov	r1, r3
 8001346:	4824      	ldr	r0, [pc, #144]	@ (80013d8 <MQTT_Connect+0x1a8>)
 8001348:	f007 f906 	bl	8008558 <iprintf>
		printf("MQTT Password: %s\r\n", datas.password.cstring);
 800134c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001350:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4619      	mov	r1, r3
 8001358:	4820      	ldr	r0, [pc, #128]	@ (80013dc <MQTT_Connect+0x1ac>)
 800135a:	f007 f8fd 	bl	8008558 <iprintf>
		printf("MQTT KeepAlive Interval: %d seconds\r\n", datas.keepAliveInterval);
 800135e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001362:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001366:	8b1b      	ldrh	r3, [r3, #24]
 8001368:	4619      	mov	r1, r3
 800136a:	481d      	ldr	r0, [pc, #116]	@ (80013e0 <MQTT_Connect+0x1b0>)
 800136c:	f007 f8f4 	bl	8008558 <iprintf>

        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8001370:	1d3a      	adds	r2, r7, #4
 8001372:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f98b 	bl	8000694 <MQTTSerialize_connect>
 800137e:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001382:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800138c:	4619      	mov	r1, r3
 800138e:	4815      	ldr	r0, [pc, #84]	@ (80013e4 <MQTT_Connect+0x1b4>)
 8001390:	f003 f9d9 	bl	8004746 <HAL_UART_Transmit_IT>
        printf("==============================================================================\n\r");
 8001394:	4814      	ldr	r0, [pc, #80]	@ (80013e8 <MQTT_Connect+0x1b8>)
 8001396:	f007 f8df 	bl	8008558 <iprintf>
        printf("MQTT connection Established and ready to Transmit and Receive data!..\n\r");
 800139a:	4814      	ldr	r0, [pc, #80]	@ (80013ec <MQTT_Connect+0x1bc>)
 800139c:	f007 f8dc 	bl	8008558 <iprintf>

#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 80013a0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80013a4:	f001 f9d4 	bl	8002750 <HAL_Delay>
#endif
    }
}
 80013a8:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000c24 	.word	0x20000c24
 80013b4:	080099e0 	.word	0x080099e0
 80013b8:	08009a00 	.word	0x08009a00
 80013bc:	08009a1c 	.word	0x08009a1c
 80013c0:	080097e4 	.word	0x080097e4
 80013c4:	08009a2c 	.word	0x08009a2c
 80013c8:	08009a4c 	.word	0x08009a4c
 80013cc:	08009a6c 	.word	0x08009a6c
 80013d0:	08009b94 	.word	0x08009b94
 80013d4:	08009a90 	.word	0x08009a90
 80013d8:	08009aa8 	.word	0x08009aa8
 80013dc:	08009abc 	.word	0x08009abc
 80013e0:	08009ad0 	.word	0x08009ad0
 80013e4:	20000e14 	.word	0x20000e14
 80013e8:	08009af8 	.word	0x08009af8
 80013ec:	08009b4c 	.word	0x08009b4c

080013f0 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b0cf      	sub	sp, #316	@ 0x13c
 80013f4:	af08      	add	r7, sp, #32
 80013f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013fe:	6018      	str	r0, [r3, #0]
 8001400:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001404:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001408:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 800140a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800140e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	3304      	adds	r3, #4
 8001418:	22fc      	movs	r2, #252	@ 0xfc
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f007 fa37 	bl	8008890 <memset>

    MQTTString topicString = MQTTString_initializer;
 8001422:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001426:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001432:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800143e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8001446:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800144a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800144e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001452:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 800145a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800145e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f7fe fede 	bl	8000224 <strlen>
 8001468:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 800146a:	f107 0414 	add.w	r4, r7, #20
 800146e:	9306      	str	r3, [sp, #24]
 8001470:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001474:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	9305      	str	r3, [sp, #20]
 800147c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001480:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8001484:	ab02      	add	r3, sp, #8
 8001486:	ca07      	ldmia	r2, {r0, r1, r2}
 8001488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800148c:	2300      	movs	r3, #0
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	2300      	movs	r3, #0
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2300      	movs	r3, #0
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff fc47 	bl	8000d30 <MQTTSerialize_publish>
 80014a2:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 80014a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MQTT_Pub+0xd8>)
 80014b4:	f003 f947 	bl	8004746 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 80014b8:	2064      	movs	r0, #100	@ 0x64
 80014ba:	f001 f949 	bl	8002750 <HAL_Delay>
#endif
}
 80014be:	bf00      	nop
 80014c0:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	20000e14 	.word	0x20000e14

080014cc <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0ca      	sub	sp, #296	@ 0x128
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014da:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 80014dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	3304      	adds	r3, #4
 80014ea:	22fc      	movs	r2, #252	@ 0xfc
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f007 f9ce 	bl	8008890 <memset>

    MQTTString topicString = MQTTString_initializer;
 80014f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001504:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001510:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8001518:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800151c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001520:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001524:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 800152c:	f107 0014 	add.w	r0, r7, #20
 8001530:	2300      	movs	r3, #0
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2301      	movs	r3, #1
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001546:	f000 f886 	bl	8001656 <MQTTSerialize_subscribe>
 800154a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800154e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001552:	b29a      	uxth	r2, r3
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MQTT_Sub+0xa4>)
 800155c:	f003 f8f3 	bl	8004746 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8001560:	2064      	movs	r0, #100	@ 0x64
 8001562:	f001 f8f5 	bl	8002750 <HAL_Delay>
#endif
}
 8001566:	bf00      	nop
 8001568:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000e14 	.word	0x20000e14

08001574 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af06      	add	r7, sp, #24
 800157a:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 800157c:	2240      	movs	r2, #64	@ 0x40
 800157e:	2100      	movs	r1, #0
 8001580:	4819      	ldr	r0, [pc, #100]	@ (80015e8 <MQTT_Receive+0x74>)
 8001582:	f007 f985 	bl	8008890 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8001586:	2240      	movs	r2, #64	@ 0x40
 8001588:	2100      	movs	r1, #0
 800158a:	4818      	ldr	r0, [pc, #96]	@ (80015ec <MQTT_Receive+0x78>)
 800158c:	f007 f980 	bl	8008890 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8001590:	2304      	movs	r3, #4
 8001592:	9304      	str	r3, [sp, #16]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	9303      	str	r3, [sp, #12]
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MQTT_Receive+0x7c>)
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MQTT_Receive+0x80>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <MQTT_Receive+0x84>)
 80015ac:	4913      	ldr	r1, [pc, #76]	@ (80015fc <MQTT_Receive+0x88>)
 80015ae:	4814      	ldr	r0, [pc, #80]	@ (8001600 <MQTT_Receive+0x8c>)
 80015b0:	f7ff f95c 	bl	800086c <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4619      	mov	r1, r3
 80015ba:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <MQTT_Receive+0x74>)
 80015bc:	f007 fa07 	bl	80089ce <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <MQTT_Receive+0x90>)
 80015c4:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <MQTT_Receive+0x90>)
 80015cc:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80015ce:	4619      	mov	r1, r3
 80015d0:	4806      	ldr	r0, [pc, #24]	@ (80015ec <MQTT_Receive+0x78>)
 80015d2:	f007 f9fc 	bl	80089ce <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <MQTT_Receive+0x90>)
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000c98 	.word	0x20000c98
 80015ec:	20000c54 	.word	0x20000c54
 80015f0:	20000c94 	.word	0x20000c94
 80015f4:	20000c52 	.word	0x20000c52
 80015f8:	20000c50 	.word	0x20000c50
 80015fc:	20000c4c 	.word	0x20000c4c
 8001600:	20000c49 	.word	0x20000c49
 8001604:	20000c24 	.word	0x20000c24

08001608 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001612:	2302      	movs	r3, #2
 8001614:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e013      	b.n	8001644 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4413      	add	r3, r2
 800162c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001630:	f7ff fb45 	bl	8000cbe <MQTTstrlen>
 8001634:	4603      	mov	r3, r0
 8001636:	3303      	adds	r3, #3
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	4413      	add	r3, r2
 800163c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbe7      	blt.n	800161c <MQTTSerialize_subscribeLength+0x14>
	return len;
 800164c:	68bb      	ldr	r3, [r7, #8]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b08a      	sub	sp, #40	@ 0x28
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	4611      	mov	r1, r2
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001680:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001684:	f7ff ffc0 	bl	8001608 <MQTTSerialize_subscribeLength>
 8001688:	61f8      	str	r0, [r7, #28]
 800168a:	69f8      	ldr	r0, [r7, #28]
 800168c:	f7ff f9cc 	bl	8000a28 <MQTTPacket_len>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	4293      	cmp	r3, r2
 8001696:	da03      	bge.n	80016a0 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001698:	f06f 0301 	mvn.w	r3, #1
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800169e:	e051      	b.n	8001744 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 80016a4:	7d3b      	ldrb	r3, [r7, #20]
 80016a6:	2208      	movs	r2, #8
 80016a8:	f362 1307 	bfi	r3, r2, #4, #4
 80016ac:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	7d3b      	ldrb	r3, [r7, #20]
 80016b8:	f362 03c3 	bfi	r3, r2, #3, #1
 80016bc:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80016be:	7d3b      	ldrb	r3, [r7, #20]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f362 0342 	bfi	r3, r2, #1, #2
 80016c6:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80016c8:	7d3a      	ldrb	r2, [r7, #20]
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa38 	bl	8000b46 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	69f9      	ldr	r1, [r7, #28]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f938 	bl	8000950 <MQTTPacket_encode>
 80016e0:	4602      	mov	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4413      	add	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 80016e8:	88ba      	ldrh	r2, [r7, #4]
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fa3d 	bl	8000b70 <writeInt>

	for (i = 0; i < count; ++i)
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
 80016fa:	e01b      	b.n	8001734 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80016fc:	6a3a      	ldr	r2, [r7, #32]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	461a      	mov	r2, r3
 8001708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800170a:	4413      	add	r3, r2
 800170c:	f107 0018 	add.w	r0, r7, #24
 8001710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001712:	f7ff fa75 	bl	8000c00 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800171c:	4413      	add	r3, r2
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fa0c 	bl	8000b46 <writeChar>
	for (i = 0; i < count; ++i)
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	3301      	adds	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	6a3a      	ldr	r2, [r7, #32]
 8001736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001738:	429a      	cmp	r2, r3
 800173a:	dbdf      	blt.n	80016fc <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001746:	4618      	mov	r0, r3
 8001748:	3728      	adds	r7, #40	@ 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_DMA_Init+0x3c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <MX_DMA_Init+0x3c>)
 8001760:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_DMA_Init+0x3c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	200d      	movs	r0, #13
 8001778:	f001 f8c6 	bl	8002908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800177c:	200d      	movs	r0, #13
 800177e:	f001 f8df 	bl	8002940 <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <MX_GPIO_Init+0xec>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a33      	ldr	r2, [pc, #204]	@ (800187c <MX_GPIO_Init+0xec>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <MX_GPIO_Init+0xec>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <MX_GPIO_Init+0xec>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a2c      	ldr	r2, [pc, #176]	@ (800187c <MX_GPIO_Init+0xec>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <MX_GPIO_Init+0xec>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b26      	ldr	r3, [pc, #152]	@ (800187c <MX_GPIO_Init+0xec>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a25      	ldr	r2, [pc, #148]	@ (800187c <MX_GPIO_Init+0xec>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b23      	ldr	r3, [pc, #140]	@ (800187c <MX_GPIO_Init+0xec>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2120      	movs	r1, #32
 80017fe:	4820      	ldr	r0, [pc, #128]	@ (8001880 <MX_GPIO_Init+0xf0>)
 8001800:	f001 fdbc 	bl	800337c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2101      	movs	r1, #1
 8001808:	481e      	ldr	r0, [pc, #120]	@ (8001884 <MX_GPIO_Init+0xf4>)
 800180a:	f001 fdb7 	bl	800337c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BT_Pin */
  GPIO_InitStruct.Pin = USER_BT_Pin;
 800180e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001814:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181a:	2301      	movs	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BT_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4818      	ldr	r0, [pc, #96]	@ (8001888 <MX_GPIO_Init+0xf8>)
 8001826:	f001 fc15 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800182a:	2320      	movs	r3, #32
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	480f      	ldr	r0, [pc, #60]	@ (8001880 <MX_GPIO_Init+0xf0>)
 8001842:	f001 fc07 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 8001846:	2301      	movs	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4809      	ldr	r0, [pc, #36]	@ (8001884 <MX_GPIO_Init+0xf4>)
 800185e:	f001 fbf9 	bl	8003054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2105      	movs	r1, #5
 8001866:	2028      	movs	r0, #40	@ 0x28
 8001868:	f001 f84e 	bl	8002908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800186c:	2028      	movs	r0, #40	@ 0x28
 800186e:	f001 f867 	bl	8002940 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800

0800188c <GSM_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GSM_init(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	SIM800.sim.apn = "internet";
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <GSM_init+0x48>)
 8001892:	4a11      	ldr	r2, [pc, #68]	@ (80018d8 <GSM_init+0x4c>)
 8001894:	601a      	str	r2, [r3, #0]
	SIM800.sim.apn_user = "";
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <GSM_init+0x48>)
 8001898:	4a10      	ldr	r2, [pc, #64]	@ (80018dc <GSM_init+0x50>)
 800189a:	605a      	str	r2, [r3, #4]
	SIM800.sim.apn_pass = "";
 800189c:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <GSM_init+0x48>)
 800189e:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <GSM_init+0x50>)
 80018a0:	609a      	str	r2, [r3, #8]
	SIM800.mqttServer.host = "mqtt.onwords.in";
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <GSM_init+0x48>)
 80018a4:	4a0e      	ldr	r2, [pc, #56]	@ (80018e0 <GSM_init+0x54>)
 80018a6:	60da      	str	r2, [r3, #12]
	SIM800.mqttServer.port = 1883;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <GSM_init+0x48>)
 80018aa:	f240 725b 	movw	r2, #1883	@ 0x75b
 80018ae:	821a      	strh	r2, [r3, #16]
	SIM800.mqttClient.username = "Nikhil";
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <GSM_init+0x48>)
 80018b2:	4a0c      	ldr	r2, [pc, #48]	@ (80018e4 <GSM_init+0x58>)
 80018b4:	615a      	str	r2, [r3, #20]
	SIM800.mqttClient.pass = "Nikhil8182";
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <GSM_init+0x48>)
 80018b8:	4a0b      	ldr	r2, [pc, #44]	@ (80018e8 <GSM_init+0x5c>)
 80018ba:	619a      	str	r2, [r3, #24]
	SIM800.mqttClient.clientID = "TestSub";
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <GSM_init+0x48>)
 80018be:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <GSM_init+0x60>)
 80018c0:	61da      	str	r2, [r3, #28]
	SIM800.mqttClient.keepAliveInterval = 60;
 80018c2:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <GSM_init+0x48>)
 80018c4:	223c      	movs	r2, #60	@ 0x3c
 80018c6:	841a      	strh	r2, [r3, #32]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000c24 	.word	0x20000c24
 80018d8:	08009bf8 	.word	0x08009bf8
 80018dc:	08009c04 	.word	0x08009c04
 80018e0:	08009c08 	.word	0x08009c08
 80018e4:	08009c18 	.word	0x08009c18
 80018e8:	08009c20 	.word	0x08009c20
 80018ec:	08009c2c 	.word	0x08009c2c

080018f0 <FreeRTOS_Init>:

void FreeRTOS_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af02      	add	r7, sp, #8
    mqttQueue = xQueueCreate(5, sizeof(uint8_t));
 80018f6:	2200      	movs	r2, #0
 80018f8:	2101      	movs	r1, #1
 80018fa:	2005      	movs	r0, #5
 80018fc:	f003 fff2 	bl	80058e4 <xQueueGenericCreate>
 8001900:	4603      	mov	r3, r0
 8001902:	4a25      	ldr	r2, [pc, #148]	@ (8001998 <FreeRTOS_Init+0xa8>)
 8001904:	6013      	str	r3, [r2, #0]
    GSM_rxCallbackQueue = xQueueCreate(10, sizeof(SIM800.mqttReceive));
 8001906:	2200      	movs	r2, #0
 8001908:	2194      	movs	r1, #148	@ 0x94
 800190a:	200a      	movs	r0, #10
 800190c:	f003 ffea 	bl	80058e4 <xQueueGenericCreate>
 8001910:	4603      	mov	r3, r0
 8001912:	4a22      	ldr	r2, [pc, #136]	@ (800199c <FreeRTOS_Init+0xac>)
 8001914:	6013      	str	r3, [r2, #0]
    ESP_uartQueue = xQueueCreate(10, sizeof(uartRxBuffer));
 8001916:	2200      	movs	r2, #0
 8001918:	2101      	movs	r1, #1
 800191a:	200a      	movs	r0, #10
 800191c:	f003 ffe2 	bl	80058e4 <xQueueGenericCreate>
 8001920:	4603      	mov	r3, r0
 8001922:	4a1f      	ldr	r2, [pc, #124]	@ (80019a0 <FreeRTOS_Init+0xb0>)
 8001924:	6013      	str	r3, [r2, #0]
    xButtonSemaphore = xSemaphoreCreateBinary();
 8001926:	2203      	movs	r2, #3
 8001928:	2100      	movs	r1, #0
 800192a:	2001      	movs	r0, #1
 800192c:	f003 ffda 	bl	80058e4 <xQueueGenericCreate>
 8001930:	4603      	mov	r3, r0
 8001932:	4a1c      	ldr	r2, [pc, #112]	@ (80019a4 <FreeRTOS_Init+0xb4>)
 8001934:	6013      	str	r3, [r2, #0]

    xTaskCreate(ESP_UART_Task, "ESP_UART_Task", 200, NULL, 3, NULL);
 8001936:	2300      	movs	r3, #0
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	2303      	movs	r3, #3
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	22c8      	movs	r2, #200	@ 0xc8
 8001942:	4919      	ldr	r1, [pc, #100]	@ (80019a8 <FreeRTOS_Init+0xb8>)
 8001944:	4819      	ldr	r0, [pc, #100]	@ (80019ac <FreeRTOS_Init+0xbc>)
 8001946:	f004 fe1b 	bl	8006580 <xTaskCreate>
    xTaskCreate(GSM_MQTT_Task, "GSM_MQTT_Task", 512, NULL, 2, &mqttTaskHandle);
 800194a:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <FreeRTOS_Init+0xc0>)
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	2302      	movs	r3, #2
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2300      	movs	r3, #0
 8001954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001958:	4916      	ldr	r1, [pc, #88]	@ (80019b4 <FreeRTOS_Init+0xc4>)
 800195a:	4817      	ldr	r0, [pc, #92]	@ (80019b8 <FreeRTOS_Init+0xc8>)
 800195c:	f004 fe10 	bl	8006580 <xTaskCreate>
    xTaskCreate(INT_GPIO_Task, "INT_GPIO_Task", 256, NULL, 4, &gpioTaskHandle);
 8001960:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <FreeRTOS_Init+0xcc>)
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2304      	movs	r3, #4
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800196e:	4914      	ldr	r1, [pc, #80]	@ (80019c0 <FreeRTOS_Init+0xd0>)
 8001970:	4814      	ldr	r0, [pc, #80]	@ (80019c4 <FreeRTOS_Init+0xd4>)
 8001972:	f004 fe05 	bl	8006580 <xTaskCreate>
    xTaskCreate(GSM_rxCallBack_Task, "GSM_CALLBACK_Task", 256, NULL, 1, &callBackTaskHandle);
 8001976:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <FreeRTOS_Init+0xd8>)
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2301      	movs	r3, #1
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001984:	4911      	ldr	r1, [pc, #68]	@ (80019cc <FreeRTOS_Init+0xdc>)
 8001986:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <FreeRTOS_Init+0xe0>)
 8001988:	f004 fdfa 	bl	8006580 <xTaskCreate>
    vTaskStartScheduler();
 800198c:	f004 ff74 	bl	8006878 <vTaskStartScheduler>
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000c14 	.word	0x20000c14
 800199c:	20000c18 	.word	0x20000c18
 80019a0:	20000c1c 	.word	0x20000c1c
 80019a4:	20000c10 	.word	0x20000c10
 80019a8:	08009c34 	.word	0x08009c34
 80019ac:	08001b09 	.word	0x08001b09
 80019b0:	20000c04 	.word	0x20000c04
 80019b4:	08009c44 	.word	0x08009c44
 80019b8:	08001c85 	.word	0x08001c85
 80019bc:	20000c08 	.word	0x20000c08
 80019c0:	08009c54 	.word	0x08009c54
 80019c4:	08001c1d 	.word	0x08001c1d
 80019c8:	20000c0c 	.word	0x20000c0c
 80019cc:	08009c64 	.word	0x08009c64
 80019d0:	08001b59 	.word	0x08001b59

080019d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0b6      	sub	sp, #216	@ 0xd8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a3a      	ldr	r2, [pc, #232]	@ (8001acc <HAL_UART_RxCpltCallback+0xf8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d11e      	bne.n	8001a24 <HAL_UART_RxCpltCallback+0x50>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		xQueueSendFromISR(ESP_uartQueue, uartRxBuffer, &xHigherPriorityTaskWoken);
 80019ec:	4b38      	ldr	r3, [pc, #224]	@ (8001ad0 <HAL_UART_RxCpltCallback+0xfc>)
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80019f4:	2300      	movs	r3, #0
 80019f6:	4937      	ldr	r1, [pc, #220]	@ (8001ad4 <HAL_UART_RxCpltCallback+0x100>)
 80019f8:	f004 f8fc 	bl	8005bf4 <xQueueGenericSendFromISR>
		memset(uartRxBuffer, 0, sizeof(uartRxBuffer));
 80019fc:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <HAL_UART_RxCpltCallback+0x100>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, uartRxBuffer, sizeof(uartRxBuffer));
 8001a02:	2201      	movs	r2, #1
 8001a04:	4933      	ldr	r1, [pc, #204]	@ (8001ad4 <HAL_UART_RxCpltCallback+0x100>)
 8001a06:	4834      	ldr	r0, [pc, #208]	@ (8001ad8 <HAL_UART_RxCpltCallback+0x104>)
 8001a08:	f002 fed3 	bl	80047b2 <HAL_UART_Receive_IT>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001a0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_UART_RxCpltCallback+0x50>
 8001a14:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <HAL_UART_RxCpltCallback+0x108>)
 8001a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	f3bf 8f6f 	isb	sy
	}

    if (huart == UART_SIM800)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x10c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d14b      	bne.n	8001ac4 <HAL_UART_RxCpltCallback+0xf0>
    {
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        Sim800_RxCallBack();
 8001a32:	f7ff f9f3 	bl	8000e1c <Sim800_RxCallBack>
        if (SIM800.mqttServer.connect == 1 && rx_data == 0xD0) {
 8001a36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x110>)
 8001a38:	7c9b      	ldrb	r3, [r3, #18]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d110      	bne.n	8001a60 <HAL_UART_RxCpltCallback+0x8c>
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <HAL_UART_RxCpltCallback+0x114>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2bd0      	cmp	r3, #208	@ 0xd0
 8001a44:	d10c      	bne.n	8001a60 <HAL_UART_RxCpltCallback+0x8c>
            printf("Received MQTT PINGRESP\n\r");
 8001a46:	4829      	ldr	r0, [pc, #164]	@ (8001aec <HAL_UART_RxCpltCallback+0x118>)
 8001a48:	f006 fd86 	bl	8008558 <iprintf>
            mqtt_receive = 1;
 8001a4c:	4b28      	ldr	r3, [pc, #160]	@ (8001af0 <HAL_UART_RxCpltCallback+0x11c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
            clearRxBuffer();
 8001a52:	f7ff faa3 	bl	8000f9c <clearRxBuffer>
            clearMqttBuffer();
 8001a56:	f7ff fab3 	bl	8000fc0 <clearMqttBuffer>
            MQTT_Sub("STM32/subscribe");
 8001a5a:	4826      	ldr	r0, [pc, #152]	@ (8001af4 <HAL_UART_RxCpltCallback+0x120>)
 8001a5c:	f7ff fd36 	bl	80014cc <MQTT_Sub>
        }
        if (SIM800.mqttReceive.newEvent)
 8001a60:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x110>)
 8001a62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d020      	beq.n	8001aac <HAL_UART_RxCpltCallback+0xd8>
		{
        	printf("new data received from MQTT\n\r");
 8001a6a:	4823      	ldr	r0, [pc, #140]	@ (8001af8 <HAL_UART_RxCpltCallback+0x124>)
 8001a6c:	f006 fd74 	bl	8008558 <iprintf>
        	SIM800_MQTT_Receive_t receivedData;
			strncpy(receivedData.topic, (char *)SIM800.mqttReceive.topic, sizeof(receivedData.topic) - 1);
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	223f      	movs	r2, #63	@ 0x3f
 8001a76:	4921      	ldr	r1, [pc, #132]	@ (8001afc <HAL_UART_RxCpltCallback+0x128>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f006 ff11 	bl	80088a0 <strncpy>
			strncpy(receivedData.payload, (char *)SIM800.mqttReceive.payload, sizeof(receivedData.payload) - 1);
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	3340      	adds	r3, #64	@ 0x40
 8001a84:	227f      	movs	r2, #127	@ 0x7f
 8001a86:	491e      	ldr	r1, [pc, #120]	@ (8001b00 <HAL_UART_RxCpltCallback+0x12c>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f006 ff09 	bl	80088a0 <strncpy>
			receivedData.newEvent = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc


			xQueueSendFromISR(GSM_rxCallbackQueue, &receivedData, NULL);
 8001a94:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_UART_RxCpltCallback+0x130>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	f107 010c 	add.w	r1, r7, #12
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f004 f8a8 	bl	8005bf4 <xQueueGenericSendFromISR>
			SIM800.mqttReceive.newEvent = 0;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x110>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001aac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_UART_RxCpltCallback+0xf0>
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_UART_RxCpltCallback+0x108>)
 8001ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	f3bf 8f6f 	isb	sy
    }
}
 8001ac4:	bf00      	nop
 8001ac6:	37d8      	adds	r7, #216	@ 0xd8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40004c00 	.word	0x40004c00
 8001ad0:	20000c1c 	.word	0x20000c1c
 8001ad4:	20000ce0 	.word	0x20000ce0
 8001ad8:	20000d84 	.word	0x20000d84
 8001adc:	e000ed04 	.word	0xe000ed04
 8001ae0:	20000e14 	.word	0x20000e14
 8001ae4:	20000c24 	.word	0x20000c24
 8001ae8:	20000090 	.word	0x20000090
 8001aec:	08009c78 	.word	0x08009c78
 8001af0:	2000064a 	.word	0x2000064a
 8001af4:	08009c94 	.word	0x08009c94
 8001af8:	08009ca4 	.word	0x08009ca4
 8001afc:	20000c98 	.word	0x20000c98
 8001b00:	20000c54 	.word	0x20000c54
 8001b04:	20000c18 	.word	0x20000c18

08001b08 <ESP_UART_Task>:

void ESP_UART_Task(void *param)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
    while (1) {
        if (xQueueReceive(ESP_uartQueue, uartRxBuffer, portMAX_DELAY) == pdTRUE) {
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <ESP_UART_Task+0x3c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	490b      	ldr	r1, [pc, #44]	@ (8001b48 <ESP_UART_Task+0x40>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 f9b8 	bl	8005e90 <xQueueReceive>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d1f4      	bne.n	8001b10 <ESP_UART_Task+0x8>
            printf("UART Data Received: %s\n", uartRxBuffer);
 8001b26:	4908      	ldr	r1, [pc, #32]	@ (8001b48 <ESP_UART_Task+0x40>)
 8001b28:	4808      	ldr	r0, [pc, #32]	@ (8001b4c <ESP_UART_Task+0x44>)
 8001b2a:	f006 fd15 	bl	8008558 <iprintf>
            if(uartRxBuffer == 1)
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <ESP_UART_Task+0x40>)
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d1ed      	bne.n	8001b10 <ESP_UART_Task+0x8>
            {
            	printf("LED Toggled\n\r");
 8001b34:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <ESP_UART_Task+0x48>)
 8001b36:	f006 fd0f 	bl	8008558 <iprintf>
            	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <ESP_UART_Task+0x4c>)
 8001b3e:	f001 fc36 	bl	80033ae <HAL_GPIO_TogglePin>
        if (xQueueReceive(ESP_uartQueue, uartRxBuffer, portMAX_DELAY) == pdTRUE) {
 8001b42:	e7e5      	b.n	8001b10 <ESP_UART_Task+0x8>
 8001b44:	20000c1c 	.word	0x20000c1c
 8001b48:	20000ce0 	.word	0x20000ce0
 8001b4c:	08009cc4 	.word	0x08009cc4
 8001b50:	08009cdc 	.word	0x08009cdc
 8001b54:	40020000 	.word	0x40020000

08001b58 <GSM_rxCallBack_Task>:
        }
    }
}

void GSM_rxCallBack_Task(void *pvParameters)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0bc      	sub	sp, #240	@ 0xf0
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	SIM800_MQTT_Receive_t receivedData;
	while(1)
	{
		if(xQueueReceive(GSM_rxCallbackQueue, &receivedData, portMAX_DELAY) == pdTRUE)
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <GSM_rxCallBack_Task+0x9c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f004 f98f 	bl	8005e90 <xQueueReceive>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d1f3      	bne.n	8001b60 <GSM_rxCallBack_Task+0x8>
		{
			printf("data received from mqtt Receiver call back\n\r");
 8001b78:	481f      	ldr	r0, [pc, #124]	@ (8001bf8 <GSM_rxCallBack_Task+0xa0>)
 8001b7a:	f006 fced 	bl	8008558 <iprintf>
			printf("Topic: %s\n\r", receivedData.topic);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	481d      	ldr	r0, [pc, #116]	@ (8001bfc <GSM_rxCallBack_Task+0xa4>)
 8001b86:	f006 fce7 	bl	8008558 <iprintf>
			printf("Payload: %s\n\r", receivedData.payload);
 8001b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8e:	3340      	adds	r3, #64	@ 0x40
 8001b90:	4619      	mov	r1, r3
 8001b92:	481b      	ldr	r0, [pc, #108]	@ (8001c00 <GSM_rxCallBack_Task+0xa8>)
 8001b94:	f006 fce0 	bl	8008558 <iprintf>
			if(strcmp(receivedData.payload, "LED") == 0)
 8001b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b9c:	3340      	adds	r3, #64	@ 0x40
 8001b9e:	4919      	ldr	r1, [pc, #100]	@ (8001c04 <GSM_rxCallBack_Task+0xac>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fb35 	bl	8000210 <strcmp>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1d9      	bne.n	8001b60 <GSM_rxCallBack_Task+0x8>
			{
				buttonState ^= 1;
 8001bac:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <GSM_rxCallBack_Task+0xb0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f083 0301 	eor.w	r3, r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <GSM_rxCallBack_Task+0xb0>)
 8001bba:	701a      	strb	r2, [r3, #0]
				char mqttPayload[32];
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	4813      	ldr	r0, [pc, #76]	@ (8001c0c <GSM_rxCallBack_Task+0xb4>)
 8001bc0:	f001 fbf5 	bl	80033ae <HAL_GPIO_TogglePin>
				sprintf(mqttPayload, "{\"device1\":%d}", buttonState);
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <GSM_rxCallBack_Task+0xb0>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	490f      	ldr	r1, [pc, #60]	@ (8001c10 <GSM_rxCallBack_Task+0xb8>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f006 fd64 	bl	80086a0 <siprintf>
				MQTT_Pub("STM32/publish", mqttPayload);
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <GSM_rxCallBack_Task+0xbc>)
 8001be0:	f7ff fc06 	bl	80013f0 <MQTT_Pub>
				printf("MQTT Published: %s\n\r", mqttPayload);
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	4619      	mov	r1, r3
 8001bea:	480b      	ldr	r0, [pc, #44]	@ (8001c18 <GSM_rxCallBack_Task+0xc0>)
 8001bec:	f006 fcb4 	bl	8008558 <iprintf>
		if(xQueueReceive(GSM_rxCallbackQueue, &receivedData, portMAX_DELAY) == pdTRUE)
 8001bf0:	e7b6      	b.n	8001b60 <GSM_rxCallBack_Task+0x8>
 8001bf2:	bf00      	nop
 8001bf4:	20000c18 	.word	0x20000c18
 8001bf8:	08009cec 	.word	0x08009cec
 8001bfc:	08009d1c 	.word	0x08009d1c
 8001c00:	08009d28 	.word	0x08009d28
 8001c04:	08009d38 	.word	0x08009d38
 8001c08:	20000c20 	.word	0x20000c20
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	08009d3c 	.word	0x08009d3c
 8001c14:	08009d4c 	.word	0x08009d4c
 8001c18:	08009d5c 	.word	0x08009d5c

08001c1c <INT_GPIO_Task>:
		}
	}
}

void INT_GPIO_Task(void *pvParameters)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	if(xSemaphoreTake(xButtonSemaphore, portMAX_DELAY) == pdTRUE)
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <INT_GPIO_Task+0x54>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 fa11 	bl	8006054 <xQueueSemaphoreTake>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d1f5      	bne.n	8001c24 <INT_GPIO_Task+0x8>
    	{
    		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001c38:	2120      	movs	r1, #32
 8001c3a:	480e      	ldr	r0, [pc, #56]	@ (8001c74 <INT_GPIO_Task+0x58>)
 8001c3c:	f001 fbb7 	bl	80033ae <HAL_GPIO_TogglePin>
    		buttonState ^= 1;
 8001c40:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <INT_GPIO_Task+0x5c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <INT_GPIO_Task+0x5c>)
 8001c4e:	701a      	strb	r2, [r3, #0]
			printf("button state toggled: %d\n\r", buttonState);
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <INT_GPIO_Task+0x5c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4619      	mov	r1, r3
 8001c58:	4808      	ldr	r0, [pc, #32]	@ (8001c7c <INT_GPIO_Task+0x60>)
 8001c5a:	f006 fc7d 	bl	8008558 <iprintf>
			xQueueSend(mqttQueue, (void *)&buttonState, portMAX_DELAY);
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <INT_GPIO_Task+0x64>)
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	2300      	movs	r3, #0
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	4903      	ldr	r1, [pc, #12]	@ (8001c78 <INT_GPIO_Task+0x5c>)
 8001c6a:	f003 fec1 	bl	80059f0 <xQueueGenericSend>
    	if(xSemaphoreTake(xButtonSemaphore, portMAX_DELAY) == pdTRUE)
 8001c6e:	e7d9      	b.n	8001c24 <INT_GPIO_Task+0x8>
 8001c70:	20000c10 	.word	0x20000c10
 8001c74:	40020000 	.word	0x40020000
 8001c78:	20000c20 	.word	0x20000c20
 8001c7c:	08009d74 	.word	0x08009d74
 8001c80:	20000c14 	.word	0x20000c14

08001c84 <GSM_MQTT_Task>:
    	}
    }
}

void GSM_MQTT_Task(void *pvParameters)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	@ 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
   uint8_t receivedState;
   char mqttPayload[32];
   while(1)
   {
	   if (SIM800.mqttServer.connect == 0)
 8001c8c:	4b28      	ldr	r3, [pc, #160]	@ (8001d30 <GSM_MQTT_Task+0xac>)
 8001c8e:	7c9b      	ldrb	r3, [r3, #18]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <GSM_MQTT_Task+0x20>
	   {
		   MQTT_Init();
 8001c94:	f7ff f9d6 	bl	8001044 <MQTT_Init>
		   lastKeepAliveTime = millis();
 8001c98:	f000 f892 	bl	8001dc0 <millis>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4a25      	ldr	r2, [pc, #148]	@ (8001d34 <GSM_MQTT_Task+0xb0>)
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e040      	b.n	8001d26 <GSM_MQTT_Task+0xa2>
	   }
	  else
	   {
		  if(xQueueReceive(mqttQueue, &receivedState, pdMS_TO_TICKS(500)) == pdTRUE)
 8001ca4:	4b24      	ldr	r3, [pc, #144]	@ (8001d38 <GSM_MQTT_Task+0xb4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 8001cac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 f8ed 	bl	8005e90 <xQueueReceive>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d119      	bne.n	8001cf0 <GSM_MQTT_Task+0x6c>
		   {
			   sprintf(mqttPayload, "{\"device1\":%d}", receivedState);
 8001cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	491d      	ldr	r1, [pc, #116]	@ (8001d3c <GSM_MQTT_Task+0xb8>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 fce9 	bl	80086a0 <siprintf>
			   MQTT_Pub("STM32/publish", mqttPayload);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	481a      	ldr	r0, [pc, #104]	@ (8001d40 <GSM_MQTT_Task+0xbc>)
 8001cd6:	f7ff fb8b 	bl	80013f0 <MQTT_Pub>
			   printf("MQTT Published: %s\n\r", mqttPayload);
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4818      	ldr	r0, [pc, #96]	@ (8001d44 <GSM_MQTT_Task+0xc0>)
 8001ce2:	f006 fc39 	bl	8008558 <iprintf>
			   lastKeepAliveTime = millis();
 8001ce6:	f000 f86b 	bl	8001dc0 <millis>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <GSM_MQTT_Task+0xb0>)
 8001cee:	6013      	str	r3, [r2, #0]

		   }
		   if ((millis() - lastKeepAliveTime) >= (KEEP_ALIVE_INTERVAL * 500))
 8001cf0:	f000 f866 	bl	8001dc0 <millis>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <GSM_MQTT_Task+0xb0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d910      	bls.n	8001d26 <GSM_MQTT_Task+0xa2>
		   {
			   uint8_t pingreq_packet[2] = {0xC0, 0x00};
 8001d04:	23c0      	movs	r3, #192	@ 0xc0
 8001d06:	813b      	strh	r3, [r7, #8]
			   HAL_UART_Transmit(UART_SIM800, pingreq_packet, 2, 100);
 8001d08:	f107 0108 	add.w	r1, r7, #8
 8001d0c:	2364      	movs	r3, #100	@ 0x64
 8001d0e:	2202      	movs	r2, #2
 8001d10:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <GSM_MQTT_Task+0xc4>)
 8001d12:	f002 fc8d 	bl	8004630 <HAL_UART_Transmit>
			   printf("Sending MQTT PINGREQ\n\r");
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <GSM_MQTT_Task+0xc8>)
 8001d18:	f006 fc1e 	bl	8008558 <iprintf>
			   lastKeepAliveTime = millis();
 8001d1c:	f000 f850 	bl	8001dc0 <millis>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <GSM_MQTT_Task+0xb0>)
 8001d24:	6013      	str	r3, [r2, #0]
		   }
	   }
    vTaskDelay(100);
 8001d26:	2064      	movs	r0, #100	@ 0x64
 8001d28:	f004 fd70 	bl	800680c <vTaskDelay>
	   if (SIM800.mqttServer.connect == 0)
 8001d2c:	e7ae      	b.n	8001c8c <GSM_MQTT_Task+0x8>
 8001d2e:	bf00      	nop
 8001d30:	20000c24 	.word	0x20000c24
 8001d34:	20000cdc 	.word	0x20000cdc
 8001d38:	20000c14 	.word	0x20000c14
 8001d3c:	08009d3c 	.word	0x08009d3c
 8001d40:	08009d4c 	.word	0x08009d4c
 8001d44:	08009d5c 	.word	0x08009d5c
 8001d48:	20000e14 	.word	0x20000e14
 8001d4c:	08009d90 	.word	0x08009d90

08001d50 <HAL_GPIO_EXTI_Callback>:
   }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
    if (GPIO_Pin == USER_BT_Pin)
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d64:	d111      	bne.n	8001d8a <HAL_GPIO_EXTI_Callback+0x3a>
    {
        xSemaphoreGiveFromISR(xButtonSemaphore, xHigherPriorityTaskWoken);
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_GPIO_EXTI_Callback+0x44>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 ffee 	bl	8005d50 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_EXTI_Callback+0x3a>
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <HAL_GPIO_EXTI_Callback+0x48>)
 8001d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	f3bf 8f6f 	isb	sy
    }
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000c10 	.word	0x20000c10
 8001d98:	e000ed04 	.word	0xe000ed04

08001d9c <__io_putchar>:


#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001da4:	1d39      	adds	r1, r7, #4
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	2201      	movs	r2, #1
 8001dac:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <__io_putchar+0x20>)
 8001dae:	f002 fc3f 	bl	8004630 <HAL_UART_Transmit>
	return ch;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000dcc 	.word	0x20000dcc

08001dc0 <millis>:
#endif

uint32_t millis() {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001dc4:	f000 fcb8 	bl	8002738 <HAL_GetTick>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd4:	f000 fc7a 	bl	80026cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd8:	f000 f82a 	bl	8001e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ddc:	f7ff fcd8 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 8001de0:	f7ff fcb6 	bl	8001750 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001de4:	f000 fae0 	bl	80023a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001de8:	f000 fb08 	bl	80023fc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001dec:	f000 f8a4 	bl	8001f38 <MX_SPI1_Init>
  MX_UART4_Init();
 8001df0:	f000 fab0 	bl	8002354 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
//  HAL_Delay(3000);
//  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
//  HAL_Delay(10000);
  HAL_UART_Receive_IT(&huart4, uartRxBuffer, sizeof(uartRxBuffer));
 8001df4:	2201      	movs	r2, #1
 8001df6:	4909      	ldr	r1, [pc, #36]	@ (8001e1c <main+0x4c>)
 8001df8:	4809      	ldr	r0, [pc, #36]	@ (8001e20 <main+0x50>)
 8001dfa:	f002 fcda 	bl	80047b2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4908      	ldr	r1, [pc, #32]	@ (8001e24 <main+0x54>)
 8001e02:	4809      	ldr	r0, [pc, #36]	@ (8001e28 <main+0x58>)
 8001e04:	f002 fcd5 	bl	80047b2 <HAL_UART_Receive_IT>
  printf("system Init\n\r");
 8001e08:	4808      	ldr	r0, [pc, #32]	@ (8001e2c <main+0x5c>)
 8001e0a:	f006 fba5 	bl	8008558 <iprintf>
  GSM_init();
 8001e0e:	f7ff fd3d 	bl	800188c <GSM_init>
  FreeRTOS_Init();
 8001e12:	f7ff fd6d 	bl	80018f0 <FreeRTOS_Init>
//  uint8_t pub_uint8 = 1;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e16:	bf00      	nop
 8001e18:	e7fd      	b.n	8001e16 <main+0x46>
 8001e1a:	bf00      	nop
 8001e1c:	20000ce0 	.word	0x20000ce0
 8001e20:	20000d84 	.word	0x20000d84
 8001e24:	20000090 	.word	0x20000090
 8001e28:	20000e14 	.word	0x20000e14
 8001e2c:	08009da8 	.word	0x08009da8

08001e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b094      	sub	sp, #80	@ 0x50
 8001e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	2234      	movs	r2, #52	@ 0x34
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f006 fd26 	bl	8008890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	4b29      	ldr	r3, [pc, #164]	@ (8001f00 <SystemClock_Config+0xd0>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	4a28      	ldr	r2, [pc, #160]	@ (8001f00 <SystemClock_Config+0xd0>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e64:	4b26      	ldr	r3, [pc, #152]	@ (8001f00 <SystemClock_Config+0xd0>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e70:	2300      	movs	r3, #0
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <SystemClock_Config+0xd4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e7c:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <SystemClock_Config+0xd4>)
 8001e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <SystemClock_Config+0xd4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e94:	2301      	movs	r3, #1
 8001e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e98:	2310      	movs	r3, #16
 8001e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001ea8:	2348      	movs	r3, #72	@ 0x48
 8001eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fd9f 	bl	8003a00 <HAL_RCC_OscConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ec8:	f000 f830 	bl	8001f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	230f      	movs	r3, #15
 8001ece:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001edc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f001 fa93 	bl	8003414 <HAL_RCC_ClockConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ef4:	f000 f81a 	bl	8001f2c <Error_Handler>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3750      	adds	r7, #80	@ 0x50
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f1a:	f000 fbf9 	bl	8002710 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40001000 	.word	0x40001000

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <Error_Handler+0x8>

08001f38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f3e:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <MX_SPI1_Init+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f42:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f84:	220a      	movs	r2, #10
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f8a:	f001 ffd7 	bl	8003f3c <HAL_SPI_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f94:	f7ff ffca 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000ce4 	.word	0x20000ce4
 8001fa0:	40013000 	.word	0x40013000

08001fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	@ (8002064 <HAL_SPI_MspInit+0xc0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d149      	bne.n	800205a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <HAL_SPI_MspInit+0xc4>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a26      	ldr	r2, [pc, #152]	@ (8002068 <HAL_SPI_MspInit+0xc4>)
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <HAL_SPI_MspInit+0xc4>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <HAL_SPI_MspInit+0xc4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a1f      	ldr	r2, [pc, #124]	@ (8002068 <HAL_SPI_MspInit+0xc4>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <HAL_SPI_MspInit+0xc4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_SPI_MspInit+0xc4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_SPI_MspInit+0xc4>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_SPI_MspInit+0xc4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800201a:	23c0      	movs	r3, #192	@ 0xc0
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800202a:	2305      	movs	r3, #5
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	480d      	ldr	r0, [pc, #52]	@ (800206c <HAL_SPI_MspInit+0xc8>)
 8002036:	f001 f80d 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800203a:	2308      	movs	r3, #8
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800204a:	2305      	movs	r3, #5
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4806      	ldr	r0, [pc, #24]	@ (8002070 <HAL_SPI_MspInit+0xcc>)
 8002056:	f000 fffd 	bl	8003054 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	@ 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40013000 	.word	0x40013000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <HAL_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	4a0f      	ldr	r2, [pc, #60]	@ (80020c0 <HAL_MspInit+0x4c>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002088:	6453      	str	r3, [r2, #68]	@ 0x44
 800208a:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <HAL_MspInit+0x4c>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_MspInit+0x4c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <HAL_MspInit+0x4c>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_MspInit+0x4c>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800

080020c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	@ 0x38
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4b33      	ldr	r3, [pc, #204]	@ (80021a8 <HAL_InitTick+0xe4>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	4a32      	ldr	r2, [pc, #200]	@ (80021a8 <HAL_InitTick+0xe4>)
 80020de:	f043 0310 	orr.w	r3, r3, #16
 80020e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e4:	4b30      	ldr	r3, [pc, #192]	@ (80021a8 <HAL_InitTick+0xe4>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020f0:	f107 0210 	add.w	r2, r7, #16
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 faa4 	bl	8003648 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800210a:	f001 fa75 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 800210e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002110:	e004      	b.n	800211c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002112:	f001 fa71 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 8002116:	4603      	mov	r3, r0
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800211c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800211e:	4a23      	ldr	r2, [pc, #140]	@ (80021ac <HAL_InitTick+0xe8>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	0c9b      	lsrs	r3, r3, #18
 8002126:	3b01      	subs	r3, #1
 8002128:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800212a:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <HAL_InitTick+0xec>)
 800212c:	4a21      	ldr	r2, [pc, #132]	@ (80021b4 <HAL_InitTick+0xf0>)
 800212e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002130:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <HAL_InitTick+0xec>)
 8002132:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002136:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002138:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <HAL_InitTick+0xec>)
 800213a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <HAL_InitTick+0xec>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002144:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <HAL_InitTick+0xec>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <HAL_InitTick+0xec>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002150:	4817      	ldr	r0, [pc, #92]	@ (80021b0 <HAL_InitTick+0xec>)
 8002152:	f001 ff7c 	bl	800404e <HAL_TIM_Base_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800215c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002160:	2b00      	cmp	r3, #0
 8002162:	d11b      	bne.n	800219c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002164:	4812      	ldr	r0, [pc, #72]	@ (80021b0 <HAL_InitTick+0xec>)
 8002166:	f001 ffcb 	bl	8004100 <HAL_TIM_Base_Start_IT>
 800216a:	4603      	mov	r3, r0
 800216c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002170:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002174:	2b00      	cmp	r3, #0
 8002176:	d111      	bne.n	800219c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002178:	2036      	movs	r0, #54	@ 0x36
 800217a:	f000 fbe1 	bl	8002940 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d808      	bhi.n	8002196 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002184:	2200      	movs	r2, #0
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	2036      	movs	r0, #54	@ 0x36
 800218a:	f000 fbbd 	bl	8002908 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <HAL_InitTick+0xf4>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e002      	b.n	800219c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800219c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3738      	adds	r7, #56	@ 0x38
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40023800 	.word	0x40023800
 80021ac:	431bde83 	.word	0x431bde83
 80021b0:	20000d3c 	.word	0x20000d3c
 80021b4:	40001000 	.word	0x40001000
 80021b8:	20000004 	.word	0x20000004

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <NMI_Handler+0x4>

080021c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <MemManage_Handler+0x4>

080021d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <BusFault_Handler+0x4>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <UsageFault_Handler+0x4>

080021e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <DMA1_Stream2_IRQHandler+0x10>)
 80021fa:	f000 fcef 	bl	8002bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000e5c 	.word	0x20000e5c

08002208 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <USART3_IRQHandler+0x10>)
 800220e:	f002 faf5 	bl	80047fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000e14 	.word	0x20000e14

0800221c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BT_Pin);
 8002220:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002224:	f001 f8de 	bl	80033e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <UART4_IRQHandler+0x10>)
 8002232:	f002 fae3 	bl	80047fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000d84 	.word	0x20000d84

08002240 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <TIM6_DAC_IRQHandler+0x10>)
 8002246:	f001 ffcb 	bl	80041e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000d3c 	.word	0x20000d3c

08002254 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e00a      	b.n	800227c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002266:	f3af 8000 	nop.w
 800226a:	4601      	mov	r1, r0
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	b2ca      	uxtb	r2, r1
 8002274:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3301      	adds	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	dbf0      	blt.n	8002266 <_read+0x12>
  }

  return len;
 8002284:	687b      	ldr	r3, [r7, #4]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e009      	b.n	80022b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	60ba      	str	r2, [r7, #8]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fd77 	bl	8001d9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbf1      	blt.n	80022a0 <_write+0x12>
  }
  return len;
 80022bc:	687b      	ldr	r3, [r7, #4]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_close>:

int _close(int file)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ee:	605a      	str	r2, [r3, #4]
  return 0;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <_isatty>:

int _isatty(int file)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002334:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <SystemInit+0x20>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233a:	4a05      	ldr	r2, [pc, #20]	@ (8002350 <SystemInit+0x20>)
 800233c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <MX_UART4_Init+0x4c>)
 800235a:	4a12      	ldr	r2, [pc, #72]	@ (80023a4 <MX_UART4_Init+0x50>)
 800235c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800235e:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <MX_UART4_Init+0x4c>)
 8002360:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002364:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002366:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <MX_UART4_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800236c:	4b0c      	ldr	r3, [pc, #48]	@ (80023a0 <MX_UART4_Init+0x4c>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002372:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <MX_UART4_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002378:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <MX_UART4_Init+0x4c>)
 800237a:	220c      	movs	r2, #12
 800237c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237e:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <MX_UART4_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <MX_UART4_Init+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800238a:	4805      	ldr	r0, [pc, #20]	@ (80023a0 <MX_UART4_Init+0x4c>)
 800238c:	f002 f900 	bl	8004590 <HAL_UART_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002396:	f7ff fdc9 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000d84 	.word	0x20000d84
 80023a4:	40004c00 	.word	0x40004c00

080023a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <MX_USART2_UART_Init+0x4c>)
 80023ae:	4a12      	ldr	r2, [pc, #72]	@ (80023f8 <MX_USART2_UART_Init+0x50>)
 80023b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023b2:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <MX_USART2_UART_Init+0x4c>)
 80023b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <MX_USART2_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023c0:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <MX_USART2_UART_Init+0x4c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023c6:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <MX_USART2_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023cc:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <MX_USART2_UART_Init+0x4c>)
 80023ce:	220c      	movs	r2, #12
 80023d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d2:	4b08      	ldr	r3, [pc, #32]	@ (80023f4 <MX_USART2_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d8:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <MX_USART2_UART_Init+0x4c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023de:	4805      	ldr	r0, [pc, #20]	@ (80023f4 <MX_USART2_UART_Init+0x4c>)
 80023e0:	f002 f8d6 	bl	8004590 <HAL_UART_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ea:	f7ff fd9f 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000dcc 	.word	0x20000dcc
 80023f8:	40004400 	.word	0x40004400

080023fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MX_USART3_UART_Init+0x4c>)
 8002402:	4a12      	ldr	r2, [pc, #72]	@ (800244c <MX_USART3_UART_Init+0x50>)
 8002404:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <MX_USART3_UART_Init+0x4c>)
 8002408:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800240c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <MX_USART3_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <MX_USART3_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <MX_USART3_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <MX_USART3_UART_Init+0x4c>)
 8002422:	220c      	movs	r2, #12
 8002424:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <MX_USART3_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <MX_USART3_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <MX_USART3_UART_Init+0x4c>)
 8002434:	f002 f8ac 	bl	8004590 <HAL_UART_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800243e:	f7ff fd75 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000e14 	.word	0x20000e14
 800244c:	40004800 	.word	0x40004800

08002450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	@ 0x38
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a79      	ldr	r2, [pc, #484]	@ (8002654 <HAL_UART_MspInit+0x204>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d162      	bne.n	8002538 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	4b78      	ldr	r3, [pc, #480]	@ (8002658 <HAL_UART_MspInit+0x208>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	4a77      	ldr	r2, [pc, #476]	@ (8002658 <HAL_UART_MspInit+0x208>)
 800247c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002480:	6413      	str	r3, [r2, #64]	@ 0x40
 8002482:	4b75      	ldr	r3, [pc, #468]	@ (8002658 <HAL_UART_MspInit+0x208>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	4b71      	ldr	r3, [pc, #452]	@ (8002658 <HAL_UART_MspInit+0x208>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a70      	ldr	r2, [pc, #448]	@ (8002658 <HAL_UART_MspInit+0x208>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b6e      	ldr	r3, [pc, #440]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024aa:	2303      	movs	r3, #3
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024ba:	2308      	movs	r3, #8
 80024bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c2:	4619      	mov	r1, r3
 80024c4:	4865      	ldr	r0, [pc, #404]	@ (800265c <HAL_UART_MspInit+0x20c>)
 80024c6:	f000 fdc5 	bl	8003054 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80024ca:	4b65      	ldr	r3, [pc, #404]	@ (8002660 <HAL_UART_MspInit+0x210>)
 80024cc:	4a65      	ldr	r2, [pc, #404]	@ (8002664 <HAL_UART_MspInit+0x214>)
 80024ce:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80024d0:	4b63      	ldr	r3, [pc, #396]	@ (8002660 <HAL_UART_MspInit+0x210>)
 80024d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024d6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024d8:	4b61      	ldr	r3, [pc, #388]	@ (8002660 <HAL_UART_MspInit+0x210>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024de:	4b60      	ldr	r3, [pc, #384]	@ (8002660 <HAL_UART_MspInit+0x210>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002660 <HAL_UART_MspInit+0x210>)
 80024e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ea:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002660 <HAL_UART_MspInit+0x210>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <HAL_UART_MspInit+0x210>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80024f8:	4b59      	ldr	r3, [pc, #356]	@ (8002660 <HAL_UART_MspInit+0x210>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024fe:	4b58      	ldr	r3, [pc, #352]	@ (8002660 <HAL_UART_MspInit+0x210>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002504:	4b56      	ldr	r3, [pc, #344]	@ (8002660 <HAL_UART_MspInit+0x210>)
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800250a:	4855      	ldr	r0, [pc, #340]	@ (8002660 <HAL_UART_MspInit+0x210>)
 800250c:	f000 fa26 	bl	800295c <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002516:	f7ff fd09 	bl	8001f2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a50      	ldr	r2, [pc, #320]	@ (8002660 <HAL_UART_MspInit+0x210>)
 800251e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002520:	4a4f      	ldr	r2, [pc, #316]	@ (8002660 <HAL_UART_MspInit+0x210>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2106      	movs	r1, #6
 800252a:	2034      	movs	r0, #52	@ 0x34
 800252c:	f000 f9ec 	bl	8002908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002530:	2034      	movs	r0, #52	@ 0x34
 8002532:	f000 fa05 	bl	8002940 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002536:	e089      	b.n	800264c <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a4a      	ldr	r2, [pc, #296]	@ (8002668 <HAL_UART_MspInit+0x218>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12c      	bne.n	800259c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	4b44      	ldr	r3, [pc, #272]	@ (8002658 <HAL_UART_MspInit+0x208>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	4a43      	ldr	r2, [pc, #268]	@ (8002658 <HAL_UART_MspInit+0x208>)
 800254c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002550:	6413      	str	r3, [r2, #64]	@ 0x40
 8002552:	4b41      	ldr	r3, [pc, #260]	@ (8002658 <HAL_UART_MspInit+0x208>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	4b3d      	ldr	r3, [pc, #244]	@ (8002658 <HAL_UART_MspInit+0x208>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a3c      	ldr	r2, [pc, #240]	@ (8002658 <HAL_UART_MspInit+0x208>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b3a      	ldr	r3, [pc, #232]	@ (8002658 <HAL_UART_MspInit+0x208>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800257a:	230c      	movs	r3, #12
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800258a:	2307      	movs	r3, #7
 800258c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002592:	4619      	mov	r1, r3
 8002594:	4831      	ldr	r0, [pc, #196]	@ (800265c <HAL_UART_MspInit+0x20c>)
 8002596:	f000 fd5d 	bl	8003054 <HAL_GPIO_Init>
}
 800259a:	e057      	b.n	800264c <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART3)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a32      	ldr	r2, [pc, #200]	@ (800266c <HAL_UART_MspInit+0x21c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d152      	bne.n	800264c <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b6:	4b28      	ldr	r3, [pc, #160]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a23      	ldr	r2, [pc, #140]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <HAL_UART_MspInit+0x208>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025fa:	2320      	movs	r3, #32
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800260a:	2307      	movs	r3, #7
 800260c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002612:	4619      	mov	r1, r3
 8002614:	4816      	ldr	r0, [pc, #88]	@ (8002670 <HAL_UART_MspInit+0x220>)
 8002616:	f000 fd1d 	bl	8003054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800261a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800262c:	2307      	movs	r3, #7
 800262e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002634:	4619      	mov	r1, r3
 8002636:	480f      	ldr	r0, [pc, #60]	@ (8002674 <HAL_UART_MspInit+0x224>)
 8002638:	f000 fd0c 	bl	8003054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2106      	movs	r1, #6
 8002640:	2027      	movs	r0, #39	@ 0x27
 8002642:	f000 f961 	bl	8002908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002646:	2027      	movs	r0, #39	@ 0x27
 8002648:	f000 f97a 	bl	8002940 <HAL_NVIC_EnableIRQ>
}
 800264c:	bf00      	nop
 800264e:	3738      	adds	r7, #56	@ 0x38
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40004c00 	.word	0x40004c00
 8002658:	40023800 	.word	0x40023800
 800265c:	40020000 	.word	0x40020000
 8002660:	20000e5c 	.word	0x20000e5c
 8002664:	40026040 	.word	0x40026040
 8002668:	40004400 	.word	0x40004400
 800266c:	40004800 	.word	0x40004800
 8002670:	40020800 	.word	0x40020800
 8002674:	40020400 	.word	0x40020400

08002678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800267c:	f7ff fe58 	bl	8002330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002680:	480c      	ldr	r0, [pc, #48]	@ (80026b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002682:	490d      	ldr	r1, [pc, #52]	@ (80026b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002684:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002698:	4c0a      	ldr	r4, [pc, #40]	@ (80026c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026a6:	f006 f96b 	bl	8008980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026aa:	f7ff fb91 	bl	8001dd0 <main>
  bx  lr    
 80026ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80026bc:	08009e34 	.word	0x08009e34
  ldr r2, =_sbss
 80026c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80026c4:	20013db8 	.word	0x20013db8

080026c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC_IRQHandler>
	...

080026cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <HAL_Init+0x40>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <HAL_Init+0x40>)
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e8:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_Init+0x40>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a07      	ldr	r2, [pc, #28]	@ (800270c <HAL_Init+0x40>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f4:	2003      	movs	r0, #3
 80026f6:	f000 f8fc 	bl	80028f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fa:	200f      	movs	r0, #15
 80026fc:	f7ff fce2 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002700:	f7ff fcb8 	bl	8002074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00

08002710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <HAL_IncTick+0x20>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_IncTick+0x24>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <HAL_IncTick+0x24>)
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000008 	.word	0x20000008
 8002734:	20000ebc 	.word	0x20000ebc

08002738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b03      	ldr	r3, [pc, #12]	@ (800274c <HAL_GetTick+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000ebc 	.word	0x20000ebc

08002750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff ffee 	bl	8002738 <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d005      	beq.n	8002776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276a:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <HAL_Delay+0x44>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002776:	bf00      	nop
 8002778:	f7ff ffde 	bl	8002738 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d8f7      	bhi.n	8002778 <HAL_Delay+0x28>
  {
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000008 	.word	0x20000008

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4907      	ldr	r1, [pc, #28]	@ (8002834 <__NVIC_EnableIRQ+0x38>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db0a      	blt.n	8002862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	490c      	ldr	r1, [pc, #48]	@ (8002884 <__NVIC_SetPriority+0x4c>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	0112      	lsls	r2, r2, #4
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	440b      	add	r3, r1
 800285c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002860:	e00a      	b.n	8002878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4908      	ldr	r1, [pc, #32]	@ (8002888 <__NVIC_SetPriority+0x50>)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b04      	subs	r3, #4
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	440b      	add	r3, r1
 8002876:	761a      	strb	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	@ 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f1c3 0307 	rsb	r3, r3, #7
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf28      	it	cs
 80028aa:	2304      	movcs	r3, #4
 80028ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d902      	bls.n	80028bc <NVIC_EncodePriority+0x30>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b03      	subs	r3, #3
 80028ba:	e000      	b.n	80028be <NVIC_EncodePriority+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43d9      	mvns	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	4313      	orrs	r3, r2
         );
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	@ 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff4c 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800291a:	f7ff ff61 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 800291e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	6978      	ldr	r0, [r7, #20]
 8002926:	f7ff ffb1 	bl	800288c <NVIC_EncodePriority>
 800292a:	4602      	mov	r2, r0
 800292c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff80 	bl	8002838 <__NVIC_SetPriority>
}
 8002938:	bf00      	nop
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff54 	bl	80027fc <__NVIC_EnableIRQ>
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff fee6 	bl	8002738 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e099      	b.n	8002aac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002998:	e00f      	b.n	80029ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299a:	f7ff fecd 	bl	8002738 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d908      	bls.n	80029ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e078      	b.n	8002aac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e8      	bne.n	800299a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4b38      	ldr	r3, [pc, #224]	@ (8002ab4 <HAL_DMA_Init+0x158>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d117      	bne.n	8002a7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fa7b 	bl	8002f5c <DMA_CheckFifoParam>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e016      	b.n	8002aac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fa32 	bl	8002ef0 <DMA_CalcBaseAndBitshift>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a94:	223f      	movs	r2, #63	@ 0x3f
 8002a96:	409a      	lsls	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	f010803f 	.word	0xf010803f

08002ab8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ac6:	f7ff fe37 	bl	8002738 <HAL_GetTick>
 8002aca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2280      	movs	r2, #128	@ 0x80
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e052      	b.n	8002b90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0216 	bic.w	r2, r2, #22
 8002af8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <HAL_DMA_Abort+0x62>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0208 	bic.w	r2, r2, #8
 8002b28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3a:	e013      	b.n	8002b64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3c:	f7ff fdfc 	bl	8002738 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d90c      	bls.n	8002b64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2203      	movs	r2, #3
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e015      	b.n	8002b90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1e4      	bne.n	8002b3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b76:	223f      	movs	r2, #63	@ 0x3f
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d004      	beq.n	8002bb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2280      	movs	r2, #128	@ 0x80
 8002bb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00c      	b.n	8002bd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2205      	movs	r2, #5
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0201 	bic.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002be8:	4b8e      	ldr	r3, [pc, #568]	@ (8002e24 <HAL_DMA_IRQHandler+0x248>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a8e      	ldr	r2, [pc, #568]	@ (8002e28 <HAL_DMA_IRQHandler+0x24c>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0a9b      	lsrs	r3, r3, #10
 8002bf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c06:	2208      	movs	r2, #8
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01a      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0204 	bic.w	r2, r2, #4
 8002c2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	2208      	movs	r2, #8
 8002c36:	409a      	lsls	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d012      	beq.n	8002c7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c76:	f043 0202 	orr.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	2204      	movs	r2, #4
 8002c84:	409a      	lsls	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f043 0204 	orr.w	r2, r3, #4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	2210      	movs	r2, #16
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d043      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d03c      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d018      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d024      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
 8002d0a:	e01f      	b.n	8002d4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01b      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
 8002d1c:	e016      	b.n	8002d4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0208 	bic.w	r2, r2, #8
 8002d3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	2220      	movs	r2, #32
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 808f 	beq.w	8002e7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8087 	beq.w	8002e7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d72:	2220      	movs	r2, #32
 8002d74:	409a      	lsls	r2, r3
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d136      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0216 	bic.w	r2, r2, #22
 8002d94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002da4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <HAL_DMA_IRQHandler+0x1da>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d007      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0208 	bic.w	r2, r2, #8
 8002dc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	223f      	movs	r2, #63	@ 0x3f
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d07e      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
        }
        return;
 8002df2:	e079      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01d      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d031      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
 8002e20:	e02c      	b.n	8002e7c <HAL_DMA_IRQHandler+0x2a0>
 8002e22:	bf00      	nop
 8002e24:	20000000 	.word	0x20000000
 8002e28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d023      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
 8002e3c:	e01e      	b.n	8002e7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10f      	bne.n	8002e6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0210 	bic.w	r2, r2, #16
 8002e5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d032      	beq.n	8002eea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d022      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2205      	movs	r2, #5
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d307      	bcc.n	8002ec4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f2      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x2cc>
 8002ec2:	e000      	b.n	8002ec6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ec4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
 8002ee6:	e000      	b.n	8002eea <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ee8:	bf00      	nop
    }
  }
}
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	3b10      	subs	r3, #16
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <DMA_CalcBaseAndBitshift+0x64>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f0a:	4a13      	ldr	r2, [pc, #76]	@ (8002f58 <DMA_CalcBaseAndBitshift+0x68>)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d909      	bls.n	8002f32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	1d1a      	adds	r2, r3, #4
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f30:	e007      	b.n	8002f42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	aaaaaaab 	.word	0xaaaaaaab
 8002f58:	08009de8 	.word	0x08009de8

08002f5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d11f      	bne.n	8002fb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d856      	bhi.n	800302a <DMA_CheckFifoParam+0xce>
 8002f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <DMA_CheckFifoParam+0x28>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002fa7 	.word	0x08002fa7
 8002f8c:	08002f95 	.word	0x08002f95
 8002f90:	0800302b 	.word	0x0800302b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d046      	beq.n	800302e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa4:	e043      	b.n	800302e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fae:	d140      	bne.n	8003032 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb4:	e03d      	b.n	8003032 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fbe:	d121      	bne.n	8003004 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d837      	bhi.n	8003036 <DMA_CheckFifoParam+0xda>
 8002fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fcc <DMA_CheckFifoParam+0x70>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08002fdd 	.word	0x08002fdd
 8002fd0:	08002fe3 	.word	0x08002fe3
 8002fd4:	08002fdd 	.word	0x08002fdd
 8002fd8:	08002ff5 	.word	0x08002ff5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e030      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d025      	beq.n	800303a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff2:	e022      	b.n	800303a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ffc:	d11f      	bne.n	800303e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003002:	e01c      	b.n	800303e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d903      	bls.n	8003012 <DMA_CheckFifoParam+0xb6>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d003      	beq.n	8003018 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003010:	e018      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      break;
 8003016:	e015      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00e      	beq.n	8003042 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      break;
 8003028:	e00b      	b.n	8003042 <DMA_CheckFifoParam+0xe6>
      break;
 800302a:	bf00      	nop
 800302c:	e00a      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 800302e:	bf00      	nop
 8003030:	e008      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 8003032:	bf00      	nop
 8003034:	e006      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 8003036:	bf00      	nop
 8003038:	e004      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 800303a:	bf00      	nop
 800303c:	e002      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;   
 800303e:	bf00      	nop
 8003040:	e000      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 8003042:	bf00      	nop
    }
  } 
  
  return status; 
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	@ 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e165      	b.n	800333c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003070:	2201      	movs	r2, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	429a      	cmp	r2, r3
 800308a:	f040 8154 	bne.w	8003336 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d005      	beq.n	80030a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d130      	bne.n	8003108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 0201 	and.w	r2, r3, #1
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b03      	cmp	r3, #3
 8003112:	d017      	beq.n	8003144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d123      	bne.n	8003198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	220f      	movs	r2, #15
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	08da      	lsrs	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3208      	adds	r2, #8
 8003192:	69b9      	ldr	r1, [r7, #24]
 8003194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0203 	and.w	r2, r3, #3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80ae 	beq.w	8003336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b5d      	ldr	r3, [pc, #372]	@ (8003354 <HAL_GPIO_Init+0x300>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003354 <HAL_GPIO_Init+0x300>)
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003354 <HAL_GPIO_Init+0x300>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031f6:	4a58      	ldr	r2, [pc, #352]	@ (8003358 <HAL_GPIO_Init+0x304>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4f      	ldr	r2, [pc, #316]	@ (800335c <HAL_GPIO_Init+0x308>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d025      	beq.n	800326e <HAL_GPIO_Init+0x21a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4e      	ldr	r2, [pc, #312]	@ (8003360 <HAL_GPIO_Init+0x30c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01f      	beq.n	800326a <HAL_GPIO_Init+0x216>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4d      	ldr	r2, [pc, #308]	@ (8003364 <HAL_GPIO_Init+0x310>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d019      	beq.n	8003266 <HAL_GPIO_Init+0x212>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4c      	ldr	r2, [pc, #304]	@ (8003368 <HAL_GPIO_Init+0x314>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_GPIO_Init+0x20e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a4b      	ldr	r2, [pc, #300]	@ (800336c <HAL_GPIO_Init+0x318>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00d      	beq.n	800325e <HAL_GPIO_Init+0x20a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4a      	ldr	r2, [pc, #296]	@ (8003370 <HAL_GPIO_Init+0x31c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <HAL_GPIO_Init+0x206>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a49      	ldr	r2, [pc, #292]	@ (8003374 <HAL_GPIO_Init+0x320>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_GPIO_Init+0x202>
 8003252:	2306      	movs	r3, #6
 8003254:	e00c      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 8003256:	2307      	movs	r3, #7
 8003258:	e00a      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 800325a:	2305      	movs	r3, #5
 800325c:	e008      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 800325e:	2304      	movs	r3, #4
 8003260:	e006      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 8003262:	2303      	movs	r3, #3
 8003264:	e004      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 8003266:	2302      	movs	r3, #2
 8003268:	e002      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_GPIO_Init+0x21c>
 800326e:	2300      	movs	r3, #0
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	f002 0203 	and.w	r2, r2, #3
 8003276:	0092      	lsls	r2, r2, #2
 8003278:	4093      	lsls	r3, r2
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003280:	4935      	ldr	r1, [pc, #212]	@ (8003358 <HAL_GPIO_Init+0x304>)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800328e:	4b3a      	ldr	r3, [pc, #232]	@ (8003378 <HAL_GPIO_Init+0x324>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b2:	4a31      	ldr	r2, [pc, #196]	@ (8003378 <HAL_GPIO_Init+0x324>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003378 <HAL_GPIO_Init+0x324>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032dc:	4a26      	ldr	r2, [pc, #152]	@ (8003378 <HAL_GPIO_Init+0x324>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032e2:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <HAL_GPIO_Init+0x324>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003306:	4a1c      	ldr	r2, [pc, #112]	@ (8003378 <HAL_GPIO_Init+0x324>)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800330c:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <HAL_GPIO_Init+0x324>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003330:	4a11      	ldr	r2, [pc, #68]	@ (8003378 <HAL_GPIO_Init+0x324>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3301      	adds	r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b0f      	cmp	r3, #15
 8003340:	f67f ae96 	bls.w	8003070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	3724      	adds	r7, #36	@ 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	40013800 	.word	0x40013800
 800335c:	40020000 	.word	0x40020000
 8003360:	40020400 	.word	0x40020400
 8003364:	40020800 	.word	0x40020800
 8003368:	40020c00 	.word	0x40020c00
 800336c:	40021000 	.word	0x40021000
 8003370:	40021400 	.word	0x40021400
 8003374:	40021800 	.word	0x40021800
 8003378:	40013c00 	.word	0x40013c00

0800337c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
 8003388:	4613      	mov	r3, r2
 800338a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800338c:	787b      	ldrb	r3, [r7, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003398:	e003      	b.n	80033a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	041a      	lsls	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	619a      	str	r2, [r3, #24]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033c0:	887a      	ldrh	r2, [r7, #2]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	041a      	lsls	r2, r3, #16
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	400b      	ands	r3, r1
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	619a      	str	r2, [r3, #24]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033ee:	4b08      	ldr	r3, [pc, #32]	@ (8003410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033fa:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fca4 	bl	8001d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40013c00 	.word	0x40013c00

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0cc      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b68      	ldr	r3, [pc, #416]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d90c      	bls.n	8003450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b65      	ldr	r3, [pc, #404]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b63      	ldr	r3, [pc, #396]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0b8      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003468:	4b59      	ldr	r3, [pc, #356]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a58      	ldr	r2, [pc, #352]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003472:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003480:	4b53      	ldr	r3, [pc, #332]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a52      	ldr	r2, [pc, #328]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800348a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b50      	ldr	r3, [pc, #320]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	494d      	ldr	r1, [pc, #308]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d044      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b47      	ldr	r3, [pc, #284]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d119      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e07f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b3f      	ldr	r3, [pc, #252]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e067      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b37      	ldr	r3, [pc, #220]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4934      	ldr	r1, [pc, #208]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7ff f918 	bl	8002738 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7ff f914 	bl	8002738 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e04f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2b      	ldr	r3, [pc, #172]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b25      	ldr	r3, [pc, #148]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d20c      	bcs.n	800355c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b22      	ldr	r3, [pc, #136]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b20      	ldr	r3, [pc, #128]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e032      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b19      	ldr	r3, [pc, #100]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4916      	ldr	r1, [pc, #88]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003586:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	490e      	ldr	r1, [pc, #56]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800359a:	f000 f887 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490a      	ldr	r1, [pc, #40]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a09      	ldr	r2, [pc, #36]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035b6:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fd82 	bl	80020c4 <HAL_InitTick>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023c00 	.word	0x40023c00
 80035d0:	40023800 	.word	0x40023800
 80035d4:	08009dd0 	.word	0x08009dd0
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004

080035e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e4:	4b03      	ldr	r3, [pc, #12]	@ (80035f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000000 	.word	0x20000000

080035f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035fc:	f7ff fff0 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0a9b      	lsrs	r3, r3, #10
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	@ (800361c <HAL_RCC_GetPCLK1Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	08009de0 	.word	0x08009de0

08003620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003624:	f7ff ffdc 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003628:	4602      	mov	r2, r0
 800362a:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	0b5b      	lsrs	r3, r3, #13
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	4903      	ldr	r1, [pc, #12]	@ (8003644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003636:	5ccb      	ldrb	r3, [r1, r3]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40023800 	.word	0x40023800
 8003644:	08009de0 	.word	0x08009de0

08003648 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	220f      	movs	r2, #15
 8003656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003658:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <HAL_RCC_GetClockConfig+0x5c>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0203 	and.w	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003664:	4b0f      	ldr	r3, [pc, #60]	@ (80036a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003670:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800367c:	4b09      	ldr	r3, [pc, #36]	@ (80036a4 <HAL_RCC_GetClockConfig+0x5c>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	08db      	lsrs	r3, r3, #3
 8003682:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800368a:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <HAL_RCC_GetClockConfig+0x60>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 020f 	and.w	r2, r3, #15
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	601a      	str	r2, [r3, #0]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40023c00 	.word	0x40023c00

080036ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b0:	b0a6      	sub	sp, #152	@ 0x98
 80036b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d2:	4bc8      	ldr	r3, [pc, #800]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	f200 817e 	bhi.w	80039dc <HAL_RCC_GetSysClockFreq+0x330>
 80036e0:	a201      	add	r2, pc, #4	@ (adr r2, 80036e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	0800371d 	.word	0x0800371d
 80036ec:	080039dd 	.word	0x080039dd
 80036f0:	080039dd 	.word	0x080039dd
 80036f4:	080039dd 	.word	0x080039dd
 80036f8:	08003725 	.word	0x08003725
 80036fc:	080039dd 	.word	0x080039dd
 8003700:	080039dd 	.word	0x080039dd
 8003704:	080039dd 	.word	0x080039dd
 8003708:	0800372d 	.word	0x0800372d
 800370c:	080039dd 	.word	0x080039dd
 8003710:	080039dd 	.word	0x080039dd
 8003714:	080039dd 	.word	0x080039dd
 8003718:	08003897 	.word	0x08003897
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800371c:	4bb6      	ldr	r3, [pc, #728]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800371e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003722:	e15f      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003724:	4bb5      	ldr	r3, [pc, #724]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x350>)
 8003726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800372a:	e15b      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372c:	4bb1      	ldr	r3, [pc, #708]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003738:	4bae      	ldr	r3, [pc, #696]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d031      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003744:	4bab      	ldr	r3, [pc, #684]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	2200      	movs	r2, #0
 800374c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800374e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003756:	663b      	str	r3, [r7, #96]	@ 0x60
 8003758:	2300      	movs	r3, #0
 800375a:	667b      	str	r3, [r7, #100]	@ 0x64
 800375c:	4ba7      	ldr	r3, [pc, #668]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x350>)
 800375e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003762:	462a      	mov	r2, r5
 8003764:	fb03 f202 	mul.w	r2, r3, r2
 8003768:	2300      	movs	r3, #0
 800376a:	4621      	mov	r1, r4
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	4aa2      	ldr	r2, [pc, #648]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x350>)
 8003774:	4621      	mov	r1, r4
 8003776:	fba1 1202 	umull	r1, r2, r1, r2
 800377a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800377c:	460a      	mov	r2, r1
 800377e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003780:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003782:	4413      	add	r3, r2
 8003784:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800378a:	2200      	movs	r2, #0
 800378c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800378e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003790:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003794:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003798:	f7fc fda2 	bl	80002e0 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037a6:	e064      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a8:	4b92      	ldr	r3, [pc, #584]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	2200      	movs	r2, #0
 80037b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80037b2:	657a      	str	r2, [r7, #84]	@ 0x54
 80037b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037bc:	2300      	movs	r3, #0
 80037be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80037c4:	4622      	mov	r2, r4
 80037c6:	462b      	mov	r3, r5
 80037c8:	f04f 0000 	mov.w	r0, #0
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	0159      	lsls	r1, r3, #5
 80037d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d6:	0150      	lsls	r0, r2, #5
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4621      	mov	r1, r4
 80037de:	1a51      	subs	r1, r2, r1
 80037e0:	6139      	str	r1, [r7, #16]
 80037e2:	4629      	mov	r1, r5
 80037e4:	eb63 0301 	sbc.w	r3, r3, r1
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f6:	4659      	mov	r1, fp
 80037f8:	018b      	lsls	r3, r1, #6
 80037fa:	4651      	mov	r1, sl
 80037fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003800:	4651      	mov	r1, sl
 8003802:	018a      	lsls	r2, r1, #6
 8003804:	4651      	mov	r1, sl
 8003806:	ebb2 0801 	subs.w	r8, r2, r1
 800380a:	4659      	mov	r1, fp
 800380c:	eb63 0901 	sbc.w	r9, r3, r1
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003820:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003824:	4690      	mov	r8, r2
 8003826:	4699      	mov	r9, r3
 8003828:	4623      	mov	r3, r4
 800382a:	eb18 0303 	adds.w	r3, r8, r3
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	462b      	mov	r3, r5
 8003832:	eb49 0303 	adc.w	r3, r9, r3
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003844:	4629      	mov	r1, r5
 8003846:	028b      	lsls	r3, r1, #10
 8003848:	4621      	mov	r1, r4
 800384a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800384e:	4621      	mov	r1, r4
 8003850:	028a      	lsls	r2, r1, #10
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800385a:	2200      	movs	r2, #0
 800385c:	643b      	str	r3, [r7, #64]	@ 0x40
 800385e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003860:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003864:	f7fc fd3c 	bl	80002e0 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4613      	mov	r3, r2
 800386e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003872:	4b60      	ldr	r3, [pc, #384]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	3301      	adds	r3, #1
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003884:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003888:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003894:	e0a6      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003896:	4b57      	ldr	r3, [pc, #348]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800389e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a2:	4b54      	ldr	r3, [pc, #336]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02a      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ae:	4b51      	ldr	r3, [pc, #324]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	2200      	movs	r2, #0
 80038b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038c0:	2100      	movs	r1, #0
 80038c2:	4b4e      	ldr	r3, [pc, #312]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x350>)
 80038c4:	fb03 f201 	mul.w	r2, r3, r1
 80038c8:	2300      	movs	r3, #0
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	4a4a      	ldr	r2, [pc, #296]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x350>)
 80038d2:	fba0 1202 	umull	r1, r2, r0, r2
 80038d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80038d8:	460a      	mov	r2, r1
 80038da:	673a      	str	r2, [r7, #112]	@ 0x70
 80038dc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038de:	4413      	add	r3, r2
 80038e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80038e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e6:	2200      	movs	r2, #0
 80038e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ea:	637a      	str	r2, [r7, #52]	@ 0x34
 80038ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80038f0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80038f4:	f7fc fcf4 	bl	80002e0 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4613      	mov	r3, r2
 80038fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003902:	e05b      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003904:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	2200      	movs	r2, #0
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800390e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
 800391c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	f04f 0000 	mov.w	r0, #0
 8003928:	f04f 0100 	mov.w	r1, #0
 800392c:	0159      	lsls	r1, r3, #5
 800392e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003932:	0150      	lsls	r0, r2, #5
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4641      	mov	r1, r8
 800393a:	ebb2 0a01 	subs.w	sl, r2, r1
 800393e:	4649      	mov	r1, r9
 8003940:	eb63 0b01 	sbc.w	fp, r3, r1
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003950:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003954:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003958:	ebb2 040a 	subs.w	r4, r2, sl
 800395c:	eb63 050b 	sbc.w	r5, r3, fp
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	00eb      	lsls	r3, r5, #3
 800396a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800396e:	00e2      	lsls	r2, r4, #3
 8003970:	4614      	mov	r4, r2
 8003972:	461d      	mov	r5, r3
 8003974:	4643      	mov	r3, r8
 8003976:	18e3      	adds	r3, r4, r3
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	464b      	mov	r3, r9
 800397c:	eb45 0303 	adc.w	r3, r5, r3
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800398e:	4629      	mov	r1, r5
 8003990:	028b      	lsls	r3, r1, #10
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003998:	4621      	mov	r1, r4
 800399a:	028a      	lsls	r2, r1, #10
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039a4:	2200      	movs	r2, #0
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	61fa      	str	r2, [r7, #28]
 80039aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ae:	f7fc fc97 	bl	80002e0 <__aeabi_uldivmod>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4613      	mov	r3, r2
 80039b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039bc:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	0f1b      	lsrs	r3, r3, #28
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80039ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80039da:	e003      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80039de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80039e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3798      	adds	r7, #152	@ 0x98
 80039ec:	46bd      	mov	sp, r7
 80039ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	017d7840 	.word	0x017d7840

08003a00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e28d      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8083 	beq.w	8003b26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a20:	4b94      	ldr	r3, [pc, #592]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d019      	beq.n	8003a60 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a2c:	4b91      	ldr	r3, [pc, #580]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d106      	bne.n	8003a46 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a38:	4b8e      	ldr	r3, [pc, #568]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a44:	d00c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b8b      	ldr	r3, [pc, #556]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d112      	bne.n	8003a78 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a52:	4b88      	ldr	r3, [pc, #544]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a5e:	d10b      	bne.n	8003a78 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	4b84      	ldr	r3, [pc, #528]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d05b      	beq.n	8003b24 <HAL_RCC_OscConfig+0x124>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d157      	bne.n	8003b24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e25a      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a80:	d106      	bne.n	8003a90 <HAL_RCC_OscConfig+0x90>
 8003a82:	4b7c      	ldr	r3, [pc, #496]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7b      	ldr	r2, [pc, #492]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e01d      	b.n	8003acc <HAL_RCC_OscConfig+0xcc>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xb4>
 8003a9a:	4b76      	ldr	r3, [pc, #472]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b73      	ldr	r3, [pc, #460]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a72      	ldr	r2, [pc, #456]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xcc>
 8003ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6e      	ldr	r2, [pc, #440]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6b      	ldr	r2, [pc, #428]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fe30 	bl	8002738 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe fe2c 	bl	8002738 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	@ 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e21f      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b61      	ldr	r3, [pc, #388]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xdc>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fe1c 	bl	8002738 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fe18 	bl	8002738 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e20b      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	4b57      	ldr	r3, [pc, #348]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x104>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d06f      	beq.n	8003c12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b32:	4b50      	ldr	r3, [pc, #320]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d017      	beq.n	8003b6e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d105      	bne.n	8003b56 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b47      	ldr	r3, [pc, #284]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d11c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b62:	4b44      	ldr	r3, [pc, #272]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d116      	bne.n	8003b9c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	4b41      	ldr	r3, [pc, #260]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_RCC_OscConfig+0x186>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e1d3      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b86:	4b3b      	ldr	r3, [pc, #236]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4937      	ldr	r1, [pc, #220]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9a:	e03a      	b.n	8003c12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba4:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <HAL_RCC_OscConfig+0x278>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe fdc5 	bl	8002738 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7fe fdc1 	bl	8002738 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1b4      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b28      	ldr	r3, [pc, #160]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4925      	ldr	r1, [pc, #148]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	e015      	b.n	8003c12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be6:	4b24      	ldr	r3, [pc, #144]	@ (8003c78 <HAL_RCC_OscConfig+0x278>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe fda4 	bl	8002738 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fda0 	bl	8002738 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e193      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d036      	beq.n	8003c8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c26:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <HAL_RCC_OscConfig+0x27c>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fe fd84 	bl	8002738 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c34:	f7fe fd80 	bl	8002738 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e173      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x234>
 8003c52:	e01b      	b.n	8003c8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c54:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_RCC_OscConfig+0x27c>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fd6d 	bl	8002738 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e00e      	b.n	8003c80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe fd69 	bl	8002738 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d907      	bls.n	8003c80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e15c      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
 8003c74:	40023800 	.word	0x40023800
 8003c78:	42470000 	.word	0x42470000
 8003c7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b8a      	ldr	r3, [pc, #552]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ea      	bne.n	8003c62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8097 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b83      	ldr	r3, [pc, #524]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	4b7f      	ldr	r3, [pc, #508]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	4a7e      	ldr	r2, [pc, #504]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cba:	4b7c      	ldr	r3, [pc, #496]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cca:	4b79      	ldr	r3, [pc, #484]	@ (8003eb0 <HAL_RCC_OscConfig+0x4b0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d118      	bne.n	8003d08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd6:	4b76      	ldr	r3, [pc, #472]	@ (8003eb0 <HAL_RCC_OscConfig+0x4b0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a75      	ldr	r2, [pc, #468]	@ (8003eb0 <HAL_RCC_OscConfig+0x4b0>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce2:	f7fe fd29 	bl	8002738 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cea:	f7fe fd25 	bl	8002738 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e118      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8003eb0 <HAL_RCC_OscConfig+0x4b0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x31e>
 8003d10:	4b66      	ldr	r3, [pc, #408]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	4a65      	ldr	r2, [pc, #404]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1c:	e01c      	b.n	8003d58 <HAL_RCC_OscConfig+0x358>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x340>
 8003d26:	4b61      	ldr	r3, [pc, #388]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	4a60      	ldr	r2, [pc, #384]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	f043 0304 	orr.w	r3, r3, #4
 8003d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d32:	4b5e      	ldr	r3, [pc, #376]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d36:	4a5d      	ldr	r2, [pc, #372]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0x358>
 8003d40:	4b5a      	ldr	r3, [pc, #360]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	4a59      	ldr	r2, [pc, #356]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4c:	4b57      	ldr	r3, [pc, #348]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d50:	4a56      	ldr	r2, [pc, #344]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d52:	f023 0304 	bic.w	r3, r3, #4
 8003d56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fe fcea 	bl	8002738 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fe fce6 	bl	8002738 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0d7      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ee      	beq.n	8003d68 <HAL_RCC_OscConfig+0x368>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fe fcd4 	bl	8002738 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fe fcd0 	bl	8002738 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0c1      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003daa:	4b40      	ldr	r3, [pc, #256]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ee      	bne.n	8003d94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	4a3a      	ldr	r2, [pc, #232]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80ad 	beq.w	8003f2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd2:	4b36      	ldr	r3, [pc, #216]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d060      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d145      	bne.n	8003e72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b33      	ldr	r3, [pc, #204]	@ (8003eb4 <HAL_RCC_OscConfig+0x4b4>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fe fca4 	bl	8002738 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fe fca0 	bl	8002738 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e093      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	4b29      	ldr	r3, [pc, #164]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3c:	071b      	lsls	r3, r3, #28
 8003e3e:	491b      	ldr	r1, [pc, #108]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e44:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x4b4>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe fc75 	bl	8002738 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e52:	f7fe fc71 	bl	8002738 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e064      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e64:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x452>
 8003e70:	e05c      	b.n	8003f2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e72:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <HAL_RCC_OscConfig+0x4b4>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fc5e 	bl	8002738 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fe fc5a 	bl	8002738 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04d      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <HAL_RCC_OscConfig+0x4ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x480>
 8003e9e:	e045      	b.n	8003f2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e040      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f38 <HAL_RCC_OscConfig+0x538>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d030      	beq.n	8003f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d129      	bne.n	8003f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d122      	bne.n	8003f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d119      	bne.n	8003f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	3b01      	subs	r3, #1
 8003f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d10f      	bne.n	8003f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800

08003f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07b      	b.n	8004046 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d108      	bne.n	8003f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f5e:	d009      	beq.n	8003f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]
 8003f66:	e005      	b.n	8003f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fe f808 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003faa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff8:	ea42 0103 	orr.w	r1, r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	f003 0104 	and.w	r1, r3, #4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	f003 0210 	and.w	r2, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004034:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e041      	b.n	80040e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f839 	bl	80040ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f000 f9bf 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d001      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e04e      	b.n	80041b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a23      	ldr	r2, [pc, #140]	@ (80041c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004142:	d01d      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1f      	ldr	r2, [pc, #124]	@ (80041c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1e      	ldr	r2, [pc, #120]	@ (80041cc <HAL_TIM_Base_Start_IT+0xcc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1c      	ldr	r2, [pc, #112]	@ (80041d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1b      	ldr	r2, [pc, #108]	@ (80041d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a19      	ldr	r2, [pc, #100]	@ (80041d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a18      	ldr	r2, [pc, #96]	@ (80041dc <HAL_TIM_Base_Start_IT+0xdc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d111      	bne.n	80041a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d010      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a2:	e007      	b.n	80041b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40010400 	.word	0x40010400
 80041d8:	40014000 	.word	0x40014000
 80041dc:	40001800 	.word	0x40001800

080041e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d020      	beq.n	8004244 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01b      	beq.n	8004244 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0202 	mvn.w	r2, #2
 8004214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8d2 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8004230:	e005      	b.n	800423e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8c4 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8d5 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d020      	beq.n	8004290 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01b      	beq.n	8004290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0204 	mvn.w	r2, #4
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8ac 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f89e 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f8af 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d020      	beq.n	80042dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0208 	mvn.w	r2, #8
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f886 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f878 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f889 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d020      	beq.n	8004328 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01b      	beq.n	8004328 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0210 	mvn.w	r2, #16
 80042f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2208      	movs	r2, #8
 80042fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f860 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8004314:	e005      	b.n	8004322 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f852 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f863 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00c      	beq.n	800434c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0201 	mvn.w	r2, #1
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd fdde 	bl	8001f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f906 	bl	800457c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00c      	beq.n	8004394 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f834 	bl	80043fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00c      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0220 	mvn.w	r2, #32
 80043b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f8d8 	bl	8004568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a46      	ldr	r2, [pc, #280]	@ (800453c <TIM_Base_SetConfig+0x12c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442e:	d00f      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a43      	ldr	r2, [pc, #268]	@ (8004540 <TIM_Base_SetConfig+0x130>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00b      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a42      	ldr	r2, [pc, #264]	@ (8004544 <TIM_Base_SetConfig+0x134>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d007      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a41      	ldr	r2, [pc, #260]	@ (8004548 <TIM_Base_SetConfig+0x138>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_Base_SetConfig+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a40      	ldr	r2, [pc, #256]	@ (800454c <TIM_Base_SetConfig+0x13c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d108      	bne.n	8004462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a35      	ldr	r2, [pc, #212]	@ (800453c <TIM_Base_SetConfig+0x12c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02b      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004470:	d027      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a32      	ldr	r2, [pc, #200]	@ (8004540 <TIM_Base_SetConfig+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d023      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a31      	ldr	r2, [pc, #196]	@ (8004544 <TIM_Base_SetConfig+0x134>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01f      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a30      	ldr	r2, [pc, #192]	@ (8004548 <TIM_Base_SetConfig+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01b      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2f      	ldr	r2, [pc, #188]	@ (800454c <TIM_Base_SetConfig+0x13c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d017      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a2e      	ldr	r2, [pc, #184]	@ (8004550 <TIM_Base_SetConfig+0x140>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a2d      	ldr	r2, [pc, #180]	@ (8004554 <TIM_Base_SetConfig+0x144>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00f      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004558 <TIM_Base_SetConfig+0x148>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2b      	ldr	r2, [pc, #172]	@ (800455c <TIM_Base_SetConfig+0x14c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004560 <TIM_Base_SetConfig+0x150>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a29      	ldr	r2, [pc, #164]	@ (8004564 <TIM_Base_SetConfig+0x154>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d108      	bne.n	80044d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a10      	ldr	r2, [pc, #64]	@ (800453c <TIM_Base_SetConfig+0x12c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_Base_SetConfig+0xf8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a12      	ldr	r2, [pc, #72]	@ (800454c <TIM_Base_SetConfig+0x13c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d105      	bne.n	800452e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f023 0201 	bic.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	611a      	str	r2, [r3, #16]
  }
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40010400 	.word	0x40010400
 8004550:	40014000 	.word	0x40014000
 8004554:	40014400 	.word	0x40014400
 8004558:	40014800 	.word	0x40014800
 800455c:	40001800 	.word	0x40001800
 8004560:	40001c00 	.word	0x40001c00
 8004564:	40002000 	.word	0x40002000

08004568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e042      	b.n	8004628 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd ff4a 	bl	8002450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2224      	movs	r2, #36	@ 0x24
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fdf3 	bl	80051c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	@ 0x28
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b20      	cmp	r3, #32
 800464e:	d175      	bne.n	800473c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_UART_Transmit+0x2c>
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e06e      	b.n	800473e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2221      	movs	r2, #33	@ 0x21
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466e:	f7fe f863 	bl	8002738 <HAL_GetTick>
 8004672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	88fa      	ldrh	r2, [r7, #6]
 800467e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004688:	d108      	bne.n	800469c <HAL_UART_Transmit+0x6c>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d104      	bne.n	800469c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	e003      	b.n	80046a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046a4:	e02e      	b.n	8004704 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2200      	movs	r2, #0
 80046ae:	2180      	movs	r1, #128	@ 0x80
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fb55 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e03a      	b.n	800473e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	3302      	adds	r3, #2
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	e007      	b.n	80046f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3301      	adds	r3, #1
 80046f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1cb      	bne.n	80046a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2200      	movs	r2, #0
 8004716:	2140      	movs	r1, #64	@ 0x40
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fb21 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e006      	b.n	800473e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	4613      	mov	r3, r2
 8004752:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b20      	cmp	r3, #32
 800475e:	d121      	bne.n	80047a4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_UART_Transmit_IT+0x26>
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e01a      	b.n	80047a6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	88fa      	ldrh	r2, [r7, #6]
 800477a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2221      	movs	r2, #33	@ 0x21
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800479e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	4613      	mov	r3, r2
 80047be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d112      	bne.n	80047f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_UART_Receive_IT+0x26>
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e00b      	b.n	80047f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	461a      	mov	r2, r3
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fb12 	bl	8004e12 <UART_Start_Receive_IT>
 80047ee:	4603      	mov	r3, r0
 80047f0:	e000      	b.n	80047f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b0ba      	sub	sp, #232	@ 0xe8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004828:	2300      	movs	r3, #0
 800482a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800483a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10f      	bne.n	8004862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_UART_IRQHandler+0x66>
 800484e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fbf2 	bl	8005044 <UART_Receive_IT>
      return;
 8004860:	e25b      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80de 	beq.w	8004a28 <HAL_UART_IRQHandler+0x22c>
 800486c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80d1 	beq.w	8004a28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <HAL_UART_IRQHandler+0xae>
 8004892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_UART_IRQHandler+0xd2>
 80048b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	f043 0202 	orr.w	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_UART_IRQHandler+0xf6>
 80048da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	f043 0204 	orr.w	r2, r3, #4
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d011      	beq.n	8004922 <HAL_UART_IRQHandler+0x126>
 80048fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800490a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491a:	f043 0208 	orr.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 81f2 	beq.w	8004d10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_UART_IRQHandler+0x14e>
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fb7d 	bl	8005044 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004954:	2b40      	cmp	r3, #64	@ 0x40
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <HAL_UART_IRQHandler+0x17a>
 800496e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d04f      	beq.n	8004a16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa85 	bl	8004e86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004986:	2b40      	cmp	r3, #64	@ 0x40
 8004988:	d141      	bne.n	8004a0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3314      	adds	r3, #20
 8004990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1d9      	bne.n	800498a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bdc <HAL_UART_IRQHandler+0x3e0>)
 80049e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe f8d4 	bl	8002b98 <HAL_DMA_Abort_IT>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a00:	4610      	mov	r0, r2
 8004a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e00e      	b.n	8004a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f994 	bl	8004d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e00a      	b.n	8004a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f990 	bl	8004d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	e006      	b.n	8004a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f98c 	bl	8004d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a22:	e175      	b.n	8004d10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	bf00      	nop
    return;
 8004a26:	e173      	b.n	8004d10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	f040 814f 	bne.w	8004cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8148 	beq.w	8004cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8141 	beq.w	8004cd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6e:	2b40      	cmp	r3, #64	@ 0x40
 8004a70:	f040 80b6 	bne.w	8004be0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8145 	beq.w	8004d14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a92:	429a      	cmp	r2, r3
 8004a94:	f080 813e 	bcs.w	8004d14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aaa:	f000 8088 	beq.w	8004bbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ada:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1d9      	bne.n	8004aae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3314      	adds	r3, #20
 8004b00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e1      	bne.n	8004afa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3314      	adds	r3, #20
 8004b3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e3      	bne.n	8004b36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ba0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ba2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e3      	bne.n	8004b7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fd ff7d 	bl	8002ab8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f8b7 	bl	8004d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bda:	e09b      	b.n	8004d14 <HAL_UART_IRQHandler+0x518>
 8004bdc:	08004f4d 	.word	0x08004f4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 808e 	beq.w	8004d18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8089 	beq.w	8004d18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e3      	bne.n	8004c06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c62:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e3      	bne.n	8004c3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	330c      	adds	r3, #12
 8004c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0310 	bic.w	r3, r3, #16
 8004c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ca8:	61fa      	str	r2, [r7, #28]
 8004caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69b9      	ldr	r1, [r7, #24]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e3      	bne.n	8004c84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f83d 	bl	8004d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cce:	e023      	b.n	8004d18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x4f4>
 8004cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f943 	bl	8004f74 <UART_Transmit_IT>
    return;
 8004cee:	e014      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00e      	beq.n	8004d1a <HAL_UART_IRQHandler+0x51e>
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f983 	bl	8005014 <UART_EndTransmit_IT>
    return;
 8004d0e:	e004      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
    return;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8004d18:	bf00      	nop
  }
}
 8004d1a:	37e8      	adds	r7, #232	@ 0xe8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d70:	e03b      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d037      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fd fcdd 	bl	8002738 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e03a      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d023      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0x8a>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b80      	cmp	r3, #128	@ 0x80
 8004da6:	d020      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0x8a>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b40      	cmp	r3, #64	@ 0x40
 8004dac:	d01d      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d116      	bne.n	8004dea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f857 	bl	8004e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2208      	movs	r2, #8
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e00f      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	bf0c      	ite	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	2300      	movne	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d0b4      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2222      	movs	r2, #34	@ 0x22
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e56:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0220 	orr.w	r2, r2, #32
 8004e76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b095      	sub	sp, #84	@ 0x54
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eae:	643a      	str	r2, [r7, #64]	@ 0x40
 8004eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3314      	adds	r3, #20
 8004ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e5      	bne.n	8004ec2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d119      	bne.n	8004f32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f023 0310 	bic.w	r3, r3, #16
 8004f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f1e:	61ba      	str	r2, [r7, #24]
 8004f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6979      	ldr	r1, [r7, #20]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e5      	bne.n	8004efe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f40:	bf00      	nop
 8004f42:	3754      	adds	r7, #84	@ 0x54
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff fee4 	bl	8004d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b21      	cmp	r3, #33	@ 0x21
 8004f86:	d13e      	bne.n	8005006 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f90:	d114      	bne.n	8004fbc <UART_Transmit_IT+0x48>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d110      	bne.n	8004fbc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	1c9a      	adds	r2, r3, #2
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]
 8004fba:	e008      	b.n	8004fce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	1c59      	adds	r1, r3, #1
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6211      	str	r1, [r2, #32]
 8004fc6:	781a      	ldrb	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10f      	bne.n	8005002 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ff0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005000:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	e000      	b.n	8005008 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005006:	2302      	movs	r3, #2
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800502a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff fe73 	bl	8004d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08c      	sub	sp, #48	@ 0x30
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b22      	cmp	r3, #34	@ 0x22
 8005056:	f040 80ae 	bne.w	80051b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005062:	d117      	bne.n	8005094 <UART_Receive_IT+0x50>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d113      	bne.n	8005094 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005082:	b29a      	uxth	r2, r3
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	1c9a      	adds	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	629a      	str	r2, [r3, #40]	@ 0x28
 8005092:	e026      	b.n	80050e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a6:	d007      	beq.n	80050b8 <UART_Receive_IT+0x74>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <UART_Receive_IT+0x82>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e008      	b.n	80050d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	4619      	mov	r1, r3
 80050f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d15d      	bne.n	80051b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0220 	bic.w	r2, r2, #32
 8005104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005114:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695a      	ldr	r2, [r3, #20]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005138:	2b01      	cmp	r3, #1
 800513a:	d135      	bne.n	80051a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	613b      	str	r3, [r7, #16]
   return(result);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f023 0310 	bic.w	r3, r3, #16
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005162:	623a      	str	r2, [r7, #32]
 8005164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	69f9      	ldr	r1, [r7, #28]
 8005168:	6a3a      	ldr	r2, [r7, #32]
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b10      	cmp	r3, #16
 8005182:	d10a      	bne.n	800519a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff fdd1 	bl	8004d48 <HAL_UARTEx_RxEventCallback>
 80051a6:	e002      	b.n	80051ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fc fc13 	bl	80019d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e002      	b.n	80051b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e000      	b.n	80051b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051b6:	2302      	movs	r3, #2
  }
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3730      	adds	r7, #48	@ 0x30
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c4:	b0c0      	sub	sp, #256	@ 0x100
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	ea40 0301 	orr.w	r3, r0, r1
 80051e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	431a      	orrs	r2, r3
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005218:	f021 010c 	bic.w	r1, r1, #12
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005226:	430b      	orrs	r3, r1
 8005228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523a:	6999      	ldr	r1, [r3, #24]
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	ea40 0301 	orr.w	r3, r0, r1
 8005246:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4b8f      	ldr	r3, [pc, #572]	@ (800548c <UART_SetConfig+0x2cc>)
 8005250:	429a      	cmp	r2, r3
 8005252:	d005      	beq.n	8005260 <UART_SetConfig+0xa0>
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4b8d      	ldr	r3, [pc, #564]	@ (8005490 <UART_SetConfig+0x2d0>)
 800525c:	429a      	cmp	r2, r3
 800525e:	d104      	bne.n	800526a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005260:	f7fe f9de 	bl	8003620 <HAL_RCC_GetPCLK2Freq>
 8005264:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005268:	e003      	b.n	8005272 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800526a:	f7fe f9c5 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 800526e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527c:	f040 810c 	bne.w	8005498 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800528a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800528e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005292:	4622      	mov	r2, r4
 8005294:	462b      	mov	r3, r5
 8005296:	1891      	adds	r1, r2, r2
 8005298:	65b9      	str	r1, [r7, #88]	@ 0x58
 800529a:	415b      	adcs	r3, r3
 800529c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800529e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052a2:	4621      	mov	r1, r4
 80052a4:	eb12 0801 	adds.w	r8, r2, r1
 80052a8:	4629      	mov	r1, r5
 80052aa:	eb43 0901 	adc.w	r9, r3, r1
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052c2:	4690      	mov	r8, r2
 80052c4:	4699      	mov	r9, r3
 80052c6:	4623      	mov	r3, r4
 80052c8:	eb18 0303 	adds.w	r3, r8, r3
 80052cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052d0:	462b      	mov	r3, r5
 80052d2:	eb49 0303 	adc.w	r3, r9, r3
 80052d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052ee:	460b      	mov	r3, r1
 80052f0:	18db      	adds	r3, r3, r3
 80052f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80052f4:	4613      	mov	r3, r2
 80052f6:	eb42 0303 	adc.w	r3, r2, r3
 80052fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80052fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005304:	f7fa ffec 	bl	80002e0 <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4b61      	ldr	r3, [pc, #388]	@ (8005494 <UART_SetConfig+0x2d4>)
 800530e:	fba3 2302 	umull	r2, r3, r3, r2
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	011c      	lsls	r4, r3, #4
 8005316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800531a:	2200      	movs	r2, #0
 800531c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005320:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005328:	4642      	mov	r2, r8
 800532a:	464b      	mov	r3, r9
 800532c:	1891      	adds	r1, r2, r2
 800532e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005330:	415b      	adcs	r3, r3
 8005332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005338:	4641      	mov	r1, r8
 800533a:	eb12 0a01 	adds.w	sl, r2, r1
 800533e:	4649      	mov	r1, r9
 8005340:	eb43 0b01 	adc.w	fp, r3, r1
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005350:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005358:	4692      	mov	sl, r2
 800535a:	469b      	mov	fp, r3
 800535c:	4643      	mov	r3, r8
 800535e:	eb1a 0303 	adds.w	r3, sl, r3
 8005362:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005366:	464b      	mov	r3, r9
 8005368:	eb4b 0303 	adc.w	r3, fp, r3
 800536c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800537c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005380:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005384:	460b      	mov	r3, r1
 8005386:	18db      	adds	r3, r3, r3
 8005388:	643b      	str	r3, [r7, #64]	@ 0x40
 800538a:	4613      	mov	r3, r2
 800538c:	eb42 0303 	adc.w	r3, r2, r3
 8005390:	647b      	str	r3, [r7, #68]	@ 0x44
 8005392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005396:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800539a:	f7fa ffa1 	bl	80002e0 <__aeabi_uldivmod>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005494 <UART_SetConfig+0x2d4>)
 80053a6:	fba3 2301 	umull	r2, r3, r3, r1
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	2264      	movs	r2, #100	@ 0x64
 80053ae:	fb02 f303 	mul.w	r3, r2, r3
 80053b2:	1acb      	subs	r3, r1, r3
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053ba:	4b36      	ldr	r3, [pc, #216]	@ (8005494 <UART_SetConfig+0x2d4>)
 80053bc:	fba3 2302 	umull	r2, r3, r3, r2
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053c8:	441c      	add	r4, r3
 80053ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053dc:	4642      	mov	r2, r8
 80053de:	464b      	mov	r3, r9
 80053e0:	1891      	adds	r1, r2, r2
 80053e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053e4:	415b      	adcs	r3, r3
 80053e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053ec:	4641      	mov	r1, r8
 80053ee:	1851      	adds	r1, r2, r1
 80053f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80053f2:	4649      	mov	r1, r9
 80053f4:	414b      	adcs	r3, r1
 80053f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005404:	4659      	mov	r1, fp
 8005406:	00cb      	lsls	r3, r1, #3
 8005408:	4651      	mov	r1, sl
 800540a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800540e:	4651      	mov	r1, sl
 8005410:	00ca      	lsls	r2, r1, #3
 8005412:	4610      	mov	r0, r2
 8005414:	4619      	mov	r1, r3
 8005416:	4603      	mov	r3, r0
 8005418:	4642      	mov	r2, r8
 800541a:	189b      	adds	r3, r3, r2
 800541c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005420:	464b      	mov	r3, r9
 8005422:	460a      	mov	r2, r1
 8005424:	eb42 0303 	adc.w	r3, r2, r3
 8005428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005438:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800543c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005440:	460b      	mov	r3, r1
 8005442:	18db      	adds	r3, r3, r3
 8005444:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005446:	4613      	mov	r3, r2
 8005448:	eb42 0303 	adc.w	r3, r2, r3
 800544c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800544e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005452:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005456:	f7fa ff43 	bl	80002e0 <__aeabi_uldivmod>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4b0d      	ldr	r3, [pc, #52]	@ (8005494 <UART_SetConfig+0x2d4>)
 8005460:	fba3 1302 	umull	r1, r3, r3, r2
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	2164      	movs	r1, #100	@ 0x64
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	3332      	adds	r3, #50	@ 0x32
 8005472:	4a08      	ldr	r2, [pc, #32]	@ (8005494 <UART_SetConfig+0x2d4>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	f003 0207 	and.w	r2, r3, #7
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4422      	add	r2, r4
 8005486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005488:	e106      	b.n	8005698 <UART_SetConfig+0x4d8>
 800548a:	bf00      	nop
 800548c:	40011000 	.word	0x40011000
 8005490:	40011400 	.word	0x40011400
 8005494:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549c:	2200      	movs	r2, #0
 800549e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054aa:	4642      	mov	r2, r8
 80054ac:	464b      	mov	r3, r9
 80054ae:	1891      	adds	r1, r2, r2
 80054b0:	6239      	str	r1, [r7, #32]
 80054b2:	415b      	adcs	r3, r3
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ba:	4641      	mov	r1, r8
 80054bc:	1854      	adds	r4, r2, r1
 80054be:	4649      	mov	r1, r9
 80054c0:	eb43 0501 	adc.w	r5, r3, r1
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	00eb      	lsls	r3, r5, #3
 80054ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d2:	00e2      	lsls	r2, r4, #3
 80054d4:	4614      	mov	r4, r2
 80054d6:	461d      	mov	r5, r3
 80054d8:	4643      	mov	r3, r8
 80054da:	18e3      	adds	r3, r4, r3
 80054dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054e0:	464b      	mov	r3, r9
 80054e2:	eb45 0303 	adc.w	r3, r5, r3
 80054e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005506:	4629      	mov	r1, r5
 8005508:	008b      	lsls	r3, r1, #2
 800550a:	4621      	mov	r1, r4
 800550c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005510:	4621      	mov	r1, r4
 8005512:	008a      	lsls	r2, r1, #2
 8005514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005518:	f7fa fee2 	bl	80002e0 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4b60      	ldr	r3, [pc, #384]	@ (80056a4 <UART_SetConfig+0x4e4>)
 8005522:	fba3 2302 	umull	r2, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	011c      	lsls	r4, r3, #4
 800552a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800552e:	2200      	movs	r2, #0
 8005530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005534:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005538:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800553c:	4642      	mov	r2, r8
 800553e:	464b      	mov	r3, r9
 8005540:	1891      	adds	r1, r2, r2
 8005542:	61b9      	str	r1, [r7, #24]
 8005544:	415b      	adcs	r3, r3
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800554c:	4641      	mov	r1, r8
 800554e:	1851      	adds	r1, r2, r1
 8005550:	6139      	str	r1, [r7, #16]
 8005552:	4649      	mov	r1, r9
 8005554:	414b      	adcs	r3, r1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005564:	4659      	mov	r1, fp
 8005566:	00cb      	lsls	r3, r1, #3
 8005568:	4651      	mov	r1, sl
 800556a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800556e:	4651      	mov	r1, sl
 8005570:	00ca      	lsls	r2, r1, #3
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	4603      	mov	r3, r0
 8005578:	4642      	mov	r2, r8
 800557a:	189b      	adds	r3, r3, r2
 800557c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005580:	464b      	mov	r3, r9
 8005582:	460a      	mov	r2, r1
 8005584:	eb42 0303 	adc.w	r3, r2, r3
 8005588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005596:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055a4:	4649      	mov	r1, r9
 80055a6:	008b      	lsls	r3, r1, #2
 80055a8:	4641      	mov	r1, r8
 80055aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ae:	4641      	mov	r1, r8
 80055b0:	008a      	lsls	r2, r1, #2
 80055b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055b6:	f7fa fe93 	bl	80002e0 <__aeabi_uldivmod>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	4b38      	ldr	r3, [pc, #224]	@ (80056a4 <UART_SetConfig+0x4e4>)
 80055c2:	fba3 2301 	umull	r2, r3, r3, r1
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	2264      	movs	r2, #100	@ 0x64
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	1acb      	subs	r3, r1, r3
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	3332      	adds	r3, #50	@ 0x32
 80055d4:	4a33      	ldr	r2, [pc, #204]	@ (80056a4 <UART_SetConfig+0x4e4>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055e0:	441c      	add	r4, r3
 80055e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e6:	2200      	movs	r2, #0
 80055e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80055ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80055ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055f0:	4642      	mov	r2, r8
 80055f2:	464b      	mov	r3, r9
 80055f4:	1891      	adds	r1, r2, r2
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	415b      	adcs	r3, r3
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005600:	4641      	mov	r1, r8
 8005602:	1851      	adds	r1, r2, r1
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	4649      	mov	r1, r9
 8005608:	414b      	adcs	r3, r1
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005618:	4659      	mov	r1, fp
 800561a:	00cb      	lsls	r3, r1, #3
 800561c:	4651      	mov	r1, sl
 800561e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005622:	4651      	mov	r1, sl
 8005624:	00ca      	lsls	r2, r1, #3
 8005626:	4610      	mov	r0, r2
 8005628:	4619      	mov	r1, r3
 800562a:	4603      	mov	r3, r0
 800562c:	4642      	mov	r2, r8
 800562e:	189b      	adds	r3, r3, r2
 8005630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005632:	464b      	mov	r3, r9
 8005634:	460a      	mov	r2, r1
 8005636:	eb42 0303 	adc.w	r3, r2, r3
 800563a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	663b      	str	r3, [r7, #96]	@ 0x60
 8005646:	667a      	str	r2, [r7, #100]	@ 0x64
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005654:	4649      	mov	r1, r9
 8005656:	008b      	lsls	r3, r1, #2
 8005658:	4641      	mov	r1, r8
 800565a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800565e:	4641      	mov	r1, r8
 8005660:	008a      	lsls	r2, r1, #2
 8005662:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005666:	f7fa fe3b 	bl	80002e0 <__aeabi_uldivmod>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <UART_SetConfig+0x4e4>)
 8005670:	fba3 1302 	umull	r1, r3, r3, r2
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	2164      	movs	r1, #100	@ 0x64
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	3332      	adds	r3, #50	@ 0x32
 8005682:	4a08      	ldr	r2, [pc, #32]	@ (80056a4 <UART_SetConfig+0x4e4>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	f003 020f 	and.w	r2, r3, #15
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4422      	add	r2, r4
 8005696:	609a      	str	r2, [r3, #8]
}
 8005698:	bf00      	nop
 800569a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800569e:	46bd      	mov	sp, r7
 80056a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a4:	51eb851f 	.word	0x51eb851f

080056a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f103 0208 	add.w	r2, r3, #8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f04f 32ff 	mov.w	r2, #4294967295
 80056c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f103 0208 	add.w	r2, r3, #8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f103 0208 	add.w	r2, r3, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d103      	bne.n	800576a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e00c      	b.n	8005784 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3308      	adds	r3, #8
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e002      	b.n	8005778 <vListInsert+0x2e>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	429a      	cmp	r2, r3
 8005782:	d2f6      	bcs.n	8005772 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6892      	ldr	r2, [r2, #8]
 80057d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6852      	ldr	r2, [r2, #4]
 80057dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d103      	bne.n	80057f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	1e5a      	subs	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800583c:	f002 fa9e 	bl	8007d7c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005848:	68f9      	ldr	r1, [r7, #12]
 800584a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	441a      	add	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	3b01      	subs	r3, #1
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	441a      	add	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	22ff      	movs	r2, #255	@ 0xff
 8005880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	22ff      	movs	r2, #255	@ 0xff
 8005888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d114      	bne.n	80058bc <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01a      	beq.n	80058d0 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3310      	adds	r3, #16
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 fa60 	bl	8006d64 <xTaskRemoveFromEventList>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d012      	beq.n	80058d0 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80058aa:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <xQueueGenericReset+0xd0>)
 80058ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	e009      	b.n	80058d0 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3310      	adds	r3, #16
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fef1 	bl	80056a8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3324      	adds	r3, #36	@ 0x24
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff feec 	bl	80056a8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80058d0:	f002 fa86 	bl	8007de0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80058d4:	2301      	movs	r3, #1
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08c      	sub	sp, #48	@ 0x30
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <xQueueGenericCreate+0x2c>
        __asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	61bb      	str	r3, [r7, #24]
    }
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	e7fd      	b.n	800590c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	fb02 f303 	mul.w	r3, r2, r3
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d006      	beq.n	800592e <xQueueGenericCreate+0x4a>
 8005920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	429a      	cmp	r2, r3
 800592c:	d101      	bne.n	8005932 <xQueueGenericCreate+0x4e>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <xQueueGenericCreate+0x50>
 8005932:	2300      	movs	r3, #0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <xQueueGenericCreate+0x6c>
        __asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	617b      	str	r3, [r7, #20]
    }
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8005956:	d90b      	bls.n	8005970 <xQueueGenericCreate+0x8c>
        __asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	613b      	str	r3, [r7, #16]
    }
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	3350      	adds	r3, #80	@ 0x50
 8005974:	4618      	mov	r0, r3
 8005976:	f002 fb2b 	bl	8007fd0 <pvPortMalloc>
 800597a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	3350      	adds	r3, #80	@ 0x50
 800598a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800598c:	79fa      	ldrb	r2, [r7, #7]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f805 	bl	80059a8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800599e:	6a3b      	ldr	r3, [r7, #32]
    }
 80059a0:	4618      	mov	r0, r3
 80059a2:	3728      	adds	r7, #40	@ 0x28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e002      	b.n	80059ca <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059d6:	2101      	movs	r1, #1
 80059d8:	69b8      	ldr	r0, [r7, #24]
 80059da:	f7ff ff19 	bl	8005810 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80059e6:	bf00      	nop
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08e      	sub	sp, #56	@ 0x38
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059fe:	2300      	movs	r3, #0
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <xQueueGenericSend+0x34>
        __asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	e7fd      	b.n	8005a20 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <xQueueGenericSend+0x42>
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <xQueueGenericSend+0x46>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <xQueueGenericSend+0x48>
 8005a36:	2300      	movs	r3, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <xQueueGenericSend+0x64>
        __asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSend+0x72>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <xQueueGenericSend+0x76>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <xQueueGenericSend+0x78>
 8005a66:	2300      	movs	r3, #0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10b      	bne.n	8005a84 <xQueueGenericSend+0x94>
        __asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	623b      	str	r3, [r7, #32]
    }
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a84:	f001 fb0e 	bl	80070a4 <xTaskGetSchedulerState>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d102      	bne.n	8005a94 <xQueueGenericSend+0xa4>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <xQueueGenericSend+0xa8>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <xQueueGenericSend+0xaa>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <xQueueGenericSend+0xc6>
        __asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	61fb      	str	r3, [r7, #28]
    }
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005ab6:	f002 f961 	bl	8007d7c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d302      	bcc.n	8005acc <xQueueGenericSend+0xdc>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d129      	bne.n	8005b20 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ad2:	f000 fbe7 	bl	80062a4 <prvCopyDataToQueue>
 8005ad6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d010      	beq.n	8005b02 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	3324      	adds	r3, #36	@ 0x24
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 f93d 	bl	8006d64 <xTaskRemoveFromEventList>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d013      	beq.n	8005b18 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005af0:	4b3f      	ldr	r3, [pc, #252]	@ (8005bf0 <xQueueGenericSend+0x200>)
 8005af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	e00a      	b.n	8005b18 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005b08:	4b39      	ldr	r3, [pc, #228]	@ (8005bf0 <xQueueGenericSend+0x200>)
 8005b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005b18:	f002 f962 	bl	8007de0 <vPortExitCritical>
                return pdPASS;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e063      	b.n	8005be8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d103      	bne.n	8005b2e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005b26:	f002 f95b 	bl	8007de0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e05c      	b.n	8005be8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005b34:	f107 0314 	add.w	r3, r7, #20
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 f977 	bl	8006e2c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005b42:	f002 f94d 	bl	8007de0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005b46:	f000 fee9 	bl	800691c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005b4a:	f002 f917 	bl	8007d7c <vPortEnterCritical>
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b54:	b25b      	sxtb	r3, r3
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	d103      	bne.n	8005b64 <xQueueGenericSend+0x174>
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b6a:	b25b      	sxtb	r3, r3
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d103      	bne.n	8005b7a <xQueueGenericSend+0x18a>
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b7a:	f002 f931 	bl	8007de0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b7e:	1d3a      	adds	r2, r7, #4
 8005b80:	f107 0314 	add.w	r3, r7, #20
 8005b84:	4611      	mov	r1, r2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 f966 	bl	8006e58 <xTaskCheckForTimeOut>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d124      	bne.n	8005bdc <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b94:	f000 fc7e 	bl	8006494 <prvIsQueueFull>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d018      	beq.n	8005bd0 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 f88a 	bl	8006cc0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005bac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bae:	f000 fc09 	bl	80063c4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005bb2:	f000 fec1 	bl	8006938 <xTaskResumeAll>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f47f af7c 	bne.w	8005ab6 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf0 <xQueueGenericSend+0x200>)
 8005bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	e772      	b.n	8005ab6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bd2:	f000 fbf7 	bl	80063c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005bd6:	f000 feaf 	bl	8006938 <xTaskResumeAll>
 8005bda:	e76c      	b.n	8005ab6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005bdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bde:	f000 fbf1 	bl	80063c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005be2:	f000 fea9 	bl	8006938 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005be6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3738      	adds	r7, #56	@ 0x38
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	e000ed04 	.word	0xe000ed04

08005bf4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b090      	sub	sp, #64	@ 0x40
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <xQueueGenericSendFromISR+0x3e>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <xQueueGenericSendFromISR+0x42>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <xQueueGenericSendFromISR+0x44>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d103      	bne.n	8005c62 <xQueueGenericSendFromISR+0x6e>
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <xQueueGenericSendFromISR+0x72>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueGenericSendFromISR+0x74>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	623b      	str	r3, [r7, #32]
    }
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c84:	f002 f962 	bl	8007f4c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005c88:	f3ef 8211 	mrs	r2, BASEPRI
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	61fa      	str	r2, [r7, #28]
 8005c9e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ca2:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d302      	bcc.n	8005cb6 <xQueueGenericSendFromISR+0xc2>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d13f      	bne.n	8005d36 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ccc:	f000 faea 	bl	80062a4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005cd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d112      	bne.n	8005d00 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d026      	beq.n	8005d30 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	3324      	adds	r3, #36	@ 0x24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 f83c 	bl	8006d64 <xTaskRemoveFromEventList>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01e      	beq.n	8005d30 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e017      	b.n	8005d30 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005d00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005d04:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d06:	d10b      	bne.n	8005d20 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	617b      	str	r3, [r7, #20]
    }
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	e7fd      	b.n	8005d1c <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d24:	3301      	adds	r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	b25a      	sxtb	r2, r3
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005d30:	2301      	movs	r3, #1
 8005d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8005d34:	e001      	b.n	8005d3a <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005d44:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3740      	adds	r7, #64	@ 0x40
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08e      	sub	sp, #56	@ 0x38
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	633b      	str	r3, [r7, #48]	@ 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10b      	bne.n	8005d7c <xQueueGiveFromISR+0x2c>
        __asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	623b      	str	r3, [r7, #32]
    }
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	e7fd      	b.n	8005d78 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <xQueueGiveFromISR+0x4c>
        __asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	61fb      	str	r3, [r7, #28]
    }
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	e7fd      	b.n	8005d98 <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d103      	bne.n	8005dac <xQueueGiveFromISR+0x5c>
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <xQueueGiveFromISR+0x60>
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <xQueueGiveFromISR+0x62>
 8005db0:	2300      	movs	r3, #0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <xQueueGiveFromISR+0x7e>
        __asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	61bb      	str	r3, [r7, #24]
    }
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dce:	f002 f8bd 	bl	8007f4c <vPortValidateInterruptPriority>
        __asm volatile
 8005dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8005dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	617a      	str	r2, [r7, #20]
 8005de8:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8005dea:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df2:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8005df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d23b      	bcs.n	8005e76 <xQueueGiveFromISR+0x126>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d112      	bne.n	8005e40 <xQueueGiveFromISR+0xf0>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d026      	beq.n	8005e70 <xQueueGiveFromISR+0x120>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	3324      	adds	r3, #36	@ 0x24
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 ff9c 	bl	8006d64 <xTaskRemoveFromEventList>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01e      	beq.n	8005e70 <xQueueGiveFromISR+0x120>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01b      	beq.n	8005e70 <xQueueGiveFromISR+0x120>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e017      	b.n	8005e70 <xQueueGiveFromISR+0x120>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005e40:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e46:	d10b      	bne.n	8005e60 <xQueueGiveFromISR+0x110>
        __asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	60fb      	str	r3, [r7, #12]
    }
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	e7fd      	b.n	8005e5c <xQueueGiveFromISR+0x10c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e64:	3301      	adds	r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	b25a      	sxtb	r2, r3
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005e70:	2301      	movs	r3, #1
 8005e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e74:	e001      	b.n	8005e7a <xQueueGiveFromISR+0x12a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7c:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f383 8811 	msr	BASEPRI, r3
    }
 8005e84:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3738      	adds	r7, #56	@ 0x38
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	@ 0x30
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10b      	bne.n	8005ec2 <xQueueReceive+0x32>
        __asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	623b      	str	r3, [r7, #32]
    }
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	e7fd      	b.n	8005ebe <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <xQueueReceive+0x40>
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <xQueueReceive+0x44>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <xQueueReceive+0x46>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10b      	bne.n	8005ef2 <xQueueReceive+0x62>
        __asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	61fb      	str	r3, [r7, #28]
    }
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	e7fd      	b.n	8005eee <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ef2:	f001 f8d7 	bl	80070a4 <xTaskGetSchedulerState>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <xQueueReceive+0x72>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <xQueueReceive+0x76>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <xQueueReceive+0x78>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <xQueueReceive+0x94>
        __asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	61bb      	str	r3, [r7, #24]
    }
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	e7fd      	b.n	8005f20 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005f24:	f001 ff2a 	bl	8007d7c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01f      	beq.n	8005f74 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f38:	f000 fa1e 	bl	8006378 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	1e5a      	subs	r2, r3, #1
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00f      	beq.n	8005f6c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	3310      	adds	r3, #16
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 ff07 	bl	8006d64 <xTaskRemoveFromEventList>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8006050 <xQueueReceive+0x1c0>)
 8005f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005f6c:	f001 ff38 	bl	8007de0 <vPortExitCritical>
                return pdPASS;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e069      	b.n	8006048 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005f7a:	f001 ff31 	bl	8007de0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e062      	b.n	8006048 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005f88:	f107 0310 	add.w	r3, r7, #16
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 ff4d 	bl	8006e2c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005f92:	2301      	movs	r3, #1
 8005f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005f96:	f001 ff23 	bl	8007de0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005f9a:	f000 fcbf 	bl	800691c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005f9e:	f001 feed 	bl	8007d7c <vPortEnterCritical>
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fa8:	b25b      	sxtb	r3, r3
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d103      	bne.n	8005fb8 <xQueueReceive+0x128>
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d103      	bne.n	8005fce <xQueueReceive+0x13e>
 8005fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fce:	f001 ff07 	bl	8007de0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fd2:	1d3a      	adds	r2, r7, #4
 8005fd4:	f107 0310 	add.w	r3, r7, #16
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 ff3c 	bl	8006e58 <xTaskCheckForTimeOut>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d123      	bne.n	800602e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fe8:	f000 fa3e 	bl	8006468 <prvIsQueueEmpty>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d017      	beq.n	8006022 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	3324      	adds	r3, #36	@ 0x24
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fe60 	bl	8006cc0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006002:	f000 f9df 	bl	80063c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006006:	f000 fc97 	bl	8006938 <xTaskResumeAll>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d189      	bne.n	8005f24 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8006010:	4b0f      	ldr	r3, [pc, #60]	@ (8006050 <xQueueReceive+0x1c0>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	e780      	b.n	8005f24 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006024:	f000 f9ce 	bl	80063c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006028:	f000 fc86 	bl	8006938 <xTaskResumeAll>
 800602c:	e77a      	b.n	8005f24 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800602e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006030:	f000 f9c8 	bl	80063c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006034:	f000 fc80 	bl	8006938 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800603a:	f000 fa15 	bl	8006468 <prvIsQueueEmpty>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	f43f af6f 	beq.w	8005f24 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006046:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006048:	4618      	mov	r0, r3
 800604a:	3730      	adds	r7, #48	@ 0x30
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	e000ed04 	.word	0xe000ed04

08006054 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08e      	sub	sp, #56	@ 0x38
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800605e:	2300      	movs	r3, #0
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8006066:	2300      	movs	r3, #0
 8006068:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800606a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	623b      	str	r3, [r7, #32]
    }
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	e7fd      	b.n	8006084 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8006088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	61fb      	str	r3, [r7, #28]
    }
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060a8:	f000 fffc 	bl	80070a4 <xTaskGetSchedulerState>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d102      	bne.n	80060b8 <xQueueSemaphoreTake+0x64>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <xQueueSemaphoreTake+0x68>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <xQueueSemaphoreTake+0x6a>
 80060bc:	2300      	movs	r3, #0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <xQueueSemaphoreTake+0x86>
        __asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	61bb      	str	r3, [r7, #24]
    }
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	e7fd      	b.n	80060d6 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80060da:	f001 fe4f 	bl	8007d7c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80060de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e2:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80060e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d024      	beq.n	8006134 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ec:	1e5a      	subs	r2, r3, #1
 80060ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f0:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d104      	bne.n	8006104 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80060fa:	f001 f973 	bl	80073e4 <pvTaskIncrementMutexHeldCount>
 80060fe:	4602      	mov	r2, r0
 8006100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006102:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00f      	beq.n	800612c <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	3310      	adds	r3, #16
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fe27 	bl	8006d64 <xTaskRemoveFromEventList>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800611c:	4b54      	ldr	r3, [pc, #336]	@ (8006270 <xQueueSemaphoreTake+0x21c>)
 800611e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800612c:	f001 fe58 	bl	8007de0 <vPortExitCritical>
                return pdPASS;
 8006130:	2301      	movs	r3, #1
 8006132:	e098      	b.n	8006266 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d112      	bne.n	8006160 <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <xQueueSemaphoreTake+0x104>
        __asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	617b      	str	r3, [r7, #20]
    }
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006158:	f001 fe42 	bl	8007de0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800615c:	2300      	movs	r3, #0
 800615e:	e082      	b.n	8006266 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006166:	f107 030c 	add.w	r3, r7, #12
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fe5e 	bl	8006e2c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006170:	2301      	movs	r3, #1
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006174:	f001 fe34 	bl	8007de0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006178:	f000 fbd0 	bl	800691c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800617c:	f001 fdfe 	bl	8007d7c <vPortEnterCritical>
 8006180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006182:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006186:	b25b      	sxtb	r3, r3
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618c:	d103      	bne.n	8006196 <xQueueSemaphoreTake+0x142>
 800618e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800619c:	b25b      	sxtb	r3, r3
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d103      	bne.n	80061ac <xQueueSemaphoreTake+0x158>
 80061a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061ac:	f001 fe18 	bl	8007de0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061b0:	463a      	mov	r2, r7
 80061b2:	f107 030c 	add.w	r3, r7, #12
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fe4d 	bl	8006e58 <xTaskCheckForTimeOut>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d132      	bne.n	800622a <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061c6:	f000 f94f 	bl	8006468 <prvIsQueueEmpty>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d026      	beq.n	800621e <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d109      	bne.n	80061ec <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 80061d8:	f001 fdd0 	bl	8007d7c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 ff7d 	bl	80070e0 <xTaskPriorityInherit>
 80061e6:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 80061e8:	f001 fdfa 	bl	8007de0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ee:	3324      	adds	r3, #36	@ 0x24
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	4611      	mov	r1, r2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fd63 	bl	8006cc0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80061fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061fc:	f000 f8e2 	bl	80063c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006200:	f000 fb9a 	bl	8006938 <xTaskResumeAll>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	f47f af67 	bne.w	80060da <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 800620c:	4b18      	ldr	r3, [pc, #96]	@ (8006270 <xQueueSemaphoreTake+0x21c>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	e75d      	b.n	80060da <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800621e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006220:	f000 f8d0 	bl	80063c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006224:	f000 fb88 	bl	8006938 <xTaskResumeAll>
 8006228:	e757      	b.n	80060da <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800622a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800622c:	f000 f8ca 	bl	80063c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006230:	f000 fb82 	bl	8006938 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006234:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006236:	f000 f917 	bl	8006468 <prvIsQueueEmpty>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	f43f af4c 	beq.w	80060da <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00d      	beq.n	8006264 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 8006248:	f001 fd98 	bl	8007d7c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800624c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800624e:	f000 f811 	bl	8006274 <prvGetDisinheritPriorityAfterTimeout>
 8006252:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800625a:	4618      	mov	r0, r3
 800625c:	f001 f832 	bl	80072c4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8006260:	f001 fdbe 	bl	8007de0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006264:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006266:	4618      	mov	r0, r3
 8006268:	3738      	adds	r7, #56	@ 0x38
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d006      	beq.n	8006292 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1c3 0305 	rsb	r3, r3, #5
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	e001      	b.n	8006296 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006296:	68fb      	ldr	r3, [r7, #12]
    }
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10d      	bne.n	80062de <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d14d      	bne.n	8006366 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 ff7c 	bl	80071cc <xTaskPriorityDisinherit>
 80062d4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	e043      	b.n	8006366 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d119      	bne.n	8006318 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6858      	ldr	r0, [r3, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ec:	461a      	mov	r2, r3
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	f002 fb6d 	bl	80089ce <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	441a      	add	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d32b      	bcc.n	8006366 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	e026      	b.n	8006366 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68d8      	ldr	r0, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006320:	461a      	mov	r2, r3
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	f002 fb53 	bl	80089ce <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006330:	425b      	negs	r3, r3
 8006332:	441a      	add	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d207      	bcs.n	8006354 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634c:	425b      	negs	r3, r3
 800634e:	441a      	add	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d105      	bne.n	8006366 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	3b01      	subs	r3, #1
 8006364:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800636e:	697b      	ldr	r3, [r7, #20]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d018      	beq.n	80063bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	441a      	add	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d303      	bcc.n	80063ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68d9      	ldr	r1, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b4:	461a      	mov	r2, r3
 80063b6:	6838      	ldr	r0, [r7, #0]
 80063b8:	f002 fb09 	bl	80089ce <memcpy>
    }
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80063cc:	f001 fcd6 	bl	8007d7c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80063d8:	e011      	b.n	80063fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d012      	beq.n	8006408 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3324      	adds	r3, #36	@ 0x24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fcbc 	bl	8006d64 <xTaskRemoveFromEventList>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80063f2:	f000 fd99 	bl	8006f28 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80063fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	dce9      	bgt.n	80063da <prvUnlockQueue+0x16>
 8006406:	e000      	b.n	800640a <prvUnlockQueue+0x46>
                        break;
 8006408:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	22ff      	movs	r2, #255	@ 0xff
 800640e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006412:	f001 fce5 	bl	8007de0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006416:	f001 fcb1 	bl	8007d7c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006420:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006422:	e011      	b.n	8006448 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d012      	beq.n	8006452 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3310      	adds	r3, #16
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fc97 	bl	8006d64 <xTaskRemoveFromEventList>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800643c:	f000 fd74 	bl	8006f28 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	3b01      	subs	r3, #1
 8006444:	b2db      	uxtb	r3, r3
 8006446:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dce9      	bgt.n	8006424 <prvUnlockQueue+0x60>
 8006450:	e000      	b.n	8006454 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006452:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	22ff      	movs	r2, #255	@ 0xff
 8006458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800645c:	f001 fcc0 	bl	8007de0 <vPortExitCritical>
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006470:	f001 fc84 	bl	8007d7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800647c:	2301      	movs	r3, #1
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e001      	b.n	8006486 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006486:	f001 fcab 	bl	8007de0 <vPortExitCritical>

    return xReturn;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800649c:	f001 fc6e 	bl	8007d7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d102      	bne.n	80064b2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e001      	b.n	80064b6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80064b6:	f001 fc93 	bl	8007de0 <vPortExitCritical>

    return xReturn;
 80064ba:	68fb      	ldr	r3, [r7, #12]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e014      	b.n	80064fe <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064d4:	4a0f      	ldr	r2, [pc, #60]	@ (8006514 <vQueueAddToRegistry+0x50>)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064e0:	490c      	ldr	r1, [pc, #48]	@ (8006514 <vQueueAddToRegistry+0x50>)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80064ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006514 <vQueueAddToRegistry+0x50>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	4413      	add	r3, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80064f6:	e006      	b.n	8006506 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b07      	cmp	r3, #7
 8006502:	d9e7      	bls.n	80064d4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000ec0 	.word	0x20000ec0

08006518 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006528:	f001 fc28 	bl	8007d7c <vPortEnterCritical>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006532:	b25b      	sxtb	r3, r3
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d103      	bne.n	8006542 <vQueueWaitForMessageRestricted+0x2a>
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006548:	b25b      	sxtb	r3, r3
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d103      	bne.n	8006558 <vQueueWaitForMessageRestricted+0x40>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006558:	f001 fc42 	bl	8007de0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	3324      	adds	r3, #36	@ 0x24
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fbcd 	bl	8006d0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006572:	6978      	ldr	r0, [r7, #20]
 8006574:	f7ff ff26 	bl	80063c4 <prvUnlockQueue>
    }
 8006578:	bf00      	nop
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006580:	b580      	push	{r7, lr}
 8006582:	b08c      	sub	sp, #48	@ 0x30
 8006584:	af04      	add	r7, sp, #16
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4613      	mov	r3, r2
 800658e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f001 fd1b 	bl	8007fd0 <pvPortMalloc>
 800659a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00e      	beq.n	80065c0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065a2:	2058      	movs	r0, #88	@ 0x58
 80065a4:	f001 fd14 	bl	8007fd0 <pvPortMalloc>
 80065a8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80065b6:	e005      	b.n	80065c4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80065b8:	6978      	ldr	r0, [r7, #20]
 80065ba:	f001 fdeb 	bl	8008194 <vPortFree>
 80065be:	e001      	b.n	80065c4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d013      	beq.n	80065f2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	2300      	movs	r3, #0
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	9302      	str	r3, [sp, #8]
 80065d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f80e 	bl	8006602 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80065e6:	69f8      	ldr	r0, [r7, #28]
 80065e8:	f000 f8a2 	bl	8006730 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80065ec:	2301      	movs	r3, #1
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	e002      	b.n	80065f8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80065f8:	69bb      	ldr	r3, [r7, #24]
    }
 80065fa:	4618      	mov	r0, r3
 80065fc:	3720      	adds	r7, #32
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b088      	sub	sp, #32
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	461a      	mov	r2, r3
 800661a:	21a5      	movs	r1, #165	@ 0xa5
 800661c:	f002 f938 	bl	8008890 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800662a:	3b01      	subs	r3, #1
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f023 0307 	bic.w	r3, r3, #7
 8006638:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	617b      	str	r3, [r7, #20]
    }
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01f      	beq.n	80066a2 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	e012      	b.n	800668e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	7819      	ldrb	r1, [r3, #0]
 8006670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	3334      	adds	r3, #52	@ 0x34
 8006678:	460a      	mov	r2, r1
 800667a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	3301      	adds	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b09      	cmp	r3, #9
 8006692:	d9e9      	bls.n	8006668 <prvInitialiseNewTask+0x66>
 8006694:	e000      	b.n	8006698 <prvInitialiseNewTask+0x96>
            {
                break;
 8006696:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80066a0:	e003      	b.n	80066aa <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d901      	bls.n	80066b4 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066b0:	2304      	movs	r3, #4
 80066b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066be:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	2200      	movs	r2, #0
 80066c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff f80c 	bl	80056e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	3318      	adds	r3, #24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff f807 	bl	80056e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066de:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e2:	f1c3 0205 	rsb	r2, r3, #5
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ee:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	3350      	adds	r3, #80	@ 0x50
 80066f4:	2204      	movs	r2, #4
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f002 f8c9 	bl	8008890 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	3354      	adds	r3, #84	@ 0x54
 8006702:	2201      	movs	r2, #1
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f002 f8c2 	bl	8008890 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	68f9      	ldr	r1, [r7, #12]
 8006710:	69b8      	ldr	r0, [r7, #24]
 8006712:	f001 f9ff 	bl	8007b14 <pxPortInitialiseStack>
 8006716:	4602      	mov	r2, r0
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006726:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006728:	bf00      	nop
 800672a:	3720      	adds	r7, #32
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006738:	f001 fb20 	bl	8007d7c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800673c:	4b2c      	ldr	r3, [pc, #176]	@ (80067f0 <prvAddNewTaskToReadyList+0xc0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a2b      	ldr	r2, [pc, #172]	@ (80067f0 <prvAddNewTaskToReadyList+0xc0>)
 8006744:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006746:	4b2b      	ldr	r3, [pc, #172]	@ (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800674e:	4a29      	ldr	r2, [pc, #164]	@ (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006754:	4b26      	ldr	r3, [pc, #152]	@ (80067f0 <prvAddNewTaskToReadyList+0xc0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d110      	bne.n	800677e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800675c:	f000 fc08 	bl	8006f70 <prvInitialiseTaskLists>
 8006760:	e00d      	b.n	800677e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006762:	4b25      	ldr	r3, [pc, #148]	@ (80067f8 <prvAddNewTaskToReadyList+0xc8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800676a:	4b22      	ldr	r3, [pc, #136]	@ (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	429a      	cmp	r2, r3
 8006776:	d802      	bhi.n	800677e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006778:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800677e:	4b1f      	ldr	r3, [pc, #124]	@ (80067fc <prvAddNewTaskToReadyList+0xcc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <prvAddNewTaskToReadyList+0xcc>)
 8006786:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006788:	4b1c      	ldr	r3, [pc, #112]	@ (80067fc <prvAddNewTaskToReadyList+0xcc>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	2201      	movs	r2, #1
 8006796:	409a      	lsls	r2, r3
 8006798:	4b19      	ldr	r3, [pc, #100]	@ (8006800 <prvAddNewTaskToReadyList+0xd0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4313      	orrs	r3, r2
 800679e:	4a18      	ldr	r2, [pc, #96]	@ (8006800 <prvAddNewTaskToReadyList+0xd0>)
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <prvAddNewTaskToReadyList+0xd4>)
 80067b0:	441a      	add	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f7fe ffa2 	bl	8005702 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80067be:	f001 fb0f 	bl	8007de0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80067c2:	4b0d      	ldr	r3, [pc, #52]	@ (80067f8 <prvAddNewTaskToReadyList+0xc8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00e      	beq.n	80067e8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067ca:	4b0a      	ldr	r3, [pc, #40]	@ (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d207      	bcs.n	80067e8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80067d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <prvAddNewTaskToReadyList+0xd8>)
 80067da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000fd8 	.word	0x20000fd8
 80067f4:	20000f00 	.word	0x20000f00
 80067f8:	20000fe4 	.word	0x20000fe4
 80067fc:	20000ff4 	.word	0x20000ff4
 8006800:	20000fe0 	.word	0x20000fe0
 8006804:	20000f04 	.word	0x20000f04
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d018      	beq.n	8006850 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800681e:	4b14      	ldr	r3, [pc, #80]	@ (8006870 <vTaskDelay+0x64>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00b      	beq.n	800683e <vTaskDelay+0x32>
        __asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	60bb      	str	r3, [r7, #8]
    }
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800683e:	f000 f86d 	bl	800691c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006842:	2100      	movs	r1, #0
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fde1 	bl	800740c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800684a:	f000 f875 	bl	8006938 <xTaskResumeAll>
 800684e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8006856:	4b07      	ldr	r3, [pc, #28]	@ (8006874 <vTaskDelay+0x68>)
 8006858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006866:	bf00      	nop
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20001000 	.word	0x20001000
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800687e:	4b20      	ldr	r3, [pc, #128]	@ (8006900 <vTaskStartScheduler+0x88>)
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	2300      	movs	r3, #0
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	2300      	movs	r3, #0
 8006888:	2282      	movs	r2, #130	@ 0x82
 800688a:	491e      	ldr	r1, [pc, #120]	@ (8006904 <vTaskStartScheduler+0x8c>)
 800688c:	481e      	ldr	r0, [pc, #120]	@ (8006908 <vTaskStartScheduler+0x90>)
 800688e:	f7ff fe77 	bl	8006580 <xTaskCreate>
 8006892:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d102      	bne.n	80068a0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800689a:	f000 fe1d 	bl	80074d8 <xTimerCreateTimerTask>
 800689e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d116      	bne.n	80068d4 <vTaskStartScheduler+0x5c>
        __asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	60bb      	str	r3, [r7, #8]
    }
 80068b8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80068ba:	4b14      	ldr	r3, [pc, #80]	@ (800690c <vTaskStartScheduler+0x94>)
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80068c2:	4b13      	ldr	r3, [pc, #76]	@ (8006910 <vTaskStartScheduler+0x98>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068c8:	4b12      	ldr	r3, [pc, #72]	@ (8006914 <vTaskStartScheduler+0x9c>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80068ce:	f001 f9b1 	bl	8007c34 <xPortStartScheduler>
 80068d2:	e00f      	b.n	80068f4 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d10b      	bne.n	80068f4 <vTaskStartScheduler+0x7c>
        __asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	607b      	str	r3, [r7, #4]
    }
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	e7fd      	b.n	80068f0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80068f4:	4b08      	ldr	r3, [pc, #32]	@ (8006918 <vTaskStartScheduler+0xa0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	20000ffc 	.word	0x20000ffc
 8006904:	08009db8 	.word	0x08009db8
 8006908:	08006f41 	.word	0x08006f41
 800690c:	20000ff8 	.word	0x20000ff8
 8006910:	20000fe4 	.word	0x20000fe4
 8006914:	20000fdc 	.word	0x20000fdc
 8006918:	2000000c 	.word	0x2000000c

0800691c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006920:	4b04      	ldr	r3, [pc, #16]	@ (8006934 <vTaskSuspendAll+0x18>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	4a03      	ldr	r2, [pc, #12]	@ (8006934 <vTaskSuspendAll+0x18>)
 8006928:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800692a:	bf00      	nop
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	20001000 	.word	0x20001000

08006938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006942:	2300      	movs	r3, #0
 8006944:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006946:	4b42      	ldr	r3, [pc, #264]	@ (8006a50 <xTaskResumeAll+0x118>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <xTaskResumeAll+0x2e>
        __asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	603b      	str	r3, [r7, #0]
    }
 8006960:	bf00      	nop
 8006962:	bf00      	nop
 8006964:	e7fd      	b.n	8006962 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006966:	f001 fa09 	bl	8007d7c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800696a:	4b39      	ldr	r3, [pc, #228]	@ (8006a50 <xTaskResumeAll+0x118>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3b01      	subs	r3, #1
 8006970:	4a37      	ldr	r2, [pc, #220]	@ (8006a50 <xTaskResumeAll+0x118>)
 8006972:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006974:	4b36      	ldr	r3, [pc, #216]	@ (8006a50 <xTaskResumeAll+0x118>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d161      	bne.n	8006a40 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800697c:	4b35      	ldr	r3, [pc, #212]	@ (8006a54 <xTaskResumeAll+0x11c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d05d      	beq.n	8006a40 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006984:	e02e      	b.n	80069e4 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006986:	4b34      	ldr	r3, [pc, #208]	@ (8006a58 <xTaskResumeAll+0x120>)
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3318      	adds	r3, #24
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe ff12 	bl	80057bc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3304      	adds	r3, #4
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe ff0d 	bl	80057bc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a6:	2201      	movs	r2, #1
 80069a8:	409a      	lsls	r2, r3
 80069aa:	4b2c      	ldr	r3, [pc, #176]	@ (8006a5c <xTaskResumeAll+0x124>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a5c <xTaskResumeAll+0x124>)
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4a27      	ldr	r2, [pc, #156]	@ (8006a60 <xTaskResumeAll+0x128>)
 80069c2:	441a      	add	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4610      	mov	r0, r2
 80069cc:	f7fe fe99 	bl	8005702 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d4:	4b23      	ldr	r3, [pc, #140]	@ (8006a64 <xTaskResumeAll+0x12c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	429a      	cmp	r2, r3
 80069dc:	d302      	bcc.n	80069e4 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80069de:	4b22      	ldr	r3, [pc, #136]	@ (8006a68 <xTaskResumeAll+0x130>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a58 <xTaskResumeAll+0x120>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1cc      	bne.n	8006986 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80069f2:	f000 fb3b 	bl	800706c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069f6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a6c <xTaskResumeAll+0x134>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d010      	beq.n	8006a24 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006a02:	f000 f847 	bl	8006a94 <xTaskIncrementTick>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8006a0c:	4b16      	ldr	r3, [pc, #88]	@ (8006a68 <xTaskResumeAll+0x130>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f1      	bne.n	8006a02 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8006a1e:	4b13      	ldr	r3, [pc, #76]	@ (8006a6c <xTaskResumeAll+0x134>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006a24:	4b10      	ldr	r3, [pc, #64]	@ (8006a68 <xTaskResumeAll+0x130>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006a30:	4b0f      	ldr	r3, [pc, #60]	@ (8006a70 <xTaskResumeAll+0x138>)
 8006a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006a40:	f001 f9ce 	bl	8007de0 <vPortExitCritical>

    return xAlreadyYielded;
 8006a44:	68bb      	ldr	r3, [r7, #8]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20001000 	.word	0x20001000
 8006a54:	20000fd8 	.word	0x20000fd8
 8006a58:	20000f98 	.word	0x20000f98
 8006a5c:	20000fe0 	.word	0x20000fe0
 8006a60:	20000f04 	.word	0x20000f04
 8006a64:	20000f00 	.word	0x20000f00
 8006a68:	20000fec 	.word	0x20000fec
 8006a6c:	20000fe8 	.word	0x20000fe8
 8006a70:	e000ed04 	.word	0xe000ed04

08006a74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006a7a:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <xTaskGetTickCount+0x1c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006a80:	687b      	ldr	r3, [r7, #4]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	20000fdc 	.word	0x20000fdc

08006a94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a9e:	4b4f      	ldr	r3, [pc, #316]	@ (8006bdc <xTaskIncrementTick+0x148>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f040 808f 	bne.w	8006bc6 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8006be0 <xTaskIncrementTick+0x14c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8006be0 <xTaskIncrementTick+0x14c>)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d121      	bne.n	8006b00 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006abc:	4b49      	ldr	r3, [pc, #292]	@ (8006be4 <xTaskIncrementTick+0x150>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <xTaskIncrementTick+0x4a>
        __asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	603b      	str	r3, [r7, #0]
    }
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	e7fd      	b.n	8006ada <xTaskIncrementTick+0x46>
 8006ade:	4b41      	ldr	r3, [pc, #260]	@ (8006be4 <xTaskIncrementTick+0x150>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	4b40      	ldr	r3, [pc, #256]	@ (8006be8 <xTaskIncrementTick+0x154>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a3e      	ldr	r2, [pc, #248]	@ (8006be4 <xTaskIncrementTick+0x150>)
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	4a3e      	ldr	r2, [pc, #248]	@ (8006be8 <xTaskIncrementTick+0x154>)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	4b3e      	ldr	r3, [pc, #248]	@ (8006bec <xTaskIncrementTick+0x158>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3301      	adds	r3, #1
 8006af8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bec <xTaskIncrementTick+0x158>)
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	f000 fab6 	bl	800706c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006b00:	4b3b      	ldr	r3, [pc, #236]	@ (8006bf0 <xTaskIncrementTick+0x15c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d348      	bcc.n	8006b9c <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b0a:	4b36      	ldr	r3, [pc, #216]	@ (8006be4 <xTaskIncrementTick+0x150>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d104      	bne.n	8006b1e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b14:	4b36      	ldr	r3, [pc, #216]	@ (8006bf0 <xTaskIncrementTick+0x15c>)
 8006b16:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1a:	601a      	str	r2, [r3, #0]
                    break;
 8006b1c:	e03e      	b.n	8006b9c <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1e:	4b31      	ldr	r3, [pc, #196]	@ (8006be4 <xTaskIncrementTick+0x150>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d203      	bcs.n	8006b3e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006b36:	4a2e      	ldr	r2, [pc, #184]	@ (8006bf0 <xTaskIncrementTick+0x15c>)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b3c:	e02e      	b.n	8006b9c <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3304      	adds	r3, #4
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe fe3a 	bl	80057bc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d004      	beq.n	8006b5a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	3318      	adds	r3, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe fe31 	bl	80057bc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	2201      	movs	r2, #1
 8006b60:	409a      	lsls	r2, r3
 8006b62:	4b24      	ldr	r3, [pc, #144]	@ (8006bf4 <xTaskIncrementTick+0x160>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	4a22      	ldr	r2, [pc, #136]	@ (8006bf4 <xTaskIncrementTick+0x160>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf8 <xTaskIncrementTick+0x164>)
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fe fdbd 	bl	8005702 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bfc <xTaskIncrementTick+0x168>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d3b9      	bcc.n	8006b0a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b9a:	e7b6      	b.n	8006b0a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b9c:	4b17      	ldr	r3, [pc, #92]	@ (8006bfc <xTaskIncrementTick+0x168>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba2:	4915      	ldr	r1, [pc, #84]	@ (8006bf8 <xTaskIncrementTick+0x164>)
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d901      	bls.n	8006bb8 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006bb8:	4b11      	ldr	r3, [pc, #68]	@ (8006c00 <xTaskIncrementTick+0x16c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e004      	b.n	8006bd0 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c04 <xTaskIncrementTick+0x170>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8006c04 <xTaskIncrementTick+0x170>)
 8006bce:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006bd0:	697b      	ldr	r3, [r7, #20]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20001000 	.word	0x20001000
 8006be0:	20000fdc 	.word	0x20000fdc
 8006be4:	20000f90 	.word	0x20000f90
 8006be8:	20000f94 	.word	0x20000f94
 8006bec:	20000ff0 	.word	0x20000ff0
 8006bf0:	20000ff8 	.word	0x20000ff8
 8006bf4:	20000fe0 	.word	0x20000fe0
 8006bf8:	20000f04 	.word	0x20000f04
 8006bfc:	20000f00 	.word	0x20000f00
 8006c00:	20000fec 	.word	0x20000fec
 8006c04:	20000fe8 	.word	0x20000fe8

08006c08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c0e:	4b27      	ldr	r3, [pc, #156]	@ (8006cac <vTaskSwitchContext+0xa4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006c16:	4b26      	ldr	r3, [pc, #152]	@ (8006cb0 <vTaskSwitchContext+0xa8>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006c1c:	e040      	b.n	8006ca0 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8006c1e:	4b24      	ldr	r3, [pc, #144]	@ (8006cb0 <vTaskSwitchContext+0xa8>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c24:	4b23      	ldr	r3, [pc, #140]	@ (8006cb4 <vTaskSwitchContext+0xac>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	fab3 f383 	clz	r3, r3
 8006c30:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006c32:	7afb      	ldrb	r3, [r7, #11]
 8006c34:	f1c3 031f 	rsb	r3, r3, #31
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	491f      	ldr	r1, [pc, #124]	@ (8006cb8 <vTaskSwitchContext+0xb0>)
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10b      	bne.n	8006c66 <vTaskSwitchContext+0x5e>
        __asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	607b      	str	r3, [r7, #4]
    }
 8006c60:	bf00      	nop
 8006c62:	bf00      	nop
 8006c64:	e7fd      	b.n	8006c62 <vTaskSwitchContext+0x5a>
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4a11      	ldr	r2, [pc, #68]	@ (8006cb8 <vTaskSwitchContext+0xb0>)
 8006c72:	4413      	add	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	605a      	str	r2, [r3, #4]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	3308      	adds	r3, #8
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d104      	bne.n	8006c96 <vTaskSwitchContext+0x8e>
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	605a      	str	r2, [r3, #4]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	4a07      	ldr	r2, [pc, #28]	@ (8006cbc <vTaskSwitchContext+0xb4>)
 8006c9e:	6013      	str	r3, [r2, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	20001000 	.word	0x20001000
 8006cb0:	20000fec 	.word	0x20000fec
 8006cb4:	20000fe0 	.word	0x20000fe0
 8006cb8:	20000f04 	.word	0x20000f04
 8006cbc:	20000f00 	.word	0x20000f00

08006cc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10b      	bne.n	8006ce8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	60fb      	str	r3, [r7, #12]
    }
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	e7fd      	b.n	8006ce4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ce8:	4b07      	ldr	r3, [pc, #28]	@ (8006d08 <vTaskPlaceOnEventList+0x48>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3318      	adds	r3, #24
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fe fd2a 	bl	800574a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	6838      	ldr	r0, [r7, #0]
 8006cfa:	f000 fb87 	bl	800740c <prvAddCurrentTaskToDelayedList>
}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000f00 	.word	0x20000f00

08006d0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10b      	bne.n	8006d36 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	617b      	str	r3, [r7, #20]
    }
 8006d30:	bf00      	nop
 8006d32:	bf00      	nop
 8006d34:	e7fd      	b.n	8006d32 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d36:	4b0a      	ldr	r3, [pc, #40]	@ (8006d60 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3318      	adds	r3, #24
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7fe fcdf 	bl	8005702 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	68b8      	ldr	r0, [r7, #8]
 8006d54:	f000 fb5a 	bl	800740c <prvAddCurrentTaskToDelayedList>
    }
 8006d58:	bf00      	nop
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000f00 	.word	0x20000f00

08006d64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	60fb      	str	r3, [r7, #12]
    }
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	e7fd      	b.n	8006d8e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	3318      	adds	r3, #24
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fd10 	bl	80057bc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006e14 <xTaskRemoveFromEventList+0xb0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d11c      	bne.n	8006dde <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	3304      	adds	r3, #4
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe fd07 	bl	80057bc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db2:	2201      	movs	r2, #1
 8006db4:	409a      	lsls	r2, r3
 8006db6:	4b18      	ldr	r3, [pc, #96]	@ (8006e18 <xTaskRemoveFromEventList+0xb4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	4a16      	ldr	r2, [pc, #88]	@ (8006e18 <xTaskRemoveFromEventList+0xb4>)
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4a13      	ldr	r2, [pc, #76]	@ (8006e1c <xTaskRemoveFromEventList+0xb8>)
 8006dce:	441a      	add	r2, r3
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	f7fe fc93 	bl	8005702 <vListInsertEnd>
 8006ddc:	e005      	b.n	8006dea <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	3318      	adds	r3, #24
 8006de2:	4619      	mov	r1, r3
 8006de4:	480e      	ldr	r0, [pc, #56]	@ (8006e20 <xTaskRemoveFromEventList+0xbc>)
 8006de6:	f7fe fc8c 	bl	8005702 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dee:	4b0d      	ldr	r3, [pc, #52]	@ (8006e24 <xTaskRemoveFromEventList+0xc0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d905      	bls.n	8006e04 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <xTaskRemoveFromEventList+0xc4>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e001      	b.n	8006e08 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006e08:	697b      	ldr	r3, [r7, #20]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20001000 	.word	0x20001000
 8006e18:	20000fe0 	.word	0x20000fe0
 8006e1c:	20000f04 	.word	0x20000f04
 8006e20:	20000f98 	.word	0x20000f98
 8006e24:	20000f00 	.word	0x20000f00
 8006e28:	20000fec 	.word	0x20000fec

08006e2c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e34:	4b06      	ldr	r3, [pc, #24]	@ (8006e50 <vTaskInternalSetTimeOutState+0x24>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006e3c:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <vTaskInternalSetTimeOutState+0x28>)
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	605a      	str	r2, [r3, #4]
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	20000ff0 	.word	0x20000ff0
 8006e54:	20000fdc 	.word	0x20000fdc

08006e58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10b      	bne.n	8006e80 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	613b      	str	r3, [r7, #16]
    }
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	e7fd      	b.n	8006e7c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60fb      	str	r3, [r7, #12]
    }
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006e9e:	f000 ff6d 	bl	8007d7c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f20 <xTaskCheckForTimeOut+0xc8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eba:	d102      	bne.n	8006ec2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	e026      	b.n	8006f10 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	4b17      	ldr	r3, [pc, #92]	@ (8006f24 <xTaskCheckForTimeOut+0xcc>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d00a      	beq.n	8006ee4 <xTaskCheckForTimeOut+0x8c>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d305      	bcc.n	8006ee4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	e015      	b.n	8006f10 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d20b      	bcs.n	8006f06 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	1ad2      	subs	r2, r2, r3
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff ff96 	bl	8006e2c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	e004      	b.n	8006f10 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006f10:	f000 ff66 	bl	8007de0 <vPortExitCritical>

    return xReturn;
 8006f14:	69fb      	ldr	r3, [r7, #28]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000fdc 	.word	0x20000fdc
 8006f24:	20000ff0 	.word	0x20000ff0

08006f28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006f2c:	4b03      	ldr	r3, [pc, #12]	@ (8006f3c <vTaskMissedYield+0x14>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
}
 8006f32:	bf00      	nop
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000fec 	.word	0x20000fec

08006f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006f48:	f000 f852 	bl	8006ff0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f4c:	4b06      	ldr	r3, [pc, #24]	@ (8006f68 <prvIdleTask+0x28>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d9f9      	bls.n	8006f48 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <prvIdleTask+0x2c>)
 8006f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006f64:	e7f0      	b.n	8006f48 <prvIdleTask+0x8>
 8006f66:	bf00      	nop
 8006f68:	20000f04 	.word	0x20000f04
 8006f6c:	e000ed04 	.word	0xe000ed04

08006f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f76:	2300      	movs	r3, #0
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	e00c      	b.n	8006f96 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4a12      	ldr	r2, [pc, #72]	@ (8006fd0 <prvInitialiseTaskLists+0x60>)
 8006f88:	4413      	add	r3, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fb8c 	bl	80056a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3301      	adds	r3, #1
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d9ef      	bls.n	8006f7c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006f9c:	480d      	ldr	r0, [pc, #52]	@ (8006fd4 <prvInitialiseTaskLists+0x64>)
 8006f9e:	f7fe fb83 	bl	80056a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006fa2:	480d      	ldr	r0, [pc, #52]	@ (8006fd8 <prvInitialiseTaskLists+0x68>)
 8006fa4:	f7fe fb80 	bl	80056a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006fa8:	480c      	ldr	r0, [pc, #48]	@ (8006fdc <prvInitialiseTaskLists+0x6c>)
 8006faa:	f7fe fb7d 	bl	80056a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006fae:	480c      	ldr	r0, [pc, #48]	@ (8006fe0 <prvInitialiseTaskLists+0x70>)
 8006fb0:	f7fe fb7a 	bl	80056a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006fb4:	480b      	ldr	r0, [pc, #44]	@ (8006fe4 <prvInitialiseTaskLists+0x74>)
 8006fb6:	f7fe fb77 	bl	80056a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006fba:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe8 <prvInitialiseTaskLists+0x78>)
 8006fbc:	4a05      	ldr	r2, [pc, #20]	@ (8006fd4 <prvInitialiseTaskLists+0x64>)
 8006fbe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006fec <prvInitialiseTaskLists+0x7c>)
 8006fc2:	4a05      	ldr	r2, [pc, #20]	@ (8006fd8 <prvInitialiseTaskLists+0x68>)
 8006fc4:	601a      	str	r2, [r3, #0]
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000f04 	.word	0x20000f04
 8006fd4:	20000f68 	.word	0x20000f68
 8006fd8:	20000f7c 	.word	0x20000f7c
 8006fdc:	20000f98 	.word	0x20000f98
 8006fe0:	20000fac 	.word	0x20000fac
 8006fe4:	20000fc4 	.word	0x20000fc4
 8006fe8:	20000f90 	.word	0x20000f90
 8006fec:	20000f94 	.word	0x20000f94

08006ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ff6:	e019      	b.n	800702c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006ff8:	f000 fec0 	bl	8007d7c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffc:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <prvCheckTasksWaitingTermination+0x50>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fbd7 	bl	80057bc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800700e:	4b0d      	ldr	r3, [pc, #52]	@ (8007044 <prvCheckTasksWaitingTermination+0x54>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3b01      	subs	r3, #1
 8007014:	4a0b      	ldr	r2, [pc, #44]	@ (8007044 <prvCheckTasksWaitingTermination+0x54>)
 8007016:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007018:	4b0b      	ldr	r3, [pc, #44]	@ (8007048 <prvCheckTasksWaitingTermination+0x58>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3b01      	subs	r3, #1
 800701e:	4a0a      	ldr	r2, [pc, #40]	@ (8007048 <prvCheckTasksWaitingTermination+0x58>)
 8007020:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007022:	f000 fedd 	bl	8007de0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f810 	bl	800704c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800702c:	4b06      	ldr	r3, [pc, #24]	@ (8007048 <prvCheckTasksWaitingTermination+0x58>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e1      	bne.n	8006ff8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000fac 	.word	0x20000fac
 8007044:	20000fd8 	.word	0x20000fd8
 8007048:	20000fc0 	.word	0x20000fc0

0800704c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007058:	4618      	mov	r0, r3
 800705a:	f001 f89b 	bl	8008194 <vPortFree>
                vPortFree( pxTCB );
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 f898 	bl	8008194 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007070:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <prvResetNextTaskUnblockTime+0x30>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800707a:	4b09      	ldr	r3, [pc, #36]	@ (80070a0 <prvResetNextTaskUnblockTime+0x34>)
 800707c:	f04f 32ff 	mov.w	r2, #4294967295
 8007080:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007082:	e005      	b.n	8007090 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007084:	4b05      	ldr	r3, [pc, #20]	@ (800709c <prvResetNextTaskUnblockTime+0x30>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a04      	ldr	r2, [pc, #16]	@ (80070a0 <prvResetNextTaskUnblockTime+0x34>)
 800708e:	6013      	str	r3, [r2, #0]
}
 8007090:	bf00      	nop
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20000f90 	.word	0x20000f90
 80070a0:	20000ff8 	.word	0x20000ff8

080070a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80070aa:	4b0b      	ldr	r3, [pc, #44]	@ (80070d8 <xTaskGetSchedulerState+0x34>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80070b2:	2301      	movs	r3, #1
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	e008      	b.n	80070ca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b8:	4b08      	ldr	r3, [pc, #32]	@ (80070dc <xTaskGetSchedulerState+0x38>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80070c0:	2302      	movs	r3, #2
 80070c2:	607b      	str	r3, [r7, #4]
 80070c4:	e001      	b.n	80070ca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80070c6:	2300      	movs	r3, #0
 80070c8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80070ca:	687b      	ldr	r3, [r7, #4]
    }
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	20000fe4 	.word	0x20000fe4
 80070dc:	20001000 	.word	0x20001000

080070e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d05e      	beq.n	80071b4 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fa:	4b31      	ldr	r3, [pc, #196]	@ (80071c0 <xTaskPriorityInherit+0xe0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	429a      	cmp	r2, r3
 8007102:	d24e      	bcs.n	80071a2 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	db06      	blt.n	800711a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800710c:	4b2c      	ldr	r3, [pc, #176]	@ (80071c0 <xTaskPriorityInherit+0xe0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007112:	f1c3 0205 	rsb	r2, r3, #5
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6959      	ldr	r1, [r3, #20]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4a26      	ldr	r2, [pc, #152]	@ (80071c4 <xTaskPriorityInherit+0xe4>)
 800712c:	4413      	add	r3, r2
 800712e:	4299      	cmp	r1, r3
 8007130:	d12f      	bne.n	8007192 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	3304      	adds	r3, #4
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe fb40 	bl	80057bc <uxListRemove>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007146:	2201      	movs	r2, #1
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	43da      	mvns	r2, r3
 800714e:	4b1e      	ldr	r3, [pc, #120]	@ (80071c8 <xTaskPriorityInherit+0xe8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4013      	ands	r3, r2
 8007154:	4a1c      	ldr	r2, [pc, #112]	@ (80071c8 <xTaskPriorityInherit+0xe8>)
 8007156:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007158:	4b19      	ldr	r3, [pc, #100]	@ (80071c0 <xTaskPriorityInherit+0xe0>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007166:	2201      	movs	r2, #1
 8007168:	409a      	lsls	r2, r3
 800716a:	4b17      	ldr	r3, [pc, #92]	@ (80071c8 <xTaskPriorityInherit+0xe8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4313      	orrs	r3, r2
 8007170:	4a15      	ldr	r2, [pc, #84]	@ (80071c8 <xTaskPriorityInherit+0xe8>)
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4a10      	ldr	r2, [pc, #64]	@ (80071c4 <xTaskPriorityInherit+0xe4>)
 8007182:	441a      	add	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f7fe fab9 	bl	8005702 <vListInsertEnd>
 8007190:	e004      	b.n	800719c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007192:	4b0b      	ldr	r3, [pc, #44]	@ (80071c0 <xTaskPriorityInherit+0xe0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e008      	b.n	80071b4 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071a6:	4b06      	ldr	r3, [pc, #24]	@ (80071c0 <xTaskPriorityInherit+0xe0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d201      	bcs.n	80071b4 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80071b0:	2301      	movs	r3, #1
 80071b2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80071b4:	68fb      	ldr	r3, [r7, #12]
    }
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000f00 	.word	0x20000f00
 80071c4:	20000f04 	.word	0x20000f04
 80071c8:	20000fe0 	.word	0x20000fe0

080071cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d065      	beq.n	80072ae <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80071e2:	4b35      	ldr	r3, [pc, #212]	@ (80072b8 <xTaskPriorityDisinherit+0xec>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d00b      	beq.n	8007204 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	60fb      	str	r3, [r7, #12]
    }
 80071fe:	bf00      	nop
 8007200:	bf00      	nop
 8007202:	e7fd      	b.n	8007200 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60bb      	str	r3, [r7, #8]
    }
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	e7fd      	b.n	8007220 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007228:	1e5a      	subs	r2, r3, #1
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007236:	429a      	cmp	r2, r3
 8007238:	d039      	beq.n	80072ae <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d135      	bne.n	80072ae <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	3304      	adds	r3, #4
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fab8 	bl	80057bc <uxListRemove>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007256:	2201      	movs	r2, #1
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	43da      	mvns	r2, r3
 800725e:	4b17      	ldr	r3, [pc, #92]	@ (80072bc <xTaskPriorityDisinherit+0xf0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4013      	ands	r3, r2
 8007264:	4a15      	ldr	r2, [pc, #84]	@ (80072bc <xTaskPriorityDisinherit+0xf0>)
 8007266:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	f1c3 0205 	rsb	r2, r3, #5
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007280:	2201      	movs	r2, #1
 8007282:	409a      	lsls	r2, r3
 8007284:	4b0d      	ldr	r3, [pc, #52]	@ (80072bc <xTaskPriorityDisinherit+0xf0>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4313      	orrs	r3, r2
 800728a:	4a0c      	ldr	r2, [pc, #48]	@ (80072bc <xTaskPriorityDisinherit+0xf0>)
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4a09      	ldr	r2, [pc, #36]	@ (80072c0 <xTaskPriorityDisinherit+0xf4>)
 800729c:	441a      	add	r2, r3
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4619      	mov	r1, r3
 80072a4:	4610      	mov	r0, r2
 80072a6:	f7fe fa2c 	bl	8005702 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80072aa:	2301      	movs	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80072ae:	697b      	ldr	r3, [r7, #20]
    }
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000f00 	.word	0x20000f00
 80072bc:	20000fe0 	.word	0x20000fe0
 80072c0:	20000f04 	.word	0x20000f04

080072c4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072d2:	2301      	movs	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d079      	beq.n	80073d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10b      	bne.n	80072fc <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	60fb      	str	r3, [r7, #12]
    }
 80072f6:	bf00      	nop
 80072f8:	bf00      	nop
 80072fa:	e7fd      	b.n	80072f8 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d902      	bls.n	800730c <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	e002      	b.n	8007312 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007310:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	429a      	cmp	r2, r3
 800731a:	d059      	beq.n	80073d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	429a      	cmp	r2, r3
 8007324:	d154      	bne.n	80073d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007326:	4b2c      	ldr	r3, [pc, #176]	@ (80073d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	429a      	cmp	r2, r3
 800732e:	d10b      	bne.n	8007348 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	60bb      	str	r3, [r7, #8]
    }
 8007342:	bf00      	nop
 8007344:	bf00      	nop
 8007346:	e7fd      	b.n	8007344 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	db04      	blt.n	8007366 <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f1c3 0205 	rsb	r2, r3, #5
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	6959      	ldr	r1, [r3, #20]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4a19      	ldr	r2, [pc, #100]	@ (80073dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007376:	4413      	add	r3, r2
 8007378:	4299      	cmp	r1, r3
 800737a:	d129      	bne.n	80073d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	3304      	adds	r3, #4
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fa1b 	bl	80057bc <uxListRemove>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	2201      	movs	r2, #1
 8007392:	fa02 f303 	lsl.w	r3, r2, r3
 8007396:	43da      	mvns	r2, r3
 8007398:	4b11      	ldr	r3, [pc, #68]	@ (80073e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4013      	ands	r3, r2
 800739e:	4a10      	ldr	r2, [pc, #64]	@ (80073e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80073a0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a6:	2201      	movs	r2, #1
 80073a8:	409a      	lsls	r2, r3
 80073aa:	4b0d      	ldr	r3, [pc, #52]	@ (80073e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	4a0b      	ldr	r2, [pc, #44]	@ (80073e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4a06      	ldr	r2, [pc, #24]	@ (80073dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073c2:	441a      	add	r2, r3
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4619      	mov	r1, r3
 80073ca:	4610      	mov	r0, r2
 80073cc:	f7fe f999 	bl	8005702 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80073d0:	bf00      	nop
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20000f00 	.word	0x20000f00
 80073dc:	20000f04 	.word	0x20000f04
 80073e0:	20000fe0 	.word	0x20000fe0

080073e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80073e8:	4b07      	ldr	r3, [pc, #28]	@ (8007408 <pvTaskIncrementMutexHeldCount+0x24>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d004      	beq.n	80073fa <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80073f0:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <pvTaskIncrementMutexHeldCount+0x24>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073f6:	3201      	adds	r2, #1
 80073f8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 80073fa:	4b03      	ldr	r3, [pc, #12]	@ (8007408 <pvTaskIncrementMutexHeldCount+0x24>)
 80073fc:	681b      	ldr	r3, [r3, #0]
    }
 80073fe:	4618      	mov	r0, r3
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	20000f00 	.word	0x20000f00

0800740c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007416:	4b29      	ldr	r3, [pc, #164]	@ (80074bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800741c:	4b28      	ldr	r3, [pc, #160]	@ (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3304      	adds	r3, #4
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe f9ca 	bl	80057bc <uxListRemove>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10b      	bne.n	8007446 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800742e:	4b24      	ldr	r3, [pc, #144]	@ (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	2201      	movs	r2, #1
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	43da      	mvns	r2, r3
 800743c:	4b21      	ldr	r3, [pc, #132]	@ (80074c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4013      	ands	r3, r2
 8007442:	4a20      	ldr	r2, [pc, #128]	@ (80074c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007444:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744c:	d10a      	bne.n	8007464 <prvAddCurrentTaskToDelayedList+0x58>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007454:	4b1a      	ldr	r3, [pc, #104]	@ (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3304      	adds	r3, #4
 800745a:	4619      	mov	r1, r3
 800745c:	481a      	ldr	r0, [pc, #104]	@ (80074c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800745e:	f7fe f950 	bl	8005702 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007462:	e026      	b.n	80074b2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800746c:	4b14      	ldr	r3, [pc, #80]	@ (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	429a      	cmp	r2, r3
 800747a:	d209      	bcs.n	8007490 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747c:	4b13      	ldr	r3, [pc, #76]	@ (80074cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	4b0f      	ldr	r3, [pc, #60]	@ (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7fe f95e 	bl	800574a <vListInsert>
}
 800748e:	e010      	b.n	80074b2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007490:	4b0f      	ldr	r3, [pc, #60]	@ (80074d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3304      	adds	r3, #4
 800749a:	4619      	mov	r1, r3
 800749c:	4610      	mov	r0, r2
 800749e:	f7fe f954 	bl	800574a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80074a2:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d202      	bcs.n	80074b2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80074ac:	4a09      	ldr	r2, [pc, #36]	@ (80074d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6013      	str	r3, [r2, #0]
}
 80074b2:	bf00      	nop
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000fdc 	.word	0x20000fdc
 80074c0:	20000f00 	.word	0x20000f00
 80074c4:	20000fe0 	.word	0x20000fe0
 80074c8:	20000fc4 	.word	0x20000fc4
 80074cc:	20000f94 	.word	0x20000f94
 80074d0:	20000f90 	.word	0x20000f90
 80074d4:	20000ff8 	.word	0x20000ff8

080074d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80074de:	2300      	movs	r3, #0
 80074e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80074e2:	f000 fae1 	bl	8007aa8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80074e6:	4b12      	ldr	r3, [pc, #72]	@ (8007530 <xTimerCreateTimerTask+0x58>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00b      	beq.n	8007506 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80074ee:	4b11      	ldr	r3, [pc, #68]	@ (8007534 <xTimerCreateTimerTask+0x5c>)
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	2302      	movs	r3, #2
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	2300      	movs	r3, #0
 80074f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80074fc:	490e      	ldr	r1, [pc, #56]	@ (8007538 <xTimerCreateTimerTask+0x60>)
 80074fe:	480f      	ldr	r0, [pc, #60]	@ (800753c <xTimerCreateTimerTask+0x64>)
 8007500:	f7ff f83e 	bl	8006580 <xTaskCreate>
 8007504:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10b      	bne.n	8007524 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	603b      	str	r3, [r7, #0]
    }
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	e7fd      	b.n	8007520 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007524:	687b      	ldr	r3, [r7, #4]
    }
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20001034 	.word	0x20001034
 8007534:	20001038 	.word	0x20001038
 8007538:	08009dc0 	.word	0x08009dc0
 800753c:	08007679 	.word	0x08007679

08007540 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	@ 0x28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800754e:	2300      	movs	r3, #0
 8007550:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10b      	bne.n	8007570 <xTimerGenericCommand+0x30>
        __asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	623b      	str	r3, [r7, #32]
    }
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	e7fd      	b.n	800756c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007570:	4b19      	ldr	r3, [pc, #100]	@ (80075d8 <xTimerGenericCommand+0x98>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d02a      	beq.n	80075ce <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b05      	cmp	r3, #5
 8007588:	dc18      	bgt.n	80075bc <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800758a:	f7ff fd8b 	bl	80070a4 <xTaskGetSchedulerState>
 800758e:	4603      	mov	r3, r0
 8007590:	2b02      	cmp	r3, #2
 8007592:	d109      	bne.n	80075a8 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007594:	4b10      	ldr	r3, [pc, #64]	@ (80075d8 <xTimerGenericCommand+0x98>)
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	f107 0114 	add.w	r1, r7, #20
 800759c:	2300      	movs	r3, #0
 800759e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075a0:	f7fe fa26 	bl	80059f0 <xQueueGenericSend>
 80075a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80075a6:	e012      	b.n	80075ce <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075a8:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <xTimerGenericCommand+0x98>)
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	f107 0114 	add.w	r1, r7, #20
 80075b0:	2300      	movs	r3, #0
 80075b2:	2200      	movs	r2, #0
 80075b4:	f7fe fa1c 	bl	80059f0 <xQueueGenericSend>
 80075b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80075ba:	e008      	b.n	80075ce <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075bc:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <xTimerGenericCommand+0x98>)
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	f107 0114 	add.w	r1, r7, #20
 80075c4:	2300      	movs	r3, #0
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	f7fe fb14 	bl	8005bf4 <xQueueGenericSendFromISR>
 80075cc:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80075d0:	4618      	mov	r0, r3
 80075d2:	3728      	adds	r7, #40	@ 0x28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20001034 	.word	0x20001034

080075dc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e6:	4b23      	ldr	r3, [pc, #140]	@ (8007674 <prvProcessExpiredTimer+0x98>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe f8e1 	bl	80057bc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d023      	beq.n	8007650 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	18d1      	adds	r1, r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	6978      	ldr	r0, [r7, #20]
 8007616:	f000 f8d5 	bl	80077c4 <prvInsertTimerInActiveList>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d020      	beq.n	8007662 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007620:	2300      	movs	r3, #0
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	2300      	movs	r3, #0
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	2100      	movs	r1, #0
 800762a:	6978      	ldr	r0, [r7, #20]
 800762c:	f7ff ff88 	bl	8007540 <xTimerGenericCommand>
 8007630:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d114      	bne.n	8007662 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	60fb      	str	r3, [r7, #12]
    }
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	b2da      	uxtb	r2, r3
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	6978      	ldr	r0, [r7, #20]
 8007668:	4798      	blx	r3
    }
 800766a:	bf00      	nop
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	2000102c 	.word	0x2000102c

08007678 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007680:	f107 0308 	add.w	r3, r7, #8
 8007684:	4618      	mov	r0, r3
 8007686:	f000 f859 	bl	800773c <prvGetNextExpireTime>
 800768a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	4619      	mov	r1, r3
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 f805 	bl	80076a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007696:	f000 f8d7 	bl	8007848 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800769a:	bf00      	nop
 800769c:	e7f0      	b.n	8007680 <prvTimerTask+0x8>
	...

080076a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80076aa:	f7ff f937 	bl	800691c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076ae:	f107 0308 	add.w	r3, r7, #8
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f866 	bl	8007784 <prvSampleTimeNow>
 80076b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d130      	bne.n	8007722 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <prvProcessTimerOrBlockTask+0x3c>
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d806      	bhi.n	80076dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80076ce:	f7ff f933 	bl	8006938 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff ff81 	bl	80075dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80076da:	e024      	b.n	8007726 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d008      	beq.n	80076f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076e2:	4b13      	ldr	r3, [pc, #76]	@ (8007730 <prvProcessTimerOrBlockTask+0x90>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <prvProcessTimerOrBlockTask+0x50>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <prvProcessTimerOrBlockTask+0x52>
 80076f0:	2300      	movs	r3, #0
 80076f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007734 <prvProcessTimerOrBlockTask+0x94>)
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	4619      	mov	r1, r3
 8007702:	f7fe ff09 	bl	8006518 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007706:	f7ff f917 	bl	8006938 <xTaskResumeAll>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007710:	4b09      	ldr	r3, [pc, #36]	@ (8007738 <prvProcessTimerOrBlockTask+0x98>)
 8007712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
    }
 8007720:	e001      	b.n	8007726 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007722:	f7ff f909 	bl	8006938 <xTaskResumeAll>
    }
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20001030 	.word	0x20001030
 8007734:	20001034 	.word	0x20001034
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007744:	4b0e      	ldr	r3, [pc, #56]	@ (8007780 <prvGetNextExpireTime+0x44>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <prvGetNextExpireTime+0x16>
 800774e:	2201      	movs	r2, #1
 8007750:	e000      	b.n	8007754 <prvGetNextExpireTime+0x18>
 8007752:	2200      	movs	r2, #0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007760:	4b07      	ldr	r3, [pc, #28]	@ (8007780 <prvGetNextExpireTime+0x44>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	e001      	b.n	8007770 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007770:	68fb      	ldr	r3, [r7, #12]
    }
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	2000102c 	.word	0x2000102c

08007784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800778c:	f7ff f972 	bl	8006a74 <xTaskGetTickCount>
 8007790:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007792:	4b0b      	ldr	r3, [pc, #44]	@ (80077c0 <prvSampleTimeNow+0x3c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	429a      	cmp	r2, r3
 800779a:	d205      	bcs.n	80077a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800779c:	f000 f91e 	bl	80079dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e002      	b.n	80077ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80077ae:	4a04      	ldr	r2, [pc, #16]	@ (80077c0 <prvSampleTimeNow+0x3c>)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80077b4:	68fb      	ldr	r3, [r7, #12]
    }
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	2000103c 	.word	0x2000103c

080077c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d812      	bhi.n	8007810 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d302      	bcc.n	80077fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80077f8:	2301      	movs	r3, #1
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	e01b      	b.n	8007836 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077fe:	4b10      	ldr	r3, [pc, #64]	@ (8007840 <prvInsertTimerInActiveList+0x7c>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3304      	adds	r3, #4
 8007806:	4619      	mov	r1, r3
 8007808:	4610      	mov	r0, r2
 800780a:	f7fd ff9e 	bl	800574a <vListInsert>
 800780e:	e012      	b.n	8007836 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d206      	bcs.n	8007826 <prvInsertTimerInActiveList+0x62>
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d302      	bcc.n	8007826 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e007      	b.n	8007836 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007826:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <prvInsertTimerInActiveList+0x80>)
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3304      	adds	r3, #4
 800782e:	4619      	mov	r1, r3
 8007830:	4610      	mov	r0, r2
 8007832:	f7fd ff8a 	bl	800574a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007836:	697b      	ldr	r3, [r7, #20]
    }
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20001030 	.word	0x20001030
 8007844:	2000102c 	.word	0x2000102c

08007848 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007848:	b580      	push	{r7, lr}
 800784a:	b08c      	sub	sp, #48	@ 0x30
 800784c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800784e:	e0b2      	b.n	80079b6 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	f2c0 80af 	blt.w	80079b6 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	3304      	adds	r3, #4
 8007868:	4618      	mov	r0, r3
 800786a:	f7fd ffa7 	bl	80057bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ff87 	bl	8007784 <prvSampleTimeNow>
 8007876:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b09      	cmp	r3, #9
 800787c:	f200 8098 	bhi.w	80079b0 <prvProcessReceivedCommands+0x168>
 8007880:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <prvProcessReceivedCommands+0x40>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078b1 	.word	0x080078b1
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078b1 	.word	0x080078b1
 8007894:	08007927 	.word	0x08007927
 8007898:	0800793b 	.word	0x0800793b
 800789c:	08007987 	.word	0x08007987
 80078a0:	080078b1 	.word	0x080078b1
 80078a4:	080078b1 	.word	0x080078b1
 80078a8:	08007927 	.word	0x08007927
 80078ac:	0800793b 	.word	0x0800793b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	18d1      	adds	r1, r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6a3a      	ldr	r2, [r7, #32]
 80078ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078d0:	f7ff ff78 	bl	80077c4 <prvInsertTimerInActiveList>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d06c      	beq.n	80079b4 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078e0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d061      	beq.n	80079b4 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	441a      	add	r2, r3
 80078f8:	2300      	movs	r3, #0
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	2300      	movs	r3, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007902:	f7ff fe1d 	bl	8007540 <xTimerGenericCommand>
 8007906:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d152      	bne.n	80079b4 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	61bb      	str	r3, [r7, #24]
    }
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	b2da      	uxtb	r2, r3
 8007932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007934:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007938:	e03d      	b.n	80079b6 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007940:	f043 0301 	orr.w	r3, r3, #1
 8007944:	b2da      	uxtb	r2, r3
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	617b      	str	r3, [r7, #20]
    }
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	18d1      	adds	r1, r2, r3
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	6a3a      	ldr	r2, [r7, #32]
 800797e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007980:	f7ff ff20 	bl	80077c4 <prvInsertTimerInActiveList>
                        break;
 8007984:	e017      	b.n	80079b6 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8007994:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007996:	f000 fbfd 	bl	8008194 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800799a:	e00c      	b.n	80079b6 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80079ae:	e002      	b.n	80079b6 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <prvProcessReceivedCommands+0x16e>
                        break;
 80079b4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079b6:	4b08      	ldr	r3, [pc, #32]	@ (80079d8 <prvProcessReceivedCommands+0x190>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f107 0108 	add.w	r1, r7, #8
 80079be:	2200      	movs	r2, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fa65 	bl	8005e90 <xQueueReceive>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f47f af41 	bne.w	8007850 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	3728      	adds	r7, #40	@ 0x28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20001034 	.word	0x20001034

080079dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079e2:	e049      	b.n	8007a78 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079e4:	4b2e      	ldr	r3, [pc, #184]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ee:	4b2c      	ldr	r3, [pc, #176]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fd fedd 	bl	80057bc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d02f      	beq.n	8007a78 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4413      	add	r3, r2
 8007a20:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d90e      	bls.n	8007a48 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a36:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f7fd fe82 	bl	800574a <vListInsert>
 8007a46:	e017      	b.n	8007a78 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	2100      	movs	r1, #0
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7ff fd74 	bl	8007540 <xTimerGenericCommand>
 8007a58:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10b      	bne.n	8007a78 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	603b      	str	r3, [r7, #0]
    }
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a78:	4b09      	ldr	r3, [pc, #36]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1b0      	bne.n	80079e4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007a82:	4b07      	ldr	r3, [pc, #28]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007a88:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <prvSwitchTimerLists+0xc8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a04      	ldr	r2, [pc, #16]	@ (8007aa0 <prvSwitchTimerLists+0xc4>)
 8007a8e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007a90:	4a04      	ldr	r2, [pc, #16]	@ (8007aa4 <prvSwitchTimerLists+0xc8>)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	6013      	str	r3, [r2, #0]
    }
 8007a96:	bf00      	nop
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	2000102c 	.word	0x2000102c
 8007aa4:	20001030 	.word	0x20001030

08007aa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007aac:	f000 f966 	bl	8007d7c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007ab0:	4b12      	ldr	r3, [pc, #72]	@ (8007afc <prvCheckForValidListAndQueue+0x54>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11d      	bne.n	8007af4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007ab8:	4811      	ldr	r0, [pc, #68]	@ (8007b00 <prvCheckForValidListAndQueue+0x58>)
 8007aba:	f7fd fdf5 	bl	80056a8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007abe:	4811      	ldr	r0, [pc, #68]	@ (8007b04 <prvCheckForValidListAndQueue+0x5c>)
 8007ac0:	f7fd fdf2 	bl	80056a8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007ac4:	4b10      	ldr	r3, [pc, #64]	@ (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8007b00 <prvCheckForValidListAndQueue+0x58>)
 8007ac8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007aca:	4b10      	ldr	r3, [pc, #64]	@ (8007b0c <prvCheckForValidListAndQueue+0x64>)
 8007acc:	4a0d      	ldr	r2, [pc, #52]	@ (8007b04 <prvCheckForValidListAndQueue+0x5c>)
 8007ace:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	210c      	movs	r1, #12
 8007ad4:	200a      	movs	r0, #10
 8007ad6:	f7fd ff05 	bl	80058e4 <xQueueGenericCreate>
 8007ada:	4603      	mov	r3, r0
 8007adc:	4a07      	ldr	r2, [pc, #28]	@ (8007afc <prvCheckForValidListAndQueue+0x54>)
 8007ade:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007ae0:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <prvCheckForValidListAndQueue+0x54>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ae8:	4b04      	ldr	r3, [pc, #16]	@ (8007afc <prvCheckForValidListAndQueue+0x54>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4908      	ldr	r1, [pc, #32]	@ (8007b10 <prvCheckForValidListAndQueue+0x68>)
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fce8 	bl	80064c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007af4:	f000 f974 	bl	8007de0 <vPortExitCritical>
    }
 8007af8:	bf00      	nop
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20001034 	.word	0x20001034
 8007b00:	20001004 	.word	0x20001004
 8007b04:	20001018 	.word	0x20001018
 8007b08:	2000102c 	.word	0x2000102c
 8007b0c:	20001030 	.word	0x20001030
 8007b10:	08009dc8 	.word	0x08009dc8

08007b14 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3b04      	subs	r3, #4
 8007b24:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3b04      	subs	r3, #4
 8007b32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f023 0201 	bic.w	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3b04      	subs	r3, #4
 8007b42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007b44:	4a0c      	ldr	r2, [pc, #48]	@ (8007b78 <pxPortInitialiseStack+0x64>)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3b14      	subs	r3, #20
 8007b4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3b04      	subs	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f06f 0202 	mvn.w	r2, #2
 8007b62:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3b20      	subs	r3, #32
 8007b68:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	08007b7d 	.word	0x08007b7d

08007b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007b86:	4b13      	ldr	r3, [pc, #76]	@ (8007bd4 <prvTaskExitError+0x58>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	d00b      	beq.n	8007ba8 <prvTaskExitError+0x2c>
        __asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	60fb      	str	r3, [r7, #12]
    }
 8007ba2:	bf00      	nop
 8007ba4:	bf00      	nop
 8007ba6:	e7fd      	b.n	8007ba4 <prvTaskExitError+0x28>
        __asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	60bb      	str	r3, [r7, #8]
    }
 8007bba:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007bbc:	bf00      	nop
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0fc      	beq.n	8007bbe <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000010 	.word	0x20000010
	...

08007be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007be0:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <pxCurrentTCBConst2>)
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	6808      	ldr	r0, [r1, #0]
 8007be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	f380 8809 	msr	PSP, r0
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8811 	msr	BASEPRI, r0
 8007bfa:	4770      	bx	lr
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst2>:
 8007c00:	20000f00 	.word	0x20000f00
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007c08:	4808      	ldr	r0, [pc, #32]	@ (8007c2c <prvPortStartFirstTask+0x24>)
 8007c0a:	6800      	ldr	r0, [r0, #0]
 8007c0c:	6800      	ldr	r0, [r0, #0]
 8007c0e:	f380 8808 	msr	MSP, r0
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8814 	msr	CONTROL, r0
 8007c1a:	b662      	cpsie	i
 8007c1c:	b661      	cpsie	f
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	df00      	svc	0
 8007c28:	bf00      	nop
 8007c2a:	0000      	.short	0x0000
 8007c2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop

08007c34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c3a:	4b47      	ldr	r3, [pc, #284]	@ (8007d58 <xPortStartScheduler+0x124>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a47      	ldr	r2, [pc, #284]	@ (8007d5c <xPortStartScheduler+0x128>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d10b      	bne.n	8007c5c <xPortStartScheduler+0x28>
        __asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	613b      	str	r3, [r7, #16]
    }
 8007c56:	bf00      	nop
 8007c58:	bf00      	nop
 8007c5a:	e7fd      	b.n	8007c58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8007d58 <xPortStartScheduler+0x124>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a3f      	ldr	r2, [pc, #252]	@ (8007d60 <xPortStartScheduler+0x12c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d10b      	bne.n	8007c7e <xPortStartScheduler+0x4a>
        __asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	60fb      	str	r3, [r7, #12]
    }
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c7e:	4b39      	ldr	r3, [pc, #228]	@ (8007d64 <xPortStartScheduler+0x130>)
 8007c80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	22ff      	movs	r2, #255	@ 0xff
 8007c8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	4b31      	ldr	r3, [pc, #196]	@ (8007d68 <xPortStartScheduler+0x134>)
 8007ca4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ca6:	4b31      	ldr	r3, [pc, #196]	@ (8007d6c <xPortStartScheduler+0x138>)
 8007ca8:	2207      	movs	r2, #7
 8007caa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cac:	e009      	b.n	8007cc2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8007cae:	4b2f      	ldr	r3, [pc, #188]	@ (8007d6c <xPortStartScheduler+0x138>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8007d6c <xPortStartScheduler+0x138>)
 8007cb6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cca:	2b80      	cmp	r3, #128	@ 0x80
 8007ccc:	d0ef      	beq.n	8007cae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cce:	4b27      	ldr	r3, [pc, #156]	@ (8007d6c <xPortStartScheduler+0x138>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f1c3 0307 	rsb	r3, r3, #7
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d00b      	beq.n	8007cf2 <xPortStartScheduler+0xbe>
        __asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60bb      	str	r3, [r7, #8]
    }
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d6c <xPortStartScheduler+0x138>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d6c <xPortStartScheduler+0x138>)
 8007cfa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8007d6c <xPortStartScheduler+0x138>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d04:	4a19      	ldr	r2, [pc, #100]	@ (8007d6c <xPortStartScheduler+0x138>)
 8007d06:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007d10:	4b17      	ldr	r3, [pc, #92]	@ (8007d70 <xPortStartScheduler+0x13c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a16      	ldr	r2, [pc, #88]	@ (8007d70 <xPortStartScheduler+0x13c>)
 8007d16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007d1c:	4b14      	ldr	r3, [pc, #80]	@ (8007d70 <xPortStartScheduler+0x13c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a13      	ldr	r2, [pc, #76]	@ (8007d70 <xPortStartScheduler+0x13c>)
 8007d22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d26:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007d28:	f000 f8e0 	bl	8007eec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007d2c:	4b11      	ldr	r3, [pc, #68]	@ (8007d74 <xPortStartScheduler+0x140>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007d32:	f000 f8ff 	bl	8007f34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d36:	4b10      	ldr	r3, [pc, #64]	@ (8007d78 <xPortStartScheduler+0x144>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8007d78 <xPortStartScheduler+0x144>)
 8007d3c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d40:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007d42:	f7ff ff61 	bl	8007c08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007d46:	f7fe ff5f 	bl	8006c08 <vTaskSwitchContext>
    prvTaskExitError();
 8007d4a:	f7ff ff17 	bl	8007b7c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed00 	.word	0xe000ed00
 8007d5c:	410fc271 	.word	0x410fc271
 8007d60:	410fc270 	.word	0x410fc270
 8007d64:	e000e400 	.word	0xe000e400
 8007d68:	20001040 	.word	0x20001040
 8007d6c:	20001044 	.word	0x20001044
 8007d70:	e000ed20 	.word	0xe000ed20
 8007d74:	20000010 	.word	0x20000010
 8007d78:	e000ef34 	.word	0xe000ef34

08007d7c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
        __asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	607b      	str	r3, [r7, #4]
    }
 8007d94:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007d96:	4b10      	ldr	r3, [pc, #64]	@ (8007dd8 <vPortEnterCritical+0x5c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd8 <vPortEnterCritical+0x5c>)
 8007d9e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007da0:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <vPortEnterCritical+0x5c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d110      	bne.n	8007dca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007da8:	4b0c      	ldr	r3, [pc, #48]	@ (8007ddc <vPortEnterCritical+0x60>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00b      	beq.n	8007dca <vPortEnterCritical+0x4e>
        __asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	603b      	str	r3, [r7, #0]
    }
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop
 8007dc8:	e7fd      	b.n	8007dc6 <vPortEnterCritical+0x4a>
    }
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	20000010 	.word	0x20000010
 8007ddc:	e000ed04 	.word	0xe000ed04

08007de0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007de6:	4b12      	ldr	r3, [pc, #72]	@ (8007e30 <vPortExitCritical+0x50>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10b      	bne.n	8007e06 <vPortExitCritical+0x26>
        __asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	607b      	str	r3, [r7, #4]
    }
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007e06:	4b0a      	ldr	r3, [pc, #40]	@ (8007e30 <vPortExitCritical+0x50>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	4a08      	ldr	r2, [pc, #32]	@ (8007e30 <vPortExitCritical+0x50>)
 8007e0e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007e10:	4b07      	ldr	r3, [pc, #28]	@ (8007e30 <vPortExitCritical+0x50>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <vPortExitCritical+0x44>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	f383 8811 	msr	BASEPRI, r3
    }
 8007e22:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	20000010 	.word	0x20000010
	...

08007e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007e40:	f3ef 8009 	mrs	r0, PSP
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4b15      	ldr	r3, [pc, #84]	@ (8007ea0 <pxCurrentTCBConst>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f01e 0f10 	tst.w	lr, #16
 8007e50:	bf08      	it	eq
 8007e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	6010      	str	r0, [r2, #0]
 8007e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e64:	f380 8811 	msr	BASEPRI, r0
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f7fe feca 	bl	8006c08 <vTaskSwitchContext>
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f380 8811 	msr	BASEPRI, r0
 8007e7c:	bc09      	pop	{r0, r3}
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e86:	f01e 0f10 	tst.w	lr, #16
 8007e8a:	bf08      	it	eq
 8007e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e90:	f380 8809 	msr	PSP, r0
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst>:
 8007ea0:	20000f00 	.word	0x20000f00
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
        __asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
    }
 8007ec0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007ec2:	f7fe fde7 	bl	8006a94 <xTaskIncrementTick>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ecc:	4b06      	ldr	r3, [pc, #24]	@ (8007ee8 <SysTick_Handler+0x40>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f383 8811 	msr	BASEPRI, r3
    }
 8007ede:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f24 <vPortSetupTimerInterrupt+0x38>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f28 <vPortSetupTimerInterrupt+0x3c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a0a      	ldr	r2, [pc, #40]	@ (8007f2c <vPortSetupTimerInterrupt+0x40>)
 8007f02:	fba2 2303 	umull	r2, r3, r2, r3
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	4a09      	ldr	r2, [pc, #36]	@ (8007f30 <vPortSetupTimerInterrupt+0x44>)
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f0e:	4b04      	ldr	r3, [pc, #16]	@ (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	601a      	str	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	e000e010 	.word	0xe000e010
 8007f24:	e000e018 	.word	0xe000e018
 8007f28:	20000000 	.word	0x20000000
 8007f2c:	10624dd3 	.word	0x10624dd3
 8007f30:	e000e014 	.word	0xe000e014

08007f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007f34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f44 <vPortEnableVFP+0x10>
 8007f38:	6801      	ldr	r1, [r0, #0]
 8007f3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f3e:	6001      	str	r1, [r0, #0]
 8007f40:	4770      	bx	lr
 8007f42:	0000      	.short	0x0000
 8007f44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007f48:	bf00      	nop
 8007f4a:	bf00      	nop

08007f4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007f52:	f3ef 8305 	mrs	r3, IPSR
 8007f56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b0f      	cmp	r3, #15
 8007f5c:	d915      	bls.n	8007f8a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f5e:	4a18      	ldr	r2, [pc, #96]	@ (8007fc0 <vPortValidateInterruptPriority+0x74>)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f68:	4b16      	ldr	r3, [pc, #88]	@ (8007fc4 <vPortValidateInterruptPriority+0x78>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	7afa      	ldrb	r2, [r7, #11]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d20b      	bcs.n	8007f8a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	607b      	str	r3, [r7, #4]
    }
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop
 8007f88:	e7fd      	b.n	8007f86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007fc8 <vPortValidateInterruptPriority+0x7c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f92:	4b0e      	ldr	r3, [pc, #56]	@ (8007fcc <vPortValidateInterruptPriority+0x80>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d90b      	bls.n	8007fb2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	603b      	str	r3, [r7, #0]
    }
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	e7fd      	b.n	8007fae <vPortValidateInterruptPriority+0x62>
    }
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	e000e3f0 	.word	0xe000e3f0
 8007fc4:	20001040 	.word	0x20001040
 8007fc8:	e000ed0c 	.word	0xe000ed0c
 8007fcc:	20001044 	.word	0x20001044

08007fd0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	@ 0x28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007fdc:	f7fe fc9e 	bl	800691c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007fe0:	4b66      	ldr	r3, [pc, #408]	@ (800817c <pvPortMalloc+0x1ac>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007fe8:	f000 f938 	bl	800825c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fec:	4b64      	ldr	r3, [pc, #400]	@ (8008180 <pvPortMalloc+0x1b0>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f040 80a9 	bne.w	800814c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d02e      	beq.n	800805e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008000:	2208      	movs	r2, #8
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	429a      	cmp	r2, r3
 800800a:	d228      	bcs.n	800805e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800800c:	2208      	movs	r2, #8
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4413      	add	r3, r2
 8008012:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b00      	cmp	r3, #0
 800801c:	d022      	beq.n	8008064 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f023 0307 	bic.w	r3, r3, #7
 8008024:	3308      	adds	r3, #8
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	429a      	cmp	r2, r3
 800802a:	d215      	bcs.n	8008058 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f023 0307 	bic.w	r3, r3, #7
 8008032:	3308      	adds	r3, #8
 8008034:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	2b00      	cmp	r3, #0
 800803e:	d011      	beq.n	8008064 <pvPortMalloc+0x94>
        __asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	617b      	str	r3, [r7, #20]
    }
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008058:	2300      	movs	r3, #0
 800805a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800805c:	e002      	b.n	8008064 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	e000      	b.n	8008066 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008064:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d06f      	beq.n	800814c <pvPortMalloc+0x17c>
 800806c:	4b45      	ldr	r3, [pc, #276]	@ (8008184 <pvPortMalloc+0x1b4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	429a      	cmp	r2, r3
 8008074:	d86a      	bhi.n	800814c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008076:	4b44      	ldr	r3, [pc, #272]	@ (8008188 <pvPortMalloc+0x1b8>)
 8008078:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800807a:	4b43      	ldr	r3, [pc, #268]	@ (8008188 <pvPortMalloc+0x1b8>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008080:	e004      	b.n	800808c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d903      	bls.n	800809e <pvPortMalloc+0xce>
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f1      	bne.n	8008082 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800809e:	4b37      	ldr	r3, [pc, #220]	@ (800817c <pvPortMalloc+0x1ac>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d051      	beq.n	800814c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2208      	movs	r2, #8
 80080ae:	4413      	add	r3, r2
 80080b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	1ad2      	subs	r2, r2, r3
 80080c2:	2308      	movs	r3, #8
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d920      	bls.n	800810c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <pvPortMalloc+0x124>
        __asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	613b      	str	r3, [r7, #16]
    }
 80080ee:	bf00      	nop
 80080f0:	bf00      	nop
 80080f2:	e7fd      	b.n	80080f0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	1ad2      	subs	r2, r2, r3
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008106:	69b8      	ldr	r0, [r7, #24]
 8008108:	f000 f90a 	bl	8008320 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800810c:	4b1d      	ldr	r3, [pc, #116]	@ (8008184 <pvPortMalloc+0x1b4>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	4a1b      	ldr	r2, [pc, #108]	@ (8008184 <pvPortMalloc+0x1b4>)
 8008118:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800811a:	4b1a      	ldr	r3, [pc, #104]	@ (8008184 <pvPortMalloc+0x1b4>)
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b1b      	ldr	r3, [pc, #108]	@ (800818c <pvPortMalloc+0x1bc>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d203      	bcs.n	800812e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008126:	4b17      	ldr	r3, [pc, #92]	@ (8008184 <pvPortMalloc+0x1b4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a18      	ldr	r2, [pc, #96]	@ (800818c <pvPortMalloc+0x1bc>)
 800812c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800812e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	4b13      	ldr	r3, [pc, #76]	@ (8008180 <pvPortMalloc+0x1b0>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	431a      	orrs	r2, r3
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008142:	4b13      	ldr	r3, [pc, #76]	@ (8008190 <pvPortMalloc+0x1c0>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3301      	adds	r3, #1
 8008148:	4a11      	ldr	r2, [pc, #68]	@ (8008190 <pvPortMalloc+0x1c0>)
 800814a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800814c:	f7fe fbf4 	bl	8006938 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	f003 0307 	and.w	r3, r3, #7
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <pvPortMalloc+0x1a2>
        __asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	60fb      	str	r3, [r7, #12]
    }
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	e7fd      	b.n	800816e <pvPortMalloc+0x19e>
    return pvReturn;
 8008172:	69fb      	ldr	r3, [r7, #28]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3728      	adds	r7, #40	@ 0x28
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20013c50 	.word	0x20013c50
 8008180:	20013c64 	.word	0x20013c64
 8008184:	20013c54 	.word	0x20013c54
 8008188:	20013c48 	.word	0x20013c48
 800818c:	20013c58 	.word	0x20013c58
 8008190:	20013c5c 	.word	0x20013c5c

08008194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d04f      	beq.n	8008246 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80081a6:	2308      	movs	r3, #8
 80081a8:	425b      	negs	r3, r3
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	4413      	add	r3, r2
 80081ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	4b25      	ldr	r3, [pc, #148]	@ (8008250 <vPortFree+0xbc>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4013      	ands	r3, r2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10b      	bne.n	80081da <vPortFree+0x46>
        __asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60fb      	str	r3, [r7, #12]
    }
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00b      	beq.n	80081fa <vPortFree+0x66>
        __asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	60bb      	str	r3, [r7, #8]
    }
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	e7fd      	b.n	80081f6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	4b14      	ldr	r3, [pc, #80]	@ (8008250 <vPortFree+0xbc>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4013      	ands	r3, r2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01e      	beq.n	8008246 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d11a      	bne.n	8008246 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	4b0e      	ldr	r3, [pc, #56]	@ (8008250 <vPortFree+0xbc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	43db      	mvns	r3, r3
 800821a:	401a      	ands	r2, r3
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008220:	f7fe fb7c 	bl	800691c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	4b0a      	ldr	r3, [pc, #40]	@ (8008254 <vPortFree+0xc0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4413      	add	r3, r2
 800822e:	4a09      	ldr	r2, [pc, #36]	@ (8008254 <vPortFree+0xc0>)
 8008230:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008232:	6938      	ldr	r0, [r7, #16]
 8008234:	f000 f874 	bl	8008320 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008238:	4b07      	ldr	r3, [pc, #28]	@ (8008258 <vPortFree+0xc4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	4a06      	ldr	r2, [pc, #24]	@ (8008258 <vPortFree+0xc4>)
 8008240:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008242:	f7fe fb79 	bl	8006938 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008246:	bf00      	nop
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20013c64 	.word	0x20013c64
 8008254:	20013c54 	.word	0x20013c54
 8008258:	20013c60 	.word	0x20013c60

0800825c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008262:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8008266:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008268:	4b27      	ldr	r3, [pc, #156]	@ (8008308 <prvHeapInit+0xac>)
 800826a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00c      	beq.n	8008290 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3307      	adds	r3, #7
 800827a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0307 	bic.w	r3, r3, #7
 8008282:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	4a1f      	ldr	r2, [pc, #124]	@ (8008308 <prvHeapInit+0xac>)
 800828c:	4413      	add	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008294:	4a1d      	ldr	r2, [pc, #116]	@ (800830c <prvHeapInit+0xb0>)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800829a:	4b1c      	ldr	r3, [pc, #112]	@ (800830c <prvHeapInit+0xb0>)
 800829c:	2200      	movs	r2, #0
 800829e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	4413      	add	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80082a8:	2208      	movs	r2, #8
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	1a9b      	subs	r3, r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0307 	bic.w	r3, r3, #7
 80082b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4a15      	ldr	r2, [pc, #84]	@ (8008310 <prvHeapInit+0xb4>)
 80082bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80082be:	4b14      	ldr	r3, [pc, #80]	@ (8008310 <prvHeapInit+0xb4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2200      	movs	r2, #0
 80082c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80082c6:	4b12      	ldr	r3, [pc, #72]	@ (8008310 <prvHeapInit+0xb4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	1ad2      	subs	r2, r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008310 <prvHeapInit+0xb4>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008314 <prvHeapInit+0xb8>)
 80082ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	4a09      	ldr	r2, [pc, #36]	@ (8008318 <prvHeapInit+0xbc>)
 80082f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082f4:	4b09      	ldr	r3, [pc, #36]	@ (800831c <prvHeapInit+0xc0>)
 80082f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082fa:	601a      	str	r2, [r3, #0]
}
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	20001048 	.word	0x20001048
 800830c:	20013c48 	.word	0x20013c48
 8008310:	20013c50 	.word	0x20013c50
 8008314:	20013c58 	.word	0x20013c58
 8008318:	20013c54 	.word	0x20013c54
 800831c:	20013c64 	.word	0x20013c64

08008320 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008328:	4b28      	ldr	r3, [pc, #160]	@ (80083cc <prvInsertBlockIntoFreeList+0xac>)
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e002      	b.n	8008334 <prvInsertBlockIntoFreeList+0x14>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	429a      	cmp	r2, r3
 800833c:	d8f7      	bhi.n	800832e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4413      	add	r3, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d108      	bne.n	8008362 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	441a      	add	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	441a      	add	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d118      	bne.n	80083a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b15      	ldr	r3, [pc, #84]	@ (80083d0 <prvInsertBlockIntoFreeList+0xb0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d00d      	beq.n	800839e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	441a      	add	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	e008      	b.n	80083b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800839e:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <prvInsertBlockIntoFreeList+0xb0>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	e003      	b.n	80083b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d002      	beq.n	80083be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80083be:	bf00      	nop
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20013c48 	.word	0x20013c48
 80083d0:	20013c50 	.word	0x20013c50

080083d4 <std>:
 80083d4:	2300      	movs	r3, #0
 80083d6:	b510      	push	{r4, lr}
 80083d8:	4604      	mov	r4, r0
 80083da:	e9c0 3300 	strd	r3, r3, [r0]
 80083de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083e2:	6083      	str	r3, [r0, #8]
 80083e4:	8181      	strh	r1, [r0, #12]
 80083e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80083e8:	81c2      	strh	r2, [r0, #14]
 80083ea:	6183      	str	r3, [r0, #24]
 80083ec:	4619      	mov	r1, r3
 80083ee:	2208      	movs	r2, #8
 80083f0:	305c      	adds	r0, #92	@ 0x5c
 80083f2:	f000 fa4d 	bl	8008890 <memset>
 80083f6:	4b0d      	ldr	r3, [pc, #52]	@ (800842c <std+0x58>)
 80083f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80083fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008430 <std+0x5c>)
 80083fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <std+0x60>)
 8008400:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008402:	4b0d      	ldr	r3, [pc, #52]	@ (8008438 <std+0x64>)
 8008404:	6323      	str	r3, [r4, #48]	@ 0x30
 8008406:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <std+0x68>)
 8008408:	6224      	str	r4, [r4, #32]
 800840a:	429c      	cmp	r4, r3
 800840c:	d006      	beq.n	800841c <std+0x48>
 800840e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008412:	4294      	cmp	r4, r2
 8008414:	d002      	beq.n	800841c <std+0x48>
 8008416:	33d0      	adds	r3, #208	@ 0xd0
 8008418:	429c      	cmp	r4, r3
 800841a:	d105      	bne.n	8008428 <std+0x54>
 800841c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008424:	f000 bad0 	b.w	80089c8 <__retarget_lock_init_recursive>
 8008428:	bd10      	pop	{r4, pc}
 800842a:	bf00      	nop
 800842c:	080086e1 	.word	0x080086e1
 8008430:	08008703 	.word	0x08008703
 8008434:	0800873b 	.word	0x0800873b
 8008438:	0800875f 	.word	0x0800875f
 800843c:	20013c68 	.word	0x20013c68

08008440 <stdio_exit_handler>:
 8008440:	4a02      	ldr	r2, [pc, #8]	@ (800844c <stdio_exit_handler+0xc>)
 8008442:	4903      	ldr	r1, [pc, #12]	@ (8008450 <stdio_exit_handler+0x10>)
 8008444:	4803      	ldr	r0, [pc, #12]	@ (8008454 <stdio_exit_handler+0x14>)
 8008446:	f000 b869 	b.w	800851c <_fwalk_sglue>
 800844a:	bf00      	nop
 800844c:	20000014 	.word	0x20000014
 8008450:	08009535 	.word	0x08009535
 8008454:	20000024 	.word	0x20000024

08008458 <cleanup_stdio>:
 8008458:	6841      	ldr	r1, [r0, #4]
 800845a:	4b0c      	ldr	r3, [pc, #48]	@ (800848c <cleanup_stdio+0x34>)
 800845c:	4299      	cmp	r1, r3
 800845e:	b510      	push	{r4, lr}
 8008460:	4604      	mov	r4, r0
 8008462:	d001      	beq.n	8008468 <cleanup_stdio+0x10>
 8008464:	f001 f866 	bl	8009534 <_fflush_r>
 8008468:	68a1      	ldr	r1, [r4, #8]
 800846a:	4b09      	ldr	r3, [pc, #36]	@ (8008490 <cleanup_stdio+0x38>)
 800846c:	4299      	cmp	r1, r3
 800846e:	d002      	beq.n	8008476 <cleanup_stdio+0x1e>
 8008470:	4620      	mov	r0, r4
 8008472:	f001 f85f 	bl	8009534 <_fflush_r>
 8008476:	68e1      	ldr	r1, [r4, #12]
 8008478:	4b06      	ldr	r3, [pc, #24]	@ (8008494 <cleanup_stdio+0x3c>)
 800847a:	4299      	cmp	r1, r3
 800847c:	d004      	beq.n	8008488 <cleanup_stdio+0x30>
 800847e:	4620      	mov	r0, r4
 8008480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008484:	f001 b856 	b.w	8009534 <_fflush_r>
 8008488:	bd10      	pop	{r4, pc}
 800848a:	bf00      	nop
 800848c:	20013c68 	.word	0x20013c68
 8008490:	20013cd0 	.word	0x20013cd0
 8008494:	20013d38 	.word	0x20013d38

08008498 <global_stdio_init.part.0>:
 8008498:	b510      	push	{r4, lr}
 800849a:	4b0b      	ldr	r3, [pc, #44]	@ (80084c8 <global_stdio_init.part.0+0x30>)
 800849c:	4c0b      	ldr	r4, [pc, #44]	@ (80084cc <global_stdio_init.part.0+0x34>)
 800849e:	4a0c      	ldr	r2, [pc, #48]	@ (80084d0 <global_stdio_init.part.0+0x38>)
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	4620      	mov	r0, r4
 80084a4:	2200      	movs	r2, #0
 80084a6:	2104      	movs	r1, #4
 80084a8:	f7ff ff94 	bl	80083d4 <std>
 80084ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084b0:	2201      	movs	r2, #1
 80084b2:	2109      	movs	r1, #9
 80084b4:	f7ff ff8e 	bl	80083d4 <std>
 80084b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084bc:	2202      	movs	r2, #2
 80084be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c2:	2112      	movs	r1, #18
 80084c4:	f7ff bf86 	b.w	80083d4 <std>
 80084c8:	20013da0 	.word	0x20013da0
 80084cc:	20013c68 	.word	0x20013c68
 80084d0:	08008441 	.word	0x08008441

080084d4 <__sfp_lock_acquire>:
 80084d4:	4801      	ldr	r0, [pc, #4]	@ (80084dc <__sfp_lock_acquire+0x8>)
 80084d6:	f000 ba78 	b.w	80089ca <__retarget_lock_acquire_recursive>
 80084da:	bf00      	nop
 80084dc:	20013da9 	.word	0x20013da9

080084e0 <__sfp_lock_release>:
 80084e0:	4801      	ldr	r0, [pc, #4]	@ (80084e8 <__sfp_lock_release+0x8>)
 80084e2:	f000 ba73 	b.w	80089cc <__retarget_lock_release_recursive>
 80084e6:	bf00      	nop
 80084e8:	20013da9 	.word	0x20013da9

080084ec <__sinit>:
 80084ec:	b510      	push	{r4, lr}
 80084ee:	4604      	mov	r4, r0
 80084f0:	f7ff fff0 	bl	80084d4 <__sfp_lock_acquire>
 80084f4:	6a23      	ldr	r3, [r4, #32]
 80084f6:	b11b      	cbz	r3, 8008500 <__sinit+0x14>
 80084f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084fc:	f7ff bff0 	b.w	80084e0 <__sfp_lock_release>
 8008500:	4b04      	ldr	r3, [pc, #16]	@ (8008514 <__sinit+0x28>)
 8008502:	6223      	str	r3, [r4, #32]
 8008504:	4b04      	ldr	r3, [pc, #16]	@ (8008518 <__sinit+0x2c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f5      	bne.n	80084f8 <__sinit+0xc>
 800850c:	f7ff ffc4 	bl	8008498 <global_stdio_init.part.0>
 8008510:	e7f2      	b.n	80084f8 <__sinit+0xc>
 8008512:	bf00      	nop
 8008514:	08008459 	.word	0x08008459
 8008518:	20013da0 	.word	0x20013da0

0800851c <_fwalk_sglue>:
 800851c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008520:	4607      	mov	r7, r0
 8008522:	4688      	mov	r8, r1
 8008524:	4614      	mov	r4, r2
 8008526:	2600      	movs	r6, #0
 8008528:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800852c:	f1b9 0901 	subs.w	r9, r9, #1
 8008530:	d505      	bpl.n	800853e <_fwalk_sglue+0x22>
 8008532:	6824      	ldr	r4, [r4, #0]
 8008534:	2c00      	cmp	r4, #0
 8008536:	d1f7      	bne.n	8008528 <_fwalk_sglue+0xc>
 8008538:	4630      	mov	r0, r6
 800853a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853e:	89ab      	ldrh	r3, [r5, #12]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d907      	bls.n	8008554 <_fwalk_sglue+0x38>
 8008544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008548:	3301      	adds	r3, #1
 800854a:	d003      	beq.n	8008554 <_fwalk_sglue+0x38>
 800854c:	4629      	mov	r1, r5
 800854e:	4638      	mov	r0, r7
 8008550:	47c0      	blx	r8
 8008552:	4306      	orrs	r6, r0
 8008554:	3568      	adds	r5, #104	@ 0x68
 8008556:	e7e9      	b.n	800852c <_fwalk_sglue+0x10>

08008558 <iprintf>:
 8008558:	b40f      	push	{r0, r1, r2, r3}
 800855a:	b507      	push	{r0, r1, r2, lr}
 800855c:	4906      	ldr	r1, [pc, #24]	@ (8008578 <iprintf+0x20>)
 800855e:	ab04      	add	r3, sp, #16
 8008560:	6808      	ldr	r0, [r1, #0]
 8008562:	f853 2b04 	ldr.w	r2, [r3], #4
 8008566:	6881      	ldr	r1, [r0, #8]
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	f000 fcb9 	bl	8008ee0 <_vfiprintf_r>
 800856e:	b003      	add	sp, #12
 8008570:	f85d eb04 	ldr.w	lr, [sp], #4
 8008574:	b004      	add	sp, #16
 8008576:	4770      	bx	lr
 8008578:	20000020 	.word	0x20000020

0800857c <_puts_r>:
 800857c:	6a03      	ldr	r3, [r0, #32]
 800857e:	b570      	push	{r4, r5, r6, lr}
 8008580:	6884      	ldr	r4, [r0, #8]
 8008582:	4605      	mov	r5, r0
 8008584:	460e      	mov	r6, r1
 8008586:	b90b      	cbnz	r3, 800858c <_puts_r+0x10>
 8008588:	f7ff ffb0 	bl	80084ec <__sinit>
 800858c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800858e:	07db      	lsls	r3, r3, #31
 8008590:	d405      	bmi.n	800859e <_puts_r+0x22>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	0598      	lsls	r0, r3, #22
 8008596:	d402      	bmi.n	800859e <_puts_r+0x22>
 8008598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800859a:	f000 fa16 	bl	80089ca <__retarget_lock_acquire_recursive>
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	0719      	lsls	r1, r3, #28
 80085a2:	d502      	bpl.n	80085aa <_puts_r+0x2e>
 80085a4:	6923      	ldr	r3, [r4, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d135      	bne.n	8008616 <_puts_r+0x9a>
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 f919 	bl	80087e4 <__swsetup_r>
 80085b2:	b380      	cbz	r0, 8008616 <_puts_r+0x9a>
 80085b4:	f04f 35ff 	mov.w	r5, #4294967295
 80085b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085ba:	07da      	lsls	r2, r3, #31
 80085bc:	d405      	bmi.n	80085ca <_puts_r+0x4e>
 80085be:	89a3      	ldrh	r3, [r4, #12]
 80085c0:	059b      	lsls	r3, r3, #22
 80085c2:	d402      	bmi.n	80085ca <_puts_r+0x4e>
 80085c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085c6:	f000 fa01 	bl	80089cc <__retarget_lock_release_recursive>
 80085ca:	4628      	mov	r0, r5
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	da04      	bge.n	80085dc <_puts_r+0x60>
 80085d2:	69a2      	ldr	r2, [r4, #24]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	dc17      	bgt.n	8008608 <_puts_r+0x8c>
 80085d8:	290a      	cmp	r1, #10
 80085da:	d015      	beq.n	8008608 <_puts_r+0x8c>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	6022      	str	r2, [r4, #0]
 80085e2:	7019      	strb	r1, [r3, #0]
 80085e4:	68a3      	ldr	r3, [r4, #8]
 80085e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085ea:	3b01      	subs	r3, #1
 80085ec:	60a3      	str	r3, [r4, #8]
 80085ee:	2900      	cmp	r1, #0
 80085f0:	d1ed      	bne.n	80085ce <_puts_r+0x52>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da11      	bge.n	800861a <_puts_r+0x9e>
 80085f6:	4622      	mov	r2, r4
 80085f8:	210a      	movs	r1, #10
 80085fa:	4628      	mov	r0, r5
 80085fc:	f000 f8b3 	bl	8008766 <__swbuf_r>
 8008600:	3001      	adds	r0, #1
 8008602:	d0d7      	beq.n	80085b4 <_puts_r+0x38>
 8008604:	250a      	movs	r5, #10
 8008606:	e7d7      	b.n	80085b8 <_puts_r+0x3c>
 8008608:	4622      	mov	r2, r4
 800860a:	4628      	mov	r0, r5
 800860c:	f000 f8ab 	bl	8008766 <__swbuf_r>
 8008610:	3001      	adds	r0, #1
 8008612:	d1e7      	bne.n	80085e4 <_puts_r+0x68>
 8008614:	e7ce      	b.n	80085b4 <_puts_r+0x38>
 8008616:	3e01      	subs	r6, #1
 8008618:	e7e4      	b.n	80085e4 <_puts_r+0x68>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	6022      	str	r2, [r4, #0]
 8008620:	220a      	movs	r2, #10
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e7ee      	b.n	8008604 <_puts_r+0x88>
	...

08008628 <puts>:
 8008628:	4b02      	ldr	r3, [pc, #8]	@ (8008634 <puts+0xc>)
 800862a:	4601      	mov	r1, r0
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	f7ff bfa5 	b.w	800857c <_puts_r>
 8008632:	bf00      	nop
 8008634:	20000020 	.word	0x20000020

08008638 <sniprintf>:
 8008638:	b40c      	push	{r2, r3}
 800863a:	b530      	push	{r4, r5, lr}
 800863c:	4b17      	ldr	r3, [pc, #92]	@ (800869c <sniprintf+0x64>)
 800863e:	1e0c      	subs	r4, r1, #0
 8008640:	681d      	ldr	r5, [r3, #0]
 8008642:	b09d      	sub	sp, #116	@ 0x74
 8008644:	da08      	bge.n	8008658 <sniprintf+0x20>
 8008646:	238b      	movs	r3, #139	@ 0x8b
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	f04f 30ff 	mov.w	r0, #4294967295
 800864e:	b01d      	add	sp, #116	@ 0x74
 8008650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008654:	b002      	add	sp, #8
 8008656:	4770      	bx	lr
 8008658:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800865c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008660:	bf14      	ite	ne
 8008662:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008666:	4623      	moveq	r3, r4
 8008668:	9304      	str	r3, [sp, #16]
 800866a:	9307      	str	r3, [sp, #28]
 800866c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008670:	9002      	str	r0, [sp, #8]
 8008672:	9006      	str	r0, [sp, #24]
 8008674:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008678:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800867a:	ab21      	add	r3, sp, #132	@ 0x84
 800867c:	a902      	add	r1, sp, #8
 800867e:	4628      	mov	r0, r5
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	f000 fb07 	bl	8008c94 <_svfiprintf_r>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	bfbc      	itt	lt
 800868a:	238b      	movlt	r3, #139	@ 0x8b
 800868c:	602b      	strlt	r3, [r5, #0]
 800868e:	2c00      	cmp	r4, #0
 8008690:	d0dd      	beq.n	800864e <sniprintf+0x16>
 8008692:	9b02      	ldr	r3, [sp, #8]
 8008694:	2200      	movs	r2, #0
 8008696:	701a      	strb	r2, [r3, #0]
 8008698:	e7d9      	b.n	800864e <sniprintf+0x16>
 800869a:	bf00      	nop
 800869c:	20000020 	.word	0x20000020

080086a0 <siprintf>:
 80086a0:	b40e      	push	{r1, r2, r3}
 80086a2:	b500      	push	{lr}
 80086a4:	b09c      	sub	sp, #112	@ 0x70
 80086a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80086a8:	9002      	str	r0, [sp, #8]
 80086aa:	9006      	str	r0, [sp, #24]
 80086ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80086b0:	4809      	ldr	r0, [pc, #36]	@ (80086d8 <siprintf+0x38>)
 80086b2:	9107      	str	r1, [sp, #28]
 80086b4:	9104      	str	r1, [sp, #16]
 80086b6:	4909      	ldr	r1, [pc, #36]	@ (80086dc <siprintf+0x3c>)
 80086b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086bc:	9105      	str	r1, [sp, #20]
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	a902      	add	r1, sp, #8
 80086c4:	f000 fae6 	bl	8008c94 <_svfiprintf_r>
 80086c8:	9b02      	ldr	r3, [sp, #8]
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	b01c      	add	sp, #112	@ 0x70
 80086d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d4:	b003      	add	sp, #12
 80086d6:	4770      	bx	lr
 80086d8:	20000020 	.word	0x20000020
 80086dc:	ffff0208 	.word	0xffff0208

080086e0 <__sread>:
 80086e0:	b510      	push	{r4, lr}
 80086e2:	460c      	mov	r4, r1
 80086e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e8:	f000 f926 	bl	8008938 <_read_r>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	bfab      	itete	ge
 80086f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086f2:	89a3      	ldrhlt	r3, [r4, #12]
 80086f4:	181b      	addge	r3, r3, r0
 80086f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086fa:	bfac      	ite	ge
 80086fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086fe:	81a3      	strhlt	r3, [r4, #12]
 8008700:	bd10      	pop	{r4, pc}

08008702 <__swrite>:
 8008702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008706:	461f      	mov	r7, r3
 8008708:	898b      	ldrh	r3, [r1, #12]
 800870a:	05db      	lsls	r3, r3, #23
 800870c:	4605      	mov	r5, r0
 800870e:	460c      	mov	r4, r1
 8008710:	4616      	mov	r6, r2
 8008712:	d505      	bpl.n	8008720 <__swrite+0x1e>
 8008714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008718:	2302      	movs	r3, #2
 800871a:	2200      	movs	r2, #0
 800871c:	f000 f8fa 	bl	8008914 <_lseek_r>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	4632      	mov	r2, r6
 800872e:	463b      	mov	r3, r7
 8008730:	4628      	mov	r0, r5
 8008732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008736:	f000 b911 	b.w	800895c <_write_r>

0800873a <__sseek>:
 800873a:	b510      	push	{r4, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008742:	f000 f8e7 	bl	8008914 <_lseek_r>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	bf15      	itete	ne
 800874c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800874e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008752:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008756:	81a3      	strheq	r3, [r4, #12]
 8008758:	bf18      	it	ne
 800875a:	81a3      	strhne	r3, [r4, #12]
 800875c:	bd10      	pop	{r4, pc}

0800875e <__sclose>:
 800875e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008762:	f000 b8c7 	b.w	80088f4 <_close_r>

08008766 <__swbuf_r>:
 8008766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008768:	460e      	mov	r6, r1
 800876a:	4614      	mov	r4, r2
 800876c:	4605      	mov	r5, r0
 800876e:	b118      	cbz	r0, 8008778 <__swbuf_r+0x12>
 8008770:	6a03      	ldr	r3, [r0, #32]
 8008772:	b90b      	cbnz	r3, 8008778 <__swbuf_r+0x12>
 8008774:	f7ff feba 	bl	80084ec <__sinit>
 8008778:	69a3      	ldr	r3, [r4, #24]
 800877a:	60a3      	str	r3, [r4, #8]
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	071a      	lsls	r2, r3, #28
 8008780:	d501      	bpl.n	8008786 <__swbuf_r+0x20>
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	b943      	cbnz	r3, 8008798 <__swbuf_r+0x32>
 8008786:	4621      	mov	r1, r4
 8008788:	4628      	mov	r0, r5
 800878a:	f000 f82b 	bl	80087e4 <__swsetup_r>
 800878e:	b118      	cbz	r0, 8008798 <__swbuf_r+0x32>
 8008790:	f04f 37ff 	mov.w	r7, #4294967295
 8008794:	4638      	mov	r0, r7
 8008796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	6922      	ldr	r2, [r4, #16]
 800879c:	1a98      	subs	r0, r3, r2
 800879e:	6963      	ldr	r3, [r4, #20]
 80087a0:	b2f6      	uxtb	r6, r6
 80087a2:	4283      	cmp	r3, r0
 80087a4:	4637      	mov	r7, r6
 80087a6:	dc05      	bgt.n	80087b4 <__swbuf_r+0x4e>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 fec2 	bl	8009534 <_fflush_r>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d1ed      	bne.n	8008790 <__swbuf_r+0x2a>
 80087b4:	68a3      	ldr	r3, [r4, #8]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	60a3      	str	r3, [r4, #8]
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	1c5a      	adds	r2, r3, #1
 80087be:	6022      	str	r2, [r4, #0]
 80087c0:	701e      	strb	r6, [r3, #0]
 80087c2:	6962      	ldr	r2, [r4, #20]
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d004      	beq.n	80087d4 <__swbuf_r+0x6e>
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	07db      	lsls	r3, r3, #31
 80087ce:	d5e1      	bpl.n	8008794 <__swbuf_r+0x2e>
 80087d0:	2e0a      	cmp	r6, #10
 80087d2:	d1df      	bne.n	8008794 <__swbuf_r+0x2e>
 80087d4:	4621      	mov	r1, r4
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 feac 	bl	8009534 <_fflush_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d0d9      	beq.n	8008794 <__swbuf_r+0x2e>
 80087e0:	e7d6      	b.n	8008790 <__swbuf_r+0x2a>
	...

080087e4 <__swsetup_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4b29      	ldr	r3, [pc, #164]	@ (800888c <__swsetup_r+0xa8>)
 80087e8:	4605      	mov	r5, r0
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	460c      	mov	r4, r1
 80087ee:	b118      	cbz	r0, 80087f8 <__swsetup_r+0x14>
 80087f0:	6a03      	ldr	r3, [r0, #32]
 80087f2:	b90b      	cbnz	r3, 80087f8 <__swsetup_r+0x14>
 80087f4:	f7ff fe7a 	bl	80084ec <__sinit>
 80087f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fc:	0719      	lsls	r1, r3, #28
 80087fe:	d422      	bmi.n	8008846 <__swsetup_r+0x62>
 8008800:	06da      	lsls	r2, r3, #27
 8008802:	d407      	bmi.n	8008814 <__swsetup_r+0x30>
 8008804:	2209      	movs	r2, #9
 8008806:	602a      	str	r2, [r5, #0]
 8008808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800880c:	81a3      	strh	r3, [r4, #12]
 800880e:	f04f 30ff 	mov.w	r0, #4294967295
 8008812:	e033      	b.n	800887c <__swsetup_r+0x98>
 8008814:	0758      	lsls	r0, r3, #29
 8008816:	d512      	bpl.n	800883e <__swsetup_r+0x5a>
 8008818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800881a:	b141      	cbz	r1, 800882e <__swsetup_r+0x4a>
 800881c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008820:	4299      	cmp	r1, r3
 8008822:	d002      	beq.n	800882a <__swsetup_r+0x46>
 8008824:	4628      	mov	r0, r5
 8008826:	f000 f8e1 	bl	80089ec <_free_r>
 800882a:	2300      	movs	r3, #0
 800882c:	6363      	str	r3, [r4, #52]	@ 0x34
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	2300      	movs	r3, #0
 8008838:	6063      	str	r3, [r4, #4]
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	f043 0308 	orr.w	r3, r3, #8
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	b94b      	cbnz	r3, 800885e <__swsetup_r+0x7a>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008854:	d003      	beq.n	800885e <__swsetup_r+0x7a>
 8008856:	4621      	mov	r1, r4
 8008858:	4628      	mov	r0, r5
 800885a:	f000 feb9 	bl	80095d0 <__smakebuf_r>
 800885e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008862:	f013 0201 	ands.w	r2, r3, #1
 8008866:	d00a      	beq.n	800887e <__swsetup_r+0x9a>
 8008868:	2200      	movs	r2, #0
 800886a:	60a2      	str	r2, [r4, #8]
 800886c:	6962      	ldr	r2, [r4, #20]
 800886e:	4252      	negs	r2, r2
 8008870:	61a2      	str	r2, [r4, #24]
 8008872:	6922      	ldr	r2, [r4, #16]
 8008874:	b942      	cbnz	r2, 8008888 <__swsetup_r+0xa4>
 8008876:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800887a:	d1c5      	bne.n	8008808 <__swsetup_r+0x24>
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	0799      	lsls	r1, r3, #30
 8008880:	bf58      	it	pl
 8008882:	6962      	ldrpl	r2, [r4, #20]
 8008884:	60a2      	str	r2, [r4, #8]
 8008886:	e7f4      	b.n	8008872 <__swsetup_r+0x8e>
 8008888:	2000      	movs	r0, #0
 800888a:	e7f7      	b.n	800887c <__swsetup_r+0x98>
 800888c:	20000020 	.word	0x20000020

08008890 <memset>:
 8008890:	4402      	add	r2, r0
 8008892:	4603      	mov	r3, r0
 8008894:	4293      	cmp	r3, r2
 8008896:	d100      	bne.n	800889a <memset+0xa>
 8008898:	4770      	bx	lr
 800889a:	f803 1b01 	strb.w	r1, [r3], #1
 800889e:	e7f9      	b.n	8008894 <memset+0x4>

080088a0 <strncpy>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	3901      	subs	r1, #1
 80088a4:	4603      	mov	r3, r0
 80088a6:	b132      	cbz	r2, 80088b6 <strncpy+0x16>
 80088a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80088ac:	f803 4b01 	strb.w	r4, [r3], #1
 80088b0:	3a01      	subs	r2, #1
 80088b2:	2c00      	cmp	r4, #0
 80088b4:	d1f7      	bne.n	80088a6 <strncpy+0x6>
 80088b6:	441a      	add	r2, r3
 80088b8:	2100      	movs	r1, #0
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d100      	bne.n	80088c0 <strncpy+0x20>
 80088be:	bd10      	pop	{r4, pc}
 80088c0:	f803 1b01 	strb.w	r1, [r3], #1
 80088c4:	e7f9      	b.n	80088ba <strncpy+0x1a>

080088c6 <strstr>:
 80088c6:	780a      	ldrb	r2, [r1, #0]
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	b96a      	cbnz	r2, 80088e8 <strstr+0x22>
 80088cc:	bd70      	pop	{r4, r5, r6, pc}
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d109      	bne.n	80088e6 <strstr+0x20>
 80088d2:	460c      	mov	r4, r1
 80088d4:	4605      	mov	r5, r0
 80088d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f6      	beq.n	80088cc <strstr+0x6>
 80088de:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80088e2:	429e      	cmp	r6, r3
 80088e4:	d0f7      	beq.n	80088d6 <strstr+0x10>
 80088e6:	3001      	adds	r0, #1
 80088e8:	7803      	ldrb	r3, [r0, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1ef      	bne.n	80088ce <strstr+0x8>
 80088ee:	4618      	mov	r0, r3
 80088f0:	e7ec      	b.n	80088cc <strstr+0x6>
	...

080088f4 <_close_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d06      	ldr	r5, [pc, #24]	@ (8008910 <_close_r+0x1c>)
 80088f8:	2300      	movs	r3, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	602b      	str	r3, [r5, #0]
 8008900:	f7f9 fce1 	bl	80022c6 <_close>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_close_r+0x1a>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_close_r+0x1a>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	20013da4 	.word	0x20013da4

08008914 <_lseek_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d07      	ldr	r5, [pc, #28]	@ (8008934 <_lseek_r+0x20>)
 8008918:	4604      	mov	r4, r0
 800891a:	4608      	mov	r0, r1
 800891c:	4611      	mov	r1, r2
 800891e:	2200      	movs	r2, #0
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	f7f9 fcf6 	bl	8002314 <_lseek>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_lseek_r+0x1e>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_lseek_r+0x1e>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20013da4 	.word	0x20013da4

08008938 <_read_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	@ (8008958 <_read_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f9 fc84 	bl	8002254 <_read>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_read_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_read_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20013da4 	.word	0x20013da4

0800895c <_write_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	@ (800897c <_write_r+0x20>)
 8008960:	4604      	mov	r4, r0
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	2200      	movs	r2, #0
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	f7f9 fc8f 	bl	800228e <_write>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_write_r+0x1e>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_write_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	20013da4 	.word	0x20013da4

08008980 <__libc_init_array>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	4d0d      	ldr	r5, [pc, #52]	@ (80089b8 <__libc_init_array+0x38>)
 8008984:	4c0d      	ldr	r4, [pc, #52]	@ (80089bc <__libc_init_array+0x3c>)
 8008986:	1b64      	subs	r4, r4, r5
 8008988:	10a4      	asrs	r4, r4, #2
 800898a:	2600      	movs	r6, #0
 800898c:	42a6      	cmp	r6, r4
 800898e:	d109      	bne.n	80089a4 <__libc_init_array+0x24>
 8008990:	4d0b      	ldr	r5, [pc, #44]	@ (80089c0 <__libc_init_array+0x40>)
 8008992:	4c0c      	ldr	r4, [pc, #48]	@ (80089c4 <__libc_init_array+0x44>)
 8008994:	f000 fee8 	bl	8009768 <_init>
 8008998:	1b64      	subs	r4, r4, r5
 800899a:	10a4      	asrs	r4, r4, #2
 800899c:	2600      	movs	r6, #0
 800899e:	42a6      	cmp	r6, r4
 80089a0:	d105      	bne.n	80089ae <__libc_init_array+0x2e>
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a8:	4798      	blx	r3
 80089aa:	3601      	adds	r6, #1
 80089ac:	e7ee      	b.n	800898c <__libc_init_array+0xc>
 80089ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b2:	4798      	blx	r3
 80089b4:	3601      	adds	r6, #1
 80089b6:	e7f2      	b.n	800899e <__libc_init_array+0x1e>
 80089b8:	08009e2c 	.word	0x08009e2c
 80089bc:	08009e2c 	.word	0x08009e2c
 80089c0:	08009e2c 	.word	0x08009e2c
 80089c4:	08009e30 	.word	0x08009e30

080089c8 <__retarget_lock_init_recursive>:
 80089c8:	4770      	bx	lr

080089ca <__retarget_lock_acquire_recursive>:
 80089ca:	4770      	bx	lr

080089cc <__retarget_lock_release_recursive>:
 80089cc:	4770      	bx	lr

080089ce <memcpy>:
 80089ce:	440a      	add	r2, r1
 80089d0:	4291      	cmp	r1, r2
 80089d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d6:	d100      	bne.n	80089da <memcpy+0xc>
 80089d8:	4770      	bx	lr
 80089da:	b510      	push	{r4, lr}
 80089dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e4:	4291      	cmp	r1, r2
 80089e6:	d1f9      	bne.n	80089dc <memcpy+0xe>
 80089e8:	bd10      	pop	{r4, pc}
	...

080089ec <_free_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4605      	mov	r5, r0
 80089f0:	2900      	cmp	r1, #0
 80089f2:	d041      	beq.n	8008a78 <_free_r+0x8c>
 80089f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089f8:	1f0c      	subs	r4, r1, #4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	bfb8      	it	lt
 80089fe:	18e4      	addlt	r4, r4, r3
 8008a00:	f000 f8e0 	bl	8008bc4 <__malloc_lock>
 8008a04:	4a1d      	ldr	r2, [pc, #116]	@ (8008a7c <_free_r+0x90>)
 8008a06:	6813      	ldr	r3, [r2, #0]
 8008a08:	b933      	cbnz	r3, 8008a18 <_free_r+0x2c>
 8008a0a:	6063      	str	r3, [r4, #4]
 8008a0c:	6014      	str	r4, [r2, #0]
 8008a0e:	4628      	mov	r0, r5
 8008a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a14:	f000 b8dc 	b.w	8008bd0 <__malloc_unlock>
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	d908      	bls.n	8008a2e <_free_r+0x42>
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	1821      	adds	r1, r4, r0
 8008a20:	428b      	cmp	r3, r1
 8008a22:	bf01      	itttt	eq
 8008a24:	6819      	ldreq	r1, [r3, #0]
 8008a26:	685b      	ldreq	r3, [r3, #4]
 8008a28:	1809      	addeq	r1, r1, r0
 8008a2a:	6021      	streq	r1, [r4, #0]
 8008a2c:	e7ed      	b.n	8008a0a <_free_r+0x1e>
 8008a2e:	461a      	mov	r2, r3
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	b10b      	cbz	r3, 8008a38 <_free_r+0x4c>
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	d9fa      	bls.n	8008a2e <_free_r+0x42>
 8008a38:	6811      	ldr	r1, [r2, #0]
 8008a3a:	1850      	adds	r0, r2, r1
 8008a3c:	42a0      	cmp	r0, r4
 8008a3e:	d10b      	bne.n	8008a58 <_free_r+0x6c>
 8008a40:	6820      	ldr	r0, [r4, #0]
 8008a42:	4401      	add	r1, r0
 8008a44:	1850      	adds	r0, r2, r1
 8008a46:	4283      	cmp	r3, r0
 8008a48:	6011      	str	r1, [r2, #0]
 8008a4a:	d1e0      	bne.n	8008a0e <_free_r+0x22>
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	6053      	str	r3, [r2, #4]
 8008a52:	4408      	add	r0, r1
 8008a54:	6010      	str	r0, [r2, #0]
 8008a56:	e7da      	b.n	8008a0e <_free_r+0x22>
 8008a58:	d902      	bls.n	8008a60 <_free_r+0x74>
 8008a5a:	230c      	movs	r3, #12
 8008a5c:	602b      	str	r3, [r5, #0]
 8008a5e:	e7d6      	b.n	8008a0e <_free_r+0x22>
 8008a60:	6820      	ldr	r0, [r4, #0]
 8008a62:	1821      	adds	r1, r4, r0
 8008a64:	428b      	cmp	r3, r1
 8008a66:	bf04      	itt	eq
 8008a68:	6819      	ldreq	r1, [r3, #0]
 8008a6a:	685b      	ldreq	r3, [r3, #4]
 8008a6c:	6063      	str	r3, [r4, #4]
 8008a6e:	bf04      	itt	eq
 8008a70:	1809      	addeq	r1, r1, r0
 8008a72:	6021      	streq	r1, [r4, #0]
 8008a74:	6054      	str	r4, [r2, #4]
 8008a76:	e7ca      	b.n	8008a0e <_free_r+0x22>
 8008a78:	bd38      	pop	{r3, r4, r5, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20013db0 	.word	0x20013db0

08008a80 <sbrk_aligned>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	4e0f      	ldr	r6, [pc, #60]	@ (8008ac0 <sbrk_aligned+0x40>)
 8008a84:	460c      	mov	r4, r1
 8008a86:	6831      	ldr	r1, [r6, #0]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	b911      	cbnz	r1, 8008a92 <sbrk_aligned+0x12>
 8008a8c:	f000 fe18 	bl	80096c0 <_sbrk_r>
 8008a90:	6030      	str	r0, [r6, #0]
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 fe13 	bl	80096c0 <_sbrk_r>
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	d103      	bne.n	8008aa6 <sbrk_aligned+0x26>
 8008a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	bd70      	pop	{r4, r5, r6, pc}
 8008aa6:	1cc4      	adds	r4, r0, #3
 8008aa8:	f024 0403 	bic.w	r4, r4, #3
 8008aac:	42a0      	cmp	r0, r4
 8008aae:	d0f8      	beq.n	8008aa2 <sbrk_aligned+0x22>
 8008ab0:	1a21      	subs	r1, r4, r0
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f000 fe04 	bl	80096c0 <_sbrk_r>
 8008ab8:	3001      	adds	r0, #1
 8008aba:	d1f2      	bne.n	8008aa2 <sbrk_aligned+0x22>
 8008abc:	e7ef      	b.n	8008a9e <sbrk_aligned+0x1e>
 8008abe:	bf00      	nop
 8008ac0:	20013dac 	.word	0x20013dac

08008ac4 <_malloc_r>:
 8008ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	1ccd      	adds	r5, r1, #3
 8008aca:	f025 0503 	bic.w	r5, r5, #3
 8008ace:	3508      	adds	r5, #8
 8008ad0:	2d0c      	cmp	r5, #12
 8008ad2:	bf38      	it	cc
 8008ad4:	250c      	movcc	r5, #12
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	4606      	mov	r6, r0
 8008ada:	db01      	blt.n	8008ae0 <_malloc_r+0x1c>
 8008adc:	42a9      	cmp	r1, r5
 8008ade:	d904      	bls.n	8008aea <_malloc_r+0x26>
 8008ae0:	230c      	movs	r3, #12
 8008ae2:	6033      	str	r3, [r6, #0]
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bc0 <_malloc_r+0xfc>
 8008aee:	f000 f869 	bl	8008bc4 <__malloc_lock>
 8008af2:	f8d8 3000 	ldr.w	r3, [r8]
 8008af6:	461c      	mov	r4, r3
 8008af8:	bb44      	cbnz	r4, 8008b4c <_malloc_r+0x88>
 8008afa:	4629      	mov	r1, r5
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff ffbf 	bl	8008a80 <sbrk_aligned>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	4604      	mov	r4, r0
 8008b06:	d158      	bne.n	8008bba <_malloc_r+0xf6>
 8008b08:	f8d8 4000 	ldr.w	r4, [r8]
 8008b0c:	4627      	mov	r7, r4
 8008b0e:	2f00      	cmp	r7, #0
 8008b10:	d143      	bne.n	8008b9a <_malloc_r+0xd6>
 8008b12:	2c00      	cmp	r4, #0
 8008b14:	d04b      	beq.n	8008bae <_malloc_r+0xea>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	4639      	mov	r1, r7
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	eb04 0903 	add.w	r9, r4, r3
 8008b20:	f000 fdce 	bl	80096c0 <_sbrk_r>
 8008b24:	4581      	cmp	r9, r0
 8008b26:	d142      	bne.n	8008bae <_malloc_r+0xea>
 8008b28:	6821      	ldr	r1, [r4, #0]
 8008b2a:	1a6d      	subs	r5, r5, r1
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f7ff ffa6 	bl	8008a80 <sbrk_aligned>
 8008b34:	3001      	adds	r0, #1
 8008b36:	d03a      	beq.n	8008bae <_malloc_r+0xea>
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	442b      	add	r3, r5
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	bb62      	cbnz	r2, 8008ba0 <_malloc_r+0xdc>
 8008b46:	f8c8 7000 	str.w	r7, [r8]
 8008b4a:	e00f      	b.n	8008b6c <_malloc_r+0xa8>
 8008b4c:	6822      	ldr	r2, [r4, #0]
 8008b4e:	1b52      	subs	r2, r2, r5
 8008b50:	d420      	bmi.n	8008b94 <_malloc_r+0xd0>
 8008b52:	2a0b      	cmp	r2, #11
 8008b54:	d917      	bls.n	8008b86 <_malloc_r+0xc2>
 8008b56:	1961      	adds	r1, r4, r5
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	6025      	str	r5, [r4, #0]
 8008b5c:	bf18      	it	ne
 8008b5e:	6059      	strne	r1, [r3, #4]
 8008b60:	6863      	ldr	r3, [r4, #4]
 8008b62:	bf08      	it	eq
 8008b64:	f8c8 1000 	streq.w	r1, [r8]
 8008b68:	5162      	str	r2, [r4, r5]
 8008b6a:	604b      	str	r3, [r1, #4]
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f000 f82f 	bl	8008bd0 <__malloc_unlock>
 8008b72:	f104 000b 	add.w	r0, r4, #11
 8008b76:	1d23      	adds	r3, r4, #4
 8008b78:	f020 0007 	bic.w	r0, r0, #7
 8008b7c:	1ac2      	subs	r2, r0, r3
 8008b7e:	bf1c      	itt	ne
 8008b80:	1a1b      	subne	r3, r3, r0
 8008b82:	50a3      	strne	r3, [r4, r2]
 8008b84:	e7af      	b.n	8008ae6 <_malloc_r+0x22>
 8008b86:	6862      	ldr	r2, [r4, #4]
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	bf0c      	ite	eq
 8008b8c:	f8c8 2000 	streq.w	r2, [r8]
 8008b90:	605a      	strne	r2, [r3, #4]
 8008b92:	e7eb      	b.n	8008b6c <_malloc_r+0xa8>
 8008b94:	4623      	mov	r3, r4
 8008b96:	6864      	ldr	r4, [r4, #4]
 8008b98:	e7ae      	b.n	8008af8 <_malloc_r+0x34>
 8008b9a:	463c      	mov	r4, r7
 8008b9c:	687f      	ldr	r7, [r7, #4]
 8008b9e:	e7b6      	b.n	8008b0e <_malloc_r+0x4a>
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	d1fb      	bne.n	8008ba0 <_malloc_r+0xdc>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6053      	str	r3, [r2, #4]
 8008bac:	e7de      	b.n	8008b6c <_malloc_r+0xa8>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	6033      	str	r3, [r6, #0]
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f000 f80c 	bl	8008bd0 <__malloc_unlock>
 8008bb8:	e794      	b.n	8008ae4 <_malloc_r+0x20>
 8008bba:	6005      	str	r5, [r0, #0]
 8008bbc:	e7d6      	b.n	8008b6c <_malloc_r+0xa8>
 8008bbe:	bf00      	nop
 8008bc0:	20013db0 	.word	0x20013db0

08008bc4 <__malloc_lock>:
 8008bc4:	4801      	ldr	r0, [pc, #4]	@ (8008bcc <__malloc_lock+0x8>)
 8008bc6:	f7ff bf00 	b.w	80089ca <__retarget_lock_acquire_recursive>
 8008bca:	bf00      	nop
 8008bcc:	20013da8 	.word	0x20013da8

08008bd0 <__malloc_unlock>:
 8008bd0:	4801      	ldr	r0, [pc, #4]	@ (8008bd8 <__malloc_unlock+0x8>)
 8008bd2:	f7ff befb 	b.w	80089cc <__retarget_lock_release_recursive>
 8008bd6:	bf00      	nop
 8008bd8:	20013da8 	.word	0x20013da8

08008bdc <__ssputs_r>:
 8008bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be0:	688e      	ldr	r6, [r1, #8]
 8008be2:	461f      	mov	r7, r3
 8008be4:	42be      	cmp	r6, r7
 8008be6:	680b      	ldr	r3, [r1, #0]
 8008be8:	4682      	mov	sl, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	4690      	mov	r8, r2
 8008bee:	d82d      	bhi.n	8008c4c <__ssputs_r+0x70>
 8008bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008bf8:	d026      	beq.n	8008c48 <__ssputs_r+0x6c>
 8008bfa:	6965      	ldr	r5, [r4, #20]
 8008bfc:	6909      	ldr	r1, [r1, #16]
 8008bfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c02:	eba3 0901 	sub.w	r9, r3, r1
 8008c06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c0a:	1c7b      	adds	r3, r7, #1
 8008c0c:	444b      	add	r3, r9
 8008c0e:	106d      	asrs	r5, r5, #1
 8008c10:	429d      	cmp	r5, r3
 8008c12:	bf38      	it	cc
 8008c14:	461d      	movcc	r5, r3
 8008c16:	0553      	lsls	r3, r2, #21
 8008c18:	d527      	bpl.n	8008c6a <__ssputs_r+0x8e>
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f7ff ff52 	bl	8008ac4 <_malloc_r>
 8008c20:	4606      	mov	r6, r0
 8008c22:	b360      	cbz	r0, 8008c7e <__ssputs_r+0xa2>
 8008c24:	6921      	ldr	r1, [r4, #16]
 8008c26:	464a      	mov	r2, r9
 8008c28:	f7ff fed1 	bl	80089ce <memcpy>
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c36:	81a3      	strh	r3, [r4, #12]
 8008c38:	6126      	str	r6, [r4, #16]
 8008c3a:	6165      	str	r5, [r4, #20]
 8008c3c:	444e      	add	r6, r9
 8008c3e:	eba5 0509 	sub.w	r5, r5, r9
 8008c42:	6026      	str	r6, [r4, #0]
 8008c44:	60a5      	str	r5, [r4, #8]
 8008c46:	463e      	mov	r6, r7
 8008c48:	42be      	cmp	r6, r7
 8008c4a:	d900      	bls.n	8008c4e <__ssputs_r+0x72>
 8008c4c:	463e      	mov	r6, r7
 8008c4e:	6820      	ldr	r0, [r4, #0]
 8008c50:	4632      	mov	r2, r6
 8008c52:	4641      	mov	r1, r8
 8008c54:	f000 fcf8 	bl	8009648 <memmove>
 8008c58:	68a3      	ldr	r3, [r4, #8]
 8008c5a:	1b9b      	subs	r3, r3, r6
 8008c5c:	60a3      	str	r3, [r4, #8]
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	4433      	add	r3, r6
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	2000      	movs	r0, #0
 8008c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6a:	462a      	mov	r2, r5
 8008c6c:	f000 fd38 	bl	80096e0 <_realloc_r>
 8008c70:	4606      	mov	r6, r0
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d1e0      	bne.n	8008c38 <__ssputs_r+0x5c>
 8008c76:	6921      	ldr	r1, [r4, #16]
 8008c78:	4650      	mov	r0, sl
 8008c7a:	f7ff feb7 	bl	80089ec <_free_r>
 8008c7e:	230c      	movs	r3, #12
 8008c80:	f8ca 3000 	str.w	r3, [sl]
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	e7e9      	b.n	8008c66 <__ssputs_r+0x8a>
	...

08008c94 <_svfiprintf_r>:
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	4698      	mov	r8, r3
 8008c9a:	898b      	ldrh	r3, [r1, #12]
 8008c9c:	061b      	lsls	r3, r3, #24
 8008c9e:	b09d      	sub	sp, #116	@ 0x74
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	460d      	mov	r5, r1
 8008ca4:	4614      	mov	r4, r2
 8008ca6:	d510      	bpl.n	8008cca <_svfiprintf_r+0x36>
 8008ca8:	690b      	ldr	r3, [r1, #16]
 8008caa:	b973      	cbnz	r3, 8008cca <_svfiprintf_r+0x36>
 8008cac:	2140      	movs	r1, #64	@ 0x40
 8008cae:	f7ff ff09 	bl	8008ac4 <_malloc_r>
 8008cb2:	6028      	str	r0, [r5, #0]
 8008cb4:	6128      	str	r0, [r5, #16]
 8008cb6:	b930      	cbnz	r0, 8008cc6 <_svfiprintf_r+0x32>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	b01d      	add	sp, #116	@ 0x74
 8008cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc6:	2340      	movs	r3, #64	@ 0x40
 8008cc8:	616b      	str	r3, [r5, #20]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cce:	2320      	movs	r3, #32
 8008cd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd8:	2330      	movs	r3, #48	@ 0x30
 8008cda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e78 <_svfiprintf_r+0x1e4>
 8008cde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ce2:	f04f 0901 	mov.w	r9, #1
 8008ce6:	4623      	mov	r3, r4
 8008ce8:	469a      	mov	sl, r3
 8008cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cee:	b10a      	cbz	r2, 8008cf4 <_svfiprintf_r+0x60>
 8008cf0:	2a25      	cmp	r2, #37	@ 0x25
 8008cf2:	d1f9      	bne.n	8008ce8 <_svfiprintf_r+0x54>
 8008cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf8:	d00b      	beq.n	8008d12 <_svfiprintf_r+0x7e>
 8008cfa:	465b      	mov	r3, fp
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4638      	mov	r0, r7
 8008d02:	f7ff ff6b 	bl	8008bdc <__ssputs_r>
 8008d06:	3001      	adds	r0, #1
 8008d08:	f000 80a7 	beq.w	8008e5a <_svfiprintf_r+0x1c6>
 8008d0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d0e:	445a      	add	r2, fp
 8008d10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d12:	f89a 3000 	ldrb.w	r3, [sl]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 809f 	beq.w	8008e5a <_svfiprintf_r+0x1c6>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d26:	f10a 0a01 	add.w	sl, sl, #1
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	9307      	str	r3, [sp, #28]
 8008d2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d32:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d34:	4654      	mov	r4, sl
 8008d36:	2205      	movs	r2, #5
 8008d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3c:	484e      	ldr	r0, [pc, #312]	@ (8008e78 <_svfiprintf_r+0x1e4>)
 8008d3e:	f7f7 fa7f 	bl	8000240 <memchr>
 8008d42:	9a04      	ldr	r2, [sp, #16]
 8008d44:	b9d8      	cbnz	r0, 8008d7e <_svfiprintf_r+0xea>
 8008d46:	06d0      	lsls	r0, r2, #27
 8008d48:	bf44      	itt	mi
 8008d4a:	2320      	movmi	r3, #32
 8008d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d50:	0711      	lsls	r1, r2, #28
 8008d52:	bf44      	itt	mi
 8008d54:	232b      	movmi	r3, #43	@ 0x2b
 8008d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d60:	d015      	beq.n	8008d8e <_svfiprintf_r+0xfa>
 8008d62:	9a07      	ldr	r2, [sp, #28]
 8008d64:	4654      	mov	r4, sl
 8008d66:	2000      	movs	r0, #0
 8008d68:	f04f 0c0a 	mov.w	ip, #10
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d72:	3b30      	subs	r3, #48	@ 0x30
 8008d74:	2b09      	cmp	r3, #9
 8008d76:	d94b      	bls.n	8008e10 <_svfiprintf_r+0x17c>
 8008d78:	b1b0      	cbz	r0, 8008da8 <_svfiprintf_r+0x114>
 8008d7a:	9207      	str	r2, [sp, #28]
 8008d7c:	e014      	b.n	8008da8 <_svfiprintf_r+0x114>
 8008d7e:	eba0 0308 	sub.w	r3, r0, r8
 8008d82:	fa09 f303 	lsl.w	r3, r9, r3
 8008d86:	4313      	orrs	r3, r2
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	46a2      	mov	sl, r4
 8008d8c:	e7d2      	b.n	8008d34 <_svfiprintf_r+0xa0>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	1d19      	adds	r1, r3, #4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	9103      	str	r1, [sp, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfbb      	ittet	lt
 8008d9a:	425b      	neglt	r3, r3
 8008d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008da0:	9307      	strge	r3, [sp, #28]
 8008da2:	9307      	strlt	r3, [sp, #28]
 8008da4:	bfb8      	it	lt
 8008da6:	9204      	strlt	r2, [sp, #16]
 8008da8:	7823      	ldrb	r3, [r4, #0]
 8008daa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dac:	d10a      	bne.n	8008dc4 <_svfiprintf_r+0x130>
 8008dae:	7863      	ldrb	r3, [r4, #1]
 8008db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008db2:	d132      	bne.n	8008e1a <_svfiprintf_r+0x186>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	1d1a      	adds	r2, r3, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	9203      	str	r2, [sp, #12]
 8008dbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dc0:	3402      	adds	r4, #2
 8008dc2:	9305      	str	r3, [sp, #20]
 8008dc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e88 <_svfiprintf_r+0x1f4>
 8008dc8:	7821      	ldrb	r1, [r4, #0]
 8008dca:	2203      	movs	r2, #3
 8008dcc:	4650      	mov	r0, sl
 8008dce:	f7f7 fa37 	bl	8000240 <memchr>
 8008dd2:	b138      	cbz	r0, 8008de4 <_svfiprintf_r+0x150>
 8008dd4:	9b04      	ldr	r3, [sp, #16]
 8008dd6:	eba0 000a 	sub.w	r0, r0, sl
 8008dda:	2240      	movs	r2, #64	@ 0x40
 8008ddc:	4082      	lsls	r2, r0
 8008dde:	4313      	orrs	r3, r2
 8008de0:	3401      	adds	r4, #1
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de8:	4824      	ldr	r0, [pc, #144]	@ (8008e7c <_svfiprintf_r+0x1e8>)
 8008dea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dee:	2206      	movs	r2, #6
 8008df0:	f7f7 fa26 	bl	8000240 <memchr>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d036      	beq.n	8008e66 <_svfiprintf_r+0x1d2>
 8008df8:	4b21      	ldr	r3, [pc, #132]	@ (8008e80 <_svfiprintf_r+0x1ec>)
 8008dfa:	bb1b      	cbnz	r3, 8008e44 <_svfiprintf_r+0x1b0>
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	3307      	adds	r3, #7
 8008e00:	f023 0307 	bic.w	r3, r3, #7
 8008e04:	3308      	adds	r3, #8
 8008e06:	9303      	str	r3, [sp, #12]
 8008e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0a:	4433      	add	r3, r6
 8008e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0e:	e76a      	b.n	8008ce6 <_svfiprintf_r+0x52>
 8008e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e14:	460c      	mov	r4, r1
 8008e16:	2001      	movs	r0, #1
 8008e18:	e7a8      	b.n	8008d6c <_svfiprintf_r+0xd8>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	3401      	adds	r4, #1
 8008e1e:	9305      	str	r3, [sp, #20]
 8008e20:	4619      	mov	r1, r3
 8008e22:	f04f 0c0a 	mov.w	ip, #10
 8008e26:	4620      	mov	r0, r4
 8008e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2c:	3a30      	subs	r2, #48	@ 0x30
 8008e2e:	2a09      	cmp	r2, #9
 8008e30:	d903      	bls.n	8008e3a <_svfiprintf_r+0x1a6>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0c6      	beq.n	8008dc4 <_svfiprintf_r+0x130>
 8008e36:	9105      	str	r1, [sp, #20]
 8008e38:	e7c4      	b.n	8008dc4 <_svfiprintf_r+0x130>
 8008e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e3e:	4604      	mov	r4, r0
 8008e40:	2301      	movs	r3, #1
 8008e42:	e7f0      	b.n	8008e26 <_svfiprintf_r+0x192>
 8008e44:	ab03      	add	r3, sp, #12
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	462a      	mov	r2, r5
 8008e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e84 <_svfiprintf_r+0x1f0>)
 8008e4c:	a904      	add	r1, sp, #16
 8008e4e:	4638      	mov	r0, r7
 8008e50:	f3af 8000 	nop.w
 8008e54:	1c42      	adds	r2, r0, #1
 8008e56:	4606      	mov	r6, r0
 8008e58:	d1d6      	bne.n	8008e08 <_svfiprintf_r+0x174>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	065b      	lsls	r3, r3, #25
 8008e5e:	f53f af2d 	bmi.w	8008cbc <_svfiprintf_r+0x28>
 8008e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e64:	e72c      	b.n	8008cc0 <_svfiprintf_r+0x2c>
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4b05      	ldr	r3, [pc, #20]	@ (8008e84 <_svfiprintf_r+0x1f0>)
 8008e6e:	a904      	add	r1, sp, #16
 8008e70:	4638      	mov	r0, r7
 8008e72:	f000 f9bb 	bl	80091ec <_printf_i>
 8008e76:	e7ed      	b.n	8008e54 <_svfiprintf_r+0x1c0>
 8008e78:	08009df0 	.word	0x08009df0
 8008e7c:	08009dfa 	.word	0x08009dfa
 8008e80:	00000000 	.word	0x00000000
 8008e84:	08008bdd 	.word	0x08008bdd
 8008e88:	08009df6 	.word	0x08009df6

08008e8c <__sfputc_r>:
 8008e8c:	6893      	ldr	r3, [r2, #8]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	b410      	push	{r4}
 8008e94:	6093      	str	r3, [r2, #8]
 8008e96:	da08      	bge.n	8008eaa <__sfputc_r+0x1e>
 8008e98:	6994      	ldr	r4, [r2, #24]
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	db01      	blt.n	8008ea2 <__sfputc_r+0x16>
 8008e9e:	290a      	cmp	r1, #10
 8008ea0:	d103      	bne.n	8008eaa <__sfputc_r+0x1e>
 8008ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ea6:	f7ff bc5e 	b.w	8008766 <__swbuf_r>
 8008eaa:	6813      	ldr	r3, [r2, #0]
 8008eac:	1c58      	adds	r0, r3, #1
 8008eae:	6010      	str	r0, [r2, #0]
 8008eb0:	7019      	strb	r1, [r3, #0]
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <__sfputs_r>:
 8008eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	18d5      	adds	r5, r2, r3
 8008ec4:	42ac      	cmp	r4, r5
 8008ec6:	d101      	bne.n	8008ecc <__sfputs_r+0x12>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e007      	b.n	8008edc <__sfputs_r+0x22>
 8008ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed0:	463a      	mov	r2, r7
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff ffda 	bl	8008e8c <__sfputc_r>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d1f3      	bne.n	8008ec4 <__sfputs_r+0xa>
 8008edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ee0 <_vfiprintf_r>:
 8008ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	460d      	mov	r5, r1
 8008ee6:	b09d      	sub	sp, #116	@ 0x74
 8008ee8:	4614      	mov	r4, r2
 8008eea:	4698      	mov	r8, r3
 8008eec:	4606      	mov	r6, r0
 8008eee:	b118      	cbz	r0, 8008ef8 <_vfiprintf_r+0x18>
 8008ef0:	6a03      	ldr	r3, [r0, #32]
 8008ef2:	b90b      	cbnz	r3, 8008ef8 <_vfiprintf_r+0x18>
 8008ef4:	f7ff fafa 	bl	80084ec <__sinit>
 8008ef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008efa:	07d9      	lsls	r1, r3, #31
 8008efc:	d405      	bmi.n	8008f0a <_vfiprintf_r+0x2a>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	059a      	lsls	r2, r3, #22
 8008f02:	d402      	bmi.n	8008f0a <_vfiprintf_r+0x2a>
 8008f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f06:	f7ff fd60 	bl	80089ca <__retarget_lock_acquire_recursive>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	071b      	lsls	r3, r3, #28
 8008f0e:	d501      	bpl.n	8008f14 <_vfiprintf_r+0x34>
 8008f10:	692b      	ldr	r3, [r5, #16]
 8008f12:	b99b      	cbnz	r3, 8008f3c <_vfiprintf_r+0x5c>
 8008f14:	4629      	mov	r1, r5
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7ff fc64 	bl	80087e4 <__swsetup_r>
 8008f1c:	b170      	cbz	r0, 8008f3c <_vfiprintf_r+0x5c>
 8008f1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f20:	07dc      	lsls	r4, r3, #31
 8008f22:	d504      	bpl.n	8008f2e <_vfiprintf_r+0x4e>
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	b01d      	add	sp, #116	@ 0x74
 8008f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2e:	89ab      	ldrh	r3, [r5, #12]
 8008f30:	0598      	lsls	r0, r3, #22
 8008f32:	d4f7      	bmi.n	8008f24 <_vfiprintf_r+0x44>
 8008f34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f36:	f7ff fd49 	bl	80089cc <__retarget_lock_release_recursive>
 8008f3a:	e7f3      	b.n	8008f24 <_vfiprintf_r+0x44>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f40:	2320      	movs	r3, #32
 8008f42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f4a:	2330      	movs	r3, #48	@ 0x30
 8008f4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80090fc <_vfiprintf_r+0x21c>
 8008f50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f54:	f04f 0901 	mov.w	r9, #1
 8008f58:	4623      	mov	r3, r4
 8008f5a:	469a      	mov	sl, r3
 8008f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f60:	b10a      	cbz	r2, 8008f66 <_vfiprintf_r+0x86>
 8008f62:	2a25      	cmp	r2, #37	@ 0x25
 8008f64:	d1f9      	bne.n	8008f5a <_vfiprintf_r+0x7a>
 8008f66:	ebba 0b04 	subs.w	fp, sl, r4
 8008f6a:	d00b      	beq.n	8008f84 <_vfiprintf_r+0xa4>
 8008f6c:	465b      	mov	r3, fp
 8008f6e:	4622      	mov	r2, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7ff ffa1 	bl	8008eba <__sfputs_r>
 8008f78:	3001      	adds	r0, #1
 8008f7a:	f000 80a7 	beq.w	80090cc <_vfiprintf_r+0x1ec>
 8008f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f80:	445a      	add	r2, fp
 8008f82:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f84:	f89a 3000 	ldrb.w	r3, [sl]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 809f 	beq.w	80090cc <_vfiprintf_r+0x1ec>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f04f 32ff 	mov.w	r2, #4294967295
 8008f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f98:	f10a 0a01 	add.w	sl, sl, #1
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	9307      	str	r3, [sp, #28]
 8008fa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fa6:	4654      	mov	r4, sl
 8008fa8:	2205      	movs	r2, #5
 8008faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fae:	4853      	ldr	r0, [pc, #332]	@ (80090fc <_vfiprintf_r+0x21c>)
 8008fb0:	f7f7 f946 	bl	8000240 <memchr>
 8008fb4:	9a04      	ldr	r2, [sp, #16]
 8008fb6:	b9d8      	cbnz	r0, 8008ff0 <_vfiprintf_r+0x110>
 8008fb8:	06d1      	lsls	r1, r2, #27
 8008fba:	bf44      	itt	mi
 8008fbc:	2320      	movmi	r3, #32
 8008fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fc2:	0713      	lsls	r3, r2, #28
 8008fc4:	bf44      	itt	mi
 8008fc6:	232b      	movmi	r3, #43	@ 0x2b
 8008fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fd2:	d015      	beq.n	8009000 <_vfiprintf_r+0x120>
 8008fd4:	9a07      	ldr	r2, [sp, #28]
 8008fd6:	4654      	mov	r4, sl
 8008fd8:	2000      	movs	r0, #0
 8008fda:	f04f 0c0a 	mov.w	ip, #10
 8008fde:	4621      	mov	r1, r4
 8008fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fe4:	3b30      	subs	r3, #48	@ 0x30
 8008fe6:	2b09      	cmp	r3, #9
 8008fe8:	d94b      	bls.n	8009082 <_vfiprintf_r+0x1a2>
 8008fea:	b1b0      	cbz	r0, 800901a <_vfiprintf_r+0x13a>
 8008fec:	9207      	str	r2, [sp, #28]
 8008fee:	e014      	b.n	800901a <_vfiprintf_r+0x13a>
 8008ff0:	eba0 0308 	sub.w	r3, r0, r8
 8008ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	46a2      	mov	sl, r4
 8008ffe:	e7d2      	b.n	8008fa6 <_vfiprintf_r+0xc6>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	1d19      	adds	r1, r3, #4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	9103      	str	r1, [sp, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	bfbb      	ittet	lt
 800900c:	425b      	neglt	r3, r3
 800900e:	f042 0202 	orrlt.w	r2, r2, #2
 8009012:	9307      	strge	r3, [sp, #28]
 8009014:	9307      	strlt	r3, [sp, #28]
 8009016:	bfb8      	it	lt
 8009018:	9204      	strlt	r2, [sp, #16]
 800901a:	7823      	ldrb	r3, [r4, #0]
 800901c:	2b2e      	cmp	r3, #46	@ 0x2e
 800901e:	d10a      	bne.n	8009036 <_vfiprintf_r+0x156>
 8009020:	7863      	ldrb	r3, [r4, #1]
 8009022:	2b2a      	cmp	r3, #42	@ 0x2a
 8009024:	d132      	bne.n	800908c <_vfiprintf_r+0x1ac>
 8009026:	9b03      	ldr	r3, [sp, #12]
 8009028:	1d1a      	adds	r2, r3, #4
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	9203      	str	r2, [sp, #12]
 800902e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009032:	3402      	adds	r4, #2
 8009034:	9305      	str	r3, [sp, #20]
 8009036:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800910c <_vfiprintf_r+0x22c>
 800903a:	7821      	ldrb	r1, [r4, #0]
 800903c:	2203      	movs	r2, #3
 800903e:	4650      	mov	r0, sl
 8009040:	f7f7 f8fe 	bl	8000240 <memchr>
 8009044:	b138      	cbz	r0, 8009056 <_vfiprintf_r+0x176>
 8009046:	9b04      	ldr	r3, [sp, #16]
 8009048:	eba0 000a 	sub.w	r0, r0, sl
 800904c:	2240      	movs	r2, #64	@ 0x40
 800904e:	4082      	lsls	r2, r0
 8009050:	4313      	orrs	r3, r2
 8009052:	3401      	adds	r4, #1
 8009054:	9304      	str	r3, [sp, #16]
 8009056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905a:	4829      	ldr	r0, [pc, #164]	@ (8009100 <_vfiprintf_r+0x220>)
 800905c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009060:	2206      	movs	r2, #6
 8009062:	f7f7 f8ed 	bl	8000240 <memchr>
 8009066:	2800      	cmp	r0, #0
 8009068:	d03f      	beq.n	80090ea <_vfiprintf_r+0x20a>
 800906a:	4b26      	ldr	r3, [pc, #152]	@ (8009104 <_vfiprintf_r+0x224>)
 800906c:	bb1b      	cbnz	r3, 80090b6 <_vfiprintf_r+0x1d6>
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	3307      	adds	r3, #7
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	3308      	adds	r3, #8
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800907c:	443b      	add	r3, r7
 800907e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009080:	e76a      	b.n	8008f58 <_vfiprintf_r+0x78>
 8009082:	fb0c 3202 	mla	r2, ip, r2, r3
 8009086:	460c      	mov	r4, r1
 8009088:	2001      	movs	r0, #1
 800908a:	e7a8      	b.n	8008fde <_vfiprintf_r+0xfe>
 800908c:	2300      	movs	r3, #0
 800908e:	3401      	adds	r4, #1
 8009090:	9305      	str	r3, [sp, #20]
 8009092:	4619      	mov	r1, r3
 8009094:	f04f 0c0a 	mov.w	ip, #10
 8009098:	4620      	mov	r0, r4
 800909a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800909e:	3a30      	subs	r2, #48	@ 0x30
 80090a0:	2a09      	cmp	r2, #9
 80090a2:	d903      	bls.n	80090ac <_vfiprintf_r+0x1cc>
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0c6      	beq.n	8009036 <_vfiprintf_r+0x156>
 80090a8:	9105      	str	r1, [sp, #20]
 80090aa:	e7c4      	b.n	8009036 <_vfiprintf_r+0x156>
 80090ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80090b0:	4604      	mov	r4, r0
 80090b2:	2301      	movs	r3, #1
 80090b4:	e7f0      	b.n	8009098 <_vfiprintf_r+0x1b8>
 80090b6:	ab03      	add	r3, sp, #12
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	462a      	mov	r2, r5
 80090bc:	4b12      	ldr	r3, [pc, #72]	@ (8009108 <_vfiprintf_r+0x228>)
 80090be:	a904      	add	r1, sp, #16
 80090c0:	4630      	mov	r0, r6
 80090c2:	f3af 8000 	nop.w
 80090c6:	4607      	mov	r7, r0
 80090c8:	1c78      	adds	r0, r7, #1
 80090ca:	d1d6      	bne.n	800907a <_vfiprintf_r+0x19a>
 80090cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090ce:	07d9      	lsls	r1, r3, #31
 80090d0:	d405      	bmi.n	80090de <_vfiprintf_r+0x1fe>
 80090d2:	89ab      	ldrh	r3, [r5, #12]
 80090d4:	059a      	lsls	r2, r3, #22
 80090d6:	d402      	bmi.n	80090de <_vfiprintf_r+0x1fe>
 80090d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090da:	f7ff fc77 	bl	80089cc <__retarget_lock_release_recursive>
 80090de:	89ab      	ldrh	r3, [r5, #12]
 80090e0:	065b      	lsls	r3, r3, #25
 80090e2:	f53f af1f 	bmi.w	8008f24 <_vfiprintf_r+0x44>
 80090e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090e8:	e71e      	b.n	8008f28 <_vfiprintf_r+0x48>
 80090ea:	ab03      	add	r3, sp, #12
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	462a      	mov	r2, r5
 80090f0:	4b05      	ldr	r3, [pc, #20]	@ (8009108 <_vfiprintf_r+0x228>)
 80090f2:	a904      	add	r1, sp, #16
 80090f4:	4630      	mov	r0, r6
 80090f6:	f000 f879 	bl	80091ec <_printf_i>
 80090fa:	e7e4      	b.n	80090c6 <_vfiprintf_r+0x1e6>
 80090fc:	08009df0 	.word	0x08009df0
 8009100:	08009dfa 	.word	0x08009dfa
 8009104:	00000000 	.word	0x00000000
 8009108:	08008ebb 	.word	0x08008ebb
 800910c:	08009df6 	.word	0x08009df6

08009110 <_printf_common>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	4616      	mov	r6, r2
 8009116:	4698      	mov	r8, r3
 8009118:	688a      	ldr	r2, [r1, #8]
 800911a:	690b      	ldr	r3, [r1, #16]
 800911c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009120:	4293      	cmp	r3, r2
 8009122:	bfb8      	it	lt
 8009124:	4613      	movlt	r3, r2
 8009126:	6033      	str	r3, [r6, #0]
 8009128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800912c:	4607      	mov	r7, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b10a      	cbz	r2, 8009136 <_printf_common+0x26>
 8009132:	3301      	adds	r3, #1
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	0699      	lsls	r1, r3, #26
 800913a:	bf42      	ittt	mi
 800913c:	6833      	ldrmi	r3, [r6, #0]
 800913e:	3302      	addmi	r3, #2
 8009140:	6033      	strmi	r3, [r6, #0]
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	f015 0506 	ands.w	r5, r5, #6
 8009148:	d106      	bne.n	8009158 <_printf_common+0x48>
 800914a:	f104 0a19 	add.w	sl, r4, #25
 800914e:	68e3      	ldr	r3, [r4, #12]
 8009150:	6832      	ldr	r2, [r6, #0]
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	42ab      	cmp	r3, r5
 8009156:	dc26      	bgt.n	80091a6 <_printf_common+0x96>
 8009158:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800915c:	6822      	ldr	r2, [r4, #0]
 800915e:	3b00      	subs	r3, #0
 8009160:	bf18      	it	ne
 8009162:	2301      	movne	r3, #1
 8009164:	0692      	lsls	r2, r2, #26
 8009166:	d42b      	bmi.n	80091c0 <_printf_common+0xb0>
 8009168:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800916c:	4641      	mov	r1, r8
 800916e:	4638      	mov	r0, r7
 8009170:	47c8      	blx	r9
 8009172:	3001      	adds	r0, #1
 8009174:	d01e      	beq.n	80091b4 <_printf_common+0xa4>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	6922      	ldr	r2, [r4, #16]
 800917a:	f003 0306 	and.w	r3, r3, #6
 800917e:	2b04      	cmp	r3, #4
 8009180:	bf02      	ittt	eq
 8009182:	68e5      	ldreq	r5, [r4, #12]
 8009184:	6833      	ldreq	r3, [r6, #0]
 8009186:	1aed      	subeq	r5, r5, r3
 8009188:	68a3      	ldr	r3, [r4, #8]
 800918a:	bf0c      	ite	eq
 800918c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009190:	2500      	movne	r5, #0
 8009192:	4293      	cmp	r3, r2
 8009194:	bfc4      	itt	gt
 8009196:	1a9b      	subgt	r3, r3, r2
 8009198:	18ed      	addgt	r5, r5, r3
 800919a:	2600      	movs	r6, #0
 800919c:	341a      	adds	r4, #26
 800919e:	42b5      	cmp	r5, r6
 80091a0:	d11a      	bne.n	80091d8 <_printf_common+0xc8>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e008      	b.n	80091b8 <_printf_common+0xa8>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4641      	mov	r1, r8
 80091ac:	4638      	mov	r0, r7
 80091ae:	47c8      	blx	r9
 80091b0:	3001      	adds	r0, #1
 80091b2:	d103      	bne.n	80091bc <_printf_common+0xac>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295
 80091b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091bc:	3501      	adds	r5, #1
 80091be:	e7c6      	b.n	800914e <_printf_common+0x3e>
 80091c0:	18e1      	adds	r1, r4, r3
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	2030      	movs	r0, #48	@ 0x30
 80091c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091ca:	4422      	add	r2, r4
 80091cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091d4:	3302      	adds	r3, #2
 80091d6:	e7c7      	b.n	8009168 <_printf_common+0x58>
 80091d8:	2301      	movs	r3, #1
 80091da:	4622      	mov	r2, r4
 80091dc:	4641      	mov	r1, r8
 80091de:	4638      	mov	r0, r7
 80091e0:	47c8      	blx	r9
 80091e2:	3001      	adds	r0, #1
 80091e4:	d0e6      	beq.n	80091b4 <_printf_common+0xa4>
 80091e6:	3601      	adds	r6, #1
 80091e8:	e7d9      	b.n	800919e <_printf_common+0x8e>
	...

080091ec <_printf_i>:
 80091ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f0:	7e0f      	ldrb	r7, [r1, #24]
 80091f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091f4:	2f78      	cmp	r7, #120	@ 0x78
 80091f6:	4691      	mov	r9, r2
 80091f8:	4680      	mov	r8, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	469a      	mov	sl, r3
 80091fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009202:	d807      	bhi.n	8009214 <_printf_i+0x28>
 8009204:	2f62      	cmp	r7, #98	@ 0x62
 8009206:	d80a      	bhi.n	800921e <_printf_i+0x32>
 8009208:	2f00      	cmp	r7, #0
 800920a:	f000 80d2 	beq.w	80093b2 <_printf_i+0x1c6>
 800920e:	2f58      	cmp	r7, #88	@ 0x58
 8009210:	f000 80b9 	beq.w	8009386 <_printf_i+0x19a>
 8009214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009218:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800921c:	e03a      	b.n	8009294 <_printf_i+0xa8>
 800921e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009222:	2b15      	cmp	r3, #21
 8009224:	d8f6      	bhi.n	8009214 <_printf_i+0x28>
 8009226:	a101      	add	r1, pc, #4	@ (adr r1, 800922c <_printf_i+0x40>)
 8009228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800922c:	08009285 	.word	0x08009285
 8009230:	08009299 	.word	0x08009299
 8009234:	08009215 	.word	0x08009215
 8009238:	08009215 	.word	0x08009215
 800923c:	08009215 	.word	0x08009215
 8009240:	08009215 	.word	0x08009215
 8009244:	08009299 	.word	0x08009299
 8009248:	08009215 	.word	0x08009215
 800924c:	08009215 	.word	0x08009215
 8009250:	08009215 	.word	0x08009215
 8009254:	08009215 	.word	0x08009215
 8009258:	08009399 	.word	0x08009399
 800925c:	080092c3 	.word	0x080092c3
 8009260:	08009353 	.word	0x08009353
 8009264:	08009215 	.word	0x08009215
 8009268:	08009215 	.word	0x08009215
 800926c:	080093bb 	.word	0x080093bb
 8009270:	08009215 	.word	0x08009215
 8009274:	080092c3 	.word	0x080092c3
 8009278:	08009215 	.word	0x08009215
 800927c:	08009215 	.word	0x08009215
 8009280:	0800935b 	.word	0x0800935b
 8009284:	6833      	ldr	r3, [r6, #0]
 8009286:	1d1a      	adds	r2, r3, #4
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6032      	str	r2, [r6, #0]
 800928c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009294:	2301      	movs	r3, #1
 8009296:	e09d      	b.n	80093d4 <_printf_i+0x1e8>
 8009298:	6833      	ldr	r3, [r6, #0]
 800929a:	6820      	ldr	r0, [r4, #0]
 800929c:	1d19      	adds	r1, r3, #4
 800929e:	6031      	str	r1, [r6, #0]
 80092a0:	0606      	lsls	r6, r0, #24
 80092a2:	d501      	bpl.n	80092a8 <_printf_i+0xbc>
 80092a4:	681d      	ldr	r5, [r3, #0]
 80092a6:	e003      	b.n	80092b0 <_printf_i+0xc4>
 80092a8:	0645      	lsls	r5, r0, #25
 80092aa:	d5fb      	bpl.n	80092a4 <_printf_i+0xb8>
 80092ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	da03      	bge.n	80092bc <_printf_i+0xd0>
 80092b4:	232d      	movs	r3, #45	@ 0x2d
 80092b6:	426d      	negs	r5, r5
 80092b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092bc:	4859      	ldr	r0, [pc, #356]	@ (8009424 <_printf_i+0x238>)
 80092be:	230a      	movs	r3, #10
 80092c0:	e011      	b.n	80092e6 <_printf_i+0xfa>
 80092c2:	6821      	ldr	r1, [r4, #0]
 80092c4:	6833      	ldr	r3, [r6, #0]
 80092c6:	0608      	lsls	r0, r1, #24
 80092c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80092cc:	d402      	bmi.n	80092d4 <_printf_i+0xe8>
 80092ce:	0649      	lsls	r1, r1, #25
 80092d0:	bf48      	it	mi
 80092d2:	b2ad      	uxthmi	r5, r5
 80092d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80092d6:	4853      	ldr	r0, [pc, #332]	@ (8009424 <_printf_i+0x238>)
 80092d8:	6033      	str	r3, [r6, #0]
 80092da:	bf14      	ite	ne
 80092dc:	230a      	movne	r3, #10
 80092de:	2308      	moveq	r3, #8
 80092e0:	2100      	movs	r1, #0
 80092e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092e6:	6866      	ldr	r6, [r4, #4]
 80092e8:	60a6      	str	r6, [r4, #8]
 80092ea:	2e00      	cmp	r6, #0
 80092ec:	bfa2      	ittt	ge
 80092ee:	6821      	ldrge	r1, [r4, #0]
 80092f0:	f021 0104 	bicge.w	r1, r1, #4
 80092f4:	6021      	strge	r1, [r4, #0]
 80092f6:	b90d      	cbnz	r5, 80092fc <_printf_i+0x110>
 80092f8:	2e00      	cmp	r6, #0
 80092fa:	d04b      	beq.n	8009394 <_printf_i+0x1a8>
 80092fc:	4616      	mov	r6, r2
 80092fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009302:	fb03 5711 	mls	r7, r3, r1, r5
 8009306:	5dc7      	ldrb	r7, [r0, r7]
 8009308:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800930c:	462f      	mov	r7, r5
 800930e:	42bb      	cmp	r3, r7
 8009310:	460d      	mov	r5, r1
 8009312:	d9f4      	bls.n	80092fe <_printf_i+0x112>
 8009314:	2b08      	cmp	r3, #8
 8009316:	d10b      	bne.n	8009330 <_printf_i+0x144>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	07df      	lsls	r7, r3, #31
 800931c:	d508      	bpl.n	8009330 <_printf_i+0x144>
 800931e:	6923      	ldr	r3, [r4, #16]
 8009320:	6861      	ldr	r1, [r4, #4]
 8009322:	4299      	cmp	r1, r3
 8009324:	bfde      	ittt	le
 8009326:	2330      	movle	r3, #48	@ 0x30
 8009328:	f806 3c01 	strble.w	r3, [r6, #-1]
 800932c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009330:	1b92      	subs	r2, r2, r6
 8009332:	6122      	str	r2, [r4, #16]
 8009334:	f8cd a000 	str.w	sl, [sp]
 8009338:	464b      	mov	r3, r9
 800933a:	aa03      	add	r2, sp, #12
 800933c:	4621      	mov	r1, r4
 800933e:	4640      	mov	r0, r8
 8009340:	f7ff fee6 	bl	8009110 <_printf_common>
 8009344:	3001      	adds	r0, #1
 8009346:	d14a      	bne.n	80093de <_printf_i+0x1f2>
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	b004      	add	sp, #16
 800934e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	f043 0320 	orr.w	r3, r3, #32
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	4833      	ldr	r0, [pc, #204]	@ (8009428 <_printf_i+0x23c>)
 800935c:	2778      	movs	r7, #120	@ 0x78
 800935e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	6831      	ldr	r1, [r6, #0]
 8009366:	061f      	lsls	r7, r3, #24
 8009368:	f851 5b04 	ldr.w	r5, [r1], #4
 800936c:	d402      	bmi.n	8009374 <_printf_i+0x188>
 800936e:	065f      	lsls	r7, r3, #25
 8009370:	bf48      	it	mi
 8009372:	b2ad      	uxthmi	r5, r5
 8009374:	6031      	str	r1, [r6, #0]
 8009376:	07d9      	lsls	r1, r3, #31
 8009378:	bf44      	itt	mi
 800937a:	f043 0320 	orrmi.w	r3, r3, #32
 800937e:	6023      	strmi	r3, [r4, #0]
 8009380:	b11d      	cbz	r5, 800938a <_printf_i+0x19e>
 8009382:	2310      	movs	r3, #16
 8009384:	e7ac      	b.n	80092e0 <_printf_i+0xf4>
 8009386:	4827      	ldr	r0, [pc, #156]	@ (8009424 <_printf_i+0x238>)
 8009388:	e7e9      	b.n	800935e <_printf_i+0x172>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	f023 0320 	bic.w	r3, r3, #32
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	e7f6      	b.n	8009382 <_printf_i+0x196>
 8009394:	4616      	mov	r6, r2
 8009396:	e7bd      	b.n	8009314 <_printf_i+0x128>
 8009398:	6833      	ldr	r3, [r6, #0]
 800939a:	6825      	ldr	r5, [r4, #0]
 800939c:	6961      	ldr	r1, [r4, #20]
 800939e:	1d18      	adds	r0, r3, #4
 80093a0:	6030      	str	r0, [r6, #0]
 80093a2:	062e      	lsls	r6, r5, #24
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	d501      	bpl.n	80093ac <_printf_i+0x1c0>
 80093a8:	6019      	str	r1, [r3, #0]
 80093aa:	e002      	b.n	80093b2 <_printf_i+0x1c6>
 80093ac:	0668      	lsls	r0, r5, #25
 80093ae:	d5fb      	bpl.n	80093a8 <_printf_i+0x1bc>
 80093b0:	8019      	strh	r1, [r3, #0]
 80093b2:	2300      	movs	r3, #0
 80093b4:	6123      	str	r3, [r4, #16]
 80093b6:	4616      	mov	r6, r2
 80093b8:	e7bc      	b.n	8009334 <_printf_i+0x148>
 80093ba:	6833      	ldr	r3, [r6, #0]
 80093bc:	1d1a      	adds	r2, r3, #4
 80093be:	6032      	str	r2, [r6, #0]
 80093c0:	681e      	ldr	r6, [r3, #0]
 80093c2:	6862      	ldr	r2, [r4, #4]
 80093c4:	2100      	movs	r1, #0
 80093c6:	4630      	mov	r0, r6
 80093c8:	f7f6 ff3a 	bl	8000240 <memchr>
 80093cc:	b108      	cbz	r0, 80093d2 <_printf_i+0x1e6>
 80093ce:	1b80      	subs	r0, r0, r6
 80093d0:	6060      	str	r0, [r4, #4]
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	2300      	movs	r3, #0
 80093d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093dc:	e7aa      	b.n	8009334 <_printf_i+0x148>
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	4632      	mov	r2, r6
 80093e2:	4649      	mov	r1, r9
 80093e4:	4640      	mov	r0, r8
 80093e6:	47d0      	blx	sl
 80093e8:	3001      	adds	r0, #1
 80093ea:	d0ad      	beq.n	8009348 <_printf_i+0x15c>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	079b      	lsls	r3, r3, #30
 80093f0:	d413      	bmi.n	800941a <_printf_i+0x22e>
 80093f2:	68e0      	ldr	r0, [r4, #12]
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	4298      	cmp	r0, r3
 80093f8:	bfb8      	it	lt
 80093fa:	4618      	movlt	r0, r3
 80093fc:	e7a6      	b.n	800934c <_printf_i+0x160>
 80093fe:	2301      	movs	r3, #1
 8009400:	4632      	mov	r2, r6
 8009402:	4649      	mov	r1, r9
 8009404:	4640      	mov	r0, r8
 8009406:	47d0      	blx	sl
 8009408:	3001      	adds	r0, #1
 800940a:	d09d      	beq.n	8009348 <_printf_i+0x15c>
 800940c:	3501      	adds	r5, #1
 800940e:	68e3      	ldr	r3, [r4, #12]
 8009410:	9903      	ldr	r1, [sp, #12]
 8009412:	1a5b      	subs	r3, r3, r1
 8009414:	42ab      	cmp	r3, r5
 8009416:	dcf2      	bgt.n	80093fe <_printf_i+0x212>
 8009418:	e7eb      	b.n	80093f2 <_printf_i+0x206>
 800941a:	2500      	movs	r5, #0
 800941c:	f104 0619 	add.w	r6, r4, #25
 8009420:	e7f5      	b.n	800940e <_printf_i+0x222>
 8009422:	bf00      	nop
 8009424:	08009e01 	.word	0x08009e01
 8009428:	08009e12 	.word	0x08009e12

0800942c <__sflush_r>:
 800942c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009434:	0716      	lsls	r6, r2, #28
 8009436:	4605      	mov	r5, r0
 8009438:	460c      	mov	r4, r1
 800943a:	d454      	bmi.n	80094e6 <__sflush_r+0xba>
 800943c:	684b      	ldr	r3, [r1, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	dc02      	bgt.n	8009448 <__sflush_r+0x1c>
 8009442:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009444:	2b00      	cmp	r3, #0
 8009446:	dd48      	ble.n	80094da <__sflush_r+0xae>
 8009448:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800944a:	2e00      	cmp	r6, #0
 800944c:	d045      	beq.n	80094da <__sflush_r+0xae>
 800944e:	2300      	movs	r3, #0
 8009450:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009454:	682f      	ldr	r7, [r5, #0]
 8009456:	6a21      	ldr	r1, [r4, #32]
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	d030      	beq.n	80094be <__sflush_r+0x92>
 800945c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	0759      	lsls	r1, r3, #29
 8009462:	d505      	bpl.n	8009470 <__sflush_r+0x44>
 8009464:	6863      	ldr	r3, [r4, #4]
 8009466:	1ad2      	subs	r2, r2, r3
 8009468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800946a:	b10b      	cbz	r3, 8009470 <__sflush_r+0x44>
 800946c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800946e:	1ad2      	subs	r2, r2, r3
 8009470:	2300      	movs	r3, #0
 8009472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009474:	6a21      	ldr	r1, [r4, #32]
 8009476:	4628      	mov	r0, r5
 8009478:	47b0      	blx	r6
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	d106      	bne.n	800948e <__sflush_r+0x62>
 8009480:	6829      	ldr	r1, [r5, #0]
 8009482:	291d      	cmp	r1, #29
 8009484:	d82b      	bhi.n	80094de <__sflush_r+0xb2>
 8009486:	4a2a      	ldr	r2, [pc, #168]	@ (8009530 <__sflush_r+0x104>)
 8009488:	410a      	asrs	r2, r1
 800948a:	07d6      	lsls	r6, r2, #31
 800948c:	d427      	bmi.n	80094de <__sflush_r+0xb2>
 800948e:	2200      	movs	r2, #0
 8009490:	6062      	str	r2, [r4, #4]
 8009492:	04d9      	lsls	r1, r3, #19
 8009494:	6922      	ldr	r2, [r4, #16]
 8009496:	6022      	str	r2, [r4, #0]
 8009498:	d504      	bpl.n	80094a4 <__sflush_r+0x78>
 800949a:	1c42      	adds	r2, r0, #1
 800949c:	d101      	bne.n	80094a2 <__sflush_r+0x76>
 800949e:	682b      	ldr	r3, [r5, #0]
 80094a0:	b903      	cbnz	r3, 80094a4 <__sflush_r+0x78>
 80094a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80094a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094a6:	602f      	str	r7, [r5, #0]
 80094a8:	b1b9      	cbz	r1, 80094da <__sflush_r+0xae>
 80094aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094ae:	4299      	cmp	r1, r3
 80094b0:	d002      	beq.n	80094b8 <__sflush_r+0x8c>
 80094b2:	4628      	mov	r0, r5
 80094b4:	f7ff fa9a 	bl	80089ec <_free_r>
 80094b8:	2300      	movs	r3, #0
 80094ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80094bc:	e00d      	b.n	80094da <__sflush_r+0xae>
 80094be:	2301      	movs	r3, #1
 80094c0:	4628      	mov	r0, r5
 80094c2:	47b0      	blx	r6
 80094c4:	4602      	mov	r2, r0
 80094c6:	1c50      	adds	r0, r2, #1
 80094c8:	d1c9      	bne.n	800945e <__sflush_r+0x32>
 80094ca:	682b      	ldr	r3, [r5, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0c6      	beq.n	800945e <__sflush_r+0x32>
 80094d0:	2b1d      	cmp	r3, #29
 80094d2:	d001      	beq.n	80094d8 <__sflush_r+0xac>
 80094d4:	2b16      	cmp	r3, #22
 80094d6:	d11e      	bne.n	8009516 <__sflush_r+0xea>
 80094d8:	602f      	str	r7, [r5, #0]
 80094da:	2000      	movs	r0, #0
 80094dc:	e022      	b.n	8009524 <__sflush_r+0xf8>
 80094de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094e2:	b21b      	sxth	r3, r3
 80094e4:	e01b      	b.n	800951e <__sflush_r+0xf2>
 80094e6:	690f      	ldr	r7, [r1, #16]
 80094e8:	2f00      	cmp	r7, #0
 80094ea:	d0f6      	beq.n	80094da <__sflush_r+0xae>
 80094ec:	0793      	lsls	r3, r2, #30
 80094ee:	680e      	ldr	r6, [r1, #0]
 80094f0:	bf08      	it	eq
 80094f2:	694b      	ldreq	r3, [r1, #20]
 80094f4:	600f      	str	r7, [r1, #0]
 80094f6:	bf18      	it	ne
 80094f8:	2300      	movne	r3, #0
 80094fa:	eba6 0807 	sub.w	r8, r6, r7
 80094fe:	608b      	str	r3, [r1, #8]
 8009500:	f1b8 0f00 	cmp.w	r8, #0
 8009504:	dde9      	ble.n	80094da <__sflush_r+0xae>
 8009506:	6a21      	ldr	r1, [r4, #32]
 8009508:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800950a:	4643      	mov	r3, r8
 800950c:	463a      	mov	r2, r7
 800950e:	4628      	mov	r0, r5
 8009510:	47b0      	blx	r6
 8009512:	2800      	cmp	r0, #0
 8009514:	dc08      	bgt.n	8009528 <__sflush_r+0xfc>
 8009516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800951e:	81a3      	strh	r3, [r4, #12]
 8009520:	f04f 30ff 	mov.w	r0, #4294967295
 8009524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009528:	4407      	add	r7, r0
 800952a:	eba8 0800 	sub.w	r8, r8, r0
 800952e:	e7e7      	b.n	8009500 <__sflush_r+0xd4>
 8009530:	dfbffffe 	.word	0xdfbffffe

08009534 <_fflush_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	690b      	ldr	r3, [r1, #16]
 8009538:	4605      	mov	r5, r0
 800953a:	460c      	mov	r4, r1
 800953c:	b913      	cbnz	r3, 8009544 <_fflush_r+0x10>
 800953e:	2500      	movs	r5, #0
 8009540:	4628      	mov	r0, r5
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	b118      	cbz	r0, 800954e <_fflush_r+0x1a>
 8009546:	6a03      	ldr	r3, [r0, #32]
 8009548:	b90b      	cbnz	r3, 800954e <_fflush_r+0x1a>
 800954a:	f7fe ffcf 	bl	80084ec <__sinit>
 800954e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0f3      	beq.n	800953e <_fflush_r+0xa>
 8009556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009558:	07d0      	lsls	r0, r2, #31
 800955a:	d404      	bmi.n	8009566 <_fflush_r+0x32>
 800955c:	0599      	lsls	r1, r3, #22
 800955e:	d402      	bmi.n	8009566 <_fflush_r+0x32>
 8009560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009562:	f7ff fa32 	bl	80089ca <__retarget_lock_acquire_recursive>
 8009566:	4628      	mov	r0, r5
 8009568:	4621      	mov	r1, r4
 800956a:	f7ff ff5f 	bl	800942c <__sflush_r>
 800956e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009570:	07da      	lsls	r2, r3, #31
 8009572:	4605      	mov	r5, r0
 8009574:	d4e4      	bmi.n	8009540 <_fflush_r+0xc>
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	059b      	lsls	r3, r3, #22
 800957a:	d4e1      	bmi.n	8009540 <_fflush_r+0xc>
 800957c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800957e:	f7ff fa25 	bl	80089cc <__retarget_lock_release_recursive>
 8009582:	e7dd      	b.n	8009540 <_fflush_r+0xc>

08009584 <__swhatbuf_r>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	460c      	mov	r4, r1
 8009588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958c:	2900      	cmp	r1, #0
 800958e:	b096      	sub	sp, #88	@ 0x58
 8009590:	4615      	mov	r5, r2
 8009592:	461e      	mov	r6, r3
 8009594:	da0d      	bge.n	80095b2 <__swhatbuf_r+0x2e>
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800959c:	f04f 0100 	mov.w	r1, #0
 80095a0:	bf14      	ite	ne
 80095a2:	2340      	movne	r3, #64	@ 0x40
 80095a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095a8:	2000      	movs	r0, #0
 80095aa:	6031      	str	r1, [r6, #0]
 80095ac:	602b      	str	r3, [r5, #0]
 80095ae:	b016      	add	sp, #88	@ 0x58
 80095b0:	bd70      	pop	{r4, r5, r6, pc}
 80095b2:	466a      	mov	r2, sp
 80095b4:	f000 f862 	bl	800967c <_fstat_r>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	dbec      	blt.n	8009596 <__swhatbuf_r+0x12>
 80095bc:	9901      	ldr	r1, [sp, #4]
 80095be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80095c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095c6:	4259      	negs	r1, r3
 80095c8:	4159      	adcs	r1, r3
 80095ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095ce:	e7eb      	b.n	80095a8 <__swhatbuf_r+0x24>

080095d0 <__smakebuf_r>:
 80095d0:	898b      	ldrh	r3, [r1, #12]
 80095d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095d4:	079d      	lsls	r5, r3, #30
 80095d6:	4606      	mov	r6, r0
 80095d8:	460c      	mov	r4, r1
 80095da:	d507      	bpl.n	80095ec <__smakebuf_r+0x1c>
 80095dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	6123      	str	r3, [r4, #16]
 80095e4:	2301      	movs	r3, #1
 80095e6:	6163      	str	r3, [r4, #20]
 80095e8:	b003      	add	sp, #12
 80095ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ec:	ab01      	add	r3, sp, #4
 80095ee:	466a      	mov	r2, sp
 80095f0:	f7ff ffc8 	bl	8009584 <__swhatbuf_r>
 80095f4:	9f00      	ldr	r7, [sp, #0]
 80095f6:	4605      	mov	r5, r0
 80095f8:	4639      	mov	r1, r7
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7ff fa62 	bl	8008ac4 <_malloc_r>
 8009600:	b948      	cbnz	r0, 8009616 <__smakebuf_r+0x46>
 8009602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009606:	059a      	lsls	r2, r3, #22
 8009608:	d4ee      	bmi.n	80095e8 <__smakebuf_r+0x18>
 800960a:	f023 0303 	bic.w	r3, r3, #3
 800960e:	f043 0302 	orr.w	r3, r3, #2
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	e7e2      	b.n	80095dc <__smakebuf_r+0xc>
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	6020      	str	r0, [r4, #0]
 800961a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	9b01      	ldr	r3, [sp, #4]
 8009622:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009626:	b15b      	cbz	r3, 8009640 <__smakebuf_r+0x70>
 8009628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800962c:	4630      	mov	r0, r6
 800962e:	f000 f837 	bl	80096a0 <_isatty_r>
 8009632:	b128      	cbz	r0, 8009640 <__smakebuf_r+0x70>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f023 0303 	bic.w	r3, r3, #3
 800963a:	f043 0301 	orr.w	r3, r3, #1
 800963e:	81a3      	strh	r3, [r4, #12]
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	431d      	orrs	r5, r3
 8009644:	81a5      	strh	r5, [r4, #12]
 8009646:	e7cf      	b.n	80095e8 <__smakebuf_r+0x18>

08009648 <memmove>:
 8009648:	4288      	cmp	r0, r1
 800964a:	b510      	push	{r4, lr}
 800964c:	eb01 0402 	add.w	r4, r1, r2
 8009650:	d902      	bls.n	8009658 <memmove+0x10>
 8009652:	4284      	cmp	r4, r0
 8009654:	4623      	mov	r3, r4
 8009656:	d807      	bhi.n	8009668 <memmove+0x20>
 8009658:	1e43      	subs	r3, r0, #1
 800965a:	42a1      	cmp	r1, r4
 800965c:	d008      	beq.n	8009670 <memmove+0x28>
 800965e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009666:	e7f8      	b.n	800965a <memmove+0x12>
 8009668:	4402      	add	r2, r0
 800966a:	4601      	mov	r1, r0
 800966c:	428a      	cmp	r2, r1
 800966e:	d100      	bne.n	8009672 <memmove+0x2a>
 8009670:	bd10      	pop	{r4, pc}
 8009672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800967a:	e7f7      	b.n	800966c <memmove+0x24>

0800967c <_fstat_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d07      	ldr	r5, [pc, #28]	@ (800969c <_fstat_r+0x20>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	4611      	mov	r1, r2
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f7f8 fe28 	bl	80022de <_fstat>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	d102      	bne.n	8009698 <_fstat_r+0x1c>
 8009692:	682b      	ldr	r3, [r5, #0]
 8009694:	b103      	cbz	r3, 8009698 <_fstat_r+0x1c>
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	bd38      	pop	{r3, r4, r5, pc}
 800969a:	bf00      	nop
 800969c:	20013da4 	.word	0x20013da4

080096a0 <_isatty_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d06      	ldr	r5, [pc, #24]	@ (80096bc <_isatty_r+0x1c>)
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	602b      	str	r3, [r5, #0]
 80096ac:	f7f8 fe27 	bl	80022fe <_isatty>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_isatty_r+0x1a>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_isatty_r+0x1a>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	20013da4 	.word	0x20013da4

080096c0 <_sbrk_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d06      	ldr	r5, [pc, #24]	@ (80096dc <_sbrk_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f000 f83e 	bl	800974c <_sbrk>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_sbrk_r+0x1a>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_sbrk_r+0x1a>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20013da4 	.word	0x20013da4

080096e0 <_realloc_r>:
 80096e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e4:	4680      	mov	r8, r0
 80096e6:	4615      	mov	r5, r2
 80096e8:	460c      	mov	r4, r1
 80096ea:	b921      	cbnz	r1, 80096f6 <_realloc_r+0x16>
 80096ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096f0:	4611      	mov	r1, r2
 80096f2:	f7ff b9e7 	b.w	8008ac4 <_malloc_r>
 80096f6:	b92a      	cbnz	r2, 8009704 <_realloc_r+0x24>
 80096f8:	f7ff f978 	bl	80089ec <_free_r>
 80096fc:	2400      	movs	r4, #0
 80096fe:	4620      	mov	r0, r4
 8009700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009704:	f000 f81a 	bl	800973c <_malloc_usable_size_r>
 8009708:	4285      	cmp	r5, r0
 800970a:	4606      	mov	r6, r0
 800970c:	d802      	bhi.n	8009714 <_realloc_r+0x34>
 800970e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009712:	d8f4      	bhi.n	80096fe <_realloc_r+0x1e>
 8009714:	4629      	mov	r1, r5
 8009716:	4640      	mov	r0, r8
 8009718:	f7ff f9d4 	bl	8008ac4 <_malloc_r>
 800971c:	4607      	mov	r7, r0
 800971e:	2800      	cmp	r0, #0
 8009720:	d0ec      	beq.n	80096fc <_realloc_r+0x1c>
 8009722:	42b5      	cmp	r5, r6
 8009724:	462a      	mov	r2, r5
 8009726:	4621      	mov	r1, r4
 8009728:	bf28      	it	cs
 800972a:	4632      	movcs	r2, r6
 800972c:	f7ff f94f 	bl	80089ce <memcpy>
 8009730:	4621      	mov	r1, r4
 8009732:	4640      	mov	r0, r8
 8009734:	f7ff f95a 	bl	80089ec <_free_r>
 8009738:	463c      	mov	r4, r7
 800973a:	e7e0      	b.n	80096fe <_realloc_r+0x1e>

0800973c <_malloc_usable_size_r>:
 800973c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009740:	1f18      	subs	r0, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	bfbc      	itt	lt
 8009746:	580b      	ldrlt	r3, [r1, r0]
 8009748:	18c0      	addlt	r0, r0, r3
 800974a:	4770      	bx	lr

0800974c <_sbrk>:
 800974c:	4a04      	ldr	r2, [pc, #16]	@ (8009760 <_sbrk+0x14>)
 800974e:	6811      	ldr	r1, [r2, #0]
 8009750:	4603      	mov	r3, r0
 8009752:	b909      	cbnz	r1, 8009758 <_sbrk+0xc>
 8009754:	4903      	ldr	r1, [pc, #12]	@ (8009764 <_sbrk+0x18>)
 8009756:	6011      	str	r1, [r2, #0]
 8009758:	6810      	ldr	r0, [r2, #0]
 800975a:	4403      	add	r3, r0
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	4770      	bx	lr
 8009760:	20013db4 	.word	0x20013db4
 8009764:	20013db8 	.word	0x20013db8

08009768 <_init>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	bf00      	nop
 800976c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976e:	bc08      	pop	{r3}
 8009770:	469e      	mov	lr, r3
 8009772:	4770      	bx	lr

08009774 <_fini>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	bf00      	nop
 8009778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977a:	bc08      	pop	{r3}
 800977c:	469e      	mov	lr, r3
 800977e:	4770      	bx	lr


SIM800MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008980  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009178  08009178  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  08009178  08009178  0000a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009180  08009180  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009180  08009180  0000a180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009184  08009184  0000a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009188  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013c3c  20000070  080091f8  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013cac  080091f8  0000bcac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017273  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb2  00000000  00000000  00022313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  000262c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001048  00000000  00000000  000277c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025409  00000000  00000000  00028810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3f2  00000000  00000000  0004dc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc5dd  00000000  00000000  0006800b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001445e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe0  00000000  00000000  0014462c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014a60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b38 	.word	0x08008b38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008b38 	.word	0x08008b38

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	int len = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7a1b      	ldrb	r3, [r3, #8]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d102      	bne.n	80005ca <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80005c4:	230c      	movs	r3, #12
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e005      	b.n	80005d6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	d101      	bne.n	80005d6 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80005d2:	230a      	movs	r3, #10
 80005d4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	330c      	adds	r3, #12
 80005da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005de:	f000 fb5e 	bl	8000c9e <MQTTstrlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	3302      	adds	r3, #2
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7edb      	ldrb	r3, [r3, #27]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3324      	adds	r3, #36	@ 0x24
 80005f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005fc:	f000 fb4f 	bl	8000c9e <MQTTstrlen>
 8000600:	4603      	mov	r3, r0
 8000602:	1c9c      	adds	r4, r3, #2
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3330      	adds	r3, #48	@ 0x30
 8000608:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800060c:	f000 fb47 	bl	8000c9e <MQTTstrlen>
 8000610:	4603      	mov	r3, r0
 8000612:	4423      	add	r3, r4
 8000614:	3302      	adds	r3, #2
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	2b00      	cmp	r3, #0
 8000622:	d103      	bne.n	800062c <MQTTSerialize_connectLength+0x7c>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000628:	2b00      	cmp	r3, #0
 800062a:	d00a      	beq.n	8000642 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3340      	adds	r3, #64	@ 0x40
 8000630:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000634:	f000 fb33 	bl	8000c9e <MQTTstrlen>
 8000638:	4603      	mov	r3, r0
 800063a:	3302      	adds	r3, #2
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	2b00      	cmp	r3, #0
 8000648:	d103      	bne.n	8000652 <MQTTSerialize_connectLength+0xa2>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800064e:	2b00      	cmp	r3, #0
 8000650:	d00a      	beq.n	8000668 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	334c      	adds	r3, #76	@ 0x4c
 8000656:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800065a:	f000 fb20 	bl	8000c9e <MQTTstrlen>
 800065e:	4603      	mov	r3, r0
 8000660:	3302      	adds	r3, #2
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000668:	68fb      	ldr	r3, [r7, #12]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bd90      	pop	{r4, r7, pc}
	...

08000674 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff8a 	bl	80005b0 <MQTTSerialize_connectLength>
 800069c:	6238      	str	r0, [r7, #32]
 800069e:	6a38      	ldr	r0, [r7, #32]
 80006a0:	f000 f9b2 	bl	8000a08 <MQTTPacket_len>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	4293      	cmp	r3, r2
 80006aa:	da03      	bge.n	80006b4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80006ac:	f06f 0301 	mvn.w	r3, #1
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 80006b2:	e0c2      	b.n	800083a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80006b8:	7e3b      	ldrb	r3, [r7, #24]
 80006ba:	2201      	movs	r2, #1
 80006bc:	f362 1307 	bfi	r3, r2, #4, #4
 80006c0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80006c2:	7e3a      	ldrb	r2, [r7, #24]
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fa2b 	bl	8000b26 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	6a39      	ldr	r1, [r7, #32]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f92b 	bl	8000930 <MQTTPacket_encode>
 80006da:	4602      	mov	r2, r0
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	4413      	add	r3, r2
 80006e0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	7a1b      	ldrb	r3, [r3, #8]
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d10c      	bne.n	8000704 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4955      	ldr	r1, [pc, #340]	@ (8000844 <MQTTSerialize_connect+0x1d0>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fa56 	bl	8000ba2 <writeCString>
		writeChar(&ptr, (char) 4);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2104      	movs	r1, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fa12 	bl	8000b26 <writeChar>
 8000702:	e00b      	b.n	800071c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	494f      	ldr	r1, [pc, #316]	@ (8000848 <MQTTSerialize_connect+0x1d4>)
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fa49 	bl	8000ba2 <writeCString>
		writeChar(&ptr, (char) 3);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	2103      	movs	r1, #3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fa05 	bl	8000b26 <writeChar>
	}

	flags.all = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7e9b      	ldrb	r3, [r3, #26]
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	7d3b      	ldrb	r3, [r7, #20]
 800072c:	f362 0341 	bfi	r3, r2, #1, #1
 8000730:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7edb      	ldrb	r3, [r3, #27]
 8000736:	2b00      	cmp	r3, #0
 8000738:	bf14      	ite	ne
 800073a:	2301      	movne	r3, #1
 800073c:	2300      	moveq	r3, #0
 800073e:	b2da      	uxtb	r2, r3
 8000740:	7d3b      	ldrb	r3, [r7, #20]
 8000742:	f362 0382 	bfi	r3, r2, #2, #1
 8000746:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000748:	7d3b      	ldrb	r3, [r7, #20]
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d013      	beq.n	800077c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800075a:	f003 0303 	and.w	r3, r3, #3
 800075e:	b2da      	uxtb	r2, r3
 8000760:	7d3b      	ldrb	r3, [r7, #20]
 8000762:	f362 03c4 	bfi	r3, r2, #3, #2
 8000766:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	7d3b      	ldrb	r3, [r7, #20]
 8000776:	f362 1345 	bfi	r3, r2, #5, #1
 800077a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	2b00      	cmp	r3, #0
 8000782:	d103      	bne.n	800078c <MQTTSerialize_connect+0x118>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800078c:	7d3b      	ldrb	r3, [r7, #20]
 800078e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000792:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000798:	2b00      	cmp	r3, #0
 800079a:	d103      	bne.n	80007a4 <MQTTSerialize_connect+0x130>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d003      	beq.n	80007ac <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80007a4:	7d3b      	ldrb	r3, [r7, #20]
 80007a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007aa:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80007ac:	7d3a      	ldrb	r2, [r7, #20]
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f9b6 	bl	8000b26 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	8b1b      	ldrh	r3, [r3, #24]
 80007be:	461a      	mov	r2, r3
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f9c2 	bl	8000b50 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f107 001c 	add.w	r0, r7, #28
 80007d2:	330c      	adds	r3, #12
 80007d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007d6:	f000 fa03 	bl	8000be0 <writeMQTTString>
	if (options->willFlag)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7edb      	ldrb	r3, [r3, #27]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00d      	beq.n	80007fe <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f107 001c 	add.w	r0, r7, #28
 80007e8:	3324      	adds	r3, #36	@ 0x24
 80007ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007ec:	f000 f9f8 	bl	8000be0 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f107 001c 	add.w	r0, r7, #28
 80007f6:	3330      	adds	r3, #48	@ 0x30
 80007f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007fa:	f000 f9f1 	bl	8000be0 <writeMQTTString>
	}
	if (flags.bits.username)
 80007fe:	7d3b      	ldrb	r3, [r7, #20]
 8000800:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f107 001c 	add.w	r0, r7, #28
 8000810:	3340      	adds	r3, #64	@ 0x40
 8000812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000814:	f000 f9e4 	bl	8000be0 <writeMQTTString>
	if (flags.bits.password)
 8000818:	7d3b      	ldrb	r3, [r7, #20]
 800081a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d006      	beq.n	8000832 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f107 001c 	add.w	r0, r7, #28
 800082a:	334c      	adds	r3, #76	@ 0x4c
 800082c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800082e:	f000 f9d7 	bl	8000be0 <writeMQTTString>

	rc = ptr - buf;
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800083a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800083c:	4618      	mov	r0, r3
 800083e:	3728      	adds	r7, #40	@ 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08008b50 	.word	0x08008b50
 8000848:	08008b58 	.word	0x08008b58

0800084c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800085e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000860:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f943 	bl	8000afe <readChar>
 8000878:	4603      	mov	r3, r0
 800087a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800087c:	7f3b      	ldrb	r3, [r7, #28]
 800087e:	f023 030f 	bic.w	r3, r3, #15
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b30      	cmp	r3, #48	@ 0x30
 8000886:	d14b      	bne.n	8000920 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8000888:	7f3b      	ldrb	r3, [r7, #28]
 800088a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8000896:	7f3b      	ldrb	r3, [r7, #28]
 8000898:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80008a4:	7f3b      	ldrb	r3, [r7, #28]
 80008a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	f107 0214 	add.w	r2, r7, #20
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f8ee 	bl	8000a9c <MQTTPacket_decodeBuf>
 80008c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80008c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	4413      	add	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	4413      	add	r3, r2
 80008d0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	6a3a      	ldr	r2, [r7, #32]
 80008d8:	4619      	mov	r1, r3
 80008da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008dc:	f000 f9ae 	bl	8000c3c <readMQTTLenString>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d01e      	beq.n	8000924 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	6a3a      	ldr	r2, [r7, #32]
 80008ea:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db19      	blt.n	8000924 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dd08      	ble.n	800090a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f8e3 	bl	8000ac8 <readInt>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	6a3a      	ldr	r2, [r7, #32]
 800090e:	1ad2      	subs	r2, r2, r3
 8000910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000912:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000918:	601a      	str	r2, [r3, #0]
	rc = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
 800091e:	e002      	b.n	8000926 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000920:	bf00      	nop
 8000922:	e000      	b.n	8000926 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000924:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000928:	4618      	mov	r0, r3
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	425a      	negs	r2, r3
 8000942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000946:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800094a:	bf58      	it	pl
 800094c:	4253      	negpl	r3, r2
 800094e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	da00      	bge.n	8000958 <MQTTPacket_encode+0x28>
 8000956:	337f      	adds	r3, #127	@ 0x7f
 8000958:	11db      	asrs	r3, r3, #7
 800095a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	dd03      	ble.n	800096a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000968:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	60fa      	str	r2, [r7, #12]
 8000970:	461a      	mov	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	7afa      	ldrb	r2, [r7, #11]
 8000978:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	dcde      	bgt.n	800093e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000980:	68fb      	ldr	r3, [r7, #12]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	3301      	adds	r3, #1
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	dd03      	ble.n	80009c0 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	60fb      	str	r3, [r7, #12]
			goto exit;
 80009be:	e01d      	b.n	80009fc <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80009c0:	f107 020b 	add.w	r2, r7, #11
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2101      	movs	r1, #1
 80009c8:	4610      	mov	r0, r2
 80009ca:	4798      	blx	r3
 80009cc:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d112      	bne.n	80009fa <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	7afb      	ldrb	r3, [r7, #11]
 80009da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009de:	6979      	ldr	r1, [r7, #20]
 80009e0:	fb01 f303 	mul.w	r3, r1, r3
 80009e4:	441a      	add	r2, r3
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	01db      	lsls	r3, r3, #7
 80009ee:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	dbd6      	blt.n	80009a6 <MQTTPacket_decode+0x18>
exit:
 80009f8:	e000      	b.n	80009fc <MQTTPacket_decode+0x6e>
			goto exit;
 80009fa:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 80009fc:	693b      	ldr	r3, [r7, #16]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3301      	adds	r3, #1
 8000a14:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a1a:	dc03      	bgt.n	8000a24 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	e012      	b.n	8000a4a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a2a:	da03      	bge.n	8000a34 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3302      	adds	r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	e00a      	b.n	8000a4a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <MQTTPacket_len+0x50>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	dc03      	bgt.n	8000a44 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3303      	adds	r3, #3
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e002      	b.n	8000a4a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3304      	adds	r3, #4
 8000a48:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000a4a:	687b      	ldr	r3, [r7, #4]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	001ffffe 	.word	0x001ffffe

08000a5c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e00a      	b.n	8000a82 <bufchar+0x26>
		*c = *bufptr++;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <bufchar+0x3c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	4909      	ldr	r1, [pc, #36]	@ (8000a98 <bufchar+0x3c>)
 8000a74:	600a      	str	r2, [r1, #0]
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dbf0      	blt.n	8000a6c <bufchar+0x10>
	return count;
 8000a8a:	683b      	ldr	r3, [r7, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	2000008c 	.word	0x2000008c

08000a9c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000aa6:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <MQTTPacket_decodeBuf+0x24>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000aac:	6839      	ldr	r1, [r7, #0]
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MQTTPacket_decodeBuf+0x28>)
 8000ab0:	f7ff ff6d 	bl	800098e <MQTTPacket_decode>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000008c 	.word	0x2000008c
 8000ac4:	08000a5d 	.word	0x08000a5d

08000ac8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	3201      	adds	r2, #1
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	1c9a      	adds	r2, r3, #2
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	601a      	str	r2, [r3, #0]
	return len;
 8000af0:	68bb      	ldr	r3, [r7, #8]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b085      	sub	sp, #20
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	601a      	str	r2, [r3, #0]
	return c;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	78fa      	ldrb	r2, [r7, #3]
 8000b38:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da00      	bge.n	8000b62 <writeInt+0x12>
 8000b60:	33ff      	adds	r3, #255	@ 0xff
 8000b62:	121b      	asrs	r3, r3, #8
 8000b64:	461a      	mov	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	425a      	negs	r2, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	bf58      	it	pl
 8000b82:	4253      	negpl	r3, r2
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000bac:	6838      	ldr	r0, [r7, #0]
 8000bae:	f7ff fb2f 	bl	8000210 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffc9 	bl	8000b50 <writeInt>
	memcpy(*pptr, string, len);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	6839      	ldr	r1, [r7, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 f8e9 	bl	8007d9e <memcpy>
	*pptr += len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	441a      	add	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	601a      	str	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	4638      	mov	r0, r7
 8000bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	dd12      	ble.n	8000c1a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff ffa9 	bl	8000b50 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68b9      	ldr	r1, [r7, #8]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f007 f8c9 	bl	8007d9e <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	441a      	add	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000c18:	e00c      	b.n	8000c34 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d005      	beq.n	8000c2c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f7ff ffbc 	bl	8000ba2 <writeCString>
}
 8000c2a:	e003      	b.n	8000c34 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff ff8e 	bl	8000b50 <writeInt>
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	dd1a      	ble.n	8000c8e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000c58:	68b8      	ldr	r0, [r7, #8]
 8000c5a:	f7ff ff35 	bl	8000ac8 <readInt>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6852      	ldr	r2, [r2, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d30c      	bcc.n	8000c8e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	6852      	ldr	r2, [r2, #4]
 8000c84:	441a      	add	r2, r3
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	601a      	str	r2, [r3, #0]
			rc = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8000c94:	697b      	ldr	r3, [r7, #20]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff faaa 	bl	8000210 <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e001      	b.n	8000cc6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	617b      	str	r3, [r7, #20]
	return rc;
 8000cc6:	697b      	ldr	r3, [r7, #20]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	4638      	mov	r0, r7
 8000cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ce8:	f7ff ffd9 	bl	8000c9e <MQTTstrlen>
 8000cec:	4603      	mov	r3, r0
 8000cee:	1c9a      	adds	r2, r3, #2
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd02      	ble.n	8000d06 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3302      	adds	r3, #2
 8000d04:	617b      	str	r3, [r7, #20]
	return len;
 8000d06:	697b      	ldr	r3, [r7, #20]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d3a:	6838      	ldr	r0, [r7, #0]
 8000d3c:	f7ff ffc8 	bl	8000cd0 <MQTTSerialize_publishLength>
 8000d40:	61b8      	str	r0, [r7, #24]
 8000d42:	69b8      	ldr	r0, [r7, #24]
 8000d44:	f7ff fe60 	bl	8000a08 <MQTTPacket_len>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	da03      	bge.n	8000d58 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000d50:	f06f 0301 	mvn.w	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
		goto exit;
 8000d56:	e04c      	b.n	8000df2 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8000d58:	7c3b      	ldrb	r3, [r7, #16]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	f362 1307 	bfi	r3, r2, #4, #4
 8000d60:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	7c3b      	ldrb	r3, [r7, #16]
 8000d6c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000d70:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	7c3b      	ldrb	r3, [r7, #16]
 8000d7c:	f362 0342 	bfi	r3, r2, #1, #2
 8000d80:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8000d82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	7c3b      	ldrb	r3, [r7, #16]
 8000d8e:	f362 0300 	bfi	r3, r2, #0, #1
 8000d92:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8000d94:	7c3a      	ldrb	r2, [r7, #16]
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fec2 	bl	8000b26 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	69b9      	ldr	r1, [r7, #24]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fdc2 	bl	8000930 <MQTTPacket_encode>
 8000dac:	4602      	mov	r2, r0
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	4413      	add	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8000db4:	f107 0014 	add.w	r0, r7, #20
 8000db8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dbe:	f7ff ff0f 	bl	8000be0 <writeMQTTString>

	if (qos > 0)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dd06      	ble.n	8000dd6 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8000dc8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff febd 	bl	8000b50 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000dda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f006 ffde 	bl	8007d9e <memcpy>
	ptr += payloadlen;
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000de6:	4413      	add	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000df2:	69fb      	ldr	r3, [r7, #28]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8000e00:	4b50      	ldr	r3, [pc, #320]	@ (8000f44 <Sim800_RxCallBack+0x148>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	b291      	uxth	r1, r2
 8000e08:	4a4e      	ldr	r2, [pc, #312]	@ (8000f44 <Sim800_RxCallBack+0x148>)
 8000e0a:	8011      	strh	r1, [r2, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f48 <Sim800_RxCallBack+0x14c>)
 8000e10:	7819      	ldrb	r1, [r3, #0]
 8000e12:	4b4e      	ldr	r3, [pc, #312]	@ (8000f4c <Sim800_RxCallBack+0x150>)
 8000e14:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 8000e16:	4b4e      	ldr	r3, [pc, #312]	@ (8000f50 <Sim800_RxCallBack+0x154>)
 8000e18:	7c9b      	ldrb	r3, [r3, #18]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d135      	bne.n	8000e8a <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 8000e1e:	494d      	ldr	r1, [pc, #308]	@ (8000f54 <Sim800_RxCallBack+0x158>)
 8000e20:	484a      	ldr	r0, [pc, #296]	@ (8000f4c <Sim800_RxCallBack+0x150>)
 8000e22:	f006 ff38 	bl	8007c96 <strstr>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <Sim800_RxCallBack+0x40>
 8000e2c:	4b45      	ldr	r3, [pc, #276]	@ (8000f44 <Sim800_RxCallBack+0x148>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d103      	bne.n	8000e3c <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 8000e34:	4b43      	ldr	r3, [pc, #268]	@ (8000f44 <Sim800_RxCallBack+0x148>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	801a      	strh	r2, [r3, #0]
 8000e3a:	e026      	b.n	8000e8a <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 8000e3c:	4945      	ldr	r1, [pc, #276]	@ (8000f54 <Sim800_RxCallBack+0x158>)
 8000e3e:	4843      	ldr	r0, [pc, #268]	@ (8000f4c <Sim800_RxCallBack+0x150>)
 8000e40:	f006 ff29 	bl	8007c96 <strstr>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d01f      	beq.n	8000e8a <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8000e4a:	4a43      	ldr	r2, [pc, #268]	@ (8000f58 <Sim800_RxCallBack+0x15c>)
 8000e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f4c <Sim800_RxCallBack+0x150>)
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8000e56:	461a      	mov	r2, r3
 8000e58:	f006 ffa1 	bl	8007d9e <memcpy>
            clearRxBuffer();
 8000e5c:	f000 f88e 	bl	8000f7c <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8000e60:	493e      	ldr	r1, [pc, #248]	@ (8000f5c <Sim800_RxCallBack+0x160>)
 8000e62:	483d      	ldr	r0, [pc, #244]	@ (8000f58 <Sim800_RxCallBack+0x15c>)
 8000e64:	f006 ff17 	bl	8007c96 <strstr>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 8000e6e:	4b38      	ldr	r3, [pc, #224]	@ (8000f50 <Sim800_RxCallBack+0x154>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	749a      	strb	r2, [r3, #18]
 8000e74:	e009      	b.n	8000e8a <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8000e76:	493a      	ldr	r1, [pc, #232]	@ (8000f60 <Sim800_RxCallBack+0x164>)
 8000e78:	4837      	ldr	r0, [pc, #220]	@ (8000f58 <Sim800_RxCallBack+0x15c>)
 8000e7a:	f006 ff0c 	bl	8007c96 <strstr>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 8000e84:	4b32      	ldr	r3, [pc, #200]	@ (8000f50 <Sim800_RxCallBack+0x154>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 8000e8a:	4936      	ldr	r1, [pc, #216]	@ (8000f64 <Sim800_RxCallBack+0x168>)
 8000e8c:	482f      	ldr	r0, [pc, #188]	@ (8000f4c <Sim800_RxCallBack+0x150>)
 8000e8e:	f006 ff02 	bl	8007c96 <strstr>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10d      	bne.n	8000eb4 <Sim800_RxCallBack+0xb8>
 8000e98:	4933      	ldr	r1, [pc, #204]	@ (8000f68 <Sim800_RxCallBack+0x16c>)
 8000e9a:	482c      	ldr	r0, [pc, #176]	@ (8000f4c <Sim800_RxCallBack+0x150>)
 8000e9c:	f006 fefb 	bl	8007c96 <strstr>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d106      	bne.n	8000eb4 <Sim800_RxCallBack+0xb8>
 8000ea6:	4931      	ldr	r1, [pc, #196]	@ (8000f6c <Sim800_RxCallBack+0x170>)
 8000ea8:	4828      	ldr	r0, [pc, #160]	@ (8000f4c <Sim800_RxCallBack+0x150>)
 8000eaa:	f006 fef4 	bl	8007c96 <strstr>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 8000eb4:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <Sim800_RxCallBack+0x154>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 8000eba:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <Sim800_RxCallBack+0x154>)
 8000ebc:	7c9b      	ldrb	r3, [r3, #18]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d106      	bne.n	8000ed0 <Sim800_RxCallBack+0xd4>
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <Sim800_RxCallBack+0x14c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b30      	cmp	r3, #48	@ 0x30
 8000ec8:	d102      	bne.n	8000ed0 <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <Sim800_RxCallBack+0x174>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <Sim800_RxCallBack+0x174>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d124      	bne.n	8000f22 <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <Sim800_RxCallBack+0x178>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	b291      	uxth	r1, r2
 8000ee0:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <Sim800_RxCallBack+0x178>)
 8000ee2:	8011      	strh	r1, [r2, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <Sim800_RxCallBack+0x14c>)
 8000ee8:	7819      	ldrb	r1, [r3, #0]
 8000eea:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <Sim800_RxCallBack+0x15c>)
 8000eec:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <Sim800_RxCallBack+0x178>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d90d      	bls.n	8000f12 <Sim800_RxCallBack+0x116>
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <Sim800_RxCallBack+0x178>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	4a16      	ldr	r2, [pc, #88]	@ (8000f58 <Sim800_RxCallBack+0x15c>)
 8000efe:	7852      	ldrb	r2, [r2, #1]
 8000f00:	4293      	cmp	r3, r2
 8000f02:	dd06      	ble.n	8000f12 <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 8000f04:	4814      	ldr	r0, [pc, #80]	@ (8000f58 <Sim800_RxCallBack+0x15c>)
 8000f06:	f000 fb25 	bl	8001554 <MQTT_Receive>
            clearRxBuffer();
 8000f0a:	f000 f837 	bl	8000f7c <clearRxBuffer>
            clearMqttBuffer();
 8000f0e:	f000 f847 	bl	8000fa0 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <Sim800_RxCallBack+0x178>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d901      	bls.n	8000f22 <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 8000f1e:	f000 f83f 	bl	8000fa0 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <Sim800_RxCallBack+0x148>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d903      	bls.n	8000f36 <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 8000f2e:	f000 f825 	bl	8000f7c <clearRxBuffer>
        clearMqttBuffer();
 8000f32:	f000 f835 	bl	8000fa0 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	4903      	ldr	r1, [pc, #12]	@ (8000f48 <Sim800_RxCallBack+0x14c>)
 8000f3a:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <Sim800_RxCallBack+0x17c>)
 8000f3c:	f002 fe1f 	bl	8003b7e <HAL_UART_Receive_IT>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000648 	.word	0x20000648
 8000f48:	20000090 	.word	0x20000090
 8000f4c:	20000094 	.word	0x20000094
 8000f50:	20000c1c 	.word	0x20000c1c
 8000f54:	08008b60 	.word	0x08008b60
 8000f58:	2000064c 	.word	0x2000064c
 8000f5c:	08008b64 	.word	0x08008b64
 8000f60:	08008b74 	.word	0x08008b74
 8000f64:	08008b80 	.word	0x08008b80
 8000f68:	08008b8c 	.word	0x08008b8c
 8000f6c:	08008b94 	.word	0x08008b94
 8000f70:	2000064a 	.word	0x2000064a
 8000f74:	20000c00 	.word	0x20000c00
 8000f78:	20000d68 	.word	0x20000d68

08000f7c <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <clearRxBuffer+0x1c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000f86:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <clearRxBuffer+0x20>)
 8000f8e:	f006 fe67 	bl	8007c60 <memset>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000648 	.word	0x20000648
 8000f9c:	20000094 	.word	0x20000094

08000fa0 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <clearMqttBuffer+0x20>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <clearMqttBuffer+0x24>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000fb0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <clearMqttBuffer+0x28>)
 8000fb8:	f006 fe52 	bl	8007c60 <memset>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000064a 	.word	0x2000064a
 8000fc4:	20000c00 	.word	0x20000c00
 8000fc8:	2000064c 	.word	0x2000064c

08000fcc <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff f918 	bl	8000210 <strlen>
 8000fe0:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <SIM800_SendCommand+0x50>)
 8000fea:	f002 fd92 	bl	8003b12 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 f91f 	bl	8002234 <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	4809      	ldr	r0, [pc, #36]	@ (8001020 <SIM800_SendCommand+0x54>)
 8000ffa:	f006 fe4c 	bl	8007c96 <strstr>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <SIM800_SendCommand+0x40>
    {
        clearRxBuffer();
 8001004:	f7ff ffba 	bl	8000f7c <clearRxBuffer>
        return 0;
 8001008:	2300      	movs	r3, #0
 800100a:	e002      	b.n	8001012 <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 800100c:	f7ff ffb6 	bl	8000f7c <clearRxBuffer>
    return 1;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000d68 	.word	0x20000d68
 8001020:	2000064c 	.word	0x2000064c

08001024 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 800102a:	4b5e      	ldr	r3, [pc, #376]	@ (80011a4 <MQTT_Init+0x180>)
 800102c:	2200      	movs	r2, #0
 800102e:	749a      	strb	r2, [r3, #18]
    int error = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
    char str[32] = {0};
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	4956      	ldr	r1, [pc, #344]	@ (80011a8 <MQTT_Init+0x184>)
 8001050:	4856      	ldr	r0, [pc, #344]	@ (80011ac <MQTT_Init+0x188>)
 8001052:	f002 fd94 	bl	8003b7e <HAL_UART_Receive_IT>
    printf("Initializing MQTT...\r\n");
 8001056:	4856      	ldr	r0, [pc, #344]	@ (80011b0 <MQTT_Init+0x18c>)
 8001058:	f006 fcce 	bl	80079f8 <puts>
    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 800105c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001060:	4954      	ldr	r1, [pc, #336]	@ (80011b4 <MQTT_Init+0x190>)
 8001062:	4855      	ldr	r0, [pc, #340]	@ (80011b8 <MQTT_Init+0x194>)
 8001064:	f7ff ffb2 	bl	8000fcc <SIM800_SendCommand>
    printf("AT Command Sent: Checking Module Response\r\n");
 8001068:	4854      	ldr	r0, [pc, #336]	@ (80011bc <MQTT_Init+0x198>)
 800106a:	f006 fcc5 	bl	80079f8 <puts>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 800106e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001072:	4950      	ldr	r1, [pc, #320]	@ (80011b4 <MQTT_Init+0x190>)
 8001074:	4852      	ldr	r0, [pc, #328]	@ (80011c0 <MQTT_Init+0x19c>)
 8001076:	f7ff ffa9 	bl	8000fcc <SIM800_SendCommand>
    printf("Echo Disabled\r\n");
 800107a:	4852      	ldr	r0, [pc, #328]	@ (80011c4 <MQTT_Init+0x1a0>)
 800107c:	f006 fcbc 	bl	80079f8 <puts>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 8001080:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001084:	4950      	ldr	r1, [pc, #320]	@ (80011c8 <MQTT_Init+0x1a4>)
 8001086:	4851      	ldr	r0, [pc, #324]	@ (80011cc <MQTT_Init+0x1a8>)
 8001088:	f7ff ffa0 	bl	8000fcc <SIM800_SendCommand>
 800108c:	4602      	mov	r2, r0
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	4413      	add	r3, r2
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Shutting Down Previous Connections... %s\r\n", (error == 0) ? "Success" : "Failed");
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <MQTT_Init+0x7a>
 800109a:	4b4d      	ldr	r3, [pc, #308]	@ (80011d0 <MQTT_Init+0x1ac>)
 800109c:	e000      	b.n	80010a0 <MQTT_Init+0x7c>
 800109e:	4b4d      	ldr	r3, [pc, #308]	@ (80011d4 <MQTT_Init+0x1b0>)
 80010a0:	4619      	mov	r1, r3
 80010a2:	484d      	ldr	r0, [pc, #308]	@ (80011d8 <MQTT_Init+0x1b4>)
 80010a4:	f006 fc40 	bl	8007928 <iprintf>
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 80010a8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010ac:	4941      	ldr	r1, [pc, #260]	@ (80011b4 <MQTT_Init+0x190>)
 80010ae:	484b      	ldr	r0, [pc, #300]	@ (80011dc <MQTT_Init+0x1b8>)
 80010b0:	f7ff ff8c 	bl	8000fcc <SIM800_SendCommand>
 80010b4:	4602      	mov	r2, r0
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	4413      	add	r3, r2
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("GPRS Attach... %s\r\n", (error == 0) ? "Success" : "Failed");
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <MQTT_Init+0xa2>
 80010c2:	4b43      	ldr	r3, [pc, #268]	@ (80011d0 <MQTT_Init+0x1ac>)
 80010c4:	e000      	b.n	80010c8 <MQTT_Init+0xa4>
 80010c6:	4b43      	ldr	r3, [pc, #268]	@ (80011d4 <MQTT_Init+0x1b0>)
 80010c8:	4619      	mov	r1, r3
 80010ca:	4845      	ldr	r0, [pc, #276]	@ (80011e0 <MQTT_Init+0x1bc>)
 80010cc:	f006 fc2c 	bl	8007928 <iprintf>
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 80010d0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010d4:	4937      	ldr	r1, [pc, #220]	@ (80011b4 <MQTT_Init+0x190>)
 80010d6:	4843      	ldr	r0, [pc, #268]	@ (80011e4 <MQTT_Init+0x1c0>)
 80010d8:	f7ff ff78 	bl	8000fcc <SIM800_SendCommand>
 80010dc:	4602      	mov	r2, r0
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	4413      	add	r3, r2
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Setting TCP/IP Mode... %s\r\n", (error == 0) ? "Success" : "Failed");
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <MQTT_Init+0xca>
 80010ea:	4b39      	ldr	r3, [pc, #228]	@ (80011d0 <MQTT_Init+0x1ac>)
 80010ec:	e000      	b.n	80010f0 <MQTT_Init+0xcc>
 80010ee:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <MQTT_Init+0x1b0>)
 80010f0:	4619      	mov	r1, r3
 80010f2:	483d      	ldr	r0, [pc, #244]	@ (80011e8 <MQTT_Init+0x1c4>)
 80010f4:	f006 fc18 	bl	8007928 <iprintf>
    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 80010f8:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <MQTT_Init+0x180>)
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <MQTT_Init+0x180>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a28      	ldr	r2, [pc, #160]	@ (80011a4 <MQTT_Init+0x180>)
 8001102:	6892      	ldr	r2, [r2, #8]
 8001104:	1d38      	adds	r0, r7, #4
 8001106:	9201      	str	r2, [sp, #4]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	460b      	mov	r3, r1
 800110c:	4a37      	ldr	r2, [pc, #220]	@ (80011ec <MQTT_Init+0x1c8>)
 800110e:	2120      	movs	r1, #32
 8001110:	f006 fc7a 	bl	8007a08 <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800111a:	4926      	ldr	r1, [pc, #152]	@ (80011b4 <MQTT_Init+0x190>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff55 	bl	8000fcc <SIM800_SendCommand>
 8001122:	4602      	mov	r2, r0
 8001124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001126:	4413      	add	r3, r2
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Setting APN: %s... %s\r\n", SIM800.sim.apn, (error == 0) ? "Success" : "Failed");
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MQTT_Init+0x180>)
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <MQTT_Init+0x114>
 8001134:	4b26      	ldr	r3, [pc, #152]	@ (80011d0 <MQTT_Init+0x1ac>)
 8001136:	e000      	b.n	800113a <MQTT_Init+0x116>
 8001138:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <MQTT_Init+0x1b0>)
 800113a:	461a      	mov	r2, r3
 800113c:	482c      	ldr	r0, [pc, #176]	@ (80011f0 <MQTT_Init+0x1cc>)
 800113e:	f006 fbf3 	bl	8007928 <iprintf>
    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 8001142:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001146:	491b      	ldr	r1, [pc, #108]	@ (80011b4 <MQTT_Init+0x190>)
 8001148:	482a      	ldr	r0, [pc, #168]	@ (80011f4 <MQTT_Init+0x1d0>)
 800114a:	f7ff ff3f 	bl	8000fcc <SIM800_SendCommand>
 800114e:	4602      	mov	r2, r0
 8001150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001152:	4413      	add	r3, r2
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("Bringing Up Wireless Connection... %s\r\n", (error == 0) ? "Success" : "Failed");
 8001156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <MQTT_Init+0x13c>
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <MQTT_Init+0x1ac>)
 800115e:	e000      	b.n	8001162 <MQTT_Init+0x13e>
 8001160:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <MQTT_Init+0x1b0>)
 8001162:	4619      	mov	r1, r3
 8001164:	4824      	ldr	r0, [pc, #144]	@ (80011f8 <MQTT_Init+0x1d4>)
 8001166:	f006 fbdf 	bl	8007928 <iprintf>
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 800116a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800116e:	4923      	ldr	r1, [pc, #140]	@ (80011fc <MQTT_Init+0x1d8>)
 8001170:	4823      	ldr	r0, [pc, #140]	@ (8001200 <MQTT_Init+0x1dc>)
 8001172:	f7ff ff2b 	bl	8000fcc <SIM800_SendCommand>
    printf("Retrieving IP Address...\r\n");
 8001176:	4823      	ldr	r0, [pc, #140]	@ (8001204 <MQTT_Init+0x1e0>)
 8001178:	f006 fc3e 	bl	80079f8 <puts>
    if (error == 0)
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <MQTT_Init+0x16c>
    {
    	printf("MQTT Initialization Successful. Connecting to Broker...\r\n");
 8001182:	4821      	ldr	r0, [pc, #132]	@ (8001208 <MQTT_Init+0x1e4>)
 8001184:	f006 fc38 	bl	80079f8 <puts>
        MQTT_Connect();
 8001188:	f000 f842 	bl	8001210 <MQTT_Connect>
        return error;
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	e004      	b.n	800119a <MQTT_Init+0x176>
    }
    else
    {
    	printf("MQTT Initialization Failed! Error Code: %d\r\n", error);
 8001190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001192:	481e      	ldr	r0, [pc, #120]	@ (800120c <MQTT_Init+0x1e8>)
 8001194:	f006 fbc8 	bl	8007928 <iprintf>
        return error;
 8001198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
}
 800119a:	4618      	mov	r0, r3
 800119c:	3728      	adds	r7, #40	@ 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000c1c 	.word	0x20000c1c
 80011a8:	20000090 	.word	0x20000090
 80011ac:	20000d68 	.word	0x20000d68
 80011b0:	08008b9c 	.word	0x08008b9c
 80011b4:	08008bb4 	.word	0x08008bb4
 80011b8:	08008bbc 	.word	0x08008bbc
 80011bc:	08008bc4 	.word	0x08008bc4
 80011c0:	08008bf0 	.word	0x08008bf0
 80011c4:	08008bf8 	.word	0x08008bf8
 80011c8:	08008c08 	.word	0x08008c08
 80011cc:	08008c14 	.word	0x08008c14
 80011d0:	08008c24 	.word	0x08008c24
 80011d4:	08008c2c 	.word	0x08008c2c
 80011d8:	08008c34 	.word	0x08008c34
 80011dc:	08008c60 	.word	0x08008c60
 80011e0:	08008c70 	.word	0x08008c70
 80011e4:	08008c84 	.word	0x08008c84
 80011e8:	08008c94 	.word	0x08008c94
 80011ec:	08008cb0 	.word	0x08008cb0
 80011f0:	08008ccc 	.word	0x08008ccc
 80011f4:	08008ce4 	.word	0x08008ce4
 80011f8:	08008cf0 	.word	0x08008cf0
 80011fc:	08008d18 	.word	0x08008d18
 8001200:	08008d1c 	.word	0x08008d1c
 8001204:	08008d28 	.word	0x08008d28
 8001208:	08008d44 	.word	0x08008d44
 800120c:	08008d80 	.word	0x08008d80

08001210 <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0d8      	sub	sp, #352	@ 0x160
 8001214:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8001216:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <MQTT_Connect+0x180>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    SIM800.mqttServer.connect = 0;
 800121e:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <MQTT_Connect+0x180>)
 8001220:	2200      	movs	r2, #0
 8001222:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800122a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800122e:	227c      	movs	r2, #124	@ 0x7c
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f006 fd14 	bl	8007c60 <memset>
    unsigned char buf[128] = {0};
 8001238:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800123c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	3304      	adds	r3, #4
 8001246:	227c      	movs	r2, #124	@ 0x7c
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f006 fd08 	bl	8007c60 <memset>
    printf("MQTT Connection Starting...\r\n");
 8001250:	4850      	ldr	r0, [pc, #320]	@ (8001394 <MQTT_Connect+0x184>)
 8001252:	f006 fbd1 	bl	80079f8 <puts>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 8001256:	4b4e      	ldr	r3, [pc, #312]	@ (8001390 <MQTT_Connect+0x180>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	4b4d      	ldr	r3, [pc, #308]	@ (8001390 <MQTT_Connect+0x180>)
 800125c:	8a1b      	ldrh	r3, [r3, #16]
 800125e:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8001262:	494d      	ldr	r1, [pc, #308]	@ (8001398 <MQTT_Connect+0x188>)
 8001264:	f006 fc04 	bl	8007a70 <siprintf>
    printf("Sending: %s\r\n", str);
 8001268:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800126c:	4619      	mov	r1, r3
 800126e:	484b      	ldr	r0, [pc, #300]	@ (800139c <MQTT_Connect+0x18c>)
 8001270:	f006 fb5a 	bl	8007928 <iprintf>
    if (SIM800_SendCommand(str, "OK\r\n", CMD_DELAY) != 0)
 8001274:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001278:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800127c:	4948      	ldr	r1, [pc, #288]	@ (80013a0 <MQTT_Connect+0x190>)
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fea4 	bl	8000fcc <SIM800_SendCommand>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <MQTT_Connect+0x82>
	{
		printf("ERROR: TCP Connection Failed!\r\n");
 800128a:	4846      	ldr	r0, [pc, #280]	@ (80013a4 <MQTT_Connect+0x194>)
 800128c:	f006 fbb4 	bl	80079f8 <puts>
 8001290:	e07a      	b.n	8001388 <MQTT_Connect+0x178>
		return;
	}

	printf("TCP Connection Established!\r\n");
 8001292:	4845      	ldr	r0, [pc, #276]	@ (80013a8 <MQTT_Connect+0x198>)
 8001294:	f006 fbb0 	bl	80079f8 <puts>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 8001298:	f241 3088 	movw	r0, #5000	@ 0x1388
 800129c:	f000 ffca 	bl	8002234 <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1)
 80012a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <MQTT_Connect+0x180>)
 80012a2:	7c9b      	ldrb	r3, [r3, #18]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d16f      	bne.n	8001388 <MQTT_Connect+0x178>
    {
    	printf("SIM800 Connected to MQTT Broker!\r\n");
 80012a8:	4840      	ldr	r0, [pc, #256]	@ (80013ac <MQTT_Connect+0x19c>)
 80012aa:	f006 fba5 	bl	80079f8 <puts>
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 80012ae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012b2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012b6:	4a3e      	ldr	r2, [pc, #248]	@ (80013b0 <MQTT_Connect+0x1a0>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	4611      	mov	r1, r2
 80012bc:	2358      	movs	r3, #88	@ 0x58
 80012be:	461a      	mov	r2, r3
 80012c0:	f006 fd6d 	bl	8007d9e <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 80012c4:	4b32      	ldr	r3, [pc, #200]	@ (8001390 <MQTT_Connect+0x180>)
 80012c6:	695a      	ldr	r2, [r3, #20]
 80012c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012cc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012d0:	641a      	str	r2, [r3, #64]	@ 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <MQTT_Connect+0x180>)
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012da:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012de:	64da      	str	r2, [r3, #76]	@ 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <MQTT_Connect+0x180>)
 80012e2:	69da      	ldr	r2, [r3, #28]
 80012e4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012e8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012ec:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <MQTT_Connect+0x180>)
 80012f0:	8c1a      	ldrh	r2, [r3, #32]
 80012f2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012f6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80012fa:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 80012fc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001300:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001304:	2201      	movs	r2, #1
 8001306:	769a      	strb	r2, [r3, #26]

        printf("MQTT Client ID: %s\r\n", datas.clientID.cstring);
 8001308:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800130c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	4619      	mov	r1, r3
 8001314:	4827      	ldr	r0, [pc, #156]	@ (80013b4 <MQTT_Connect+0x1a4>)
 8001316:	f006 fb07 	bl	8007928 <iprintf>
		printf("MQTT Username: %s\r\n", datas.username.cstring);
 800131a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800131e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4619      	mov	r1, r3
 8001326:	4824      	ldr	r0, [pc, #144]	@ (80013b8 <MQTT_Connect+0x1a8>)
 8001328:	f006 fafe 	bl	8007928 <iprintf>
		printf("MQTT Password: %s\r\n", datas.password.cstring);
 800132c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001330:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4619      	mov	r1, r3
 8001338:	4820      	ldr	r0, [pc, #128]	@ (80013bc <MQTT_Connect+0x1ac>)
 800133a:	f006 faf5 	bl	8007928 <iprintf>
		printf("MQTT KeepAlive Interval: %d seconds\r\n", datas.keepAliveInterval);
 800133e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001342:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001346:	8b1b      	ldrh	r3, [r3, #24]
 8001348:	4619      	mov	r1, r3
 800134a:	481d      	ldr	r0, [pc, #116]	@ (80013c0 <MQTT_Connect+0x1b0>)
 800134c:	f006 faec 	bl	8007928 <iprintf>

        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8001350:	1d3a      	adds	r2, r7, #4
 8001352:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001356:	2180      	movs	r1, #128	@ 0x80
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f98b 	bl	8000674 <MQTTSerialize_connect>
 800135e:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001362:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001366:	b29a      	uxth	r2, r3
 8001368:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800136c:	4619      	mov	r1, r3
 800136e:	4815      	ldr	r0, [pc, #84]	@ (80013c4 <MQTT_Connect+0x1b4>)
 8001370:	f002 fbcf 	bl	8003b12 <HAL_UART_Transmit_IT>
        printf("==============================================================================\n\r");
 8001374:	4814      	ldr	r0, [pc, #80]	@ (80013c8 <MQTT_Connect+0x1b8>)
 8001376:	f006 fad7 	bl	8007928 <iprintf>
        printf("MQTT connection Established and ready to Transmit and Receive data!..\n\r");
 800137a:	4814      	ldr	r0, [pc, #80]	@ (80013cc <MQTT_Connect+0x1bc>)
 800137c:	f006 fad4 	bl	8007928 <iprintf>

#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 8001380:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001384:	f000 ff56 	bl	8002234 <HAL_Delay>
#endif
    }
}
 8001388:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000c1c 	.word	0x20000c1c
 8001394:	08008db0 	.word	0x08008db0
 8001398:	08008dd0 	.word	0x08008dd0
 800139c:	08008dec 	.word	0x08008dec
 80013a0:	08008bb4 	.word	0x08008bb4
 80013a4:	08008dfc 	.word	0x08008dfc
 80013a8:	08008e1c 	.word	0x08008e1c
 80013ac:	08008e3c 	.word	0x08008e3c
 80013b0:	08008f64 	.word	0x08008f64
 80013b4:	08008e60 	.word	0x08008e60
 80013b8:	08008e78 	.word	0x08008e78
 80013bc:	08008e8c 	.word	0x08008e8c
 80013c0:	08008ea0 	.word	0x08008ea0
 80013c4:	20000d68 	.word	0x20000d68
 80013c8:	08008ec8 	.word	0x08008ec8
 80013cc:	08008f1c 	.word	0x08008f1c

080013d0 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b0cf      	sub	sp, #316	@ 0x13c
 80013d4:	af08      	add	r7, sp, #32
 80013d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013de:	6018      	str	r0, [r3, #0]
 80013e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013e8:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 80013ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	3304      	adds	r3, #4
 80013f8:	22fc      	movs	r2, #252	@ 0xfc
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f006 fc2f 	bl	8007c60 <memset>

    MQTTString topicString = MQTTString_initializer;
 8001402:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001406:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001412:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800141e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8001426:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800142a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800142e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001432:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 800143a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800143e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	f7fe fee4 	bl	8000210 <strlen>
 8001448:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 800144a:	f107 0414 	add.w	r4, r7, #20
 800144e:	9306      	str	r3, [sp, #24]
 8001450:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001454:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	9305      	str	r3, [sp, #20]
 800145c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001460:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8001464:	ab02      	add	r3, sp, #8
 8001466:	ca07      	ldmia	r2, {r0, r1, r2}
 8001468:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800146c:	2300      	movs	r3, #0
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	2300      	movs	r3, #0
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2300      	movs	r3, #0
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff fc47 	bl	8000d10 <MQTTSerialize_publish>
 8001482:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800148a:	b29a      	uxth	r2, r3
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MQTT_Pub+0xd8>)
 8001494:	f002 fb3d 	bl	8003b12 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8001498:	2064      	movs	r0, #100	@ 0x64
 800149a:	f000 fecb 	bl	8002234 <HAL_Delay>
#endif
}
 800149e:	bf00      	nop
 80014a0:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	20000d68 	.word	0x20000d68

080014ac <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0ca      	sub	sp, #296	@ 0x128
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014ba:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 80014bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	3304      	adds	r3, #4
 80014ca:	22fc      	movs	r2, #252	@ 0xfc
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f006 fbc6 	bl	8007c60 <memset>

    MQTTString topicString = MQTTString_initializer;
 80014d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 80014f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001500:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001504:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 800150c:	f107 0014 	add.w	r0, r7, #20
 8001510:	2300      	movs	r3, #0
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	2301      	movs	r3, #1
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2301      	movs	r3, #1
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001526:	f000 f886 	bl	8001636 <MQTTSerialize_subscribe>
 800152a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800152e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001532:	b29a      	uxth	r2, r3
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MQTT_Sub+0xa4>)
 800153c:	f002 fae9 	bl	8003b12 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8001540:	2064      	movs	r0, #100	@ 0x64
 8001542:	f000 fe77 	bl	8002234 <HAL_Delay>
#endif
}
 8001546:	bf00      	nop
 8001548:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000d68 	.word	0x20000d68

08001554 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	@ 0x30
 8001558:	af06      	add	r7, sp, #24
 800155a:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 800155c:	2240      	movs	r2, #64	@ 0x40
 800155e:	2100      	movs	r1, #0
 8001560:	4819      	ldr	r0, [pc, #100]	@ (80015c8 <MQTT_Receive+0x74>)
 8001562:	f006 fb7d 	bl	8007c60 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8001566:	2240      	movs	r2, #64	@ 0x40
 8001568:	2100      	movs	r1, #0
 800156a:	4818      	ldr	r0, [pc, #96]	@ (80015cc <MQTT_Receive+0x78>)
 800156c:	f006 fb78 	bl	8007c60 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8001570:	2304      	movs	r3, #4
 8001572:	9304      	str	r3, [sp, #16]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	9303      	str	r3, [sp, #12]
 8001578:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <MQTT_Receive+0x7c>)
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MQTT_Receive+0x80>)
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <MQTT_Receive+0x84>)
 800158c:	4913      	ldr	r1, [pc, #76]	@ (80015dc <MQTT_Receive+0x88>)
 800158e:	4814      	ldr	r0, [pc, #80]	@ (80015e0 <MQTT_Receive+0x8c>)
 8001590:	f7ff f95c 	bl	800084c <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4619      	mov	r1, r3
 800159a:	480b      	ldr	r0, [pc, #44]	@ (80015c8 <MQTT_Receive+0x74>)
 800159c:	f006 fbff 	bl	8007d9e <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <MQTT_Receive+0x90>)
 80015a4:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4a0e      	ldr	r2, [pc, #56]	@ (80015e4 <MQTT_Receive+0x90>)
 80015ac:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80015ae:	4619      	mov	r1, r3
 80015b0:	4806      	ldr	r0, [pc, #24]	@ (80015cc <MQTT_Receive+0x78>)
 80015b2:	f006 fbf4 	bl	8007d9e <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <MQTT_Receive+0x90>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000c90 	.word	0x20000c90
 80015cc:	20000c4c 	.word	0x20000c4c
 80015d0:	20000c8c 	.word	0x20000c8c
 80015d4:	20000c4a 	.word	0x20000c4a
 80015d8:	20000c48 	.word	0x20000c48
 80015dc:	20000c44 	.word	0x20000c44
 80015e0:	20000c41 	.word	0x20000c41
 80015e4:	20000c1c 	.word	0x20000c1c

080015e8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80015f2:	2302      	movs	r3, #2
 80015f4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e013      	b.n	8001624 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	461a      	mov	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4413      	add	r3, r2
 800160c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001610:	f7ff fb45 	bl	8000c9e <MQTTstrlen>
 8001614:	4603      	mov	r3, r0
 8001616:	3303      	adds	r3, #3
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	4413      	add	r3, r2
 800161c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3301      	adds	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbe7      	blt.n	80015fc <MQTTSerialize_subscribeLength+0x14>
	return len;
 800162c:	68bb      	ldr	r3, [r7, #8]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b08a      	sub	sp, #40	@ 0x28
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	4611      	mov	r1, r2
 8001642:	461a      	mov	r2, r3
 8001644:	460b      	mov	r3, r1
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001660:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001662:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001664:	f7ff ffc0 	bl	80015e8 <MQTTSerialize_subscribeLength>
 8001668:	61f8      	str	r0, [r7, #28]
 800166a:	69f8      	ldr	r0, [r7, #28]
 800166c:	f7ff f9cc 	bl	8000a08 <MQTTPacket_len>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	4293      	cmp	r3, r2
 8001676:	da03      	bge.n	8001680 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001678:	f06f 0301 	mvn.w	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800167e:	e051      	b.n	8001724 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8001684:	7d3b      	ldrb	r3, [r7, #20]
 8001686:	2208      	movs	r2, #8
 8001688:	f362 1307 	bfi	r3, r2, #4, #4
 800168c:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	7d3b      	ldrb	r3, [r7, #20]
 8001698:	f362 03c3 	bfi	r3, r2, #3, #1
 800169c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800169e:	7d3b      	ldrb	r3, [r7, #20]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f362 0342 	bfi	r3, r2, #1, #2
 80016a6:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80016a8:	7d3a      	ldrb	r2, [r7, #20]
 80016aa:	f107 0318 	add.w	r3, r7, #24
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fa38 	bl	8000b26 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	69f9      	ldr	r1, [r7, #28]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f938 	bl	8000930 <MQTTPacket_encode>
 80016c0:	4602      	mov	r2, r0
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4413      	add	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 80016c8:	88ba      	ldrh	r2, [r7, #4]
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa3d 	bl	8000b50 <writeInt>

	for (i = 0; i < count; ++i)
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	e01b      	b.n	8001714 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80016dc:	6a3a      	ldr	r2, [r7, #32]
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	461a      	mov	r2, r3
 80016e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ea:	4413      	add	r3, r2
 80016ec:	f107 0018 	add.w	r0, r7, #24
 80016f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f2:	f7ff fa75 	bl	8000be0 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016fc:	4413      	add	r3, r2
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fa0c 	bl	8000b26 <writeChar>
	for (i = 0; i < count; ++i)
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	3301      	adds	r3, #1
 8001712:	623b      	str	r3, [r7, #32]
 8001714:	6a3a      	ldr	r2, [r7, #32]
 8001716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001718:	429a      	cmp	r2, r3
 800171a:	dbdf      	blt.n	80016dc <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001726:	4618      	mov	r0, r3
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b34      	ldr	r3, [pc, #208]	@ (800181c <MX_GPIO_Init+0xec>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a33      	ldr	r2, [pc, #204]	@ (800181c <MX_GPIO_Init+0xec>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b31      	ldr	r3, [pc, #196]	@ (800181c <MX_GPIO_Init+0xec>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <MX_GPIO_Init+0xec>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a2c      	ldr	r2, [pc, #176]	@ (800181c <MX_GPIO_Init+0xec>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <MX_GPIO_Init+0xec>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	4b26      	ldr	r3, [pc, #152]	@ (800181c <MX_GPIO_Init+0xec>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a25      	ldr	r2, [pc, #148]	@ (800181c <MX_GPIO_Init+0xec>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <MX_GPIO_Init+0xec>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2120      	movs	r1, #32
 800179e:	4820      	ldr	r0, [pc, #128]	@ (8001820 <MX_GPIO_Init+0xf0>)
 80017a0:	f001 f874 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2101      	movs	r1, #1
 80017a8:	481e      	ldr	r0, [pc, #120]	@ (8001824 <MX_GPIO_Init+0xf4>)
 80017aa:	f001 f86f 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BT_Pin */
  GPIO_InitStruct.Pin = USER_BT_Pin;
 80017ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BT_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	4619      	mov	r1, r3
 80017c4:	4818      	ldr	r0, [pc, #96]	@ (8001828 <MX_GPIO_Init+0xf8>)
 80017c6:	f000 fecd 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017ca:	2320      	movs	r3, #32
 80017cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	4619      	mov	r1, r3
 80017e0:	480f      	ldr	r0, [pc, #60]	@ (8001820 <MX_GPIO_Init+0xf0>)
 80017e2:	f000 febf 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 80017e6:	2301      	movs	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	4809      	ldr	r0, [pc, #36]	@ (8001824 <MX_GPIO_Init+0xf4>)
 80017fe:	f000 feb1 	bl	8002564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	2028      	movs	r0, #40	@ 0x28
 8001808:	f000 fdf0 	bl	80023ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800180c:	2028      	movs	r0, #40	@ 0x28
 800180e:	f000 fe09 	bl	8002424 <HAL_NVIC_EnableIRQ>

}
 8001812:	bf00      	nop
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020400 	.word	0x40020400
 8001828:	40020800 	.word	0x40020800

0800182c <GSM_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GSM_init(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
	SIM800.sim.apn = "internet";
 8001830:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <GSM_init+0x48>)
 8001832:	4a11      	ldr	r2, [pc, #68]	@ (8001878 <GSM_init+0x4c>)
 8001834:	601a      	str	r2, [r3, #0]
	SIM800.sim.apn_user = "";
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <GSM_init+0x48>)
 8001838:	4a10      	ldr	r2, [pc, #64]	@ (800187c <GSM_init+0x50>)
 800183a:	605a      	str	r2, [r3, #4]
	SIM800.sim.apn_pass = "";
 800183c:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <GSM_init+0x48>)
 800183e:	4a0f      	ldr	r2, [pc, #60]	@ (800187c <GSM_init+0x50>)
 8001840:	609a      	str	r2, [r3, #8]
	SIM800.mqttServer.host = "mqtt.onwords.in";
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <GSM_init+0x48>)
 8001844:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <GSM_init+0x54>)
 8001846:	60da      	str	r2, [r3, #12]
	SIM800.mqttServer.port = 1883;
 8001848:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <GSM_init+0x48>)
 800184a:	f240 725b 	movw	r2, #1883	@ 0x75b
 800184e:	821a      	strh	r2, [r3, #16]
	SIM800.mqttClient.username = "Nikhil";
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <GSM_init+0x48>)
 8001852:	4a0c      	ldr	r2, [pc, #48]	@ (8001884 <GSM_init+0x58>)
 8001854:	615a      	str	r2, [r3, #20]
	SIM800.mqttClient.pass = "Nikhil8182";
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <GSM_init+0x48>)
 8001858:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <GSM_init+0x5c>)
 800185a:	619a      	str	r2, [r3, #24]
	SIM800.mqttClient.clientID = "TestSub";
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <GSM_init+0x48>)
 800185e:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <GSM_init+0x60>)
 8001860:	61da      	str	r2, [r3, #28]
	SIM800.mqttClient.keepAliveInterval = 60;
 8001862:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <GSM_init+0x48>)
 8001864:	223c      	movs	r2, #60	@ 0x3c
 8001866:	841a      	strh	r2, [r3, #32]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000c1c 	.word	0x20000c1c
 8001878:	08008fc8 	.word	0x08008fc8
 800187c:	08008fd4 	.word	0x08008fd4
 8001880:	08008fd8 	.word	0x08008fd8
 8001884:	08008fe8 	.word	0x08008fe8
 8001888:	08008ff0 	.word	0x08008ff0
 800188c:	08008ffc 	.word	0x08008ffc

08001890 <FreeRTOS_Init>:
void FreeRTOS_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af02      	add	r7, sp, #8
    mqttQueue = xQueueCreate(5, sizeof(uint8_t));
 8001896:	2200      	movs	r2, #0
 8001898:	2101      	movs	r1, #1
 800189a:	2005      	movs	r0, #5
 800189c:	f003 fa08 	bl	8004cb0 <xQueueGenericCreate>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <FreeRTOS_Init+0x6c>)
 80018a4:	6013      	str	r3, [r2, #0]
    rxCallbackQueue = xQueueCreate(10, sizeof(SIM800.mqttReceive));
 80018a6:	2200      	movs	r2, #0
 80018a8:	2194      	movs	r1, #148	@ 0x94
 80018aa:	200a      	movs	r0, #10
 80018ac:	f003 fa00 	bl	8004cb0 <xQueueGenericCreate>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a13      	ldr	r2, [pc, #76]	@ (8001900 <FreeRTOS_Init+0x70>)
 80018b4:	6013      	str	r3, [r2, #0]
    xButtonSemaphore = xSemaphoreCreateBinary();
 80018b6:	2203      	movs	r2, #3
 80018b8:	2100      	movs	r1, #0
 80018ba:	2001      	movs	r0, #1
 80018bc:	f003 f9f8 	bl	8004cb0 <xQueueGenericCreate>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <FreeRTOS_Init+0x74>)
 80018c4:	6013      	str	r3, [r2, #0]

    xTaskCreate(MQTT_Task, "MQTT_Task", 512, NULL, 2, &mqttTaskHandle);
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <FreeRTOS_Init+0x78>)
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	2302      	movs	r3, #2
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2300      	movs	r3, #0
 80018d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d4:	490d      	ldr	r1, [pc, #52]	@ (800190c <FreeRTOS_Init+0x7c>)
 80018d6:	480e      	ldr	r0, [pc, #56]	@ (8001910 <FreeRTOS_Init+0x80>)
 80018d8:	f004 f838 	bl	800594c <xTaskCreate>
    xTaskCreate(GPIO_Task, "GPIO_Task", 256, NULL, 2, &gpioTaskHandle);
 80018dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <FreeRTOS_Init+0x84>)
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2302      	movs	r3, #2
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ea:	490b      	ldr	r1, [pc, #44]	@ (8001918 <FreeRTOS_Init+0x88>)
 80018ec:	480b      	ldr	r0, [pc, #44]	@ (800191c <FreeRTOS_Init+0x8c>)
 80018ee:	f004 f82d 	bl	800594c <xTaskCreate>

    vTaskStartScheduler();  // Start FreeRTOS scheduler
 80018f2:	f004 f9a7 	bl	8005c44 <vTaskStartScheduler>
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000c10 	.word	0x20000c10
 8001900:	20000c14 	.word	0x20000c14
 8001904:	20000c0c 	.word	0x20000c0c
 8001908:	20000c04 	.word	0x20000c04
 800190c:	08009004 	.word	0x08009004
 8001910:	08001a2d 	.word	0x08001a2d
 8001914:	20000c08 	.word	0x20000c08
 8001918:	08009010 	.word	0x08009010
 800191c:	080019d1 	.word	0x080019d1

08001920 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0b4      	sub	sp, #208	@ 0xd0
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    if (huart == UART_SIM800)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a20      	ldr	r2, [pc, #128]	@ (80019ac <HAL_UART_RxCpltCallback+0x8c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d139      	bne.n	80019a4 <HAL_UART_RxCpltCallback+0x84>
    {
        Sim800_RxCallBack();
 8001930:	f7ff fa64 	bl	8000dfc <Sim800_RxCallBack>
        if (SIM800.mqttServer.connect == 1 && rx_data == 0xD0) {
 8001934:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <HAL_UART_RxCpltCallback+0x90>)
 8001936:	7c9b      	ldrb	r3, [r3, #18]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d110      	bne.n	800195e <HAL_UART_RxCpltCallback+0x3e>
 800193c:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <HAL_UART_RxCpltCallback+0x94>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2bd0      	cmp	r3, #208	@ 0xd0
 8001942:	d10c      	bne.n	800195e <HAL_UART_RxCpltCallback+0x3e>
            printf("Received MQTT PINGRESP\n\r");
 8001944:	481c      	ldr	r0, [pc, #112]	@ (80019b8 <HAL_UART_RxCpltCallback+0x98>)
 8001946:	f005 ffef 	bl	8007928 <iprintf>
            mqtt_receive = 1;
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <HAL_UART_RxCpltCallback+0x9c>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
            clearRxBuffer();
 8001950:	f7ff fb14 	bl	8000f7c <clearRxBuffer>
            clearMqttBuffer();
 8001954:	f7ff fb24 	bl	8000fa0 <clearMqttBuffer>
            MQTT_Sub("STM32/subscribe");
 8001958:	4819      	ldr	r0, [pc, #100]	@ (80019c0 <HAL_UART_RxCpltCallback+0xa0>)
 800195a:	f7ff fda7 	bl	80014ac <MQTT_Sub>
        }
        if (SIM800.mqttReceive.newEvent)
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_UART_RxCpltCallback+0x90>)
 8001960:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01d      	beq.n	80019a4 <HAL_UART_RxCpltCallback+0x84>
		{
        	SIM800_MQTT_Receive_t receivedData;
			strncpy(receivedData.topic, (char *)SIM800.mqttReceive.topic, sizeof(receivedData.topic) - 1);
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	223f      	movs	r2, #63	@ 0x3f
 800196e:	4915      	ldr	r1, [pc, #84]	@ (80019c4 <HAL_UART_RxCpltCallback+0xa4>)
 8001970:	4618      	mov	r0, r3
 8001972:	f006 f97d 	bl	8007c70 <strncpy>
			strncpy(receivedData.payload, (char *)SIM800.mqttReceive.payload, sizeof(receivedData.payload) - 1);
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	3340      	adds	r3, #64	@ 0x40
 800197c:	227f      	movs	r2, #127	@ 0x7f
 800197e:	4912      	ldr	r1, [pc, #72]	@ (80019c8 <HAL_UART_RxCpltCallback+0xa8>)
 8001980:	4618      	mov	r0, r3
 8001982:	f006 f975 	bl	8007c70 <strncpy>
			receivedData.newEvent = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc


			xQueueSendFromISR(rxCallbackQueue, &receivedData, NULL);
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_UART_RxCpltCallback+0xac>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f107 010c 	add.w	r1, r7, #12
 8001994:	2300      	movs	r3, #0
 8001996:	2200      	movs	r2, #0
 8001998:	f003 fb12 	bl	8004fc0 <xQueueGenericSendFromISR>
			SIM800.mqttReceive.newEvent = 0;
 800199c:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <HAL_UART_RxCpltCallback+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
    }
}
 80019a4:	bf00      	nop
 80019a6:	37d0      	adds	r7, #208	@ 0xd0
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000d68 	.word	0x20000d68
 80019b0:	20000c1c 	.word	0x20000c1c
 80019b4:	20000090 	.word	0x20000090
 80019b8:	0800901c 	.word	0x0800901c
 80019bc:	2000064a 	.word	0x2000064a
 80019c0:	08009038 	.word	0x08009038
 80019c4:	20000c90 	.word	0x20000c90
 80019c8:	20000c4c 	.word	0x20000c4c
 80019cc:	20000c14 	.word	0x20000c14

080019d0 <GPIO_Task>:
		}
	}
}

void GPIO_Task(void *pvParameters)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	if(xSemaphoreTake(xButtonSemaphore, portMAX_DELAY) == pdTRUE)
 80019d8:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <GPIO_Task+0x4c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fd1d 	bl	8005420 <xQueueSemaphoreTake>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d1f5      	bne.n	80019d8 <GPIO_Task+0x8>
    	{
    		buttonState ^= 1;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <GPIO_Task+0x50>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <GPIO_Task+0x50>)
 80019fa:	701a      	strb	r2, [r3, #0]
			printf("button state toggled: %d\n\r", buttonState);
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <GPIO_Task+0x50>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <GPIO_Task+0x54>)
 8001a06:	f005 ff8f 	bl	8007928 <iprintf>
			xQueueSend(mqttQueue, (void *)&buttonState, portMAX_DELAY);
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <GPIO_Task+0x58>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	4902      	ldr	r1, [pc, #8]	@ (8001a20 <GPIO_Task+0x50>)
 8001a16:	f003 f9d1 	bl	8004dbc <xQueueGenericSend>
    	if(xSemaphoreTake(xButtonSemaphore, portMAX_DELAY) == pdTRUE)
 8001a1a:	e7dd      	b.n	80019d8 <GPIO_Task+0x8>
 8001a1c:	20000c0c 	.word	0x20000c0c
 8001a20:	20000c18 	.word	0x20000c18
 8001a24:	080090d0 	.word	0x080090d0
 8001a28:	20000c10 	.word	0x20000c10

08001a2c <MQTT_Task>:
    	}
    }
}

void MQTT_Task(void *pvParameters)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	@ 0x30
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
   uint8_t receivedState;
   char mqttPayload[32];
   while(1)
   {
	   if (SIM800.mqttServer.connect == 0)
 8001a34:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <MQTT_Task+0xac>)
 8001a36:	7c9b      	ldrb	r3, [r3, #18]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d107      	bne.n	8001a4c <MQTT_Task+0x20>
	   {
		   MQTT_Init();
 8001a3c:	f7ff faf2 	bl	8001024 <MQTT_Init>
		   lastKeepAliveTime = millis();
 8001a40:	f000 f892 	bl	8001b68 <millis>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a25      	ldr	r2, [pc, #148]	@ (8001adc <MQTT_Task+0xb0>)
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e040      	b.n	8001ace <MQTT_Task+0xa2>
	   }
	  else
	   {
		  if(xQueueReceive(mqttQueue, &receivedState, pdMS_TO_TICKS(500)) == pdTRUE)
 8001a4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <MQTT_Task+0xb4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 8001a54:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fbff 	bl	800525c <xQueueReceive>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d119      	bne.n	8001a98 <MQTT_Task+0x6c>
		   {
			   sprintf(mqttPayload, "{\"device1\":%d}", receivedState);
 8001a64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	491d      	ldr	r1, [pc, #116]	@ (8001ae4 <MQTT_Task+0xb8>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f005 fffd 	bl	8007a70 <siprintf>
			   MQTT_Pub("STM32/publish", mqttPayload);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481a      	ldr	r0, [pc, #104]	@ (8001ae8 <MQTT_Task+0xbc>)
 8001a7e:	f7ff fca7 	bl	80013d0 <MQTT_Pub>
			   printf("MQTT Published: %s\n\r", mqttPayload);
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	4619      	mov	r1, r3
 8001a88:	4818      	ldr	r0, [pc, #96]	@ (8001aec <MQTT_Task+0xc0>)
 8001a8a:	f005 ff4d 	bl	8007928 <iprintf>
			   lastKeepAliveTime = millis();
 8001a8e:	f000 f86b 	bl	8001b68 <millis>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a11      	ldr	r2, [pc, #68]	@ (8001adc <MQTT_Task+0xb0>)
 8001a96:	6013      	str	r3, [r2, #0]

		   }
		   if ((millis() - lastKeepAliveTime) >= (KEEP_ALIVE_INTERVAL * 500))
 8001a98:	f000 f866 	bl	8001b68 <millis>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <MQTT_Task+0xb0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d910      	bls.n	8001ace <MQTT_Task+0xa2>
		   {
			   uint8_t pingreq_packet[2] = {0xC0, 0x00};
 8001aac:	23c0      	movs	r3, #192	@ 0xc0
 8001aae:	813b      	strh	r3, [r7, #8]
			   HAL_UART_Transmit(UART_SIM800, pingreq_packet, 2, 100);
 8001ab0:	f107 0108 	add.w	r1, r7, #8
 8001ab4:	2364      	movs	r3, #100	@ 0x64
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <MQTT_Task+0xc4>)
 8001aba:	f001 ff9f 	bl	80039fc <HAL_UART_Transmit>
			   printf("Sending MQTT PINGREQ\n\r");
 8001abe:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <MQTT_Task+0xc8>)
 8001ac0:	f005 ff32 	bl	8007928 <iprintf>
			   lastKeepAliveTime = millis();
 8001ac4:	f000 f850 	bl	8001b68 <millis>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <MQTT_Task+0xb0>)
 8001acc:	6013      	str	r3, [r2, #0]
		   }
	   }
    vTaskDelay(100);
 8001ace:	2064      	movs	r0, #100	@ 0x64
 8001ad0:	f004 f882 	bl	8005bd8 <vTaskDelay>
	   if (SIM800.mqttServer.connect == 0)
 8001ad4:	e7ae      	b.n	8001a34 <MQTT_Task+0x8>
 8001ad6:	bf00      	nop
 8001ad8:	20000c1c 	.word	0x20000c1c
 8001adc:	20000cd4 	.word	0x20000cd4
 8001ae0:	20000c10 	.word	0x20000c10
 8001ae4:	08009098 	.word	0x08009098
 8001ae8:	080090a8 	.word	0x080090a8
 8001aec:	080090b8 	.word	0x080090b8
 8001af0:	20000d68 	.word	0x20000d68
 8001af4:	080090ec 	.word	0x080090ec

08001af8 <HAL_GPIO_EXTI_Callback>:
   }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
    if (GPIO_Pin == USER_BT_Pin)
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b0c:	d111      	bne.n	8001b32 <HAL_GPIO_EXTI_Callback+0x3a>
    {
        xSemaphoreGiveFromISR(xButtonSemaphore, xHigherPriorityTaskWoken);
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_GPIO_EXTI_Callback+0x44>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fb00 	bl	800511c <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_EXTI_Callback+0x3a>
 8001b22:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <HAL_GPIO_EXTI_Callback+0x48>)
 8001b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f3bf 8f4f 	dsb	sy
 8001b2e:	f3bf 8f6f 	isb	sy
    }
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000c0c 	.word	0x20000c0c
 8001b40:	e000ed04 	.word	0xe000ed04

08001b44 <__io_putchar>:


#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001b4c:	1d39      	adds	r1, r7, #4
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	2201      	movs	r2, #1
 8001b54:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <__io_putchar+0x20>)
 8001b56:	f001 ff51 	bl	80039fc <HAL_UART_Transmit>
	return ch;
 8001b5a:	687b      	ldr	r3, [r7, #4]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000d20 	.word	0x20000d20

08001b68 <millis>:
#endif

uint32_t millis() {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001b6c:	f000 fb56 	bl	800221c <HAL_GetTick>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b7c:	f000 fb18 	bl	80021b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b80:	f000 f812 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b84:	f7ff fdd4 	bl	8001730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b88:	f000 f9ee 	bl	8001f68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b8c:	f000 fa16 	bl	8001fbc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
//  HAL_Delay(3000);
//  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
//  HAL_Delay(10000);
  printf("system Init\n\r");
 8001b90:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <main+0x2c>)
 8001b92:	f005 fec9 	bl	8007928 <iprintf>
  GSM_init();
 8001b96:	f7ff fe49 	bl	800182c <GSM_init>
  FreeRTOS_Init();
 8001b9a:	f7ff fe79 	bl	8001890 <FreeRTOS_Init>
//  uint8_t pub_uint8 = 1;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b9e:	bf00      	nop
 8001ba0:	e7fd      	b.n	8001b9e <main+0x26>
 8001ba2:	bf00      	nop
 8001ba4:	08009104 	.word	0x08009104

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	@ 0x50
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2234      	movs	r2, #52	@ 0x34
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f006 f852 	bl	8007c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	4b29      	ldr	r3, [pc, #164]	@ (8001c78 <SystemClock_Config+0xd0>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	4a28      	ldr	r2, [pc, #160]	@ (8001c78 <SystemClock_Config+0xd0>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bdc:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <SystemClock_Config+0xd0>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4b23      	ldr	r3, [pc, #140]	@ (8001c7c <SystemClock_Config+0xd4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bf4:	4a21      	ldr	r2, [pc, #132]	@ (8001c7c <SystemClock_Config+0xd4>)
 8001bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <SystemClock_Config+0xd4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c10:	2310      	movs	r3, #16
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c14:	2302      	movs	r3, #2
 8001c16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c20:	2348      	movs	r3, #72	@ 0x48
 8001c22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 f951 	bl	8002edc <HAL_RCC_OscConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c40:	f000 f830 	bl	8001ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c44:	230f      	movs	r3, #15
 8001c46:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	2102      	movs	r1, #2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fe45 	bl	80028f0 <HAL_RCC_ClockConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c6c:	f000 f81a 	bl	8001ca4 <Error_Handler>
  }
}
 8001c70:	bf00      	nop
 8001c72:	3750      	adds	r7, #80	@ 0x50
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40007000 	.word	0x40007000

08001c80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c92:	f000 faaf 	bl	80021f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40001000 	.word	0x40001000

08001ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <Error_Handler+0x8>

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08e      	sub	sp, #56	@ 0x38
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	4b33      	ldr	r3, [pc, #204]	@ (8001de4 <HAL_InitTick+0xe4>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	4a32      	ldr	r2, [pc, #200]	@ (8001de4 <HAL_InitTick+0xe4>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d20:	4b30      	ldr	r3, [pc, #192]	@ (8001de4 <HAL_InitTick+0xe4>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d2c:	f107 0210 	add.w	r2, r7, #16
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fef4 	bl	8002b24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d46:	f000 fec5 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8001d4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d4c:	e004      	b.n	8001d58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d4e:	f000 fec1 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8001d52:	4603      	mov	r3, r0
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5a:	4a23      	ldr	r2, [pc, #140]	@ (8001de8 <HAL_InitTick+0xe8>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	0c9b      	lsrs	r3, r3, #18
 8001d62:	3b01      	subs	r3, #1
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <HAL_InitTick+0xec>)
 8001d68:	4a21      	ldr	r2, [pc, #132]	@ (8001df0 <HAL_InitTick+0xf0>)
 8001d6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dec <HAL_InitTick+0xec>)
 8001d6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d74:	4a1d      	ldr	r2, [pc, #116]	@ (8001dec <HAL_InitTick+0xec>)
 8001d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <HAL_InitTick+0xec>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <HAL_InitTick+0xec>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d86:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <HAL_InitTick+0xec>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d8c:	4817      	ldr	r0, [pc, #92]	@ (8001dec <HAL_InitTick+0xec>)
 8001d8e:	f001 fb43 	bl	8003418 <HAL_TIM_Base_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001da0:	4812      	ldr	r0, [pc, #72]	@ (8001dec <HAL_InitTick+0xec>)
 8001da2:	f001 fb93 	bl	80034cc <HAL_TIM_Base_Start_IT>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001dac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d111      	bne.n	8001dd8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001db4:	2036      	movs	r0, #54	@ 0x36
 8001db6:	f000 fb35 	bl	8002424 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d808      	bhi.n	8001dd2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	2036      	movs	r0, #54	@ 0x36
 8001dc6:	f000 fb11 	bl	80023ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dca:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_InitTick+0xf4>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e002      	b.n	8001dd8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3738      	adds	r7, #56	@ 0x38
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	20000cd8 	.word	0x20000cd8
 8001df0:	40001000 	.word	0x40001000
 8001df4:	20000004 	.word	0x20000004

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <NMI_Handler+0x4>

08001e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <MemManage_Handler+0x4>

08001e10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <USART3_IRQHandler+0x10>)
 8001e36:	f001 fec7 	bl	8003bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000d68 	.word	0x20000d68

08001e44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BT_Pin);
 8001e48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e4c:	f000 fd38 	bl	80028c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <TIM6_DAC_IRQHandler+0x10>)
 8001e5a:	f001 fba7 	bl	80035ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000cd8 	.word	0x20000cd8

08001e68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e00a      	b.n	8001e90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e7a:	f3af 8000 	nop.w
 8001e7e:	4601      	mov	r1, r0
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	b2ca      	uxtb	r2, r1
 8001e88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf0      	blt.n	8001e7a <_read+0x12>
  }

  return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e009      	b.n	8001ec8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	60ba      	str	r2, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fe41 	bl	8001b44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf1      	blt.n	8001eb4 <_write+0x12>
  }
  return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_close>:

int _close(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f02:	605a      	str	r2, [r3, #4]
  return 0;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_isatty>:

int _isatty(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <MX_USART2_UART_Init+0x50>)
 8001f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f8e:	220c      	movs	r2, #12
 8001f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	f001 fcdc 	bl	800395c <HAL_UART_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001faa:	f7ff fe7b 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000d20 	.word	0x20000d20
 8001fb8:	40004400 	.word	0x40004400

08001fbc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	@ (800200c <MX_USART3_UART_Init+0x50>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fc8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001fcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <MX_USART3_UART_Init+0x4c>)
 8001ff4:	f001 fcb2 	bl	800395c <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ffe:	f7ff fe51 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000d68 	.word	0x20000d68
 800200c:	40004800 	.word	0x40004800

08002010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	@ 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a45      	ldr	r2, [pc, #276]	@ (8002144 <HAL_UART_MspInit+0x134>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12c      	bne.n	800208c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	4b44      	ldr	r3, [pc, #272]	@ (8002148 <HAL_UART_MspInit+0x138>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	4a43      	ldr	r2, [pc, #268]	@ (8002148 <HAL_UART_MspInit+0x138>)
 800203c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002040:	6413      	str	r3, [r2, #64]	@ 0x40
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_UART_MspInit+0x138>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <HAL_UART_MspInit+0x138>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a3c      	ldr	r2, [pc, #240]	@ (8002148 <HAL_UART_MspInit+0x138>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b3a      	ldr	r3, [pc, #232]	@ (8002148 <HAL_UART_MspInit+0x138>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800206a:	230c      	movs	r3, #12
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800207a:	2307      	movs	r3, #7
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	4619      	mov	r1, r3
 8002084:	4831      	ldr	r0, [pc, #196]	@ (800214c <HAL_UART_MspInit+0x13c>)
 8002086:	f000 fa6d 	bl	8002564 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800208a:	e057      	b.n	800213c <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a2f      	ldr	r2, [pc, #188]	@ (8002150 <HAL_UART_MspInit+0x140>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d152      	bne.n	800213c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b2b      	ldr	r3, [pc, #172]	@ (8002148 <HAL_UART_MspInit+0x138>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	4a2a      	ldr	r2, [pc, #168]	@ (8002148 <HAL_UART_MspInit+0x138>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a6:	4b28      	ldr	r3, [pc, #160]	@ (8002148 <HAL_UART_MspInit+0x138>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <HAL_UART_MspInit+0x138>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	4a23      	ldr	r2, [pc, #140]	@ (8002148 <HAL_UART_MspInit+0x138>)
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c2:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <HAL_UART_MspInit+0x138>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <HAL_UART_MspInit+0x138>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <HAL_UART_MspInit+0x138>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_UART_MspInit+0x138>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020ea:	2320      	movs	r3, #32
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020fa:	2307      	movs	r3, #7
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	4813      	ldr	r0, [pc, #76]	@ (8002154 <HAL_UART_MspInit+0x144>)
 8002106:	f000 fa2d 	bl	8002564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800210a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211c:	2307      	movs	r3, #7
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	4619      	mov	r1, r3
 8002126:	480c      	ldr	r0, [pc, #48]	@ (8002158 <HAL_UART_MspInit+0x148>)
 8002128:	f000 fa1c 	bl	8002564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2106      	movs	r1, #6
 8002130:	2027      	movs	r0, #39	@ 0x27
 8002132:	f000 f95b 	bl	80023ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002136:	2027      	movs	r0, #39	@ 0x27
 8002138:	f000 f974 	bl	8002424 <HAL_NVIC_EnableIRQ>
}
 800213c:	bf00      	nop
 800213e:	3730      	adds	r7, #48	@ 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40004400 	.word	0x40004400
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000
 8002150:	40004800 	.word	0x40004800
 8002154:	40020800 	.word	0x40020800
 8002158:	40020400 	.word	0x40020400

0800215c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002194 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002160:	f7ff fef0 	bl	8001f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002164:	480c      	ldr	r0, [pc, #48]	@ (8002198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002166:	490d      	ldr	r1, [pc, #52]	@ (800219c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002168:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800217c:	4c0a      	ldr	r4, [pc, #40]	@ (80021a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800218a:	f005 fde1 	bl	8007d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218e:	f7ff fcf3 	bl	8001b78 <main>
  bx  lr    
 8002192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800219c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80021a0:	08009188 	.word	0x08009188
  ldr r2, =_sbss
 80021a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80021a8:	20013cac 	.word	0x20013cac

080021ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC_IRQHandler>
	...

080021b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <HAL_Init+0x40>)
 80021ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <HAL_Init+0x40>)
 80021c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <HAL_Init+0x40>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 f8fc 	bl	80023d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021de:	200f      	movs	r0, #15
 80021e0:	f7ff fd8e 	bl	8001d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e4:	f7ff fd64 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008
 8002218:	20000db0 	.word	0x20000db0

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	@ (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000db0 	.word	0x20000db0

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000008 	.word	0x20000008

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4907      	ldr	r1, [pc, #28]	@ (8002318 <__NVIC_EnableIRQ+0x38>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	@ (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	@ (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	@ 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ff4c 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fe:	f7ff ff61 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 8002402:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	6978      	ldr	r0, [r7, #20]
 800240a:	f7ff ffb1 	bl	8002370 <NVIC_EncodePriority>
 800240e:	4602      	mov	r2, r0
 8002410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff80 	bl	800231c <__NVIC_SetPriority>
}
 800241c:	bf00      	nop
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff54 	bl	80022e0 <__NVIC_EnableIRQ>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800244e:	f7ff fee5 	bl	800221c <HAL_GetTick>
 8002452:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d008      	beq.n	8002472 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2280      	movs	r2, #128	@ 0x80
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e052      	b.n	8002518 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0216 	bic.w	r2, r2, #22
 8002480:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002490:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <HAL_DMA_Abort+0x62>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0208 	bic.w	r2, r2, #8
 80024b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c2:	e013      	b.n	80024ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c4:	f7ff feaa 	bl	800221c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d90c      	bls.n	80024ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2203      	movs	r2, #3
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e015      	b.n	8002518 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1e4      	bne.n	80024c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	223f      	movs	r2, #63	@ 0x3f
 8002500:	409a      	lsls	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d004      	beq.n	800253e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2280      	movs	r2, #128	@ 0x80
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e00c      	b.n	8002558 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2205      	movs	r2, #5
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	@ 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e165      	b.n	800284c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	f040 8154 	bne.w	8002846 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d017      	beq.n	8002654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80ae 	beq.w	8002846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002706:	4a58      	ldr	r2, [pc, #352]	@ (8002868 <HAL_GPIO_Init+0x304>)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	3302      	adds	r3, #2
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4f      	ldr	r2, [pc, #316]	@ (800286c <HAL_GPIO_Init+0x308>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d025      	beq.n	800277e <HAL_GPIO_Init+0x21a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4e      	ldr	r2, [pc, #312]	@ (8002870 <HAL_GPIO_Init+0x30c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01f      	beq.n	800277a <HAL_GPIO_Init+0x216>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4d      	ldr	r2, [pc, #308]	@ (8002874 <HAL_GPIO_Init+0x310>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x212>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4c      	ldr	r2, [pc, #304]	@ (8002878 <HAL_GPIO_Init+0x314>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4b      	ldr	r2, [pc, #300]	@ (800287c <HAL_GPIO_Init+0x318>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x20a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4a      	ldr	r2, [pc, #296]	@ (8002880 <HAL_GPIO_Init+0x31c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x206>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a49      	ldr	r2, [pc, #292]	@ (8002884 <HAL_GPIO_Init+0x320>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x202>
 8002762:	2306      	movs	r3, #6
 8002764:	e00c      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002766:	2307      	movs	r3, #7
 8002768:	e00a      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800276a:	2305      	movs	r3, #5
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800276e:	2304      	movs	r3, #4
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4935      	ldr	r1, [pc, #212]	@ (8002868 <HAL_GPIO_Init+0x304>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a31      	ldr	r2, [pc, #196]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a26      	ldr	r2, [pc, #152]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f2:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_GPIO_Init+0x324>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_GPIO_Init+0x324>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002840:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <HAL_GPIO_Init+0x324>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f ae96 	bls.w	8002580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3724      	adds	r7, #36	@ 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	40021400 	.word	0x40021400
 8002884:	40021800 	.word	0x40021800
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d006      	beq.n	80028e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f90a 	bl	8001af8 <HAL_GPIO_EXTI_Callback>
  }
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40013c00 	.word	0x40013c00

080028f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0cc      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b68      	ldr	r3, [pc, #416]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d90c      	bls.n	800292c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b65      	ldr	r3, [pc, #404]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a58      	ldr	r2, [pc, #352]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800294e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d044      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d119      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e067      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4934      	ldr	r1, [pc, #208]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7ff fc1c 	bl	800221c <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7ff fc18 	bl	800221c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d20c      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f887 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f932 	bl	8001d00 <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	0800912c 	.word	0x0800912c
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000000 	.word	0x20000000

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	@ (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	0800913c 	.word	0x0800913c

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b00:	f7ff ffdc 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0b5b      	lsrs	r3, r3, #13
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	@ (8002b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	0800913c 	.word	0x0800913c

08002b24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	220f      	movs	r2, #15
 8002b32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b66:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <HAL_RCC_GetClockConfig+0x60>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 020f 	and.w	r2, r3, #15
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40023c00 	.word	0x40023c00

08002b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b0a6      	sub	sp, #152	@ 0x98
 8002b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bae:	4bc8      	ldr	r3, [pc, #800]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	f200 817e 	bhi.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x330>
 8002bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002eb9 	.word	0x08002eb9
 8002bcc:	08002eb9 	.word	0x08002eb9
 8002bd0:	08002eb9 	.word	0x08002eb9
 8002bd4:	08002c01 	.word	0x08002c01
 8002bd8:	08002eb9 	.word	0x08002eb9
 8002bdc:	08002eb9 	.word	0x08002eb9
 8002be0:	08002eb9 	.word	0x08002eb9
 8002be4:	08002c09 	.word	0x08002c09
 8002be8:	08002eb9 	.word	0x08002eb9
 8002bec:	08002eb9 	.word	0x08002eb9
 8002bf0:	08002eb9 	.word	0x08002eb9
 8002bf4:	08002d73 	.word	0x08002d73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4bb6      	ldr	r3, [pc, #728]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bfe:	e15f      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c00:	4bb5      	ldr	r3, [pc, #724]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c06:	e15b      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c08:	4bb1      	ldr	r3, [pc, #708]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c14:	4bae      	ldr	r3, [pc, #696]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d031      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c20:	4bab      	ldr	r3, [pc, #684]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	2200      	movs	r2, #0
 8002c28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c32:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c34:	2300      	movs	r3, #0
 8002c36:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c38:	4ba7      	ldr	r3, [pc, #668]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c3a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c3e:	462a      	mov	r2, r5
 8002c40:	fb03 f202 	mul.w	r2, r3, r2
 8002c44:	2300      	movs	r3, #0
 8002c46:	4621      	mov	r1, r4
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	4aa2      	ldr	r2, [pc, #648]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c50:	4621      	mov	r1, r4
 8002c52:	fba1 1202 	umull	r1, r2, r1, r2
 8002c56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c58:	460a      	mov	r2, r1
 8002c5a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002c5c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002c5e:	4413      	add	r3, r2
 8002c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c66:	2200      	movs	r2, #0
 8002c68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c70:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002c74:	f7fd fb24 	bl	80002c0 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c82:	e064      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c84:	4b92      	ldr	r3, [pc, #584]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c8e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c98:	2300      	movs	r3, #0
 8002c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c9c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	462b      	mov	r3, r5
 8002ca4:	f04f 0000 	mov.w	r0, #0
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	0159      	lsls	r1, r3, #5
 8002cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb2:	0150      	lsls	r0, r2, #5
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4621      	mov	r1, r4
 8002cba:	1a51      	subs	r1, r2, r1
 8002cbc:	6139      	str	r1, [r7, #16]
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	eb63 0301 	sbc.w	r3, r3, r1
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cd2:	4659      	mov	r1, fp
 8002cd4:	018b      	lsls	r3, r1, #6
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cdc:	4651      	mov	r1, sl
 8002cde:	018a      	lsls	r2, r1, #6
 8002ce0:	4651      	mov	r1, sl
 8002ce2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ce6:	4659      	mov	r1, fp
 8002ce8:	eb63 0901 	sbc.w	r9, r3, r1
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cf8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d00:	4690      	mov	r8, r2
 8002d02:	4699      	mov	r9, r3
 8002d04:	4623      	mov	r3, r4
 8002d06:	eb18 0303 	adds.w	r3, r8, r3
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	eb49 0303 	adc.w	r3, r9, r3
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d20:	4629      	mov	r1, r5
 8002d22:	028b      	lsls	r3, r1, #10
 8002d24:	4621      	mov	r1, r4
 8002d26:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	028a      	lsls	r2, r1, #10
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d36:	2200      	movs	r2, #0
 8002d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d40:	f7fd fabe 	bl	80002c0 <__aeabi_uldivmod>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d4e:	4b60      	ldr	r3, [pc, #384]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002d60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d70:	e0a6      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d72:	4b57      	ldr	r3, [pc, #348]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7e:	4b54      	ldr	r3, [pc, #336]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d02a      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4b51      	ldr	r3, [pc, #324]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	2200      	movs	r2, #0
 8002d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002da0:	fb03 f201 	mul.w	r2, r3, r1
 8002da4:	2300      	movs	r3, #0
 8002da6:	fb00 f303 	mul.w	r3, r0, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002dae:	fba0 1202 	umull	r1, r2, r0, r2
 8002db2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002db4:	460a      	mov	r2, r1
 8002db6:	673a      	str	r2, [r7, #112]	@ 0x70
 8002db8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002dba:	4413      	add	r3, r2
 8002dbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dc6:	637a      	str	r2, [r7, #52]	@ 0x34
 8002dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dcc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002dd0:	f7fd fa76 	bl	80002c0 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dde:	e05b      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	2200      	movs	r2, #0
 8002de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	0159      	lsls	r1, r3, #5
 8002e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0e:	0150      	lsls	r0, r2, #5
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4641      	mov	r1, r8
 8002e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e34:	ebb2 040a 	subs.w	r4, r2, sl
 8002e38:	eb63 050b 	sbc.w	r5, r3, fp
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	00eb      	lsls	r3, r5, #3
 8002e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4a:	00e2      	lsls	r2, r4, #3
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	18e3      	adds	r3, r4, r3
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	464b      	mov	r3, r9
 8002e58:	eb45 0303 	adc.w	r3, r5, r3
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	028b      	lsls	r3, r1, #10
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e74:	4621      	mov	r1, r4
 8002e76:	028a      	lsls	r2, r1, #10
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e80:	2200      	movs	r2, #0
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	61fa      	str	r2, [r7, #28]
 8002e86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8a:	f7fd fa19 	bl	80002c0 <__aeabi_uldivmod>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4613      	mov	r3, r2
 8002e94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0f1b      	lsrs	r3, r3, #28
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ebe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3798      	adds	r7, #152	@ 0x98
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	00f42400 	.word	0x00f42400
 8002ed8:	017d7840 	.word	0x017d7840

08002edc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e28d      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8083 	beq.w	8003002 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002efc:	4b94      	ldr	r3, [pc, #592]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d019      	beq.n	8002f3c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f08:	4b91      	ldr	r3, [pc, #580]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f14:	4b8e      	ldr	r3, [pc, #568]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f20:	d00c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b8b      	ldr	r3, [pc, #556]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d112      	bne.n	8002f54 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b88      	ldr	r3, [pc, #544]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3a:	d10b      	bne.n	8002f54 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	4b84      	ldr	r3, [pc, #528]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05b      	beq.n	8003000 <HAL_RCC_OscConfig+0x124>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d157      	bne.n	8003000 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e25a      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCC_OscConfig+0x90>
 8002f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7b      	ldr	r2, [pc, #492]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xcc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0xb4>
 8002f76:	4b76      	ldr	r3, [pc, #472]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a75      	ldr	r2, [pc, #468]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b73      	ldr	r3, [pc, #460]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a72      	ldr	r2, [pc, #456]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xcc>
 8002f90:	4b6f      	ldr	r3, [pc, #444]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7ff f934 	bl	800221c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7ff f930 	bl	800221c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e21f      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xdc>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7ff f920 	bl	800221c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7ff f91c 	bl	800221c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	@ 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e20b      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b57      	ldr	r3, [pc, #348]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x104>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d06f      	beq.n	80030ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800300e:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d017      	beq.n	800304a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800301a:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003022:	2b08      	cmp	r3, #8
 8003024:	d105      	bne.n	8003032 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003026:	4b4a      	ldr	r3, [pc, #296]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d11c      	bne.n	8003078 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b44      	ldr	r3, [pc, #272]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d116      	bne.n	8003078 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_RCC_OscConfig+0x186>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1d3      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4b3b      	ldr	r3, [pc, #236]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4937      	ldr	r1, [pc, #220]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	e03a      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003080:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_RCC_OscConfig+0x278>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7ff f8c9 	bl	800221c <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308e:	f7ff f8c5 	bl	800221c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e1b4      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ac:	4b28      	ldr	r3, [pc, #160]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4925      	ldr	r1, [pc, #148]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	e015      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c2:	4b24      	ldr	r3, [pc, #144]	@ (8003154 <HAL_RCC_OscConfig+0x278>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff f8a8 	bl	800221c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d0:	f7ff f8a4 	bl	800221c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e193      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d036      	beq.n	8003168 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <HAL_RCC_OscConfig+0x27c>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7ff f888 	bl	800221c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7ff f884 	bl	800221c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e173      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x234>
 800312e:	e01b      	b.n	8003168 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCC_OscConfig+0x27c>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7ff f871 	bl	800221c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	e00e      	b.n	800315c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313e:	f7ff f86d 	bl	800221c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d907      	bls.n	800315c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e15c      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
 8003150:	40023800 	.word	0x40023800
 8003154:	42470000 	.word	0x42470000
 8003158:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	4b8a      	ldr	r3, [pc, #552]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ea      	bne.n	800313e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8097 	beq.w	80032a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317a:	4b83      	ldr	r3, [pc, #524]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10f      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4b7f      	ldr	r3, [pc, #508]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	4a7e      	ldr	r2, [pc, #504]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003194:	6413      	str	r3, [r2, #64]	@ 0x40
 8003196:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b79      	ldr	r3, [pc, #484]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d118      	bne.n	80031e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4b76      	ldr	r3, [pc, #472]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a75      	ldr	r2, [pc, #468]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031be:	f7ff f82d 	bl	800221c <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7ff f829 	bl	800221c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e118      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	4b6c      	ldr	r3, [pc, #432]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x31e>
 80031ec:	4b66      	ldr	r3, [pc, #408]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f0:	4a65      	ldr	r2, [pc, #404]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f8:	e01c      	b.n	8003234 <HAL_RCC_OscConfig+0x358>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x340>
 8003202:	4b61      	ldr	r3, [pc, #388]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	4a60      	ldr	r2, [pc, #384]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6713      	str	r3, [r2, #112]	@ 0x70
 800320e:	4b5e      	ldr	r3, [pc, #376]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	4a5d      	ldr	r2, [pc, #372]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6713      	str	r3, [r2, #112]	@ 0x70
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0x358>
 800321c:	4b5a      	ldr	r3, [pc, #360]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003220:	4a59      	ldr	r2, [pc, #356]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	@ 0x70
 8003228:	4b57      	ldr	r3, [pc, #348]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322c:	4a56      	ldr	r2, [pc, #344]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800322e:	f023 0304 	bic.w	r3, r3, #4
 8003232:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d015      	beq.n	8003268 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe ffee 	bl	800221c <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe ffea 	bl	800221c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0d7      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	4b4b      	ldr	r3, [pc, #300]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0ee      	beq.n	8003244 <HAL_RCC_OscConfig+0x368>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe ffd8 	bl	800221c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe ffd4 	bl	800221c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0c1      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	4b40      	ldr	r3, [pc, #256]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ee      	bne.n	8003270 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003298:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	4a3a      	ldr	r2, [pc, #232]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80ad 	beq.w	8003408 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ae:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d060      	beq.n	800337c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d145      	bne.n	800334e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <HAL_RCC_OscConfig+0x4b4>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe ffa8 	bl	800221c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe ffa4 	bl	800221c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e093      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	019b      	lsls	r3, r3, #6
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	3b01      	subs	r3, #1
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	071b      	lsls	r3, r3, #28
 800331a:	491b      	ldr	r1, [pc, #108]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x4b4>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe ff79 	bl	800221c <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe ff75 	bl	800221c <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e064      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x452>
 800334c:	e05c      	b.n	8003408 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_RCC_OscConfig+0x4b4>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe ff62 	bl	800221c <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe ff5e 	bl	800221c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04d      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x480>
 800337a:	e045      	b.n	8003408 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e040      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000
 8003390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003394:	4b1f      	ldr	r3, [pc, #124]	@ (8003414 <HAL_RCC_OscConfig+0x538>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d030      	beq.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d129      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d122      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d119      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d10f      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e041      	b.n	80034ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f839 	bl	80034b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 f9c0 	bl	80037dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d001      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e04e      	b.n	8003582 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a23      	ldr	r2, [pc, #140]	@ (8003590 <HAL_TIM_Base_Start_IT+0xc4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350e:	d01d      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <HAL_TIM_Base_Start_IT+0xc8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1e      	ldr	r2, [pc, #120]	@ (8003598 <HAL_TIM_Base_Start_IT+0xcc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <HAL_TIM_Base_Start_IT+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d111      	bne.n	8003570 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b06      	cmp	r3, #6
 800355c:	d010      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	e007      	b.n	8003580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40010400 	.word	0x40010400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40001800 	.word	0x40001800

080035ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d020      	beq.n	8003610 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01b      	beq.n	8003610 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0202 	mvn.w	r2, #2
 80035e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8d2 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8c4 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8d5 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0204 	mvn.w	r2, #4
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8ac 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f89e 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8af 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d020      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01b      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0208 	mvn.w	r2, #8
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2204      	movs	r2, #4
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f886 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f878 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f889 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d020      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01b      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0210 	mvn.w	r2, #16
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2208      	movs	r2, #8
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f860 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f852 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f863 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0201 	mvn.w	r2, #1
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fab4 	bl	8001c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f906 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f834 	bl	80037c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0220 	mvn.w	r2, #32
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8d8 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a46      	ldr	r2, [pc, #280]	@ (8003908 <TIM_Base_SetConfig+0x12c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fa:	d00f      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a43      	ldr	r2, [pc, #268]	@ (800390c <TIM_Base_SetConfig+0x130>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00b      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a42      	ldr	r2, [pc, #264]	@ (8003910 <TIM_Base_SetConfig+0x134>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d007      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a41      	ldr	r2, [pc, #260]	@ (8003914 <TIM_Base_SetConfig+0x138>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a40      	ldr	r2, [pc, #256]	@ (8003918 <TIM_Base_SetConfig+0x13c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a35      	ldr	r2, [pc, #212]	@ (8003908 <TIM_Base_SetConfig+0x12c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02b      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d027      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a32      	ldr	r2, [pc, #200]	@ (800390c <TIM_Base_SetConfig+0x130>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d023      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a31      	ldr	r2, [pc, #196]	@ (8003910 <TIM_Base_SetConfig+0x134>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01f      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a30      	ldr	r2, [pc, #192]	@ (8003914 <TIM_Base_SetConfig+0x138>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01b      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2f      	ldr	r2, [pc, #188]	@ (8003918 <TIM_Base_SetConfig+0x13c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d017      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2e      	ldr	r2, [pc, #184]	@ (800391c <TIM_Base_SetConfig+0x140>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2d      	ldr	r2, [pc, #180]	@ (8003920 <TIM_Base_SetConfig+0x144>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00f      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2c      	ldr	r2, [pc, #176]	@ (8003924 <TIM_Base_SetConfig+0x148>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00b      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2b      	ldr	r2, [pc, #172]	@ (8003928 <TIM_Base_SetConfig+0x14c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2a      	ldr	r2, [pc, #168]	@ (800392c <TIM_Base_SetConfig+0x150>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a29      	ldr	r2, [pc, #164]	@ (8003930 <TIM_Base_SetConfig+0x154>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a10      	ldr	r2, [pc, #64]	@ (8003908 <TIM_Base_SetConfig+0x12c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_Base_SetConfig+0xf8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a12      	ldr	r2, [pc, #72]	@ (8003918 <TIM_Base_SetConfig+0x13c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d103      	bne.n	80038dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	611a      	str	r2, [r3, #16]
  }
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40010400 	.word	0x40010400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800
 8003928:	40001800 	.word	0x40001800
 800392c:	40001c00 	.word	0x40001c00
 8003930:	40002000 	.word	0x40002000

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e042      	b.n	80039f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe fb44 	bl	8002010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	@ 0x24
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800399e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fdf3 	bl	800458c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	@ 0x28
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d175      	bne.n	8003b08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_UART_Transmit+0x2c>
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e06e      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2221      	movs	r2, #33	@ 0x21
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a3a:	f7fe fbef 	bl	800221c <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	88fa      	ldrh	r2, [r7, #6]
 8003a44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	88fa      	ldrh	r2, [r7, #6]
 8003a4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a54:	d108      	bne.n	8003a68 <HAL_UART_Transmit+0x6c>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e003      	b.n	8003a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a70:	e02e      	b.n	8003ad0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2180      	movs	r1, #128	@ 0x80
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fb55 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e03a      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10b      	bne.n	8003ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	3302      	adds	r3, #2
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	e007      	b.n	8003ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1cb      	bne.n	8003a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2140      	movs	r1, #64	@ 0x40
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fb21 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e006      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b085      	sub	sp, #20
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d121      	bne.n	8003b70 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_UART_Transmit_IT+0x26>
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e01a      	b.n	8003b72 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	88fa      	ldrh	r2, [r7, #6]
 8003b46:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2221      	movs	r2, #33	@ 0x21
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b6a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
  }
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d112      	bne.n	8003bbe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_UART_Receive_IT+0x26>
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e00b      	b.n	8003bc0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fb12 	bl	80041de <UART_Start_Receive_IT>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	e000      	b.n	8003bc0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
  }
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b0ba      	sub	sp, #232	@ 0xe8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10f      	bne.n	8003c2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_UART_IRQHandler+0x66>
 8003c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fbf2 	bl	8004410 <UART_Receive_IT>
      return;
 8003c2c:	e25b      	b.n	80040e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80de 	beq.w	8003df4 <HAL_UART_IRQHandler+0x22c>
 8003c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80d1 	beq.w	8003df4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_UART_IRQHandler+0xae>
 8003c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_UART_IRQHandler+0xd2>
 8003c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f043 0202 	orr.w	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_UART_IRQHandler+0xf6>
 8003ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	f043 0204 	orr.w	r2, r3, #4
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <HAL_UART_IRQHandler+0x126>
 8003cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	f043 0208 	orr.w	r2, r3, #8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 81f2 	beq.w	80040dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_UART_IRQHandler+0x14e>
 8003d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fb7d 	bl	8004410 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d20:	2b40      	cmp	r3, #64	@ 0x40
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_UART_IRQHandler+0x17a>
 8003d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d04f      	beq.n	8003de2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa85 	bl	8004252 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d52:	2b40      	cmp	r3, #64	@ 0x40
 8003d54:	d141      	bne.n	8003dda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1d9      	bne.n	8003d56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d013      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dae:	4a7e      	ldr	r2, [pc, #504]	@ (8003fa8 <HAL_UART_IRQHandler+0x3e0>)
 8003db0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fbb2 	bl	8002520 <HAL_DMA_Abort_IT>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e00e      	b.n	8003df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f994 	bl	8004100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	e00a      	b.n	8003df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f990 	bl	8004100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	e006      	b.n	8003df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f98c 	bl	8004100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003dee:	e175      	b.n	80040dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	bf00      	nop
    return;
 8003df2:	e173      	b.n	80040dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	f040 814f 	bne.w	800409c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8148 	beq.w	800409c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8141 	beq.w	800409c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b40      	cmp	r3, #64	@ 0x40
 8003e3c:	f040 80b6 	bne.w	8003fac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8145 	beq.w	80040e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	f080 813e 	bcs.w	80040e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e76:	f000 8088 	beq.w	8003f8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003eaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1d9      	bne.n	8003e7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ed6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003eea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e1      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3314      	adds	r3, #20
 8003f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e3      	bne.n	8003f02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f5a:	f023 0310 	bic.w	r3, r3, #16
 8003f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e3      	bne.n	8003f48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe fa5b 	bl	8002440 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f8b7 	bl	8004114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fa6:	e09b      	b.n	80040e0 <HAL_UART_IRQHandler+0x518>
 8003fa8:	08004319 	.word	0x08004319
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 808e 	beq.w	80040e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8089 	beq.w	80040e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ff6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ff8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ffc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e3      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3314      	adds	r3, #20
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	623b      	str	r3, [r7, #32]
   return(result);
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3314      	adds	r3, #20
 800402a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800402e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004030:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e3      	bne.n	800400a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0310 	bic.w	r3, r3, #16
 8004066:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004074:	61fa      	str	r2, [r7, #28]
 8004076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	69b9      	ldr	r1, [r7, #24]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	617b      	str	r3, [r7, #20]
   return(result);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e3      	bne.n	8004050 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800408e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f83d 	bl	8004114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800409a:	e023      	b.n	80040e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d009      	beq.n	80040bc <HAL_UART_IRQHandler+0x4f4>
 80040a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f943 	bl	8004340 <UART_Transmit_IT>
    return;
 80040ba:	e014      	b.n	80040e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00e      	beq.n	80040e6 <HAL_UART_IRQHandler+0x51e>
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f983 	bl	80043e0 <UART_EndTransmit_IT>
    return;
 80040da:	e004      	b.n	80040e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80040dc:	bf00      	nop
 80040de:	e002      	b.n	80040e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040e0:	bf00      	nop
 80040e2:	e000      	b.n	80040e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040e4:	bf00      	nop
  }
}
 80040e6:	37e8      	adds	r7, #232	@ 0xe8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413c:	e03b      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d037      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fe f869 	bl	800221c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <UART_WaitOnFlagUntilTimeout+0x30>
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e03a      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d023      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b80      	cmp	r3, #128	@ 0x80
 8004172:	d020      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b40      	cmp	r3, #64	@ 0x40
 8004178:	d01d      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b08      	cmp	r3, #8
 8004186:	d116      	bne.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f857 	bl	8004252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2208      	movs	r2, #8
 80041a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e00f      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d0b4      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	4613      	mov	r3, r2
 80041ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2222      	movs	r2, #34	@ 0x22
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004222:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0220 	orr.w	r2, r2, #32
 8004242:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004252:	b480      	push	{r7}
 8004254:	b095      	sub	sp, #84	@ 0x54
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800427a:	643a      	str	r2, [r7, #64]	@ 0x40
 800427c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e5      	bne.n	800425a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3314      	adds	r3, #20
 8004294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	61fb      	str	r3, [r7, #28]
   return(result);
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e5      	bne.n	800428e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d119      	bne.n	80042fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f023 0310 	bic.w	r3, r3, #16
 80042e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ea:	61ba      	str	r2, [r7, #24]
 80042ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6979      	ldr	r1, [r7, #20]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	613b      	str	r3, [r7, #16]
   return(result);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e5      	bne.n	80042ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800430c:	bf00      	nop
 800430e:	3754      	adds	r7, #84	@ 0x54
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004324:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff fee4 	bl	8004100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b21      	cmp	r3, #33	@ 0x21
 8004352:	d13e      	bne.n	80043d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435c:	d114      	bne.n	8004388 <UART_Transmit_IT+0x48>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d110      	bne.n	8004388 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	621a      	str	r2, [r3, #32]
 8004386:	e008      	b.n	800439a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	1c59      	adds	r1, r3, #1
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6211      	str	r1, [r2, #32]
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4619      	mov	r1, r3
 80043a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fe73 	bl	80040ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08c      	sub	sp, #48	@ 0x30
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b22      	cmp	r3, #34	@ 0x22
 8004422:	f040 80ae 	bne.w	8004582 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442e:	d117      	bne.n	8004460 <UART_Receive_IT+0x50>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d113      	bne.n	8004460 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	b29a      	uxth	r2, r3
 8004450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004452:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	1c9a      	adds	r2, r3, #2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	629a      	str	r2, [r3, #40]	@ 0x28
 800445e:	e026      	b.n	80044ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004466:	2300      	movs	r3, #0
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004472:	d007      	beq.n	8004484 <UART_Receive_IT+0x74>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <UART_Receive_IT+0x82>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e008      	b.n	80044a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4619      	mov	r1, r3
 80044bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d15d      	bne.n	800457e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0220 	bic.w	r2, r2, #32
 80044d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	d135      	bne.n	8004574 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	613b      	str	r3, [r7, #16]
   return(result);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452e:	623a      	str	r2, [r7, #32]
 8004530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	69f9      	ldr	r1, [r7, #28]
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	61bb      	str	r3, [r7, #24]
   return(result);
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b10      	cmp	r3, #16
 800454e:	d10a      	bne.n	8004566 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800456a:	4619      	mov	r1, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff fdd1 	bl	8004114 <HAL_UARTEx_RxEventCallback>
 8004572:	e002      	b.n	800457a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7fd f9d3 	bl	8001920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e002      	b.n	8004584 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e000      	b.n	8004584 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
  }
}
 8004584:	4618      	mov	r0, r3
 8004586:	3730      	adds	r7, #48	@ 0x30
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b0c0      	sub	sp, #256	@ 0x100
 8004592:	af00      	add	r7, sp, #0
 8004594:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	68d9      	ldr	r1, [r3, #12]
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	ea40 0301 	orr.w	r3, r0, r1
 80045b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045e4:	f021 010c 	bic.w	r1, r1, #12
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045f2:	430b      	orrs	r3, r1
 80045f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004606:	6999      	ldr	r1, [r3, #24]
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	ea40 0301 	orr.w	r3, r0, r1
 8004612:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b8f      	ldr	r3, [pc, #572]	@ (8004858 <UART_SetConfig+0x2cc>)
 800461c:	429a      	cmp	r2, r3
 800461e:	d005      	beq.n	800462c <UART_SetConfig+0xa0>
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b8d      	ldr	r3, [pc, #564]	@ (800485c <UART_SetConfig+0x2d0>)
 8004628:	429a      	cmp	r2, r3
 800462a:	d104      	bne.n	8004636 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800462c:	f7fe fa66 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8004630:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004634:	e003      	b.n	800463e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004636:	f7fe fa4d 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 800463a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004648:	f040 810c 	bne.w	8004864 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800464c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004650:	2200      	movs	r2, #0
 8004652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004656:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800465a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800465e:	4622      	mov	r2, r4
 8004660:	462b      	mov	r3, r5
 8004662:	1891      	adds	r1, r2, r2
 8004664:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004666:	415b      	adcs	r3, r3
 8004668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800466a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800466e:	4621      	mov	r1, r4
 8004670:	eb12 0801 	adds.w	r8, r2, r1
 8004674:	4629      	mov	r1, r5
 8004676:	eb43 0901 	adc.w	r9, r3, r1
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800468a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800468e:	4690      	mov	r8, r2
 8004690:	4699      	mov	r9, r3
 8004692:	4623      	mov	r3, r4
 8004694:	eb18 0303 	adds.w	r3, r8, r3
 8004698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800469c:	462b      	mov	r3, r5
 800469e:	eb49 0303 	adc.w	r3, r9, r3
 80046a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046ba:	460b      	mov	r3, r1
 80046bc:	18db      	adds	r3, r3, r3
 80046be:	653b      	str	r3, [r7, #80]	@ 0x50
 80046c0:	4613      	mov	r3, r2
 80046c2:	eb42 0303 	adc.w	r3, r2, r3
 80046c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80046c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046d0:	f7fb fdf6 	bl	80002c0 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4b61      	ldr	r3, [pc, #388]	@ (8004860 <UART_SetConfig+0x2d4>)
 80046da:	fba3 2302 	umull	r2, r3, r3, r2
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	011c      	lsls	r4, r3, #4
 80046e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046fc:	415b      	adcs	r3, r3
 80046fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004700:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004704:	4641      	mov	r1, r8
 8004706:	eb12 0a01 	adds.w	sl, r2, r1
 800470a:	4649      	mov	r1, r9
 800470c:	eb43 0b01 	adc.w	fp, r3, r1
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800471c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004724:	4692      	mov	sl, r2
 8004726:	469b      	mov	fp, r3
 8004728:	4643      	mov	r3, r8
 800472a:	eb1a 0303 	adds.w	r3, sl, r3
 800472e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004732:	464b      	mov	r3, r9
 8004734:	eb4b 0303 	adc.w	r3, fp, r3
 8004738:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004748:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800474c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004750:	460b      	mov	r3, r1
 8004752:	18db      	adds	r3, r3, r3
 8004754:	643b      	str	r3, [r7, #64]	@ 0x40
 8004756:	4613      	mov	r3, r2
 8004758:	eb42 0303 	adc.w	r3, r2, r3
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
 800475e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004762:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004766:	f7fb fdab 	bl	80002c0 <__aeabi_uldivmod>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4611      	mov	r1, r2
 8004770:	4b3b      	ldr	r3, [pc, #236]	@ (8004860 <UART_SetConfig+0x2d4>)
 8004772:	fba3 2301 	umull	r2, r3, r3, r1
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	2264      	movs	r2, #100	@ 0x64
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	1acb      	subs	r3, r1, r3
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004786:	4b36      	ldr	r3, [pc, #216]	@ (8004860 <UART_SetConfig+0x2d4>)
 8004788:	fba3 2302 	umull	r2, r3, r3, r2
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004794:	441c      	add	r4, r3
 8004796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800479a:	2200      	movs	r2, #0
 800479c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047a8:	4642      	mov	r2, r8
 80047aa:	464b      	mov	r3, r9
 80047ac:	1891      	adds	r1, r2, r2
 80047ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047b0:	415b      	adcs	r3, r3
 80047b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047b8:	4641      	mov	r1, r8
 80047ba:	1851      	adds	r1, r2, r1
 80047bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80047be:	4649      	mov	r1, r9
 80047c0:	414b      	adcs	r3, r1
 80047c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047d0:	4659      	mov	r1, fp
 80047d2:	00cb      	lsls	r3, r1, #3
 80047d4:	4651      	mov	r1, sl
 80047d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047da:	4651      	mov	r1, sl
 80047dc:	00ca      	lsls	r2, r1, #3
 80047de:	4610      	mov	r0, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	4642      	mov	r2, r8
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047ec:	464b      	mov	r3, r9
 80047ee:	460a      	mov	r2, r1
 80047f0:	eb42 0303 	adc.w	r3, r2, r3
 80047f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004804:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800480c:	460b      	mov	r3, r1
 800480e:	18db      	adds	r3, r3, r3
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004812:	4613      	mov	r3, r2
 8004814:	eb42 0303 	adc.w	r3, r2, r3
 8004818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800481a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800481e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004822:	f7fb fd4d 	bl	80002c0 <__aeabi_uldivmod>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4b0d      	ldr	r3, [pc, #52]	@ (8004860 <UART_SetConfig+0x2d4>)
 800482c:	fba3 1302 	umull	r1, r3, r3, r2
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	2164      	movs	r1, #100	@ 0x64
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	3332      	adds	r3, #50	@ 0x32
 800483e:	4a08      	ldr	r2, [pc, #32]	@ (8004860 <UART_SetConfig+0x2d4>)
 8004840:	fba2 2303 	umull	r2, r3, r2, r3
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	f003 0207 	and.w	r2, r3, #7
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4422      	add	r2, r4
 8004852:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004854:	e106      	b.n	8004a64 <UART_SetConfig+0x4d8>
 8004856:	bf00      	nop
 8004858:	40011000 	.word	0x40011000
 800485c:	40011400 	.word	0x40011400
 8004860:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004868:	2200      	movs	r2, #0
 800486a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800486e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004876:	4642      	mov	r2, r8
 8004878:	464b      	mov	r3, r9
 800487a:	1891      	adds	r1, r2, r2
 800487c:	6239      	str	r1, [r7, #32]
 800487e:	415b      	adcs	r3, r3
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
 8004882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004886:	4641      	mov	r1, r8
 8004888:	1854      	adds	r4, r2, r1
 800488a:	4649      	mov	r1, r9
 800488c:	eb43 0501 	adc.w	r5, r3, r1
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	00eb      	lsls	r3, r5, #3
 800489a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800489e:	00e2      	lsls	r2, r4, #3
 80048a0:	4614      	mov	r4, r2
 80048a2:	461d      	mov	r5, r3
 80048a4:	4643      	mov	r3, r8
 80048a6:	18e3      	adds	r3, r4, r3
 80048a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048ac:	464b      	mov	r3, r9
 80048ae:	eb45 0303 	adc.w	r3, r5, r3
 80048b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048d2:	4629      	mov	r1, r5
 80048d4:	008b      	lsls	r3, r1, #2
 80048d6:	4621      	mov	r1, r4
 80048d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048dc:	4621      	mov	r1, r4
 80048de:	008a      	lsls	r2, r1, #2
 80048e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048e4:	f7fb fcec 	bl	80002c0 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4b60      	ldr	r3, [pc, #384]	@ (8004a70 <UART_SetConfig+0x4e4>)
 80048ee:	fba3 2302 	umull	r2, r3, r3, r2
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	011c      	lsls	r4, r3, #4
 80048f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004900:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004904:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004908:	4642      	mov	r2, r8
 800490a:	464b      	mov	r3, r9
 800490c:	1891      	adds	r1, r2, r2
 800490e:	61b9      	str	r1, [r7, #24]
 8004910:	415b      	adcs	r3, r3
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004918:	4641      	mov	r1, r8
 800491a:	1851      	adds	r1, r2, r1
 800491c:	6139      	str	r1, [r7, #16]
 800491e:	4649      	mov	r1, r9
 8004920:	414b      	adcs	r3, r1
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004930:	4659      	mov	r1, fp
 8004932:	00cb      	lsls	r3, r1, #3
 8004934:	4651      	mov	r1, sl
 8004936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800493a:	4651      	mov	r1, sl
 800493c:	00ca      	lsls	r2, r1, #3
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	4603      	mov	r3, r0
 8004944:	4642      	mov	r2, r8
 8004946:	189b      	adds	r3, r3, r2
 8004948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800494c:	464b      	mov	r3, r9
 800494e:	460a      	mov	r2, r1
 8004950:	eb42 0303 	adc.w	r3, r2, r3
 8004954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004962:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004970:	4649      	mov	r1, r9
 8004972:	008b      	lsls	r3, r1, #2
 8004974:	4641      	mov	r1, r8
 8004976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800497a:	4641      	mov	r1, r8
 800497c:	008a      	lsls	r2, r1, #2
 800497e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004982:	f7fb fc9d 	bl	80002c0 <__aeabi_uldivmod>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4611      	mov	r1, r2
 800498c:	4b38      	ldr	r3, [pc, #224]	@ (8004a70 <UART_SetConfig+0x4e4>)
 800498e:	fba3 2301 	umull	r2, r3, r3, r1
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	2264      	movs	r2, #100	@ 0x64
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	1acb      	subs	r3, r1, r3
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	3332      	adds	r3, #50	@ 0x32
 80049a0:	4a33      	ldr	r2, [pc, #204]	@ (8004a70 <UART_SetConfig+0x4e4>)
 80049a2:	fba2 2303 	umull	r2, r3, r2, r3
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ac:	441c      	add	r4, r3
 80049ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b2:	2200      	movs	r2, #0
 80049b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80049b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80049b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049bc:	4642      	mov	r2, r8
 80049be:	464b      	mov	r3, r9
 80049c0:	1891      	adds	r1, r2, r2
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	415b      	adcs	r3, r3
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049cc:	4641      	mov	r1, r8
 80049ce:	1851      	adds	r1, r2, r1
 80049d0:	6039      	str	r1, [r7, #0]
 80049d2:	4649      	mov	r1, r9
 80049d4:	414b      	adcs	r3, r1
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049e4:	4659      	mov	r1, fp
 80049e6:	00cb      	lsls	r3, r1, #3
 80049e8:	4651      	mov	r1, sl
 80049ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ee:	4651      	mov	r1, sl
 80049f0:	00ca      	lsls	r2, r1, #3
 80049f2:	4610      	mov	r0, r2
 80049f4:	4619      	mov	r1, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	4642      	mov	r2, r8
 80049fa:	189b      	adds	r3, r3, r2
 80049fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049fe:	464b      	mov	r3, r9
 8004a00:	460a      	mov	r2, r1
 8004a02:	eb42 0303 	adc.w	r3, r2, r3
 8004a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a12:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a20:	4649      	mov	r1, r9
 8004a22:	008b      	lsls	r3, r1, #2
 8004a24:	4641      	mov	r1, r8
 8004a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a2a:	4641      	mov	r1, r8
 8004a2c:	008a      	lsls	r2, r1, #2
 8004a2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a32:	f7fb fc45 	bl	80002c0 <__aeabi_uldivmod>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a70 <UART_SetConfig+0x4e4>)
 8004a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	2164      	movs	r1, #100	@ 0x64
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	3332      	adds	r3, #50	@ 0x32
 8004a4e:	4a08      	ldr	r2, [pc, #32]	@ (8004a70 <UART_SetConfig+0x4e4>)
 8004a50:	fba2 2303 	umull	r2, r3, r2, r3
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	f003 020f 	and.w	r2, r3, #15
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4422      	add	r2, r4
 8004a62:	609a      	str	r2, [r3, #8]
}
 8004a64:	bf00      	nop
 8004a66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a70:	51eb851f 	.word	0x51eb851f

08004a74 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f103 0208 	add.w	r2, r3, #8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f103 0208 	add.w	r2, r3, #8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f103 0208 	add.w	r2, r3, #8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	601a      	str	r2, [r3, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d103      	bne.n	8004b36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e00c      	b.n	8004b50 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e002      	b.n	8004b44 <vListInsert+0x2e>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d2f6      	bcs.n	8004b3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	601a      	str	r2, [r3, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6892      	ldr	r2, [r2, #8]
 8004b9e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6852      	ldr	r2, [r2, #4]
 8004ba8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d103      	bne.n	8004bbc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	1e5a      	subs	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10b      	bne.n	8004c08 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	e7fd      	b.n	8004c04 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004c08:	f002 faa0 	bl	800714c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c14:	68f9      	ldr	r1, [r7, #12]
 8004c16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	441a      	add	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	22ff      	movs	r2, #255	@ 0xff
 8004c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	22ff      	movs	r2, #255	@ 0xff
 8004c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d114      	bne.n	8004c88 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01a      	beq.n	8004c9c <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3310      	adds	r3, #16
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fa60 	bl	8006130 <xTaskRemoveFromEventList>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d012      	beq.n	8004c9c <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004c76:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <xQueueGenericReset+0xd0>)
 8004c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	e009      	b.n	8004c9c <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3310      	adds	r3, #16
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fef1 	bl	8004a74 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3324      	adds	r3, #36	@ 0x24
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff feec 	bl	8004a74 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004c9c:	f002 fa88 	bl	80071b0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004ca0:	2301      	movs	r3, #1
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	e000ed04 	.word	0xe000ed04

08004cb0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	@ 0x30
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10b      	bne.n	8004cdc <xQueueGenericCreate+0x2c>
        __asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	61bb      	str	r3, [r7, #24]
    }
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	fb02 f303 	mul.w	r3, r2, r3
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d006      	beq.n	8004cfa <xQueueGenericCreate+0x4a>
 8004cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d101      	bne.n	8004cfe <xQueueGenericCreate+0x4e>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <xQueueGenericCreate+0x50>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <xQueueGenericCreate+0x6c>
        __asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	617b      	str	r3, [r7, #20]
    }
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8004d22:	d90b      	bls.n	8004d3c <xQueueGenericCreate+0x8c>
        __asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	613b      	str	r3, [r7, #16]
    }
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	e7fd      	b.n	8004d38 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	3350      	adds	r3, #80	@ 0x50
 8004d40:	4618      	mov	r0, r3
 8004d42:	f002 fb2d 	bl	80073a0 <pvPortMalloc>
 8004d46:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00d      	beq.n	8004d6a <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3350      	adds	r3, #80	@ 0x50
 8004d56:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d58:	79fa      	ldrb	r2, [r7, #7]
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f805 	bl	8004d74 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
    }
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3728      	adds	r7, #40	@ 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004da2:	2101      	movs	r1, #1
 8004da4:	69b8      	ldr	r0, [r7, #24]
 8004da6:	f7ff ff19 	bl	8004bdc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08e      	sub	sp, #56	@ 0x38
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10b      	bne.n	8004df0 <xQueueGenericSend+0x34>
        __asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <xQueueGenericSend+0x42>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <xQueueGenericSend+0x46>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <xQueueGenericSend+0x48>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <xQueueGenericSend+0x64>
        __asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	e7fd      	b.n	8004e1c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d103      	bne.n	8004e2e <xQueueGenericSend+0x72>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <xQueueGenericSend+0x76>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <xQueueGenericSend+0x78>
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10b      	bne.n	8004e50 <xQueueGenericSend+0x94>
        __asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	623b      	str	r3, [r7, #32]
    }
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	e7fd      	b.n	8004e4c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e50:	f001 fb0e 	bl	8006470 <xTaskGetSchedulerState>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <xQueueGenericSend+0xa4>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <xQueueGenericSend+0xa8>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <xQueueGenericSend+0xaa>
 8004e64:	2300      	movs	r3, #0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <xQueueGenericSend+0xc6>
        __asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	61fb      	str	r3, [r7, #28]
    }
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004e82:	f002 f963 	bl	800714c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <xQueueGenericSend+0xdc>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d129      	bne.n	8004eec <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e9e:	f000 fbe7 	bl	8005670 <prvCopyDataToQueue>
 8004ea2:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	3324      	adds	r3, #36	@ 0x24
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f93d 	bl	8006130 <xTaskRemoveFromEventList>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d013      	beq.n	8004ee4 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8004fbc <xQueueGenericSend+0x200>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	e00a      	b.n	8004ee4 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004ed4:	4b39      	ldr	r3, [pc, #228]	@ (8004fbc <xQueueGenericSend+0x200>)
 8004ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004ee4:	f002 f964 	bl	80071b0 <vPortExitCritical>
                return pdPASS;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e063      	b.n	8004fb4 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004ef2:	f002 f95d 	bl	80071b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e05c      	b.n	8004fb4 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f977 	bl	80061f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004f0e:	f002 f94f 	bl	80071b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004f12:	f000 fee9 	bl	8005ce8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004f16:	f002 f919 	bl	800714c <vPortEnterCritical>
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f20:	b25b      	sxtb	r3, r3
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d103      	bne.n	8004f30 <xQueueGenericSend+0x174>
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f36:	b25b      	sxtb	r3, r3
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d103      	bne.n	8004f46 <xQueueGenericSend+0x18a>
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f46:	f002 f933 	bl	80071b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f4a:	1d3a      	adds	r2, r7, #4
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 f966 	bl	8006224 <xTaskCheckForTimeOut>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d124      	bne.n	8004fa8 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f60:	f000 fc7e 	bl	8005860 <prvIsQueueFull>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d018      	beq.n	8004f9c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	3310      	adds	r3, #16
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 f88a 	bl	800608c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f7a:	f000 fc09 	bl	8005790 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004f7e:	f000 fec1 	bl	8005d04 <xTaskResumeAll>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f af7c 	bne.w	8004e82 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fbc <xQueueGenericSend+0x200>)
 8004f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	e772      	b.n	8004e82 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f9e:	f000 fbf7 	bl	8005790 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004fa2:	f000 feaf 	bl	8005d04 <xTaskResumeAll>
 8004fa6:	e76c      	b.n	8004e82 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004fa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004faa:	f000 fbf1 	bl	8005790 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004fae:	f000 fea9 	bl	8005d04 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004fb2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3738      	adds	r7, #56	@ 0x38
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	e000ed04 	.word	0xe000ed04

08004fc0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b090      	sub	sp, #64	@ 0x40
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	e7fd      	b.n	8004fec <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d103      	bne.n	8004ffe <xQueueGenericSendFromISR+0x3e>
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <xQueueGenericSendFromISR+0x42>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xQueueGenericSendFromISR+0x44>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d103      	bne.n	800502e <xQueueGenericSendFromISR+0x6e>
 8005026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <xQueueGenericSendFromISR+0x72>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <xQueueGenericSendFromISR+0x74>
 8005032:	2300      	movs	r3, #0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	623b      	str	r3, [r7, #32]
    }
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	e7fd      	b.n	800504c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005050:	f002 f964 	bl	800731c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005054:	f3ef 8211 	mrs	r2, BASEPRI
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	61fa      	str	r2, [r7, #28]
 800506a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800506c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800506e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005078:	429a      	cmp	r2, r3
 800507a:	d302      	bcc.n	8005082 <xQueueGenericSendFromISR+0xc2>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d13f      	bne.n	8005102 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005084:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005088:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800508c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005098:	f000 faea 	bl	8005670 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800509c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d112      	bne.n	80050cc <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d026      	beq.n	80050fc <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	3324      	adds	r3, #36	@ 0x24
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f83c 	bl	8006130 <xTaskRemoveFromEventList>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01e      	beq.n	80050fc <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01b      	beq.n	80050fc <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e017      	b.n	80050fc <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80050cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80050d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80050d2:	d10b      	bne.n	80050ec <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	617b      	str	r3, [r7, #20]
    }
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	e7fd      	b.n	80050e8 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050f0:	3301      	adds	r3, #1
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	b25a      	sxtb	r2, r3
 80050f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80050fc:	2301      	movs	r3, #1
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8005100:	e001      	b.n	8005106 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005102:	2300      	movs	r3, #0
 8005104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005110:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005114:	4618      	mov	r0, r3
 8005116:	3740      	adds	r7, #64	@ 0x40
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08e      	sub	sp, #56	@ 0x38
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	633b      	str	r3, [r7, #48]	@ 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <xQueueGiveFromISR+0x2c>
        __asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	623b      	str	r3, [r7, #32]
    }
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <xQueueGiveFromISR+0x4c>
        __asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	61fb      	str	r3, [r7, #28]
    }
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	e7fd      	b.n	8005164 <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <xQueueGiveFromISR+0x5c>
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <xQueueGiveFromISR+0x60>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <xQueueGiveFromISR+0x62>
 800517c:	2300      	movs	r3, #0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <xQueueGiveFromISR+0x7e>
        __asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	61bb      	str	r3, [r7, #24]
    }
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	e7fd      	b.n	8005196 <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800519a:	f002 f8bf 	bl	800731c <vPortValidateInterruptPriority>
        __asm volatile
 800519e:	f3ef 8211 	mrs	r2, BASEPRI
 80051a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	617a      	str	r2, [r7, #20]
 80051b4:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80051b6:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d23b      	bcs.n	8005242 <xQueueGiveFromISR+0x126>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051da:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80051dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d112      	bne.n	800520c <xQueueGiveFromISR+0xf0>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d026      	beq.n	800523c <xQueueGiveFromISR+0x120>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	3324      	adds	r3, #36	@ 0x24
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 ff9c 	bl	8006130 <xTaskRemoveFromEventList>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01e      	beq.n	800523c <xQueueGiveFromISR+0x120>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <xQueueGiveFromISR+0x120>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e017      	b.n	800523c <xQueueGiveFromISR+0x120>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800520c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005210:	2b7f      	cmp	r3, #127	@ 0x7f
 8005212:	d10b      	bne.n	800522c <xQueueGiveFromISR+0x110>
        __asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60fb      	str	r3, [r7, #12]
    }
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <xQueueGiveFromISR+0x10c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800522c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005230:	3301      	adds	r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	b25a      	sxtb	r2, r3
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800523c:	2301      	movs	r3, #1
 800523e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005240:	e001      	b.n	8005246 <xQueueGiveFromISR+0x12a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005242:	2300      	movs	r3, #0
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f383 8811 	msr	BASEPRI, r3
    }
 8005250:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005254:	4618      	mov	r0, r3
 8005256:	3738      	adds	r7, #56	@ 0x38
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08c      	sub	sp, #48	@ 0x30
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005268:	2300      	movs	r3, #0
 800526a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <xQueueReceive+0x32>
        __asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	623b      	str	r3, [r7, #32]
    }
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <xQueueReceive+0x40>
 8005294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <xQueueReceive+0x44>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <xQueueReceive+0x46>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10b      	bne.n	80052be <xQueueReceive+0x62>
        __asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	61fb      	str	r3, [r7, #28]
    }
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052be:	f001 f8d7 	bl	8006470 <xTaskGetSchedulerState>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <xQueueReceive+0x72>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <xQueueReceive+0x76>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <xQueueReceive+0x78>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <xQueueReceive+0x94>
        __asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	61bb      	str	r3, [r7, #24]
    }
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80052f0:	f001 ff2c 	bl	800714c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01f      	beq.n	8005340 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005304:	f000 fa1e 	bl	8005744 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	1e5a      	subs	r2, r3, #1
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00f      	beq.n	8005338 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	3310      	adds	r3, #16
 800531c:	4618      	mov	r0, r3
 800531e:	f000 ff07 	bl	8006130 <xTaskRemoveFromEventList>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005328:	4b3c      	ldr	r3, [pc, #240]	@ (800541c <xQueueReceive+0x1c0>)
 800532a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005338:	f001 ff3a 	bl	80071b0 <vPortExitCritical>
                return pdPASS;
 800533c:	2301      	movs	r3, #1
 800533e:	e069      	b.n	8005414 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005346:	f001 ff33 	bl	80071b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800534a:	2300      	movs	r3, #0
 800534c:	e062      	b.n	8005414 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800534e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005354:	f107 0310 	add.w	r3, r7, #16
 8005358:	4618      	mov	r0, r3
 800535a:	f000 ff4d 	bl	80061f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800535e:	2301      	movs	r3, #1
 8005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005362:	f001 ff25 	bl	80071b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005366:	f000 fcbf 	bl	8005ce8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800536a:	f001 feef 	bl	800714c <vPortEnterCritical>
 800536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005374:	b25b      	sxtb	r3, r3
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d103      	bne.n	8005384 <xQueueReceive+0x128>
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800538a:	b25b      	sxtb	r3, r3
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d103      	bne.n	800539a <xQueueReceive+0x13e>
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800539a:	f001 ff09 	bl	80071b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800539e:	1d3a      	adds	r2, r7, #4
 80053a0:	f107 0310 	add.w	r3, r7, #16
 80053a4:	4611      	mov	r1, r2
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 ff3c 	bl	8006224 <xTaskCheckForTimeOut>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d123      	bne.n	80053fa <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053b4:	f000 fa3e 	bl	8005834 <prvIsQueueEmpty>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d017      	beq.n	80053ee <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c0:	3324      	adds	r3, #36	@ 0x24
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fe60 	bl	800608c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80053cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ce:	f000 f9df 	bl	8005790 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80053d2:	f000 fc97 	bl	8005d04 <xTaskResumeAll>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d189      	bne.n	80052f0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80053dc:	4b0f      	ldr	r3, [pc, #60]	@ (800541c <xQueueReceive+0x1c0>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	e780      	b.n	80052f0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80053ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053f0:	f000 f9ce 	bl	8005790 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80053f4:	f000 fc86 	bl	8005d04 <xTaskResumeAll>
 80053f8:	e77a      	b.n	80052f0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80053fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053fc:	f000 f9c8 	bl	8005790 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005400:	f000 fc80 	bl	8005d04 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005406:	f000 fa15 	bl	8005834 <prvIsQueueEmpty>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	f43f af6f 	beq.w	80052f0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005412:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005414:	4618      	mov	r0, r3
 8005416:	3730      	adds	r7, #48	@ 0x30
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	@ 0x38
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005432:	2300      	movs	r3, #0
 8005434:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <xQueueSemaphoreTake+0x34>
        __asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	623b      	str	r3, [r7, #32]
    }
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <xQueueSemaphoreTake+0x54>
        __asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	61fb      	str	r3, [r7, #28]
    }
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005474:	f000 fffc 	bl	8006470 <xTaskGetSchedulerState>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <xQueueSemaphoreTake+0x64>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <xQueueSemaphoreTake+0x68>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <xQueueSemaphoreTake+0x6a>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10b      	bne.n	80054a6 <xQueueSemaphoreTake+0x86>
        __asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	61bb      	str	r3, [r7, #24]
    }
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80054a6:	f001 fe51 	bl	800714c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80054aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ae:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80054b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d024      	beq.n	8005500 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	1e5a      	subs	r2, r3, #1
 80054ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054bc:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80054c6:	f001 f973 	bl	80067b0 <pvTaskIncrementMutexHeldCount>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ce:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00f      	beq.n	80054f8 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054da:	3310      	adds	r3, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fe27 	bl	8006130 <xTaskRemoveFromEventList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80054e8:	4b54      	ldr	r3, [pc, #336]	@ (800563c <xQueueSemaphoreTake+0x21c>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80054f8:	f001 fe5a 	bl	80071b0 <vPortExitCritical>
                return pdPASS;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e098      	b.n	8005632 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d112      	bne.n	800552c <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <xQueueSemaphoreTake+0x104>
        __asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	617b      	str	r3, [r7, #20]
    }
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8005524:	f001 fe44 	bl	80071b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005528:	2300      	movs	r3, #0
 800552a:	e082      	b.n	8005632 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 800552c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005532:	f107 030c 	add.w	r3, r7, #12
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fe5e 	bl	80061f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800553c:	2301      	movs	r3, #1
 800553e:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005540:	f001 fe36 	bl	80071b0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005544:	f000 fbd0 	bl	8005ce8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005548:	f001 fe00 	bl	800714c <vPortEnterCritical>
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005552:	b25b      	sxtb	r3, r3
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d103      	bne.n	8005562 <xQueueSemaphoreTake+0x142>
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005564:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005568:	b25b      	sxtb	r3, r3
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	d103      	bne.n	8005578 <xQueueSemaphoreTake+0x158>
 8005570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005578:	f001 fe1a 	bl	80071b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800557c:	463a      	mov	r2, r7
 800557e:	f107 030c 	add.w	r3, r7, #12
 8005582:	4611      	mov	r1, r2
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fe4d 	bl	8006224 <xTaskCheckForTimeOut>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d132      	bne.n	80055f6 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005590:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005592:	f000 f94f 	bl	8005834 <prvIsQueueEmpty>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d026      	beq.n	80055ea <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800559c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 80055a4:	f001 fdd2 	bl	800714c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 ff7d 	bl	80064ac <xTaskPriorityInherit>
 80055b2:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 80055b4:	f001 fdfc 	bl	80071b0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	3324      	adds	r3, #36	@ 0x24
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fd63 	bl	800608c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80055c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055c8:	f000 f8e2 	bl	8005790 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80055cc:	f000 fb9a 	bl	8005d04 <xTaskResumeAll>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f47f af67 	bne.w	80054a6 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 80055d8:	4b18      	ldr	r3, [pc, #96]	@ (800563c <xQueueSemaphoreTake+0x21c>)
 80055da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	e75d      	b.n	80054a6 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80055ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055ec:	f000 f8d0 	bl	8005790 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80055f0:	f000 fb88 	bl	8005d04 <xTaskResumeAll>
 80055f4:	e757      	b.n	80054a6 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80055f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055f8:	f000 f8ca 	bl	8005790 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80055fc:	f000 fb82 	bl	8005d04 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005600:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005602:	f000 f917 	bl	8005834 <prvIsQueueEmpty>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	f43f af4c 	beq.w	80054a6 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 8005614:	f001 fd9a 	bl	800714c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005618:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800561a:	f000 f811 	bl	8005640 <prvGetDisinheritPriorityAfterTimeout>
 800561e:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005626:	4618      	mov	r0, r3
 8005628:	f001 f832 	bl	8006690 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800562c:	f001 fdc0 	bl	80071b0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005630:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005632:	4618      	mov	r0, r3
 8005634:	3738      	adds	r7, #56	@ 0x38
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d006      	beq.n	800565e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1c3 0305 	rsb	r3, r3, #5
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e001      	b.n	8005662 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8005662:	68fb      	ldr	r3, [r7, #12]
    }
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10d      	bne.n	80056aa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d14d      	bne.n	8005732 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 ff7c 	bl	8006598 <xTaskPriorityDisinherit>
 80056a0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	e043      	b.n	8005732 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d119      	bne.n	80056e4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6858      	ldr	r0, [r3, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	461a      	mov	r2, r3
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	f002 fb6f 	bl	8007d9e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c8:	441a      	add	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d32b      	bcc.n	8005732 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	e026      	b.n	8005732 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	68d8      	ldr	r0, [r3, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ec:	461a      	mov	r2, r3
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	f002 fb55 	bl	8007d9e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	425b      	negs	r3, r3
 80056fe:	441a      	add	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d207      	bcs.n	8005720 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	425b      	negs	r3, r3
 800571a:	441a      	add	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d105      	bne.n	8005732 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	3b01      	subs	r3, #1
 8005730:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800573a:	697b      	ldr	r3, [r7, #20]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	441a      	add	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	d303      	bcc.n	8005778 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68d9      	ldr	r1, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	461a      	mov	r2, r3
 8005782:	6838      	ldr	r0, [r7, #0]
 8005784:	f002 fb0b 	bl	8007d9e <memcpy>
    }
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005798:	f001 fcd8 	bl	800714c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057a2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a4:	e011      	b.n	80057ca <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d012      	beq.n	80057d4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3324      	adds	r3, #36	@ 0x24
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fcbc 	bl	8006130 <xTaskRemoveFromEventList>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80057be:	f000 fd99 	bl	80062f4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dce9      	bgt.n	80057a6 <prvUnlockQueue+0x16>
 80057d2:	e000      	b.n	80057d6 <prvUnlockQueue+0x46>
                        break;
 80057d4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	22ff      	movs	r2, #255	@ 0xff
 80057da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80057de:	f001 fce7 	bl	80071b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80057e2:	f001 fcb3 	bl	800714c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057ec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ee:	e011      	b.n	8005814 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3310      	adds	r3, #16
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fc97 	bl	8006130 <xTaskRemoveFromEventList>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005808:	f000 fd74 	bl	80062f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800580c:	7bbb      	ldrb	r3, [r7, #14]
 800580e:	3b01      	subs	r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005818:	2b00      	cmp	r3, #0
 800581a:	dce9      	bgt.n	80057f0 <prvUnlockQueue+0x60>
 800581c:	e000      	b.n	8005820 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800581e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	22ff      	movs	r2, #255	@ 0xff
 8005824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005828:	f001 fcc2 	bl	80071b0 <vPortExitCritical>
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800583c:	f001 fc86 	bl	800714c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e001      	b.n	8005852 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005852:	f001 fcad 	bl	80071b0 <vPortExitCritical>

    return xReturn;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005868:	f001 fc70 	bl	800714c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005874:	429a      	cmp	r2, r3
 8005876:	d102      	bne.n	800587e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	e001      	b.n	8005882 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005882:	f001 fc95 	bl	80071b0 <vPortExitCritical>

    return xReturn;
 8005886:	68fb      	ldr	r3, [r7, #12]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e014      	b.n	80058ca <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058a0:	4a0f      	ldr	r2, [pc, #60]	@ (80058e0 <vQueueAddToRegistry+0x50>)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10b      	bne.n	80058c4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058ac:	490c      	ldr	r1, [pc, #48]	@ (80058e0 <vQueueAddToRegistry+0x50>)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80058b6:	4a0a      	ldr	r2, [pc, #40]	@ (80058e0 <vQueueAddToRegistry+0x50>)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4413      	add	r3, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80058c2:	e006      	b.n	80058d2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3301      	adds	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b07      	cmp	r3, #7
 80058ce:	d9e7      	bls.n	80058a0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000db4 	.word	0x20000db4

080058e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80058f4:	f001 fc2a 	bl	800714c <vPortEnterCritical>
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058fe:	b25b      	sxtb	r3, r3
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d103      	bne.n	800590e <vQueueWaitForMessageRestricted+0x2a>
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005914:	b25b      	sxtb	r3, r3
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	d103      	bne.n	8005924 <vQueueWaitForMessageRestricted+0x40>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005924:	f001 fc44 	bl	80071b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	3324      	adds	r3, #36	@ 0x24
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fbcd 	bl	80060d8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f7ff ff26 	bl	8005790 <prvUnlockQueue>
    }
 8005944:	bf00      	nop
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	@ 0x30
 8005950:	af04      	add	r7, sp, #16
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fd1d 	bl	80073a0 <pvPortMalloc>
 8005966:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00e      	beq.n	800598c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800596e:	2058      	movs	r0, #88	@ 0x58
 8005970:	f001 fd16 	bl	80073a0 <pvPortMalloc>
 8005974:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	631a      	str	r2, [r3, #48]	@ 0x30
 8005982:	e005      	b.n	8005990 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005984:	6978      	ldr	r0, [r7, #20]
 8005986:	f001 fded 	bl	8007564 <vPortFree>
 800598a:	e001      	b.n	8005990 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d013      	beq.n	80059be <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005996:	88fa      	ldrh	r2, [r7, #6]
 8005998:	2300      	movs	r3, #0
 800599a:	9303      	str	r3, [sp, #12]
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	9302      	str	r3, [sp, #8]
 80059a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f80e 	bl	80059ce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80059b2:	69f8      	ldr	r0, [r7, #28]
 80059b4:	f000 f8a2 	bl	8005afc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80059b8:	2301      	movs	r3, #1
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	e002      	b.n	80059c4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059be:	f04f 33ff 	mov.w	r3, #4294967295
 80059c2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80059c4:	69bb      	ldr	r3, [r7, #24]
    }
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b088      	sub	sp, #32
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	461a      	mov	r2, r3
 80059e6:	21a5      	movs	r1, #165	@ 0xa5
 80059e8:	f002 f93a 	bl	8007c60 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059f6:	3b01      	subs	r3, #1
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	f023 0307 	bic.w	r3, r3, #7
 8005a04:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	617b      	str	r3, [r7, #20]
    }
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	e7fd      	b.n	8005a24 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01f      	beq.n	8005a6e <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	e012      	b.n	8005a5a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	7819      	ldrb	r1, [r3, #0]
 8005a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	3334      	adds	r3, #52	@ 0x34
 8005a44:	460a      	mov	r2, r1
 8005a46:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3301      	adds	r3, #1
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d9e9      	bls.n	8005a34 <prvInitialiseNewTask+0x66>
 8005a60:	e000      	b.n	8005a64 <prvInitialiseNewTask+0x96>
            {
                break;
 8005a62:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a6c:	e003      	b.n	8005a76 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d901      	bls.n	8005a80 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a84:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a8a:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	2200      	movs	r2, #0
 8005a90:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a94:	3304      	adds	r3, #4
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff f80c 	bl	8004ab4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	3318      	adds	r3, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff f807 	bl	8004ab4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aaa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	f1c3 0205 	rsb	r2, r3, #5
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aba:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	3350      	adds	r3, #80	@ 0x50
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f002 f8cb 	bl	8007c60 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	3354      	adds	r3, #84	@ 0x54
 8005ace:	2201      	movs	r2, #1
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f002 f8c4 	bl	8007c60 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	68f9      	ldr	r1, [r7, #12]
 8005adc:	69b8      	ldr	r0, [r7, #24]
 8005ade:	f001 f9ff 	bl	8006ee0 <pxPortInitialiseStack>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005af4:	bf00      	nop
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005b04:	f001 fb22 	bl	800714c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005b08:	4b2c      	ldr	r3, [pc, #176]	@ (8005bbc <prvAddNewTaskToReadyList+0xc0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8005bbc <prvAddNewTaskToReadyList+0xc0>)
 8005b10:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005b12:	4b2b      	ldr	r3, [pc, #172]	@ (8005bc0 <prvAddNewTaskToReadyList+0xc4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005b1a:	4a29      	ldr	r2, [pc, #164]	@ (8005bc0 <prvAddNewTaskToReadyList+0xc4>)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b20:	4b26      	ldr	r3, [pc, #152]	@ (8005bbc <prvAddNewTaskToReadyList+0xc0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d110      	bne.n	8005b4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005b28:	f000 fc08 	bl	800633c <prvInitialiseTaskLists>
 8005b2c:	e00d      	b.n	8005b4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005b2e:	4b25      	ldr	r3, [pc, #148]	@ (8005bc4 <prvAddNewTaskToReadyList+0xc8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b36:	4b22      	ldr	r3, [pc, #136]	@ (8005bc0 <prvAddNewTaskToReadyList+0xc4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d802      	bhi.n	8005b4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005b44:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc0 <prvAddNewTaskToReadyList+0xc4>)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bc8 <prvAddNewTaskToReadyList+0xcc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc8 <prvAddNewTaskToReadyList+0xcc>)
 8005b52:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b54:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc8 <prvAddNewTaskToReadyList+0xcc>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	2201      	movs	r2, #1
 8005b62:	409a      	lsls	r2, r3
 8005b64:	4b19      	ldr	r3, [pc, #100]	@ (8005bcc <prvAddNewTaskToReadyList+0xd0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	4a18      	ldr	r2, [pc, #96]	@ (8005bcc <prvAddNewTaskToReadyList+0xd0>)
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4a15      	ldr	r2, [pc, #84]	@ (8005bd0 <prvAddNewTaskToReadyList+0xd4>)
 8005b7c:	441a      	add	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f7fe ffa2 	bl	8004ace <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005b8a:	f001 fb11 	bl	80071b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <prvAddNewTaskToReadyList+0xc8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00e      	beq.n	8005bb4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b96:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <prvAddNewTaskToReadyList+0xc4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d207      	bcs.n	8005bb4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <prvAddNewTaskToReadyList+0xd8>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000ecc 	.word	0x20000ecc
 8005bc0:	20000df4 	.word	0x20000df4
 8005bc4:	20000ed8 	.word	0x20000ed8
 8005bc8:	20000ee8 	.word	0x20000ee8
 8005bcc:	20000ed4 	.word	0x20000ed4
 8005bd0:	20000df8 	.word	0x20000df8
 8005bd4:	e000ed04 	.word	0xe000ed04

08005bd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d018      	beq.n	8005c1c <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8005bea:	4b14      	ldr	r3, [pc, #80]	@ (8005c3c <vTaskDelay+0x64>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <vTaskDelay+0x32>
        __asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60bb      	str	r3, [r7, #8]
    }
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	e7fd      	b.n	8005c06 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8005c0a:	f000 f86d 	bl	8005ce8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c0e:	2100      	movs	r1, #0
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fde1 	bl	80067d8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005c16:	f000 f875 	bl	8005d04 <xTaskResumeAll>
 8005c1a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8005c22:	4b07      	ldr	r3, [pc, #28]	@ (8005c40 <vTaskDelay+0x68>)
 8005c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000ef4 	.word	0x20000ef4
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005c4a:	4b20      	ldr	r3, [pc, #128]	@ (8005ccc <vTaskStartScheduler+0x88>)
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	2300      	movs	r3, #0
 8005c54:	2282      	movs	r2, #130	@ 0x82
 8005c56:	491e      	ldr	r1, [pc, #120]	@ (8005cd0 <vTaskStartScheduler+0x8c>)
 8005c58:	481e      	ldr	r0, [pc, #120]	@ (8005cd4 <vTaskStartScheduler+0x90>)
 8005c5a:	f7ff fe77 	bl	800594c <xTaskCreate>
 8005c5e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d102      	bne.n	8005c6c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005c66:	f000 fe1d 	bl	80068a4 <xTimerCreateTimerTask>
 8005c6a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d116      	bne.n	8005ca0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60bb      	str	r3, [r7, #8]
    }
 8005c84:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005c86:	4b14      	ldr	r3, [pc, #80]	@ (8005cd8 <vTaskStartScheduler+0x94>)
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005c8e:	4b13      	ldr	r3, [pc, #76]	@ (8005cdc <vTaskStartScheduler+0x98>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c94:	4b12      	ldr	r3, [pc, #72]	@ (8005ce0 <vTaskStartScheduler+0x9c>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005c9a:	f001 f9b3 	bl	8007004 <xPortStartScheduler>
 8005c9e:	e00f      	b.n	8005cc0 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d10b      	bne.n	8005cc0 <vTaskStartScheduler+0x7c>
        __asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	607b      	str	r3, [r7, #4]
    }
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005cc0:	4b08      	ldr	r3, [pc, #32]	@ (8005ce4 <vTaskStartScheduler+0xa0>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000ef0 	.word	0x20000ef0
 8005cd0:	08009114 	.word	0x08009114
 8005cd4:	0800630d 	.word	0x0800630d
 8005cd8:	20000eec 	.word	0x20000eec
 8005cdc:	20000ed8 	.word	0x20000ed8
 8005ce0:	20000ed0 	.word	0x20000ed0
 8005ce4:	2000000c 	.word	0x2000000c

08005ce8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005cec:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <vTaskSuspendAll+0x18>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	4a03      	ldr	r2, [pc, #12]	@ (8005d00 <vTaskSuspendAll+0x18>)
 8005cf4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	20000ef4 	.word	0x20000ef4

08005d04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005d12:	4b42      	ldr	r3, [pc, #264]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <xTaskResumeAll+0x2e>
        __asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	603b      	str	r3, [r7, #0]
    }
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	e7fd      	b.n	8005d2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005d32:	f001 fa0b 	bl	800714c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005d36:	4b39      	ldr	r3, [pc, #228]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	4a37      	ldr	r2, [pc, #220]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d3e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d40:	4b36      	ldr	r3, [pc, #216]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d161      	bne.n	8005e0c <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d48:	4b35      	ldr	r3, [pc, #212]	@ (8005e20 <xTaskResumeAll+0x11c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05d      	beq.n	8005e0c <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d50:	e02e      	b.n	8005db0 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d52:	4b34      	ldr	r3, [pc, #208]	@ (8005e24 <xTaskResumeAll+0x120>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe ff12 	bl	8004b88 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fe ff0d 	bl	8004b88 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	2201      	movs	r2, #1
 8005d74:	409a      	lsls	r2, r3
 8005d76:	4b2c      	ldr	r3, [pc, #176]	@ (8005e28 <xTaskResumeAll+0x124>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e28 <xTaskResumeAll+0x124>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4a27      	ldr	r2, [pc, #156]	@ (8005e2c <xTaskResumeAll+0x128>)
 8005d8e:	441a      	add	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7fe fe99 	bl	8004ace <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4b23      	ldr	r3, [pc, #140]	@ (8005e30 <xTaskResumeAll+0x12c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8005daa:	4b22      	ldr	r3, [pc, #136]	@ (8005e34 <xTaskResumeAll+0x130>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005db0:	4b1c      	ldr	r3, [pc, #112]	@ (8005e24 <xTaskResumeAll+0x120>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1cc      	bne.n	8005d52 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005dbe:	f000 fb3b 	bl	8006438 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e38 <xTaskResumeAll+0x134>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d010      	beq.n	8005df0 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005dce:	f000 f847 	bl	8005e60 <xTaskIncrementTick>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8005dd8:	4b16      	ldr	r3, [pc, #88]	@ (8005e34 <xTaskResumeAll+0x130>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f1      	bne.n	8005dce <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8005dea:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <xTaskResumeAll+0x134>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005df0:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <xTaskResumeAll+0x130>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e3c <xTaskResumeAll+0x138>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005e0c:	f001 f9d0 	bl	80071b0 <vPortExitCritical>

    return xAlreadyYielded;
 8005e10:	68bb      	ldr	r3, [r7, #8]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000ef4 	.word	0x20000ef4
 8005e20:	20000ecc 	.word	0x20000ecc
 8005e24:	20000e8c 	.word	0x20000e8c
 8005e28:	20000ed4 	.word	0x20000ed4
 8005e2c:	20000df8 	.word	0x20000df8
 8005e30:	20000df4 	.word	0x20000df4
 8005e34:	20000ee0 	.word	0x20000ee0
 8005e38:	20000edc 	.word	0x20000edc
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005e46:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <xTaskGetTickCount+0x1c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005e4c:	687b      	ldr	r3, [r7, #4]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	20000ed0 	.word	0x20000ed0

08005e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa8 <xTaskIncrementTick+0x148>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f040 808f 	bne.w	8005f92 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e74:	4b4d      	ldr	r3, [pc, #308]	@ (8005fac <xTaskIncrementTick+0x14c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8005fac <xTaskIncrementTick+0x14c>)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d121      	bne.n	8005ecc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005e88:	4b49      	ldr	r3, [pc, #292]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <xTaskIncrementTick+0x4a>
        __asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	603b      	str	r3, [r7, #0]
    }
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <xTaskIncrementTick+0x46>
 8005eaa:	4b41      	ldr	r3, [pc, #260]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	4b40      	ldr	r3, [pc, #256]	@ (8005fb4 <xTaskIncrementTick+0x154>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb4 <xTaskIncrementTick+0x154>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb8 <xTaskIncrementTick+0x158>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb8 <xTaskIncrementTick+0x158>)
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	f000 fab6 	bl	8006438 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8005fbc <xTaskIncrementTick+0x15c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d348      	bcc.n	8005f68 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ed6:	4b36      	ldr	r3, [pc, #216]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee0:	4b36      	ldr	r3, [pc, #216]	@ (8005fbc <xTaskIncrementTick+0x15c>)
 8005ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee6:	601a      	str	r2, [r3, #0]
                    break;
 8005ee8:	e03e      	b.n	8005f68 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eea:	4b31      	ldr	r3, [pc, #196]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d203      	bcs.n	8005f0a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005f02:	4a2e      	ldr	r2, [pc, #184]	@ (8005fbc <xTaskIncrementTick+0x15c>)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f08:	e02e      	b.n	8005f68 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fe3a 	bl	8004b88 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	3318      	adds	r3, #24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe fe31 	bl	8004b88 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	409a      	lsls	r2, r3
 8005f2e:	4b24      	ldr	r3, [pc, #144]	@ (8005fc0 <xTaskIncrementTick+0x160>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	4a22      	ldr	r2, [pc, #136]	@ (8005fc0 <xTaskIncrementTick+0x160>)
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <xTaskIncrementTick+0x164>)
 8005f46:	441a      	add	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7fe fdbd 	bl	8004ace <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f58:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc8 <xTaskIncrementTick+0x168>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d3b9      	bcc.n	8005ed6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8005f62:	2301      	movs	r3, #1
 8005f64:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f66:	e7b6      	b.n	8005ed6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f68:	4b17      	ldr	r3, [pc, #92]	@ (8005fc8 <xTaskIncrementTick+0x168>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6e:	4915      	ldr	r1, [pc, #84]	@ (8005fc4 <xTaskIncrementTick+0x164>)
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d901      	bls.n	8005f84 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005f84:	4b11      	ldr	r3, [pc, #68]	@ (8005fcc <xTaskIncrementTick+0x16c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e004      	b.n	8005f9c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005f92:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd0 <xTaskIncrementTick+0x170>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3301      	adds	r3, #1
 8005f98:	4a0d      	ldr	r2, [pc, #52]	@ (8005fd0 <xTaskIncrementTick+0x170>)
 8005f9a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005f9c:	697b      	ldr	r3, [r7, #20]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000ef4 	.word	0x20000ef4
 8005fac:	20000ed0 	.word	0x20000ed0
 8005fb0:	20000e84 	.word	0x20000e84
 8005fb4:	20000e88 	.word	0x20000e88
 8005fb8:	20000ee4 	.word	0x20000ee4
 8005fbc:	20000eec 	.word	0x20000eec
 8005fc0:	20000ed4 	.word	0x20000ed4
 8005fc4:	20000df8 	.word	0x20000df8
 8005fc8:	20000df4 	.word	0x20000df4
 8005fcc:	20000ee0 	.word	0x20000ee0
 8005fd0:	20000edc 	.word	0x20000edc

08005fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fda:	4b27      	ldr	r3, [pc, #156]	@ (8006078 <vTaskSwitchContext+0xa4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005fe2:	4b26      	ldr	r3, [pc, #152]	@ (800607c <vTaskSwitchContext+0xa8>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005fe8:	e040      	b.n	800606c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8005fea:	4b24      	ldr	r3, [pc, #144]	@ (800607c <vTaskSwitchContext+0xa8>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff0:	4b23      	ldr	r3, [pc, #140]	@ (8006080 <vTaskSwitchContext+0xac>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	fab3 f383 	clz	r3, r3
 8005ffc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	f1c3 031f 	rsb	r3, r3, #31
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	491f      	ldr	r1, [pc, #124]	@ (8006084 <vTaskSwitchContext+0xb0>)
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <vTaskSwitchContext+0x5e>
        __asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	607b      	str	r3, [r7, #4]
    }
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <vTaskSwitchContext+0x5a>
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4a11      	ldr	r2, [pc, #68]	@ (8006084 <vTaskSwitchContext+0xb0>)
 800603e:	4413      	add	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	605a      	str	r2, [r3, #4]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	3308      	adds	r3, #8
 8006054:	429a      	cmp	r2, r3
 8006056:	d104      	bne.n	8006062 <vTaskSwitchContext+0x8e>
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a07      	ldr	r2, [pc, #28]	@ (8006088 <vTaskSwitchContext+0xb4>)
 800606a:	6013      	str	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	20000ef4 	.word	0x20000ef4
 800607c:	20000ee0 	.word	0x20000ee0
 8006080:	20000ed4 	.word	0x20000ed4
 8006084:	20000df8 	.word	0x20000df8
 8006088:	20000df4 	.word	0x20000df4

0800608c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10b      	bne.n	80060b4 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	60fb      	str	r3, [r7, #12]
    }
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b4:	4b07      	ldr	r3, [pc, #28]	@ (80060d4 <vTaskPlaceOnEventList+0x48>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3318      	adds	r3, #24
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fe fd2a 	bl	8004b16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060c2:	2101      	movs	r1, #1
 80060c4:	6838      	ldr	r0, [r7, #0]
 80060c6:	f000 fb87 	bl	80067d8 <prvAddCurrentTaskToDelayedList>
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000df4 	.word	0x20000df4

080060d8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	617b      	str	r3, [r7, #20]
    }
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006102:	4b0a      	ldr	r3, [pc, #40]	@ (800612c <vTaskPlaceOnEventListRestricted+0x54>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3318      	adds	r3, #24
 8006108:	4619      	mov	r1, r3
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7fe fcdf 	bl	8004ace <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8006116:	f04f 33ff 	mov.w	r3, #4294967295
 800611a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	68b8      	ldr	r0, [r7, #8]
 8006120:	f000 fb5a 	bl	80067d8 <prvAddCurrentTaskToDelayedList>
    }
 8006124:	bf00      	nop
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000df4 	.word	0x20000df4

08006130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60fb      	str	r3, [r7, #12]
    }
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	e7fd      	b.n	800615a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3318      	adds	r3, #24
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fd10 	bl	8004b88 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006168:	4b1d      	ldr	r3, [pc, #116]	@ (80061e0 <xTaskRemoveFromEventList+0xb0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d11c      	bne.n	80061aa <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	3304      	adds	r3, #4
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fd07 	bl	8004b88 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	2201      	movs	r2, #1
 8006180:	409a      	lsls	r2, r3
 8006182:	4b18      	ldr	r3, [pc, #96]	@ (80061e4 <xTaskRemoveFromEventList+0xb4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4313      	orrs	r3, r2
 8006188:	4a16      	ldr	r2, [pc, #88]	@ (80061e4 <xTaskRemoveFromEventList+0xb4>)
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4a13      	ldr	r2, [pc, #76]	@ (80061e8 <xTaskRemoveFromEventList+0xb8>)
 800619a:	441a      	add	r2, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f7fe fc93 	bl	8004ace <vListInsertEnd>
 80061a8:	e005      	b.n	80061b6 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3318      	adds	r3, #24
 80061ae:	4619      	mov	r1, r3
 80061b0:	480e      	ldr	r0, [pc, #56]	@ (80061ec <xTaskRemoveFromEventList+0xbc>)
 80061b2:	f7fe fc8c 	bl	8004ace <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ba:	4b0d      	ldr	r3, [pc, #52]	@ (80061f0 <xTaskRemoveFromEventList+0xc0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d905      	bls.n	80061d0 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80061c8:	4b0a      	ldr	r3, [pc, #40]	@ (80061f4 <xTaskRemoveFromEventList+0xc4>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e001      	b.n	80061d4 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80061d4:	697b      	ldr	r3, [r7, #20]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000ef4 	.word	0x20000ef4
 80061e4:	20000ed4 	.word	0x20000ed4
 80061e8:	20000df8 	.word	0x20000df8
 80061ec:	20000e8c 	.word	0x20000e8c
 80061f0:	20000df4 	.word	0x20000df4
 80061f4:	20000ee0 	.word	0x20000ee0

080061f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006200:	4b06      	ldr	r3, [pc, #24]	@ (800621c <vTaskInternalSetTimeOutState+0x24>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006208:	4b05      	ldr	r3, [pc, #20]	@ (8006220 <vTaskInternalSetTimeOutState+0x28>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	605a      	str	r2, [r3, #4]
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	20000ee4 	.word	0x20000ee4
 8006220:	20000ed0 	.word	0x20000ed0

08006224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10b      	bne.n	800624c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	613b      	str	r3, [r7, #16]
    }
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	60fb      	str	r3, [r7, #12]
    }
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800626a:	f000 ff6f 	bl	800714c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800626e:	4b1f      	ldr	r3, [pc, #124]	@ (80062ec <xTaskCheckForTimeOut+0xc8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006286:	d102      	bne.n	800628e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	e026      	b.n	80062dc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b17      	ldr	r3, [pc, #92]	@ (80062f0 <xTaskCheckForTimeOut+0xcc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d00a      	beq.n	80062b0 <xTaskCheckForTimeOut+0x8c>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d305      	bcc.n	80062b0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80062a4:	2301      	movs	r3, #1
 80062a6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e015      	b.n	80062dc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d20b      	bcs.n	80062d2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	1ad2      	subs	r2, r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff ff96 	bl	80061f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	e004      	b.n	80062dc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80062dc:	f000 ff68 	bl	80071b0 <vPortExitCritical>

    return xReturn;
 80062e0:	69fb      	ldr	r3, [r7, #28]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000ed0 	.word	0x20000ed0
 80062f0:	20000ee4 	.word	0x20000ee4

080062f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80062f8:	4b03      	ldr	r3, [pc, #12]	@ (8006308 <vTaskMissedYield+0x14>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
}
 80062fe:	bf00      	nop
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	20000ee0 	.word	0x20000ee0

0800630c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006314:	f000 f852 	bl	80063bc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006318:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <prvIdleTask+0x28>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d9f9      	bls.n	8006314 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006320:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <prvIdleTask+0x2c>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006330:	e7f0      	b.n	8006314 <prvIdleTask+0x8>
 8006332:	bf00      	nop
 8006334:	20000df8 	.word	0x20000df8
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006342:	2300      	movs	r3, #0
 8006344:	607b      	str	r3, [r7, #4]
 8006346:	e00c      	b.n	8006362 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4a12      	ldr	r2, [pc, #72]	@ (800639c <prvInitialiseTaskLists+0x60>)
 8006354:	4413      	add	r3, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fb8c 	bl	8004a74 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3301      	adds	r3, #1
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b04      	cmp	r3, #4
 8006366:	d9ef      	bls.n	8006348 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006368:	480d      	ldr	r0, [pc, #52]	@ (80063a0 <prvInitialiseTaskLists+0x64>)
 800636a:	f7fe fb83 	bl	8004a74 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800636e:	480d      	ldr	r0, [pc, #52]	@ (80063a4 <prvInitialiseTaskLists+0x68>)
 8006370:	f7fe fb80 	bl	8004a74 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006374:	480c      	ldr	r0, [pc, #48]	@ (80063a8 <prvInitialiseTaskLists+0x6c>)
 8006376:	f7fe fb7d 	bl	8004a74 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800637a:	480c      	ldr	r0, [pc, #48]	@ (80063ac <prvInitialiseTaskLists+0x70>)
 800637c:	f7fe fb7a 	bl	8004a74 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006380:	480b      	ldr	r0, [pc, #44]	@ (80063b0 <prvInitialiseTaskLists+0x74>)
 8006382:	f7fe fb77 	bl	8004a74 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006386:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <prvInitialiseTaskLists+0x78>)
 8006388:	4a05      	ldr	r2, [pc, #20]	@ (80063a0 <prvInitialiseTaskLists+0x64>)
 800638a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800638c:	4b0a      	ldr	r3, [pc, #40]	@ (80063b8 <prvInitialiseTaskLists+0x7c>)
 800638e:	4a05      	ldr	r2, [pc, #20]	@ (80063a4 <prvInitialiseTaskLists+0x68>)
 8006390:	601a      	str	r2, [r3, #0]
}
 8006392:	bf00      	nop
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000df8 	.word	0x20000df8
 80063a0:	20000e5c 	.word	0x20000e5c
 80063a4:	20000e70 	.word	0x20000e70
 80063a8:	20000e8c 	.word	0x20000e8c
 80063ac:	20000ea0 	.word	0x20000ea0
 80063b0:	20000eb8 	.word	0x20000eb8
 80063b4:	20000e84 	.word	0x20000e84
 80063b8:	20000e88 	.word	0x20000e88

080063bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063c2:	e019      	b.n	80063f8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80063c4:	f000 fec2 	bl	800714c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c8:	4b10      	ldr	r3, [pc, #64]	@ (800640c <prvCheckTasksWaitingTermination+0x50>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fbd7 	bl	8004b88 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80063da:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <prvCheckTasksWaitingTermination+0x54>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3b01      	subs	r3, #1
 80063e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006410 <prvCheckTasksWaitingTermination+0x54>)
 80063e2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80063e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <prvCheckTasksWaitingTermination+0x58>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006414 <prvCheckTasksWaitingTermination+0x58>)
 80063ec:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80063ee:	f000 fedf 	bl	80071b0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f810 	bl	8006418 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f8:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <prvCheckTasksWaitingTermination+0x58>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e1      	bne.n	80063c4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000ea0 	.word	0x20000ea0
 8006410:	20000ecc 	.word	0x20000ecc
 8006414:	20000eb4 	.word	0x20000eb4

08006418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006424:	4618      	mov	r0, r3
 8006426:	f001 f89d 	bl	8007564 <vPortFree>
                vPortFree( pxTCB );
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 f89a 	bl	8007564 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800643c:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <prvResetNextTaskUnblockTime+0x30>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006446:	4b09      	ldr	r3, [pc, #36]	@ (800646c <prvResetNextTaskUnblockTime+0x34>)
 8006448:	f04f 32ff 	mov.w	r2, #4294967295
 800644c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800644e:	e005      	b.n	800645c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006450:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <prvResetNextTaskUnblockTime+0x30>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a04      	ldr	r2, [pc, #16]	@ (800646c <prvResetNextTaskUnblockTime+0x34>)
 800645a:	6013      	str	r3, [r2, #0]
}
 800645c:	bf00      	nop
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000e84 	.word	0x20000e84
 800646c:	20000eec 	.word	0x20000eec

08006470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006476:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <xTaskGetSchedulerState+0x34>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d102      	bne.n	8006484 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800647e:	2301      	movs	r3, #1
 8006480:	607b      	str	r3, [r7, #4]
 8006482:	e008      	b.n	8006496 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006484:	4b08      	ldr	r3, [pc, #32]	@ (80064a8 <xTaskGetSchedulerState+0x38>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800648c:	2302      	movs	r3, #2
 800648e:	607b      	str	r3, [r7, #4]
 8006490:	e001      	b.n	8006496 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006492:	2300      	movs	r3, #0
 8006494:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006496:	687b      	ldr	r3, [r7, #4]
    }
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20000ed8 	.word	0x20000ed8
 80064a8:	20000ef4 	.word	0x20000ef4

080064ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d05e      	beq.n	8006580 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c6:	4b31      	ldr	r3, [pc, #196]	@ (800658c <xTaskPriorityInherit+0xe0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d24e      	bcs.n	800656e <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	db06      	blt.n	80064e6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d8:	4b2c      	ldr	r3, [pc, #176]	@ (800658c <xTaskPriorityInherit+0xe0>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	f1c3 0205 	rsb	r2, r3, #5
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6959      	ldr	r1, [r3, #20]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4a26      	ldr	r2, [pc, #152]	@ (8006590 <xTaskPriorityInherit+0xe4>)
 80064f8:	4413      	add	r3, r2
 80064fa:	4299      	cmp	r1, r3
 80064fc:	d12f      	bne.n	800655e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	3304      	adds	r3, #4
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fb40 	bl	8004b88 <uxListRemove>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	2201      	movs	r2, #1
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	43da      	mvns	r2, r3
 800651a:	4b1e      	ldr	r3, [pc, #120]	@ (8006594 <xTaskPriorityInherit+0xe8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4013      	ands	r3, r2
 8006520:	4a1c      	ldr	r2, [pc, #112]	@ (8006594 <xTaskPriorityInherit+0xe8>)
 8006522:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006524:	4b19      	ldr	r3, [pc, #100]	@ (800658c <xTaskPriorityInherit+0xe0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	2201      	movs	r2, #1
 8006534:	409a      	lsls	r2, r3
 8006536:	4b17      	ldr	r3, [pc, #92]	@ (8006594 <xTaskPriorityInherit+0xe8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4313      	orrs	r3, r2
 800653c:	4a15      	ldr	r2, [pc, #84]	@ (8006594 <xTaskPriorityInherit+0xe8>)
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4a10      	ldr	r2, [pc, #64]	@ (8006590 <xTaskPriorityInherit+0xe4>)
 800654e:	441a      	add	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7fe fab9 	bl	8004ace <vListInsertEnd>
 800655c:	e004      	b.n	8006568 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800655e:	4b0b      	ldr	r3, [pc, #44]	@ (800658c <xTaskPriorityInherit+0xe0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	e008      	b.n	8006580 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006572:	4b06      	ldr	r3, [pc, #24]	@ (800658c <xTaskPriorityInherit+0xe0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006578:	429a      	cmp	r2, r3
 800657a:	d201      	bcs.n	8006580 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800657c:	2301      	movs	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006580:	68fb      	ldr	r3, [r7, #12]
    }
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000df4 	.word	0x20000df4
 8006590:	20000df8 	.word	0x20000df8
 8006594:	20000ed4 	.word	0x20000ed4

08006598 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d065      	beq.n	800667a <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80065ae:	4b35      	ldr	r3, [pc, #212]	@ (8006684 <xTaskPriorityDisinherit+0xec>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d00b      	beq.n	80065d0 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60fb      	str	r3, [r7, #12]
    }
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10b      	bne.n	80065f0 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	60bb      	str	r3, [r7, #8]
    }
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f4:	1e5a      	subs	r2, r3, #1
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006602:	429a      	cmp	r2, r3
 8006604:	d039      	beq.n	800667a <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d135      	bne.n	800667a <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	3304      	adds	r3, #4
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fab8 	bl	8004b88 <uxListRemove>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006622:	2201      	movs	r2, #1
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	43da      	mvns	r2, r3
 800662a:	4b17      	ldr	r3, [pc, #92]	@ (8006688 <xTaskPriorityDisinherit+0xf0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4013      	ands	r3, r2
 8006630:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <xTaskPriorityDisinherit+0xf0>)
 8006632:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	f1c3 0205 	rsb	r2, r3, #5
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	2201      	movs	r2, #1
 800664e:	409a      	lsls	r2, r3
 8006650:	4b0d      	ldr	r3, [pc, #52]	@ (8006688 <xTaskPriorityDisinherit+0xf0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4313      	orrs	r3, r2
 8006656:	4a0c      	ldr	r2, [pc, #48]	@ (8006688 <xTaskPriorityDisinherit+0xf0>)
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4a09      	ldr	r2, [pc, #36]	@ (800668c <xTaskPriorityDisinherit+0xf4>)
 8006668:	441a      	add	r2, r3
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7fe fa2c 	bl	8004ace <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006676:	2301      	movs	r3, #1
 8006678:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800667a:	697b      	ldr	r3, [r7, #20]
    }
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20000df4 	.word	0x20000df4
 8006688:	20000ed4 	.word	0x20000ed4
 800668c:	20000df8 	.word	0x20000df8

08006690 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800669e:	2301      	movs	r3, #1
 80066a0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d079      	beq.n	800679c <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	60fb      	str	r3, [r7, #12]
    }
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d902      	bls.n	80066d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	e002      	b.n	80066de <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066dc:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d059      	beq.n	800679c <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d154      	bne.n	800679c <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80066f2:	4b2c      	ldr	r3, [pc, #176]	@ (80067a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d10b      	bne.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	60bb      	str	r3, [r7, #8]
    }
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006718:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	db04      	blt.n	8006732 <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f1c3 0205 	rsb	r2, r3, #5
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	6959      	ldr	r1, [r3, #20]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4a19      	ldr	r2, [pc, #100]	@ (80067a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006742:	4413      	add	r3, r2
 8006744:	4299      	cmp	r1, r3
 8006746:	d129      	bne.n	800679c <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	3304      	adds	r3, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe fa1b 	bl	8004b88 <uxListRemove>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675c:	2201      	movs	r2, #1
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	43da      	mvns	r2, r3
 8006764:	4b11      	ldr	r3, [pc, #68]	@ (80067ac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4013      	ands	r3, r2
 800676a:	4a10      	ldr	r2, [pc, #64]	@ (80067ac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800676c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006772:	2201      	movs	r2, #1
 8006774:	409a      	lsls	r2, r3
 8006776:	4b0d      	ldr	r3, [pc, #52]	@ (80067ac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4313      	orrs	r3, r2
 800677c:	4a0b      	ldr	r2, [pc, #44]	@ (80067ac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4a06      	ldr	r2, [pc, #24]	@ (80067a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800678e:	441a      	add	r2, r3
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7fe f999 	bl	8004ace <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800679c:	bf00      	nop
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20000df4 	.word	0x20000df4
 80067a8:	20000df8 	.word	0x20000df8
 80067ac:	20000ed4 	.word	0x20000ed4

080067b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80067b4:	4b07      	ldr	r3, [pc, #28]	@ (80067d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d004      	beq.n	80067c6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80067bc:	4b05      	ldr	r3, [pc, #20]	@ (80067d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067c2:	3201      	adds	r2, #1
 80067c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 80067c6:	4b03      	ldr	r3, [pc, #12]	@ (80067d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80067c8:	681b      	ldr	r3, [r3, #0]
    }
 80067ca:	4618      	mov	r0, r3
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	20000df4 	.word	0x20000df4

080067d8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80067e2:	4b29      	ldr	r3, [pc, #164]	@ (8006888 <prvAddCurrentTaskToDelayedList+0xb0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067e8:	4b28      	ldr	r3, [pc, #160]	@ (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe f9ca 	bl	8004b88 <uxListRemove>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10b      	bne.n	8006812 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80067fa:	4b24      	ldr	r3, [pc, #144]	@ (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	2201      	movs	r2, #1
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	43da      	mvns	r2, r3
 8006808:	4b21      	ldr	r3, [pc, #132]	@ (8006890 <prvAddCurrentTaskToDelayedList+0xb8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4013      	ands	r3, r2
 800680e:	4a20      	ldr	r2, [pc, #128]	@ (8006890 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006810:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d10a      	bne.n	8006830 <prvAddCurrentTaskToDelayedList+0x58>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006820:	4b1a      	ldr	r3, [pc, #104]	@ (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3304      	adds	r3, #4
 8006826:	4619      	mov	r1, r3
 8006828:	481a      	ldr	r0, [pc, #104]	@ (8006894 <prvAddCurrentTaskToDelayedList+0xbc>)
 800682a:	f7fe f950 	bl	8004ace <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800682e:	e026      	b.n	800687e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006838:	4b14      	ldr	r3, [pc, #80]	@ (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	429a      	cmp	r2, r3
 8006846:	d209      	bcs.n	800685c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006848:	4b13      	ldr	r3, [pc, #76]	@ (8006898 <prvAddCurrentTaskToDelayedList+0xc0>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4b0f      	ldr	r3, [pc, #60]	@ (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3304      	adds	r3, #4
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f7fe f95e 	bl	8004b16 <vListInsert>
}
 800685a:	e010      	b.n	800687e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685c:	4b0f      	ldr	r3, [pc, #60]	@ (800689c <prvAddCurrentTaskToDelayedList+0xc4>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3304      	adds	r3, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f7fe f954 	bl	8004b16 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800686e:	4b0c      	ldr	r3, [pc, #48]	@ (80068a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	429a      	cmp	r2, r3
 8006876:	d202      	bcs.n	800687e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006878:	4a09      	ldr	r2, [pc, #36]	@ (80068a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6013      	str	r3, [r2, #0]
}
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000ed0 	.word	0x20000ed0
 800688c:	20000df4 	.word	0x20000df4
 8006890:	20000ed4 	.word	0x20000ed4
 8006894:	20000eb8 	.word	0x20000eb8
 8006898:	20000e88 	.word	0x20000e88
 800689c:	20000e84 	.word	0x20000e84
 80068a0:	20000eec 	.word	0x20000eec

080068a4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80068ae:	f000 fae1 	bl	8006e74 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80068b2:	4b12      	ldr	r3, [pc, #72]	@ (80068fc <xTimerCreateTimerTask+0x58>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80068ba:	4b11      	ldr	r3, [pc, #68]	@ (8006900 <xTimerCreateTimerTask+0x5c>)
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	2302      	movs	r3, #2
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80068c8:	490e      	ldr	r1, [pc, #56]	@ (8006904 <xTimerCreateTimerTask+0x60>)
 80068ca:	480f      	ldr	r0, [pc, #60]	@ (8006908 <xTimerCreateTimerTask+0x64>)
 80068cc:	f7ff f83e 	bl	800594c <xTaskCreate>
 80068d0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10b      	bne.n	80068f0 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	603b      	str	r3, [r7, #0]
    }
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	e7fd      	b.n	80068ec <xTimerCreateTimerTask+0x48>
        return xReturn;
 80068f0:	687b      	ldr	r3, [r7, #4]
    }
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000f28 	.word	0x20000f28
 8006900:	20000f2c 	.word	0x20000f2c
 8006904:	0800911c 	.word	0x0800911c
 8006908:	08006a45 	.word	0x08006a45

0800690c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	@ 0x28
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800691a:	2300      	movs	r3, #0
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <xTimerGenericCommand+0x30>
        __asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	623b      	str	r3, [r7, #32]
    }
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800693c:	4b19      	ldr	r3, [pc, #100]	@ (80069a4 <xTimerGenericCommand+0x98>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d02a      	beq.n	800699a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b05      	cmp	r3, #5
 8006954:	dc18      	bgt.n	8006988 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006956:	f7ff fd8b 	bl	8006470 <xTaskGetSchedulerState>
 800695a:	4603      	mov	r3, r0
 800695c:	2b02      	cmp	r3, #2
 800695e:	d109      	bne.n	8006974 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006960:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <xTimerGenericCommand+0x98>)
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	f107 0114 	add.w	r1, r7, #20
 8006968:	2300      	movs	r3, #0
 800696a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800696c:	f7fe fa26 	bl	8004dbc <xQueueGenericSend>
 8006970:	6278      	str	r0, [r7, #36]	@ 0x24
 8006972:	e012      	b.n	800699a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006974:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <xTimerGenericCommand+0x98>)
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	f107 0114 	add.w	r1, r7, #20
 800697c:	2300      	movs	r3, #0
 800697e:	2200      	movs	r2, #0
 8006980:	f7fe fa1c 	bl	8004dbc <xQueueGenericSend>
 8006984:	6278      	str	r0, [r7, #36]	@ 0x24
 8006986:	e008      	b.n	800699a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006988:	4b06      	ldr	r3, [pc, #24]	@ (80069a4 <xTimerGenericCommand+0x98>)
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	f107 0114 	add.w	r1, r7, #20
 8006990:	2300      	movs	r3, #0
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	f7fe fb14 	bl	8004fc0 <xQueueGenericSendFromISR>
 8006998:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800699c:	4618      	mov	r0, r3
 800699e:	3728      	adds	r7, #40	@ 0x28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000f28 	.word	0x20000f28

080069a8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b2:	4b23      	ldr	r3, [pc, #140]	@ (8006a40 <prvProcessExpiredTimer+0x98>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe f8e1 	bl	8004b88 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d023      	beq.n	8006a1c <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	699a      	ldr	r2, [r3, #24]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	18d1      	adds	r1, r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	6978      	ldr	r0, [r7, #20]
 80069e2:	f000 f8d5 	bl	8006b90 <prvInsertTimerInActiveList>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d020      	beq.n	8006a2e <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069ec:	2300      	movs	r3, #0
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	2300      	movs	r3, #0
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	2100      	movs	r1, #0
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f7ff ff88 	bl	800690c <xTimerGenericCommand>
 80069fc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d114      	bne.n	8006a2e <prvProcessExpiredTimer+0x86>
        __asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60fb      	str	r3, [r7, #12]
    }
 8006a16:	bf00      	nop
 8006a18:	bf00      	nop
 8006a1a:	e7fd      	b.n	8006a18 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	4798      	blx	r3
    }
 8006a36:	bf00      	nop
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000f20 	.word	0x20000f20

08006a44 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a4c:	f107 0308 	add.w	r3, r7, #8
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 f859 	bl	8006b08 <prvGetNextExpireTime>
 8006a56:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f805 	bl	8006a6c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006a62:	f000 f8d7 	bl	8006c14 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a66:	bf00      	nop
 8006a68:	e7f0      	b.n	8006a4c <prvTimerTask+0x8>
	...

08006a6c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006a76:	f7ff f937 	bl	8005ce8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 f866 	bl	8006b50 <prvSampleTimeNow>
 8006a84:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d130      	bne.n	8006aee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <prvProcessTimerOrBlockTask+0x3c>
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d806      	bhi.n	8006aa8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006a9a:	f7ff f933 	bl	8005d04 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ff81 	bl	80069a8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006aa6:	e024      	b.n	8006af2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006aae:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <prvProcessTimerOrBlockTask+0x90>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <prvProcessTimerOrBlockTask+0x50>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <prvProcessTimerOrBlockTask+0x52>
 8006abc:	2300      	movs	r3, #0
 8006abe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b00 <prvProcessTimerOrBlockTask+0x94>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	4619      	mov	r1, r3
 8006ace:	f7fe ff09 	bl	80058e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006ad2:	f7ff f917 	bl	8005d04 <xTaskResumeAll>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006adc:	4b09      	ldr	r3, [pc, #36]	@ (8006b04 <prvProcessTimerOrBlockTask+0x98>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
    }
 8006aec:	e001      	b.n	8006af2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006aee:	f7ff f909 	bl	8005d04 <xTaskResumeAll>
    }
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000f24 	.word	0x20000f24
 8006b00:	20000f28 	.word	0x20000f28
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b10:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <prvGetNextExpireTime+0x44>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <prvGetNextExpireTime+0x16>
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	e000      	b.n	8006b20 <prvGetNextExpireTime+0x18>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b2c:	4b07      	ldr	r3, [pc, #28]	@ (8006b4c <prvGetNextExpireTime+0x44>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e001      	b.n	8006b3c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
    }
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000f20 	.word	0x20000f20

08006b50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006b58:	f7ff f972 	bl	8005e40 <xTaskGetTickCount>
 8006b5c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b8c <prvSampleTimeNow+0x3c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d205      	bcs.n	8006b74 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006b68:	f000 f91e 	bl	8006da8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e002      	b.n	8006b7a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006b7a:	4a04      	ldr	r2, [pc, #16]	@ (8006b8c <prvSampleTimeNow+0x3c>)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006b80:	68fb      	ldr	r3, [r7, #12]
    }
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000f30 	.word	0x20000f30

08006b90 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d812      	bhi.n	8006bdc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	1ad2      	subs	r2, r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d302      	bcc.n	8006bca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	e01b      	b.n	8006c02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bca:	4b10      	ldr	r3, [pc, #64]	@ (8006c0c <prvInsertTimerInActiveList+0x7c>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7fd ff9e 	bl	8004b16 <vListInsert>
 8006bda:	e012      	b.n	8006c02 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d206      	bcs.n	8006bf2 <prvInsertTimerInActiveList+0x62>
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e007      	b.n	8006c02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bf2:	4b07      	ldr	r3, [pc, #28]	@ (8006c10 <prvInsertTimerInActiveList+0x80>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f7fd ff8a 	bl	8004b16 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006c02:	697b      	ldr	r3, [r7, #20]
    }
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20000f24 	.word	0x20000f24
 8006c10:	20000f20 	.word	0x20000f20

08006c14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08c      	sub	sp, #48	@ 0x30
 8006c18:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c1a:	e0b2      	b.n	8006d82 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f2c0 80af 	blt.w	8006d82 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	3304      	adds	r3, #4
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fd ffa7 	bl	8004b88 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c3a:	1d3b      	adds	r3, r7, #4
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff ff87 	bl	8006b50 <prvSampleTimeNow>
 8006c42:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b09      	cmp	r3, #9
 8006c48:	f200 8098 	bhi.w	8006d7c <prvProcessReceivedCommands+0x168>
 8006c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c54 <prvProcessReceivedCommands+0x40>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c7d 	.word	0x08006c7d
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	08006c7d 	.word	0x08006c7d
 8006c60:	08006cf3 	.word	0x08006cf3
 8006c64:	08006d07 	.word	0x08006d07
 8006c68:	08006d53 	.word	0x08006d53
 8006c6c:	08006c7d 	.word	0x08006c7d
 8006c70:	08006c7d 	.word	0x08006c7d
 8006c74:	08006cf3 	.word	0x08006cf3
 8006c78:	08006d07 	.word	0x08006d07
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	18d1      	adds	r1, r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a3a      	ldr	r2, [r7, #32]
 8006c9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c9c:	f7ff ff78 	bl	8006b90 <prvInsertTimerInActiveList>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d06c      	beq.n	8006d80 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cac:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d061      	beq.n	8006d80 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	441a      	add	r2, r3
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2100      	movs	r1, #0
 8006ccc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cce:	f7ff fe1d 	bl	800690c <xTimerGenericCommand>
 8006cd2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d152      	bne.n	8006d80 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	61bb      	str	r3, [r7, #24]
    }
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	e7fd      	b.n	8006cee <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006d04:	e03d      	b.n	8006d82 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10b      	bne.n	8006d3e <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	617b      	str	r3, [r7, #20]
    }
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	e7fd      	b.n	8006d3a <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	18d1      	adds	r1, r2, r3
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	6a3a      	ldr	r2, [r7, #32]
 8006d4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d4c:	f7ff ff20 	bl	8006b90 <prvInsertTimerInActiveList>
                        break;
 8006d50:	e017      	b.n	8006d82 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d103      	bne.n	8006d68 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8006d60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d62:	f000 fbff 	bl	8007564 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006d66:	e00c      	b.n	8006d82 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006d7a:	e002      	b.n	8006d82 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006d7c:	bf00      	nop
 8006d7e:	e000      	b.n	8006d82 <prvProcessReceivedCommands+0x16e>
                        break;
 8006d80:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d82:	4b08      	ldr	r3, [pc, #32]	@ (8006da4 <prvProcessReceivedCommands+0x190>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f107 0108 	add.w	r1, r7, #8
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fa65 	bl	800525c <xQueueReceive>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f47f af41 	bne.w	8006c1c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	3728      	adds	r7, #40	@ 0x28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000f28 	.word	0x20000f28

08006da8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dae:	e049      	b.n	8006e44 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db0:	4b2e      	ldr	r3, [pc, #184]	@ (8006e6c <prvSwitchTimerLists+0xc4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dba:	4b2c      	ldr	r3, [pc, #176]	@ (8006e6c <prvSwitchTimerLists+0xc4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fd fedd 	bl	8004b88 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d02f      	beq.n	8006e44 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d90e      	bls.n	8006e14 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e02:	4b1a      	ldr	r3, [pc, #104]	@ (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f7fd fe82 	bl	8004b16 <vListInsert>
 8006e12:	e017      	b.n	8006e44 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e14:	2300      	movs	r3, #0
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff fd74 	bl	800690c <xTimerGenericCommand>
 8006e24:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	603b      	str	r3, [r7, #0]
    }
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e44:	4b09      	ldr	r3, [pc, #36]	@ (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1b0      	bne.n	8006db0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006e4e:	4b07      	ldr	r3, [pc, #28]	@ (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006e54:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <prvSwitchTimerLists+0xc8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a04      	ldr	r2, [pc, #16]	@ (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e5a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006e5c:	4a04      	ldr	r2, [pc, #16]	@ (8006e70 <prvSwitchTimerLists+0xc8>)
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	6013      	str	r3, [r2, #0]
    }
 8006e62:	bf00      	nop
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000f20 	.word	0x20000f20
 8006e70:	20000f24 	.word	0x20000f24

08006e74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006e78:	f000 f968 	bl	800714c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006e7c:	4b12      	ldr	r3, [pc, #72]	@ (8006ec8 <prvCheckForValidListAndQueue+0x54>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d11d      	bne.n	8006ec0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006e84:	4811      	ldr	r0, [pc, #68]	@ (8006ecc <prvCheckForValidListAndQueue+0x58>)
 8006e86:	f7fd fdf5 	bl	8004a74 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006e8a:	4811      	ldr	r0, [pc, #68]	@ (8006ed0 <prvCheckForValidListAndQueue+0x5c>)
 8006e8c:	f7fd fdf2 	bl	8004a74 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006e90:	4b10      	ldr	r3, [pc, #64]	@ (8006ed4 <prvCheckForValidListAndQueue+0x60>)
 8006e92:	4a0e      	ldr	r2, [pc, #56]	@ (8006ecc <prvCheckForValidListAndQueue+0x58>)
 8006e94:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006e96:	4b10      	ldr	r3, [pc, #64]	@ (8006ed8 <prvCheckForValidListAndQueue+0x64>)
 8006e98:	4a0d      	ldr	r2, [pc, #52]	@ (8006ed0 <prvCheckForValidListAndQueue+0x5c>)
 8006e9a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	210c      	movs	r1, #12
 8006ea0:	200a      	movs	r0, #10
 8006ea2:	f7fd ff05 	bl	8004cb0 <xQueueGenericCreate>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4a07      	ldr	r2, [pc, #28]	@ (8006ec8 <prvCheckForValidListAndQueue+0x54>)
 8006eaa:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006eac:	4b06      	ldr	r3, [pc, #24]	@ (8006ec8 <prvCheckForValidListAndQueue+0x54>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006eb4:	4b04      	ldr	r3, [pc, #16]	@ (8006ec8 <prvCheckForValidListAndQueue+0x54>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4908      	ldr	r1, [pc, #32]	@ (8006edc <prvCheckForValidListAndQueue+0x68>)
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fce8 	bl	8005890 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006ec0:	f000 f976 	bl	80071b0 <vPortExitCritical>
    }
 8006ec4:	bf00      	nop
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20000f28 	.word	0x20000f28
 8006ecc:	20000ef8 	.word	0x20000ef8
 8006ed0:	20000f0c 	.word	0x20000f0c
 8006ed4:	20000f20 	.word	0x20000f20
 8006ed8:	20000f24 	.word	0x20000f24
 8006edc:	08009124 	.word	0x08009124

08006ee0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3b04      	subs	r3, #4
 8006ef0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ef8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3b04      	subs	r3, #4
 8006efe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f023 0201 	bic.w	r2, r3, #1
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006f10:	4a0c      	ldr	r2, [pc, #48]	@ (8006f44 <pxPortInitialiseStack+0x64>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3b14      	subs	r3, #20
 8006f1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3b04      	subs	r3, #4
 8006f26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f06f 0202 	mvn.w	r2, #2
 8006f2e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3b20      	subs	r3, #32
 8006f34:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	08006f49 	.word	0x08006f49

08006f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006f52:	4b13      	ldr	r3, [pc, #76]	@ (8006fa0 <prvTaskExitError+0x58>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5a:	d00b      	beq.n	8006f74 <prvTaskExitError+0x2c>
        __asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	60fb      	str	r3, [r7, #12]
    }
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	e7fd      	b.n	8006f70 <prvTaskExitError+0x28>
        __asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	60bb      	str	r3, [r7, #8]
    }
 8006f86:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006f88:	bf00      	nop
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0fc      	beq.n	8006f8a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000010 	.word	0x20000010
	...

08006fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006fb0:	4b07      	ldr	r3, [pc, #28]	@ (8006fd0 <pxCurrentTCBConst2>)
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fba:	f380 8809 	msr	PSP, r0
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8811 	msr	BASEPRI, r0
 8006fca:	4770      	bx	lr
 8006fcc:	f3af 8000 	nop.w

08006fd0 <pxCurrentTCBConst2>:
 8006fd0:	20000df4 	.word	0x20000df4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop

08006fd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006fd8:	4808      	ldr	r0, [pc, #32]	@ (8006ffc <prvPortStartFirstTask+0x24>)
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	6800      	ldr	r0, [r0, #0]
 8006fde:	f380 8808 	msr	MSP, r0
 8006fe2:	f04f 0000 	mov.w	r0, #0
 8006fe6:	f380 8814 	msr	CONTROL, r0
 8006fea:	b662      	cpsie	i
 8006fec:	b661      	cpsie	f
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	df00      	svc	0
 8006ff8:	bf00      	nop
 8006ffa:	0000      	.short	0x0000
 8006ffc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop

08007004 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800700a:	4b47      	ldr	r3, [pc, #284]	@ (8007128 <xPortStartScheduler+0x124>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a47      	ldr	r2, [pc, #284]	@ (800712c <xPortStartScheduler+0x128>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d10b      	bne.n	800702c <xPortStartScheduler+0x28>
        __asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	613b      	str	r3, [r7, #16]
    }
 8007026:	bf00      	nop
 8007028:	bf00      	nop
 800702a:	e7fd      	b.n	8007028 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800702c:	4b3e      	ldr	r3, [pc, #248]	@ (8007128 <xPortStartScheduler+0x124>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a3f      	ldr	r2, [pc, #252]	@ (8007130 <xPortStartScheduler+0x12c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d10b      	bne.n	800704e <xPortStartScheduler+0x4a>
        __asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	60fb      	str	r3, [r7, #12]
    }
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800704e:	4b39      	ldr	r3, [pc, #228]	@ (8007134 <xPortStartScheduler+0x130>)
 8007050:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	22ff      	movs	r2, #255	@ 0xff
 800705e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007070:	b2da      	uxtb	r2, r3
 8007072:	4b31      	ldr	r3, [pc, #196]	@ (8007138 <xPortStartScheduler+0x134>)
 8007074:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007076:	4b31      	ldr	r3, [pc, #196]	@ (800713c <xPortStartScheduler+0x138>)
 8007078:	2207      	movs	r2, #7
 800707a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800707c:	e009      	b.n	8007092 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800707e:	4b2f      	ldr	r3, [pc, #188]	@ (800713c <xPortStartScheduler+0x138>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3b01      	subs	r3, #1
 8007084:	4a2d      	ldr	r2, [pc, #180]	@ (800713c <xPortStartScheduler+0x138>)
 8007086:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	b2db      	uxtb	r3, r3
 8007090:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800709a:	2b80      	cmp	r3, #128	@ 0x80
 800709c:	d0ef      	beq.n	800707e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800709e:	4b27      	ldr	r3, [pc, #156]	@ (800713c <xPortStartScheduler+0x138>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f1c3 0307 	rsb	r3, r3, #7
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d00b      	beq.n	80070c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	60bb      	str	r3, [r7, #8]
    }
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070c2:	4b1e      	ldr	r3, [pc, #120]	@ (800713c <xPortStartScheduler+0x138>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	4a1c      	ldr	r2, [pc, #112]	@ (800713c <xPortStartScheduler+0x138>)
 80070ca:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070cc:	4b1b      	ldr	r3, [pc, #108]	@ (800713c <xPortStartScheduler+0x138>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070d4:	4a19      	ldr	r2, [pc, #100]	@ (800713c <xPortStartScheduler+0x138>)
 80070d6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80070e0:	4b17      	ldr	r3, [pc, #92]	@ (8007140 <xPortStartScheduler+0x13c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a16      	ldr	r2, [pc, #88]	@ (8007140 <xPortStartScheduler+0x13c>)
 80070e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80070ec:	4b14      	ldr	r3, [pc, #80]	@ (8007140 <xPortStartScheduler+0x13c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a13      	ldr	r2, [pc, #76]	@ (8007140 <xPortStartScheduler+0x13c>)
 80070f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80070f8:	f000 f8e0 	bl	80072bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80070fc:	4b11      	ldr	r3, [pc, #68]	@ (8007144 <xPortStartScheduler+0x140>)
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007102:	f000 f8ff 	bl	8007304 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007106:	4b10      	ldr	r3, [pc, #64]	@ (8007148 <xPortStartScheduler+0x144>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a0f      	ldr	r2, [pc, #60]	@ (8007148 <xPortStartScheduler+0x144>)
 800710c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007110:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007112:	f7ff ff61 	bl	8006fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007116:	f7fe ff5d 	bl	8005fd4 <vTaskSwitchContext>
    prvTaskExitError();
 800711a:	f7ff ff15 	bl	8006f48 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	e000ed00 	.word	0xe000ed00
 800712c:	410fc271 	.word	0x410fc271
 8007130:	410fc270 	.word	0x410fc270
 8007134:	e000e400 	.word	0xe000e400
 8007138:	20000f34 	.word	0x20000f34
 800713c:	20000f38 	.word	0x20000f38
 8007140:	e000ed20 	.word	0xe000ed20
 8007144:	20000010 	.word	0x20000010
 8007148:	e000ef34 	.word	0xe000ef34

0800714c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
        __asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	607b      	str	r3, [r7, #4]
    }
 8007164:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007166:	4b10      	ldr	r3, [pc, #64]	@ (80071a8 <vPortEnterCritical+0x5c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	4a0e      	ldr	r2, [pc, #56]	@ (80071a8 <vPortEnterCritical+0x5c>)
 800716e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007170:	4b0d      	ldr	r3, [pc, #52]	@ (80071a8 <vPortEnterCritical+0x5c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d110      	bne.n	800719a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007178:	4b0c      	ldr	r3, [pc, #48]	@ (80071ac <vPortEnterCritical+0x60>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00b      	beq.n	800719a <vPortEnterCritical+0x4e>
        __asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	603b      	str	r3, [r7, #0]
    }
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	e7fd      	b.n	8007196 <vPortEnterCritical+0x4a>
    }
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000010 	.word	0x20000010
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80071b6:	4b12      	ldr	r3, [pc, #72]	@ (8007200 <vPortExitCritical+0x50>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <vPortExitCritical+0x26>
        __asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
    }
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	e7fd      	b.n	80071d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80071d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <vPortExitCritical+0x50>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3b01      	subs	r3, #1
 80071dc:	4a08      	ldr	r2, [pc, #32]	@ (8007200 <vPortExitCritical+0x50>)
 80071de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80071e0:	4b07      	ldr	r3, [pc, #28]	@ (8007200 <vPortExitCritical+0x50>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <vPortExitCritical+0x44>
 80071e8:	2300      	movs	r3, #0
 80071ea:	603b      	str	r3, [r7, #0]
        __asm volatile
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	f383 8811 	msr	BASEPRI, r3
    }
 80071f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	20000010 	.word	0x20000010
	...

08007210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007210:	f3ef 8009 	mrs	r0, PSP
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4b15      	ldr	r3, [pc, #84]	@ (8007270 <pxCurrentTCBConst>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	f01e 0f10 	tst.w	lr, #16
 8007220:	bf08      	it	eq
 8007222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007234:	f380 8811 	msr	BASEPRI, r0
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f7fe fec8 	bl	8005fd4 <vTaskSwitchContext>
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	f380 8811 	msr	BASEPRI, r0
 800724c:	bc09      	pop	{r0, r3}
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	6808      	ldr	r0, [r1, #0]
 8007252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007256:	f01e 0f10 	tst.w	lr, #16
 800725a:	bf08      	it	eq
 800725c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007260:	f380 8809 	msr	PSP, r0
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w

08007270 <pxCurrentTCBConst>:
 8007270:	20000df4 	.word	0x20000df4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
        __asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
    }
 8007290:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007292:	f7fe fde5 	bl	8005e60 <xTaskIncrementTick>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800729c:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <SysTick_Handler+0x40>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	2300      	movs	r3, #0
 80072a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f383 8811 	msr	BASEPRI, r3
    }
 80072ae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072c0:	4b0b      	ldr	r3, [pc, #44]	@ (80072f0 <vPortSetupTimerInterrupt+0x34>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072c6:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <vPortSetupTimerInterrupt+0x38>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072cc:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <vPortSetupTimerInterrupt+0x3c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a0a      	ldr	r2, [pc, #40]	@ (80072fc <vPortSetupTimerInterrupt+0x40>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	099b      	lsrs	r3, r3, #6
 80072d8:	4a09      	ldr	r2, [pc, #36]	@ (8007300 <vPortSetupTimerInterrupt+0x44>)
 80072da:	3b01      	subs	r3, #1
 80072dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072de:	4b04      	ldr	r3, [pc, #16]	@ (80072f0 <vPortSetupTimerInterrupt+0x34>)
 80072e0:	2207      	movs	r2, #7
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	e000e010 	.word	0xe000e010
 80072f4:	e000e018 	.word	0xe000e018
 80072f8:	20000000 	.word	0x20000000
 80072fc:	10624dd3 	.word	0x10624dd3
 8007300:	e000e014 	.word	0xe000e014

08007304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007314 <vPortEnableVFP+0x10>
 8007308:	6801      	ldr	r1, [r0, #0]
 800730a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800730e:	6001      	str	r1, [r0, #0]
 8007310:	4770      	bx	lr
 8007312:	0000      	.short	0x0000
 8007314:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop

0800731c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007322:	f3ef 8305 	mrs	r3, IPSR
 8007326:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b0f      	cmp	r3, #15
 800732c:	d915      	bls.n	800735a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800732e:	4a18      	ldr	r2, [pc, #96]	@ (8007390 <vPortValidateInterruptPriority+0x74>)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007338:	4b16      	ldr	r3, [pc, #88]	@ (8007394 <vPortValidateInterruptPriority+0x78>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	7afa      	ldrb	r2, [r7, #11]
 800733e:	429a      	cmp	r2, r3
 8007340:	d20b      	bcs.n	800735a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	607b      	str	r3, [r7, #4]
    }
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	e7fd      	b.n	8007356 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800735a:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <vPortValidateInterruptPriority+0x7c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007362:	4b0e      	ldr	r3, [pc, #56]	@ (800739c <vPortValidateInterruptPriority+0x80>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d90b      	bls.n	8007382 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	603b      	str	r3, [r7, #0]
    }
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	e7fd      	b.n	800737e <vPortValidateInterruptPriority+0x62>
    }
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	e000e3f0 	.word	0xe000e3f0
 8007394:	20000f34 	.word	0x20000f34
 8007398:	e000ed0c 	.word	0xe000ed0c
 800739c:	20000f38 	.word	0x20000f38

080073a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	@ 0x28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80073ac:	f7fe fc9c 	bl	8005ce8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80073b0:	4b66      	ldr	r3, [pc, #408]	@ (800754c <pvPortMalloc+0x1ac>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80073b8:	f000 f938 	bl	800762c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073bc:	4b64      	ldr	r3, [pc, #400]	@ (8007550 <pvPortMalloc+0x1b0>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f040 80a9 	bne.w	800751c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d02e      	beq.n	800742e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80073d0:	2208      	movs	r2, #8
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d228      	bcs.n	800742e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80073dc:	2208      	movs	r2, #8
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4413      	add	r3, r2
 80073e2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d022      	beq.n	8007434 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f023 0307 	bic.w	r3, r3, #7
 80073f4:	3308      	adds	r3, #8
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d215      	bcs.n	8007428 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f023 0307 	bic.w	r3, r3, #7
 8007402:	3308      	adds	r3, #8
 8007404:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	2b00      	cmp	r3, #0
 800740e:	d011      	beq.n	8007434 <pvPortMalloc+0x94>
        __asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	617b      	str	r3, [r7, #20]
    }
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	e7fd      	b.n	8007424 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800742c:	e002      	b.n	8007434 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	607b      	str	r3, [r7, #4]
 8007432:	e000      	b.n	8007436 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007434:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d06f      	beq.n	800751c <pvPortMalloc+0x17c>
 800743c:	4b45      	ldr	r3, [pc, #276]	@ (8007554 <pvPortMalloc+0x1b4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	429a      	cmp	r2, r3
 8007444:	d86a      	bhi.n	800751c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007446:	4b44      	ldr	r3, [pc, #272]	@ (8007558 <pvPortMalloc+0x1b8>)
 8007448:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800744a:	4b43      	ldr	r3, [pc, #268]	@ (8007558 <pvPortMalloc+0x1b8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007450:	e004      	b.n	800745c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d903      	bls.n	800746e <pvPortMalloc+0xce>
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f1      	bne.n	8007452 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800746e:	4b37      	ldr	r3, [pc, #220]	@ (800754c <pvPortMalloc+0x1ac>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007474:	429a      	cmp	r2, r3
 8007476:	d051      	beq.n	800751c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2208      	movs	r2, #8
 800747e:	4413      	add	r3, r2
 8007480:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	1ad2      	subs	r2, r2, r3
 8007492:	2308      	movs	r3, #8
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	429a      	cmp	r2, r3
 8007498:	d920      	bls.n	80074dc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800749a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4413      	add	r3, r2
 80074a0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f003 0307 	and.w	r3, r3, #7
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <pvPortMalloc+0x124>
        __asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	613b      	str	r3, [r7, #16]
    }
 80074be:	bf00      	nop
 80074c0:	bf00      	nop
 80074c2:	e7fd      	b.n	80074c0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074d6:	69b8      	ldr	r0, [r7, #24]
 80074d8:	f000 f90a 	bl	80076f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007554 <pvPortMalloc+0x1b4>)
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007554 <pvPortMalloc+0x1b4>)
 80074e8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007554 <pvPortMalloc+0x1b4>)
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b1b      	ldr	r3, [pc, #108]	@ (800755c <pvPortMalloc+0x1bc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d203      	bcs.n	80074fe <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074f6:	4b17      	ldr	r3, [pc, #92]	@ (8007554 <pvPortMalloc+0x1b4>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a18      	ldr	r2, [pc, #96]	@ (800755c <pvPortMalloc+0x1bc>)
 80074fc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	4b13      	ldr	r3, [pc, #76]	@ (8007550 <pvPortMalloc+0x1b0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	431a      	orrs	r2, r3
 8007508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007512:	4b13      	ldr	r3, [pc, #76]	@ (8007560 <pvPortMalloc+0x1c0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	4a11      	ldr	r2, [pc, #68]	@ (8007560 <pvPortMalloc+0x1c0>)
 800751a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800751c:	f7fe fbf2 	bl	8005d04 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00b      	beq.n	8007542 <pvPortMalloc+0x1a2>
        __asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	60fb      	str	r3, [r7, #12]
    }
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	e7fd      	b.n	800753e <pvPortMalloc+0x19e>
    return pvReturn;
 8007542:	69fb      	ldr	r3, [r7, #28]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3728      	adds	r7, #40	@ 0x28
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20013b44 	.word	0x20013b44
 8007550:	20013b58 	.word	0x20013b58
 8007554:	20013b48 	.word	0x20013b48
 8007558:	20013b3c 	.word	0x20013b3c
 800755c:	20013b4c 	.word	0x20013b4c
 8007560:	20013b50 	.word	0x20013b50

08007564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d04f      	beq.n	8007616 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007576:	2308      	movs	r3, #8
 8007578:	425b      	negs	r3, r3
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	4413      	add	r3, r2
 800757e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	4b25      	ldr	r3, [pc, #148]	@ (8007620 <vPortFree+0xbc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4013      	ands	r3, r2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <vPortFree+0x46>
        __asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60fb      	str	r3, [r7, #12]
    }
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00b      	beq.n	80075ca <vPortFree+0x66>
        __asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60bb      	str	r3, [r7, #8]
    }
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	e7fd      	b.n	80075c6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	4b14      	ldr	r3, [pc, #80]	@ (8007620 <vPortFree+0xbc>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4013      	ands	r3, r2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01e      	beq.n	8007616 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d11a      	bne.n	8007616 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007620 <vPortFree+0xbc>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	43db      	mvns	r3, r3
 80075ea:	401a      	ands	r2, r3
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80075f0:	f7fe fb7a 	bl	8005ce8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007624 <vPortFree+0xc0>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4413      	add	r3, r2
 80075fe:	4a09      	ldr	r2, [pc, #36]	@ (8007624 <vPortFree+0xc0>)
 8007600:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007602:	6938      	ldr	r0, [r7, #16]
 8007604:	f000 f874 	bl	80076f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007608:	4b07      	ldr	r3, [pc, #28]	@ (8007628 <vPortFree+0xc4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	4a06      	ldr	r2, [pc, #24]	@ (8007628 <vPortFree+0xc4>)
 8007610:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007612:	f7fe fb77 	bl	8005d04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007616:	bf00      	nop
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20013b58 	.word	0x20013b58
 8007624:	20013b48 	.word	0x20013b48
 8007628:	20013b54 	.word	0x20013b54

0800762c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007632:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8007636:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007638:	4b27      	ldr	r3, [pc, #156]	@ (80076d8 <prvHeapInit+0xac>)
 800763a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00c      	beq.n	8007660 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3307      	adds	r3, #7
 800764a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0307 	bic.w	r3, r3, #7
 8007652:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	4a1f      	ldr	r2, [pc, #124]	@ (80076d8 <prvHeapInit+0xac>)
 800765c:	4413      	add	r3, r2
 800765e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007664:	4a1d      	ldr	r2, [pc, #116]	@ (80076dc <prvHeapInit+0xb0>)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800766a:	4b1c      	ldr	r3, [pc, #112]	@ (80076dc <prvHeapInit+0xb0>)
 800766c:	2200      	movs	r2, #0
 800766e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	4413      	add	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007678:	2208      	movs	r2, #8
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1a9b      	subs	r3, r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0307 	bic.w	r3, r3, #7
 8007686:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4a15      	ldr	r2, [pc, #84]	@ (80076e0 <prvHeapInit+0xb4>)
 800768c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800768e:	4b14      	ldr	r3, [pc, #80]	@ (80076e0 <prvHeapInit+0xb4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007696:	4b12      	ldr	r3, [pc, #72]	@ (80076e0 <prvHeapInit+0xb4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	1ad2      	subs	r2, r2, r3
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076ac:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <prvHeapInit+0xb4>)
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	4a0a      	ldr	r2, [pc, #40]	@ (80076e4 <prvHeapInit+0xb8>)
 80076ba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4a09      	ldr	r2, [pc, #36]	@ (80076e8 <prvHeapInit+0xbc>)
 80076c2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076c4:	4b09      	ldr	r3, [pc, #36]	@ (80076ec <prvHeapInit+0xc0>)
 80076c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80076ca:	601a      	str	r2, [r3, #0]
}
 80076cc:	bf00      	nop
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	20000f3c 	.word	0x20000f3c
 80076dc:	20013b3c 	.word	0x20013b3c
 80076e0:	20013b44 	.word	0x20013b44
 80076e4:	20013b4c 	.word	0x20013b4c
 80076e8:	20013b48 	.word	0x20013b48
 80076ec:	20013b58 	.word	0x20013b58

080076f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076f8:	4b28      	ldr	r3, [pc, #160]	@ (800779c <prvInsertBlockIntoFreeList+0xac>)
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e002      	b.n	8007704 <prvInsertBlockIntoFreeList+0x14>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	429a      	cmp	r2, r3
 800770c:	d8f7      	bhi.n	80076fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	4413      	add	r3, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d108      	bne.n	8007732 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	441a      	add	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	441a      	add	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d118      	bne.n	8007778 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4b15      	ldr	r3, [pc, #84]	@ (80077a0 <prvInsertBlockIntoFreeList+0xb0>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d00d      	beq.n	800776e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	441a      	add	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	e008      	b.n	8007780 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800776e:	4b0c      	ldr	r3, [pc, #48]	@ (80077a0 <prvInsertBlockIntoFreeList+0xb0>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	e003      	b.n	8007780 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	d002      	beq.n	800778e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20013b3c 	.word	0x20013b3c
 80077a0:	20013b44 	.word	0x20013b44

080077a4 <std>:
 80077a4:	2300      	movs	r3, #0
 80077a6:	b510      	push	{r4, lr}
 80077a8:	4604      	mov	r4, r0
 80077aa:	e9c0 3300 	strd	r3, r3, [r0]
 80077ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077b2:	6083      	str	r3, [r0, #8]
 80077b4:	8181      	strh	r1, [r0, #12]
 80077b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80077b8:	81c2      	strh	r2, [r0, #14]
 80077ba:	6183      	str	r3, [r0, #24]
 80077bc:	4619      	mov	r1, r3
 80077be:	2208      	movs	r2, #8
 80077c0:	305c      	adds	r0, #92	@ 0x5c
 80077c2:	f000 fa4d 	bl	8007c60 <memset>
 80077c6:	4b0d      	ldr	r3, [pc, #52]	@ (80077fc <std+0x58>)
 80077c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80077ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007800 <std+0x5c>)
 80077cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007804 <std+0x60>)
 80077d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007808 <std+0x64>)
 80077d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80077d6:	4b0d      	ldr	r3, [pc, #52]	@ (800780c <std+0x68>)
 80077d8:	6224      	str	r4, [r4, #32]
 80077da:	429c      	cmp	r4, r3
 80077dc:	d006      	beq.n	80077ec <std+0x48>
 80077de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077e2:	4294      	cmp	r4, r2
 80077e4:	d002      	beq.n	80077ec <std+0x48>
 80077e6:	33d0      	adds	r3, #208	@ 0xd0
 80077e8:	429c      	cmp	r4, r3
 80077ea:	d105      	bne.n	80077f8 <std+0x54>
 80077ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f4:	f000 bad0 	b.w	8007d98 <__retarget_lock_init_recursive>
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	bf00      	nop
 80077fc:	08007ab1 	.word	0x08007ab1
 8007800:	08007ad3 	.word	0x08007ad3
 8007804:	08007b0b 	.word	0x08007b0b
 8007808:	08007b2f 	.word	0x08007b2f
 800780c:	20013b5c 	.word	0x20013b5c

08007810 <stdio_exit_handler>:
 8007810:	4a02      	ldr	r2, [pc, #8]	@ (800781c <stdio_exit_handler+0xc>)
 8007812:	4903      	ldr	r1, [pc, #12]	@ (8007820 <stdio_exit_handler+0x10>)
 8007814:	4803      	ldr	r0, [pc, #12]	@ (8007824 <stdio_exit_handler+0x14>)
 8007816:	f000 b869 	b.w	80078ec <_fwalk_sglue>
 800781a:	bf00      	nop
 800781c:	20000014 	.word	0x20000014
 8007820:	08008905 	.word	0x08008905
 8007824:	20000024 	.word	0x20000024

08007828 <cleanup_stdio>:
 8007828:	6841      	ldr	r1, [r0, #4]
 800782a:	4b0c      	ldr	r3, [pc, #48]	@ (800785c <cleanup_stdio+0x34>)
 800782c:	4299      	cmp	r1, r3
 800782e:	b510      	push	{r4, lr}
 8007830:	4604      	mov	r4, r0
 8007832:	d001      	beq.n	8007838 <cleanup_stdio+0x10>
 8007834:	f001 f866 	bl	8008904 <_fflush_r>
 8007838:	68a1      	ldr	r1, [r4, #8]
 800783a:	4b09      	ldr	r3, [pc, #36]	@ (8007860 <cleanup_stdio+0x38>)
 800783c:	4299      	cmp	r1, r3
 800783e:	d002      	beq.n	8007846 <cleanup_stdio+0x1e>
 8007840:	4620      	mov	r0, r4
 8007842:	f001 f85f 	bl	8008904 <_fflush_r>
 8007846:	68e1      	ldr	r1, [r4, #12]
 8007848:	4b06      	ldr	r3, [pc, #24]	@ (8007864 <cleanup_stdio+0x3c>)
 800784a:	4299      	cmp	r1, r3
 800784c:	d004      	beq.n	8007858 <cleanup_stdio+0x30>
 800784e:	4620      	mov	r0, r4
 8007850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007854:	f001 b856 	b.w	8008904 <_fflush_r>
 8007858:	bd10      	pop	{r4, pc}
 800785a:	bf00      	nop
 800785c:	20013b5c 	.word	0x20013b5c
 8007860:	20013bc4 	.word	0x20013bc4
 8007864:	20013c2c 	.word	0x20013c2c

08007868 <global_stdio_init.part.0>:
 8007868:	b510      	push	{r4, lr}
 800786a:	4b0b      	ldr	r3, [pc, #44]	@ (8007898 <global_stdio_init.part.0+0x30>)
 800786c:	4c0b      	ldr	r4, [pc, #44]	@ (800789c <global_stdio_init.part.0+0x34>)
 800786e:	4a0c      	ldr	r2, [pc, #48]	@ (80078a0 <global_stdio_init.part.0+0x38>)
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	4620      	mov	r0, r4
 8007874:	2200      	movs	r2, #0
 8007876:	2104      	movs	r1, #4
 8007878:	f7ff ff94 	bl	80077a4 <std>
 800787c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007880:	2201      	movs	r2, #1
 8007882:	2109      	movs	r1, #9
 8007884:	f7ff ff8e 	bl	80077a4 <std>
 8007888:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800788c:	2202      	movs	r2, #2
 800788e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007892:	2112      	movs	r1, #18
 8007894:	f7ff bf86 	b.w	80077a4 <std>
 8007898:	20013c94 	.word	0x20013c94
 800789c:	20013b5c 	.word	0x20013b5c
 80078a0:	08007811 	.word	0x08007811

080078a4 <__sfp_lock_acquire>:
 80078a4:	4801      	ldr	r0, [pc, #4]	@ (80078ac <__sfp_lock_acquire+0x8>)
 80078a6:	f000 ba78 	b.w	8007d9a <__retarget_lock_acquire_recursive>
 80078aa:	bf00      	nop
 80078ac:	20013c9d 	.word	0x20013c9d

080078b0 <__sfp_lock_release>:
 80078b0:	4801      	ldr	r0, [pc, #4]	@ (80078b8 <__sfp_lock_release+0x8>)
 80078b2:	f000 ba73 	b.w	8007d9c <__retarget_lock_release_recursive>
 80078b6:	bf00      	nop
 80078b8:	20013c9d 	.word	0x20013c9d

080078bc <__sinit>:
 80078bc:	b510      	push	{r4, lr}
 80078be:	4604      	mov	r4, r0
 80078c0:	f7ff fff0 	bl	80078a4 <__sfp_lock_acquire>
 80078c4:	6a23      	ldr	r3, [r4, #32]
 80078c6:	b11b      	cbz	r3, 80078d0 <__sinit+0x14>
 80078c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078cc:	f7ff bff0 	b.w	80078b0 <__sfp_lock_release>
 80078d0:	4b04      	ldr	r3, [pc, #16]	@ (80078e4 <__sinit+0x28>)
 80078d2:	6223      	str	r3, [r4, #32]
 80078d4:	4b04      	ldr	r3, [pc, #16]	@ (80078e8 <__sinit+0x2c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1f5      	bne.n	80078c8 <__sinit+0xc>
 80078dc:	f7ff ffc4 	bl	8007868 <global_stdio_init.part.0>
 80078e0:	e7f2      	b.n	80078c8 <__sinit+0xc>
 80078e2:	bf00      	nop
 80078e4:	08007829 	.word	0x08007829
 80078e8:	20013c94 	.word	0x20013c94

080078ec <_fwalk_sglue>:
 80078ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f0:	4607      	mov	r7, r0
 80078f2:	4688      	mov	r8, r1
 80078f4:	4614      	mov	r4, r2
 80078f6:	2600      	movs	r6, #0
 80078f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007900:	d505      	bpl.n	800790e <_fwalk_sglue+0x22>
 8007902:	6824      	ldr	r4, [r4, #0]
 8007904:	2c00      	cmp	r4, #0
 8007906:	d1f7      	bne.n	80078f8 <_fwalk_sglue+0xc>
 8007908:	4630      	mov	r0, r6
 800790a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800790e:	89ab      	ldrh	r3, [r5, #12]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d907      	bls.n	8007924 <_fwalk_sglue+0x38>
 8007914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007918:	3301      	adds	r3, #1
 800791a:	d003      	beq.n	8007924 <_fwalk_sglue+0x38>
 800791c:	4629      	mov	r1, r5
 800791e:	4638      	mov	r0, r7
 8007920:	47c0      	blx	r8
 8007922:	4306      	orrs	r6, r0
 8007924:	3568      	adds	r5, #104	@ 0x68
 8007926:	e7e9      	b.n	80078fc <_fwalk_sglue+0x10>

08007928 <iprintf>:
 8007928:	b40f      	push	{r0, r1, r2, r3}
 800792a:	b507      	push	{r0, r1, r2, lr}
 800792c:	4906      	ldr	r1, [pc, #24]	@ (8007948 <iprintf+0x20>)
 800792e:	ab04      	add	r3, sp, #16
 8007930:	6808      	ldr	r0, [r1, #0]
 8007932:	f853 2b04 	ldr.w	r2, [r3], #4
 8007936:	6881      	ldr	r1, [r0, #8]
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	f000 fcb9 	bl	80082b0 <_vfiprintf_r>
 800793e:	b003      	add	sp, #12
 8007940:	f85d eb04 	ldr.w	lr, [sp], #4
 8007944:	b004      	add	sp, #16
 8007946:	4770      	bx	lr
 8007948:	20000020 	.word	0x20000020

0800794c <_puts_r>:
 800794c:	6a03      	ldr	r3, [r0, #32]
 800794e:	b570      	push	{r4, r5, r6, lr}
 8007950:	6884      	ldr	r4, [r0, #8]
 8007952:	4605      	mov	r5, r0
 8007954:	460e      	mov	r6, r1
 8007956:	b90b      	cbnz	r3, 800795c <_puts_r+0x10>
 8007958:	f7ff ffb0 	bl	80078bc <__sinit>
 800795c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800795e:	07db      	lsls	r3, r3, #31
 8007960:	d405      	bmi.n	800796e <_puts_r+0x22>
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	0598      	lsls	r0, r3, #22
 8007966:	d402      	bmi.n	800796e <_puts_r+0x22>
 8007968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800796a:	f000 fa16 	bl	8007d9a <__retarget_lock_acquire_recursive>
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	0719      	lsls	r1, r3, #28
 8007972:	d502      	bpl.n	800797a <_puts_r+0x2e>
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d135      	bne.n	80079e6 <_puts_r+0x9a>
 800797a:	4621      	mov	r1, r4
 800797c:	4628      	mov	r0, r5
 800797e:	f000 f919 	bl	8007bb4 <__swsetup_r>
 8007982:	b380      	cbz	r0, 80079e6 <_puts_r+0x9a>
 8007984:	f04f 35ff 	mov.w	r5, #4294967295
 8007988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800798a:	07da      	lsls	r2, r3, #31
 800798c:	d405      	bmi.n	800799a <_puts_r+0x4e>
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	059b      	lsls	r3, r3, #22
 8007992:	d402      	bmi.n	800799a <_puts_r+0x4e>
 8007994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007996:	f000 fa01 	bl	8007d9c <__retarget_lock_release_recursive>
 800799a:	4628      	mov	r0, r5
 800799c:	bd70      	pop	{r4, r5, r6, pc}
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da04      	bge.n	80079ac <_puts_r+0x60>
 80079a2:	69a2      	ldr	r2, [r4, #24]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	dc17      	bgt.n	80079d8 <_puts_r+0x8c>
 80079a8:	290a      	cmp	r1, #10
 80079aa:	d015      	beq.n	80079d8 <_puts_r+0x8c>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	6022      	str	r2, [r4, #0]
 80079b2:	7019      	strb	r1, [r3, #0]
 80079b4:	68a3      	ldr	r3, [r4, #8]
 80079b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079ba:	3b01      	subs	r3, #1
 80079bc:	60a3      	str	r3, [r4, #8]
 80079be:	2900      	cmp	r1, #0
 80079c0:	d1ed      	bne.n	800799e <_puts_r+0x52>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da11      	bge.n	80079ea <_puts_r+0x9e>
 80079c6:	4622      	mov	r2, r4
 80079c8:	210a      	movs	r1, #10
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 f8b3 	bl	8007b36 <__swbuf_r>
 80079d0:	3001      	adds	r0, #1
 80079d2:	d0d7      	beq.n	8007984 <_puts_r+0x38>
 80079d4:	250a      	movs	r5, #10
 80079d6:	e7d7      	b.n	8007988 <_puts_r+0x3c>
 80079d8:	4622      	mov	r2, r4
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 f8ab 	bl	8007b36 <__swbuf_r>
 80079e0:	3001      	adds	r0, #1
 80079e2:	d1e7      	bne.n	80079b4 <_puts_r+0x68>
 80079e4:	e7ce      	b.n	8007984 <_puts_r+0x38>
 80079e6:	3e01      	subs	r6, #1
 80079e8:	e7e4      	b.n	80079b4 <_puts_r+0x68>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	6022      	str	r2, [r4, #0]
 80079f0:	220a      	movs	r2, #10
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e7ee      	b.n	80079d4 <_puts_r+0x88>
	...

080079f8 <puts>:
 80079f8:	4b02      	ldr	r3, [pc, #8]	@ (8007a04 <puts+0xc>)
 80079fa:	4601      	mov	r1, r0
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	f7ff bfa5 	b.w	800794c <_puts_r>
 8007a02:	bf00      	nop
 8007a04:	20000020 	.word	0x20000020

08007a08 <sniprintf>:
 8007a08:	b40c      	push	{r2, r3}
 8007a0a:	b530      	push	{r4, r5, lr}
 8007a0c:	4b17      	ldr	r3, [pc, #92]	@ (8007a6c <sniprintf+0x64>)
 8007a0e:	1e0c      	subs	r4, r1, #0
 8007a10:	681d      	ldr	r5, [r3, #0]
 8007a12:	b09d      	sub	sp, #116	@ 0x74
 8007a14:	da08      	bge.n	8007a28 <sniprintf+0x20>
 8007a16:	238b      	movs	r3, #139	@ 0x8b
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1e:	b01d      	add	sp, #116	@ 0x74
 8007a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a24:	b002      	add	sp, #8
 8007a26:	4770      	bx	lr
 8007a28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a30:	bf14      	ite	ne
 8007a32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a36:	4623      	moveq	r3, r4
 8007a38:	9304      	str	r3, [sp, #16]
 8007a3a:	9307      	str	r3, [sp, #28]
 8007a3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a40:	9002      	str	r0, [sp, #8]
 8007a42:	9006      	str	r0, [sp, #24]
 8007a44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a4a:	ab21      	add	r3, sp, #132	@ 0x84
 8007a4c:	a902      	add	r1, sp, #8
 8007a4e:	4628      	mov	r0, r5
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	f000 fb07 	bl	8008064 <_svfiprintf_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	bfbc      	itt	lt
 8007a5a:	238b      	movlt	r3, #139	@ 0x8b
 8007a5c:	602b      	strlt	r3, [r5, #0]
 8007a5e:	2c00      	cmp	r4, #0
 8007a60:	d0dd      	beq.n	8007a1e <sniprintf+0x16>
 8007a62:	9b02      	ldr	r3, [sp, #8]
 8007a64:	2200      	movs	r2, #0
 8007a66:	701a      	strb	r2, [r3, #0]
 8007a68:	e7d9      	b.n	8007a1e <sniprintf+0x16>
 8007a6a:	bf00      	nop
 8007a6c:	20000020 	.word	0x20000020

08007a70 <siprintf>:
 8007a70:	b40e      	push	{r1, r2, r3}
 8007a72:	b500      	push	{lr}
 8007a74:	b09c      	sub	sp, #112	@ 0x70
 8007a76:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a78:	9002      	str	r0, [sp, #8]
 8007a7a:	9006      	str	r0, [sp, #24]
 8007a7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a80:	4809      	ldr	r0, [pc, #36]	@ (8007aa8 <siprintf+0x38>)
 8007a82:	9107      	str	r1, [sp, #28]
 8007a84:	9104      	str	r1, [sp, #16]
 8007a86:	4909      	ldr	r1, [pc, #36]	@ (8007aac <siprintf+0x3c>)
 8007a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8c:	9105      	str	r1, [sp, #20]
 8007a8e:	6800      	ldr	r0, [r0, #0]
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	a902      	add	r1, sp, #8
 8007a94:	f000 fae6 	bl	8008064 <_svfiprintf_r>
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	b01c      	add	sp, #112	@ 0x70
 8007aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa4:	b003      	add	sp, #12
 8007aa6:	4770      	bx	lr
 8007aa8:	20000020 	.word	0x20000020
 8007aac:	ffff0208 	.word	0xffff0208

08007ab0 <__sread>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab8:	f000 f926 	bl	8007d08 <_read_r>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	bfab      	itete	ge
 8007ac0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ac4:	181b      	addge	r3, r3, r0
 8007ac6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007aca:	bfac      	ite	ge
 8007acc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ace:	81a3      	strhlt	r3, [r4, #12]
 8007ad0:	bd10      	pop	{r4, pc}

08007ad2 <__swrite>:
 8007ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad6:	461f      	mov	r7, r3
 8007ad8:	898b      	ldrh	r3, [r1, #12]
 8007ada:	05db      	lsls	r3, r3, #23
 8007adc:	4605      	mov	r5, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	4616      	mov	r6, r2
 8007ae2:	d505      	bpl.n	8007af0 <__swrite+0x1e>
 8007ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae8:	2302      	movs	r3, #2
 8007aea:	2200      	movs	r2, #0
 8007aec:	f000 f8fa 	bl	8007ce4 <_lseek_r>
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007af6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007afa:	81a3      	strh	r3, [r4, #12]
 8007afc:	4632      	mov	r2, r6
 8007afe:	463b      	mov	r3, r7
 8007b00:	4628      	mov	r0, r5
 8007b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b06:	f000 b911 	b.w	8007d2c <_write_r>

08007b0a <__sseek>:
 8007b0a:	b510      	push	{r4, lr}
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b12:	f000 f8e7 	bl	8007ce4 <_lseek_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	bf15      	itete	ne
 8007b1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b26:	81a3      	strheq	r3, [r4, #12]
 8007b28:	bf18      	it	ne
 8007b2a:	81a3      	strhne	r3, [r4, #12]
 8007b2c:	bd10      	pop	{r4, pc}

08007b2e <__sclose>:
 8007b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b32:	f000 b8c7 	b.w	8007cc4 <_close_r>

08007b36 <__swbuf_r>:
 8007b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b38:	460e      	mov	r6, r1
 8007b3a:	4614      	mov	r4, r2
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	b118      	cbz	r0, 8007b48 <__swbuf_r+0x12>
 8007b40:	6a03      	ldr	r3, [r0, #32]
 8007b42:	b90b      	cbnz	r3, 8007b48 <__swbuf_r+0x12>
 8007b44:	f7ff feba 	bl	80078bc <__sinit>
 8007b48:	69a3      	ldr	r3, [r4, #24]
 8007b4a:	60a3      	str	r3, [r4, #8]
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	071a      	lsls	r2, r3, #28
 8007b50:	d501      	bpl.n	8007b56 <__swbuf_r+0x20>
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	b943      	cbnz	r3, 8007b68 <__swbuf_r+0x32>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f82b 	bl	8007bb4 <__swsetup_r>
 8007b5e:	b118      	cbz	r0, 8007b68 <__swbuf_r+0x32>
 8007b60:	f04f 37ff 	mov.w	r7, #4294967295
 8007b64:	4638      	mov	r0, r7
 8007b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	6922      	ldr	r2, [r4, #16]
 8007b6c:	1a98      	subs	r0, r3, r2
 8007b6e:	6963      	ldr	r3, [r4, #20]
 8007b70:	b2f6      	uxtb	r6, r6
 8007b72:	4283      	cmp	r3, r0
 8007b74:	4637      	mov	r7, r6
 8007b76:	dc05      	bgt.n	8007b84 <__swbuf_r+0x4e>
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f000 fec2 	bl	8008904 <_fflush_r>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d1ed      	bne.n	8007b60 <__swbuf_r+0x2a>
 8007b84:	68a3      	ldr	r3, [r4, #8]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	60a3      	str	r3, [r4, #8]
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	6022      	str	r2, [r4, #0]
 8007b90:	701e      	strb	r6, [r3, #0]
 8007b92:	6962      	ldr	r2, [r4, #20]
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d004      	beq.n	8007ba4 <__swbuf_r+0x6e>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	07db      	lsls	r3, r3, #31
 8007b9e:	d5e1      	bpl.n	8007b64 <__swbuf_r+0x2e>
 8007ba0:	2e0a      	cmp	r6, #10
 8007ba2:	d1df      	bne.n	8007b64 <__swbuf_r+0x2e>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 feac 	bl	8008904 <_fflush_r>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d0d9      	beq.n	8007b64 <__swbuf_r+0x2e>
 8007bb0:	e7d6      	b.n	8007b60 <__swbuf_r+0x2a>
	...

08007bb4 <__swsetup_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4b29      	ldr	r3, [pc, #164]	@ (8007c5c <__swsetup_r+0xa8>)
 8007bb8:	4605      	mov	r5, r0
 8007bba:	6818      	ldr	r0, [r3, #0]
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	b118      	cbz	r0, 8007bc8 <__swsetup_r+0x14>
 8007bc0:	6a03      	ldr	r3, [r0, #32]
 8007bc2:	b90b      	cbnz	r3, 8007bc8 <__swsetup_r+0x14>
 8007bc4:	f7ff fe7a 	bl	80078bc <__sinit>
 8007bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bcc:	0719      	lsls	r1, r3, #28
 8007bce:	d422      	bmi.n	8007c16 <__swsetup_r+0x62>
 8007bd0:	06da      	lsls	r2, r3, #27
 8007bd2:	d407      	bmi.n	8007be4 <__swsetup_r+0x30>
 8007bd4:	2209      	movs	r2, #9
 8007bd6:	602a      	str	r2, [r5, #0]
 8007bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	f04f 30ff 	mov.w	r0, #4294967295
 8007be2:	e033      	b.n	8007c4c <__swsetup_r+0x98>
 8007be4:	0758      	lsls	r0, r3, #29
 8007be6:	d512      	bpl.n	8007c0e <__swsetup_r+0x5a>
 8007be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bea:	b141      	cbz	r1, 8007bfe <__swsetup_r+0x4a>
 8007bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	d002      	beq.n	8007bfa <__swsetup_r+0x46>
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f000 f8e1 	bl	8007dbc <_free_r>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	2300      	movs	r3, #0
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f043 0308 	orr.w	r3, r3, #8
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	b94b      	cbnz	r3, 8007c2e <__swsetup_r+0x7a>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c24:	d003      	beq.n	8007c2e <__swsetup_r+0x7a>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 feb9 	bl	80089a0 <__smakebuf_r>
 8007c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c32:	f013 0201 	ands.w	r2, r3, #1
 8007c36:	d00a      	beq.n	8007c4e <__swsetup_r+0x9a>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	60a2      	str	r2, [r4, #8]
 8007c3c:	6962      	ldr	r2, [r4, #20]
 8007c3e:	4252      	negs	r2, r2
 8007c40:	61a2      	str	r2, [r4, #24]
 8007c42:	6922      	ldr	r2, [r4, #16]
 8007c44:	b942      	cbnz	r2, 8007c58 <__swsetup_r+0xa4>
 8007c46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c4a:	d1c5      	bne.n	8007bd8 <__swsetup_r+0x24>
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	0799      	lsls	r1, r3, #30
 8007c50:	bf58      	it	pl
 8007c52:	6962      	ldrpl	r2, [r4, #20]
 8007c54:	60a2      	str	r2, [r4, #8]
 8007c56:	e7f4      	b.n	8007c42 <__swsetup_r+0x8e>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e7f7      	b.n	8007c4c <__swsetup_r+0x98>
 8007c5c:	20000020 	.word	0x20000020

08007c60 <memset>:
 8007c60:	4402      	add	r2, r0
 8007c62:	4603      	mov	r3, r0
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d100      	bne.n	8007c6a <memset+0xa>
 8007c68:	4770      	bx	lr
 8007c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c6e:	e7f9      	b.n	8007c64 <memset+0x4>

08007c70 <strncpy>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	3901      	subs	r1, #1
 8007c74:	4603      	mov	r3, r0
 8007c76:	b132      	cbz	r2, 8007c86 <strncpy+0x16>
 8007c78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c7c:	f803 4b01 	strb.w	r4, [r3], #1
 8007c80:	3a01      	subs	r2, #1
 8007c82:	2c00      	cmp	r4, #0
 8007c84:	d1f7      	bne.n	8007c76 <strncpy+0x6>
 8007c86:	441a      	add	r2, r3
 8007c88:	2100      	movs	r1, #0
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d100      	bne.n	8007c90 <strncpy+0x20>
 8007c8e:	bd10      	pop	{r4, pc}
 8007c90:	f803 1b01 	strb.w	r1, [r3], #1
 8007c94:	e7f9      	b.n	8007c8a <strncpy+0x1a>

08007c96 <strstr>:
 8007c96:	780a      	ldrb	r2, [r1, #0]
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	b96a      	cbnz	r2, 8007cb8 <strstr+0x22>
 8007c9c:	bd70      	pop	{r4, r5, r6, pc}
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d109      	bne.n	8007cb6 <strstr+0x20>
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f6      	beq.n	8007c9c <strstr+0x6>
 8007cae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007cb2:	429e      	cmp	r6, r3
 8007cb4:	d0f7      	beq.n	8007ca6 <strstr+0x10>
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	7803      	ldrb	r3, [r0, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1ef      	bne.n	8007c9e <strstr+0x8>
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	e7ec      	b.n	8007c9c <strstr+0x6>
	...

08007cc4 <_close_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4d06      	ldr	r5, [pc, #24]	@ (8007ce0 <_close_r+0x1c>)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	f7fa f903 	bl	8001eda <_close>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_close_r+0x1a>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_close_r+0x1a>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	20013c98 	.word	0x20013c98

08007ce4 <_lseek_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	@ (8007d04 <_lseek_r+0x20>)
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7fa f918 	bl	8001f28 <_lseek>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_lseek_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_lseek_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	20013c98 	.word	0x20013c98

08007d08 <_read_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4d07      	ldr	r5, [pc, #28]	@ (8007d28 <_read_r+0x20>)
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4611      	mov	r1, r2
 8007d12:	2200      	movs	r2, #0
 8007d14:	602a      	str	r2, [r5, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	f7fa f8a6 	bl	8001e68 <_read>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_read_r+0x1e>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_read_r+0x1e>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	20013c98 	.word	0x20013c98

08007d2c <_write_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d07      	ldr	r5, [pc, #28]	@ (8007d4c <_write_r+0x20>)
 8007d30:	4604      	mov	r4, r0
 8007d32:	4608      	mov	r0, r1
 8007d34:	4611      	mov	r1, r2
 8007d36:	2200      	movs	r2, #0
 8007d38:	602a      	str	r2, [r5, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f7fa f8b1 	bl	8001ea2 <_write>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_write_r+0x1e>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_write_r+0x1e>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	20013c98 	.word	0x20013c98

08007d50 <__libc_init_array>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	4d0d      	ldr	r5, [pc, #52]	@ (8007d88 <__libc_init_array+0x38>)
 8007d54:	4c0d      	ldr	r4, [pc, #52]	@ (8007d8c <__libc_init_array+0x3c>)
 8007d56:	1b64      	subs	r4, r4, r5
 8007d58:	10a4      	asrs	r4, r4, #2
 8007d5a:	2600      	movs	r6, #0
 8007d5c:	42a6      	cmp	r6, r4
 8007d5e:	d109      	bne.n	8007d74 <__libc_init_array+0x24>
 8007d60:	4d0b      	ldr	r5, [pc, #44]	@ (8007d90 <__libc_init_array+0x40>)
 8007d62:	4c0c      	ldr	r4, [pc, #48]	@ (8007d94 <__libc_init_array+0x44>)
 8007d64:	f000 fee8 	bl	8008b38 <_init>
 8007d68:	1b64      	subs	r4, r4, r5
 8007d6a:	10a4      	asrs	r4, r4, #2
 8007d6c:	2600      	movs	r6, #0
 8007d6e:	42a6      	cmp	r6, r4
 8007d70:	d105      	bne.n	8007d7e <__libc_init_array+0x2e>
 8007d72:	bd70      	pop	{r4, r5, r6, pc}
 8007d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d78:	4798      	blx	r3
 8007d7a:	3601      	adds	r6, #1
 8007d7c:	e7ee      	b.n	8007d5c <__libc_init_array+0xc>
 8007d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d82:	4798      	blx	r3
 8007d84:	3601      	adds	r6, #1
 8007d86:	e7f2      	b.n	8007d6e <__libc_init_array+0x1e>
 8007d88:	08009180 	.word	0x08009180
 8007d8c:	08009180 	.word	0x08009180
 8007d90:	08009180 	.word	0x08009180
 8007d94:	08009184 	.word	0x08009184

08007d98 <__retarget_lock_init_recursive>:
 8007d98:	4770      	bx	lr

08007d9a <__retarget_lock_acquire_recursive>:
 8007d9a:	4770      	bx	lr

08007d9c <__retarget_lock_release_recursive>:
 8007d9c:	4770      	bx	lr

08007d9e <memcpy>:
 8007d9e:	440a      	add	r2, r1
 8007da0:	4291      	cmp	r1, r2
 8007da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007da6:	d100      	bne.n	8007daa <memcpy+0xc>
 8007da8:	4770      	bx	lr
 8007daa:	b510      	push	{r4, lr}
 8007dac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007db4:	4291      	cmp	r1, r2
 8007db6:	d1f9      	bne.n	8007dac <memcpy+0xe>
 8007db8:	bd10      	pop	{r4, pc}
	...

08007dbc <_free_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	d041      	beq.n	8007e48 <_free_r+0x8c>
 8007dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc8:	1f0c      	subs	r4, r1, #4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	bfb8      	it	lt
 8007dce:	18e4      	addlt	r4, r4, r3
 8007dd0:	f000 f8e0 	bl	8007f94 <__malloc_lock>
 8007dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e4c <_free_r+0x90>)
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	b933      	cbnz	r3, 8007de8 <_free_r+0x2c>
 8007dda:	6063      	str	r3, [r4, #4]
 8007ddc:	6014      	str	r4, [r2, #0]
 8007dde:	4628      	mov	r0, r5
 8007de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007de4:	f000 b8dc 	b.w	8007fa0 <__malloc_unlock>
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d908      	bls.n	8007dfe <_free_r+0x42>
 8007dec:	6820      	ldr	r0, [r4, #0]
 8007dee:	1821      	adds	r1, r4, r0
 8007df0:	428b      	cmp	r3, r1
 8007df2:	bf01      	itttt	eq
 8007df4:	6819      	ldreq	r1, [r3, #0]
 8007df6:	685b      	ldreq	r3, [r3, #4]
 8007df8:	1809      	addeq	r1, r1, r0
 8007dfa:	6021      	streq	r1, [r4, #0]
 8007dfc:	e7ed      	b.n	8007dda <_free_r+0x1e>
 8007dfe:	461a      	mov	r2, r3
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	b10b      	cbz	r3, 8007e08 <_free_r+0x4c>
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	d9fa      	bls.n	8007dfe <_free_r+0x42>
 8007e08:	6811      	ldr	r1, [r2, #0]
 8007e0a:	1850      	adds	r0, r2, r1
 8007e0c:	42a0      	cmp	r0, r4
 8007e0e:	d10b      	bne.n	8007e28 <_free_r+0x6c>
 8007e10:	6820      	ldr	r0, [r4, #0]
 8007e12:	4401      	add	r1, r0
 8007e14:	1850      	adds	r0, r2, r1
 8007e16:	4283      	cmp	r3, r0
 8007e18:	6011      	str	r1, [r2, #0]
 8007e1a:	d1e0      	bne.n	8007dde <_free_r+0x22>
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	6053      	str	r3, [r2, #4]
 8007e22:	4408      	add	r0, r1
 8007e24:	6010      	str	r0, [r2, #0]
 8007e26:	e7da      	b.n	8007dde <_free_r+0x22>
 8007e28:	d902      	bls.n	8007e30 <_free_r+0x74>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	602b      	str	r3, [r5, #0]
 8007e2e:	e7d6      	b.n	8007dde <_free_r+0x22>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	1821      	adds	r1, r4, r0
 8007e34:	428b      	cmp	r3, r1
 8007e36:	bf04      	itt	eq
 8007e38:	6819      	ldreq	r1, [r3, #0]
 8007e3a:	685b      	ldreq	r3, [r3, #4]
 8007e3c:	6063      	str	r3, [r4, #4]
 8007e3e:	bf04      	itt	eq
 8007e40:	1809      	addeq	r1, r1, r0
 8007e42:	6021      	streq	r1, [r4, #0]
 8007e44:	6054      	str	r4, [r2, #4]
 8007e46:	e7ca      	b.n	8007dde <_free_r+0x22>
 8007e48:	bd38      	pop	{r3, r4, r5, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20013ca4 	.word	0x20013ca4

08007e50 <sbrk_aligned>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	4e0f      	ldr	r6, [pc, #60]	@ (8007e90 <sbrk_aligned+0x40>)
 8007e54:	460c      	mov	r4, r1
 8007e56:	6831      	ldr	r1, [r6, #0]
 8007e58:	4605      	mov	r5, r0
 8007e5a:	b911      	cbnz	r1, 8007e62 <sbrk_aligned+0x12>
 8007e5c:	f000 fe18 	bl	8008a90 <_sbrk_r>
 8007e60:	6030      	str	r0, [r6, #0]
 8007e62:	4621      	mov	r1, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 fe13 	bl	8008a90 <_sbrk_r>
 8007e6a:	1c43      	adds	r3, r0, #1
 8007e6c:	d103      	bne.n	8007e76 <sbrk_aligned+0x26>
 8007e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8007e72:	4620      	mov	r0, r4
 8007e74:	bd70      	pop	{r4, r5, r6, pc}
 8007e76:	1cc4      	adds	r4, r0, #3
 8007e78:	f024 0403 	bic.w	r4, r4, #3
 8007e7c:	42a0      	cmp	r0, r4
 8007e7e:	d0f8      	beq.n	8007e72 <sbrk_aligned+0x22>
 8007e80:	1a21      	subs	r1, r4, r0
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 fe04 	bl	8008a90 <_sbrk_r>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d1f2      	bne.n	8007e72 <sbrk_aligned+0x22>
 8007e8c:	e7ef      	b.n	8007e6e <sbrk_aligned+0x1e>
 8007e8e:	bf00      	nop
 8007e90:	20013ca0 	.word	0x20013ca0

08007e94 <_malloc_r>:
 8007e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e98:	1ccd      	adds	r5, r1, #3
 8007e9a:	f025 0503 	bic.w	r5, r5, #3
 8007e9e:	3508      	adds	r5, #8
 8007ea0:	2d0c      	cmp	r5, #12
 8007ea2:	bf38      	it	cc
 8007ea4:	250c      	movcc	r5, #12
 8007ea6:	2d00      	cmp	r5, #0
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	db01      	blt.n	8007eb0 <_malloc_r+0x1c>
 8007eac:	42a9      	cmp	r1, r5
 8007eae:	d904      	bls.n	8007eba <_malloc_r+0x26>
 8007eb0:	230c      	movs	r3, #12
 8007eb2:	6033      	str	r3, [r6, #0]
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f90 <_malloc_r+0xfc>
 8007ebe:	f000 f869 	bl	8007f94 <__malloc_lock>
 8007ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec6:	461c      	mov	r4, r3
 8007ec8:	bb44      	cbnz	r4, 8007f1c <_malloc_r+0x88>
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7ff ffbf 	bl	8007e50 <sbrk_aligned>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	d158      	bne.n	8007f8a <_malloc_r+0xf6>
 8007ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8007edc:	4627      	mov	r7, r4
 8007ede:	2f00      	cmp	r7, #0
 8007ee0:	d143      	bne.n	8007f6a <_malloc_r+0xd6>
 8007ee2:	2c00      	cmp	r4, #0
 8007ee4:	d04b      	beq.n	8007f7e <_malloc_r+0xea>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	4639      	mov	r1, r7
 8007eea:	4630      	mov	r0, r6
 8007eec:	eb04 0903 	add.w	r9, r4, r3
 8007ef0:	f000 fdce 	bl	8008a90 <_sbrk_r>
 8007ef4:	4581      	cmp	r9, r0
 8007ef6:	d142      	bne.n	8007f7e <_malloc_r+0xea>
 8007ef8:	6821      	ldr	r1, [r4, #0]
 8007efa:	1a6d      	subs	r5, r5, r1
 8007efc:	4629      	mov	r1, r5
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7ff ffa6 	bl	8007e50 <sbrk_aligned>
 8007f04:	3001      	adds	r0, #1
 8007f06:	d03a      	beq.n	8007f7e <_malloc_r+0xea>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	442b      	add	r3, r5
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	bb62      	cbnz	r2, 8007f70 <_malloc_r+0xdc>
 8007f16:	f8c8 7000 	str.w	r7, [r8]
 8007f1a:	e00f      	b.n	8007f3c <_malloc_r+0xa8>
 8007f1c:	6822      	ldr	r2, [r4, #0]
 8007f1e:	1b52      	subs	r2, r2, r5
 8007f20:	d420      	bmi.n	8007f64 <_malloc_r+0xd0>
 8007f22:	2a0b      	cmp	r2, #11
 8007f24:	d917      	bls.n	8007f56 <_malloc_r+0xc2>
 8007f26:	1961      	adds	r1, r4, r5
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	6025      	str	r5, [r4, #0]
 8007f2c:	bf18      	it	ne
 8007f2e:	6059      	strne	r1, [r3, #4]
 8007f30:	6863      	ldr	r3, [r4, #4]
 8007f32:	bf08      	it	eq
 8007f34:	f8c8 1000 	streq.w	r1, [r8]
 8007f38:	5162      	str	r2, [r4, r5]
 8007f3a:	604b      	str	r3, [r1, #4]
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f000 f82f 	bl	8007fa0 <__malloc_unlock>
 8007f42:	f104 000b 	add.w	r0, r4, #11
 8007f46:	1d23      	adds	r3, r4, #4
 8007f48:	f020 0007 	bic.w	r0, r0, #7
 8007f4c:	1ac2      	subs	r2, r0, r3
 8007f4e:	bf1c      	itt	ne
 8007f50:	1a1b      	subne	r3, r3, r0
 8007f52:	50a3      	strne	r3, [r4, r2]
 8007f54:	e7af      	b.n	8007eb6 <_malloc_r+0x22>
 8007f56:	6862      	ldr	r2, [r4, #4]
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	bf0c      	ite	eq
 8007f5c:	f8c8 2000 	streq.w	r2, [r8]
 8007f60:	605a      	strne	r2, [r3, #4]
 8007f62:	e7eb      	b.n	8007f3c <_malloc_r+0xa8>
 8007f64:	4623      	mov	r3, r4
 8007f66:	6864      	ldr	r4, [r4, #4]
 8007f68:	e7ae      	b.n	8007ec8 <_malloc_r+0x34>
 8007f6a:	463c      	mov	r4, r7
 8007f6c:	687f      	ldr	r7, [r7, #4]
 8007f6e:	e7b6      	b.n	8007ede <_malloc_r+0x4a>
 8007f70:	461a      	mov	r2, r3
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	d1fb      	bne.n	8007f70 <_malloc_r+0xdc>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6053      	str	r3, [r2, #4]
 8007f7c:	e7de      	b.n	8007f3c <_malloc_r+0xa8>
 8007f7e:	230c      	movs	r3, #12
 8007f80:	6033      	str	r3, [r6, #0]
 8007f82:	4630      	mov	r0, r6
 8007f84:	f000 f80c 	bl	8007fa0 <__malloc_unlock>
 8007f88:	e794      	b.n	8007eb4 <_malloc_r+0x20>
 8007f8a:	6005      	str	r5, [r0, #0]
 8007f8c:	e7d6      	b.n	8007f3c <_malloc_r+0xa8>
 8007f8e:	bf00      	nop
 8007f90:	20013ca4 	.word	0x20013ca4

08007f94 <__malloc_lock>:
 8007f94:	4801      	ldr	r0, [pc, #4]	@ (8007f9c <__malloc_lock+0x8>)
 8007f96:	f7ff bf00 	b.w	8007d9a <__retarget_lock_acquire_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	20013c9c 	.word	0x20013c9c

08007fa0 <__malloc_unlock>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	@ (8007fa8 <__malloc_unlock+0x8>)
 8007fa2:	f7ff befb 	b.w	8007d9c <__retarget_lock_release_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	20013c9c 	.word	0x20013c9c

08007fac <__ssputs_r>:
 8007fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	688e      	ldr	r6, [r1, #8]
 8007fb2:	461f      	mov	r7, r3
 8007fb4:	42be      	cmp	r6, r7
 8007fb6:	680b      	ldr	r3, [r1, #0]
 8007fb8:	4682      	mov	sl, r0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	4690      	mov	r8, r2
 8007fbe:	d82d      	bhi.n	800801c <__ssputs_r+0x70>
 8007fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fc8:	d026      	beq.n	8008018 <__ssputs_r+0x6c>
 8007fca:	6965      	ldr	r5, [r4, #20]
 8007fcc:	6909      	ldr	r1, [r1, #16]
 8007fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fd2:	eba3 0901 	sub.w	r9, r3, r1
 8007fd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fda:	1c7b      	adds	r3, r7, #1
 8007fdc:	444b      	add	r3, r9
 8007fde:	106d      	asrs	r5, r5, #1
 8007fe0:	429d      	cmp	r5, r3
 8007fe2:	bf38      	it	cc
 8007fe4:	461d      	movcc	r5, r3
 8007fe6:	0553      	lsls	r3, r2, #21
 8007fe8:	d527      	bpl.n	800803a <__ssputs_r+0x8e>
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7ff ff52 	bl	8007e94 <_malloc_r>
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	b360      	cbz	r0, 800804e <__ssputs_r+0xa2>
 8007ff4:	6921      	ldr	r1, [r4, #16]
 8007ff6:	464a      	mov	r2, r9
 8007ff8:	f7ff fed1 	bl	8007d9e <memcpy>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	6126      	str	r6, [r4, #16]
 800800a:	6165      	str	r5, [r4, #20]
 800800c:	444e      	add	r6, r9
 800800e:	eba5 0509 	sub.w	r5, r5, r9
 8008012:	6026      	str	r6, [r4, #0]
 8008014:	60a5      	str	r5, [r4, #8]
 8008016:	463e      	mov	r6, r7
 8008018:	42be      	cmp	r6, r7
 800801a:	d900      	bls.n	800801e <__ssputs_r+0x72>
 800801c:	463e      	mov	r6, r7
 800801e:	6820      	ldr	r0, [r4, #0]
 8008020:	4632      	mov	r2, r6
 8008022:	4641      	mov	r1, r8
 8008024:	f000 fcf8 	bl	8008a18 <memmove>
 8008028:	68a3      	ldr	r3, [r4, #8]
 800802a:	1b9b      	subs	r3, r3, r6
 800802c:	60a3      	str	r3, [r4, #8]
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	4433      	add	r3, r6
 8008032:	6023      	str	r3, [r4, #0]
 8008034:	2000      	movs	r0, #0
 8008036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803a:	462a      	mov	r2, r5
 800803c:	f000 fd38 	bl	8008ab0 <_realloc_r>
 8008040:	4606      	mov	r6, r0
 8008042:	2800      	cmp	r0, #0
 8008044:	d1e0      	bne.n	8008008 <__ssputs_r+0x5c>
 8008046:	6921      	ldr	r1, [r4, #16]
 8008048:	4650      	mov	r0, sl
 800804a:	f7ff feb7 	bl	8007dbc <_free_r>
 800804e:	230c      	movs	r3, #12
 8008050:	f8ca 3000 	str.w	r3, [sl]
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	e7e9      	b.n	8008036 <__ssputs_r+0x8a>
	...

08008064 <_svfiprintf_r>:
 8008064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	4698      	mov	r8, r3
 800806a:	898b      	ldrh	r3, [r1, #12]
 800806c:	061b      	lsls	r3, r3, #24
 800806e:	b09d      	sub	sp, #116	@ 0x74
 8008070:	4607      	mov	r7, r0
 8008072:	460d      	mov	r5, r1
 8008074:	4614      	mov	r4, r2
 8008076:	d510      	bpl.n	800809a <_svfiprintf_r+0x36>
 8008078:	690b      	ldr	r3, [r1, #16]
 800807a:	b973      	cbnz	r3, 800809a <_svfiprintf_r+0x36>
 800807c:	2140      	movs	r1, #64	@ 0x40
 800807e:	f7ff ff09 	bl	8007e94 <_malloc_r>
 8008082:	6028      	str	r0, [r5, #0]
 8008084:	6128      	str	r0, [r5, #16]
 8008086:	b930      	cbnz	r0, 8008096 <_svfiprintf_r+0x32>
 8008088:	230c      	movs	r3, #12
 800808a:	603b      	str	r3, [r7, #0]
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	b01d      	add	sp, #116	@ 0x74
 8008092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008096:	2340      	movs	r3, #64	@ 0x40
 8008098:	616b      	str	r3, [r5, #20]
 800809a:	2300      	movs	r3, #0
 800809c:	9309      	str	r3, [sp, #36]	@ 0x24
 800809e:	2320      	movs	r3, #32
 80080a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080a8:	2330      	movs	r3, #48	@ 0x30
 80080aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008248 <_svfiprintf_r+0x1e4>
 80080ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080b2:	f04f 0901 	mov.w	r9, #1
 80080b6:	4623      	mov	r3, r4
 80080b8:	469a      	mov	sl, r3
 80080ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080be:	b10a      	cbz	r2, 80080c4 <_svfiprintf_r+0x60>
 80080c0:	2a25      	cmp	r2, #37	@ 0x25
 80080c2:	d1f9      	bne.n	80080b8 <_svfiprintf_r+0x54>
 80080c4:	ebba 0b04 	subs.w	fp, sl, r4
 80080c8:	d00b      	beq.n	80080e2 <_svfiprintf_r+0x7e>
 80080ca:	465b      	mov	r3, fp
 80080cc:	4622      	mov	r2, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	4638      	mov	r0, r7
 80080d2:	f7ff ff6b 	bl	8007fac <__ssputs_r>
 80080d6:	3001      	adds	r0, #1
 80080d8:	f000 80a7 	beq.w	800822a <_svfiprintf_r+0x1c6>
 80080dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080de:	445a      	add	r2, fp
 80080e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80080e2:	f89a 3000 	ldrb.w	r3, [sl]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 809f 	beq.w	800822a <_svfiprintf_r+0x1c6>
 80080ec:	2300      	movs	r3, #0
 80080ee:	f04f 32ff 	mov.w	r2, #4294967295
 80080f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080f6:	f10a 0a01 	add.w	sl, sl, #1
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	9307      	str	r3, [sp, #28]
 80080fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008102:	931a      	str	r3, [sp, #104]	@ 0x68
 8008104:	4654      	mov	r4, sl
 8008106:	2205      	movs	r2, #5
 8008108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800810c:	484e      	ldr	r0, [pc, #312]	@ (8008248 <_svfiprintf_r+0x1e4>)
 800810e:	f7f8 f887 	bl	8000220 <memchr>
 8008112:	9a04      	ldr	r2, [sp, #16]
 8008114:	b9d8      	cbnz	r0, 800814e <_svfiprintf_r+0xea>
 8008116:	06d0      	lsls	r0, r2, #27
 8008118:	bf44      	itt	mi
 800811a:	2320      	movmi	r3, #32
 800811c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008120:	0711      	lsls	r1, r2, #28
 8008122:	bf44      	itt	mi
 8008124:	232b      	movmi	r3, #43	@ 0x2b
 8008126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800812a:	f89a 3000 	ldrb.w	r3, [sl]
 800812e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008130:	d015      	beq.n	800815e <_svfiprintf_r+0xfa>
 8008132:	9a07      	ldr	r2, [sp, #28]
 8008134:	4654      	mov	r4, sl
 8008136:	2000      	movs	r0, #0
 8008138:	f04f 0c0a 	mov.w	ip, #10
 800813c:	4621      	mov	r1, r4
 800813e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008142:	3b30      	subs	r3, #48	@ 0x30
 8008144:	2b09      	cmp	r3, #9
 8008146:	d94b      	bls.n	80081e0 <_svfiprintf_r+0x17c>
 8008148:	b1b0      	cbz	r0, 8008178 <_svfiprintf_r+0x114>
 800814a:	9207      	str	r2, [sp, #28]
 800814c:	e014      	b.n	8008178 <_svfiprintf_r+0x114>
 800814e:	eba0 0308 	sub.w	r3, r0, r8
 8008152:	fa09 f303 	lsl.w	r3, r9, r3
 8008156:	4313      	orrs	r3, r2
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	46a2      	mov	sl, r4
 800815c:	e7d2      	b.n	8008104 <_svfiprintf_r+0xa0>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	1d19      	adds	r1, r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	9103      	str	r1, [sp, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfbb      	ittet	lt
 800816a:	425b      	neglt	r3, r3
 800816c:	f042 0202 	orrlt.w	r2, r2, #2
 8008170:	9307      	strge	r3, [sp, #28]
 8008172:	9307      	strlt	r3, [sp, #28]
 8008174:	bfb8      	it	lt
 8008176:	9204      	strlt	r2, [sp, #16]
 8008178:	7823      	ldrb	r3, [r4, #0]
 800817a:	2b2e      	cmp	r3, #46	@ 0x2e
 800817c:	d10a      	bne.n	8008194 <_svfiprintf_r+0x130>
 800817e:	7863      	ldrb	r3, [r4, #1]
 8008180:	2b2a      	cmp	r3, #42	@ 0x2a
 8008182:	d132      	bne.n	80081ea <_svfiprintf_r+0x186>
 8008184:	9b03      	ldr	r3, [sp, #12]
 8008186:	1d1a      	adds	r2, r3, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	9203      	str	r2, [sp, #12]
 800818c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008190:	3402      	adds	r4, #2
 8008192:	9305      	str	r3, [sp, #20]
 8008194:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008258 <_svfiprintf_r+0x1f4>
 8008198:	7821      	ldrb	r1, [r4, #0]
 800819a:	2203      	movs	r2, #3
 800819c:	4650      	mov	r0, sl
 800819e:	f7f8 f83f 	bl	8000220 <memchr>
 80081a2:	b138      	cbz	r0, 80081b4 <_svfiprintf_r+0x150>
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	eba0 000a 	sub.w	r0, r0, sl
 80081aa:	2240      	movs	r2, #64	@ 0x40
 80081ac:	4082      	lsls	r2, r0
 80081ae:	4313      	orrs	r3, r2
 80081b0:	3401      	adds	r4, #1
 80081b2:	9304      	str	r3, [sp, #16]
 80081b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b8:	4824      	ldr	r0, [pc, #144]	@ (800824c <_svfiprintf_r+0x1e8>)
 80081ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081be:	2206      	movs	r2, #6
 80081c0:	f7f8 f82e 	bl	8000220 <memchr>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d036      	beq.n	8008236 <_svfiprintf_r+0x1d2>
 80081c8:	4b21      	ldr	r3, [pc, #132]	@ (8008250 <_svfiprintf_r+0x1ec>)
 80081ca:	bb1b      	cbnz	r3, 8008214 <_svfiprintf_r+0x1b0>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	3307      	adds	r3, #7
 80081d0:	f023 0307 	bic.w	r3, r3, #7
 80081d4:	3308      	adds	r3, #8
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081da:	4433      	add	r3, r6
 80081dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081de:	e76a      	b.n	80080b6 <_svfiprintf_r+0x52>
 80081e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081e4:	460c      	mov	r4, r1
 80081e6:	2001      	movs	r0, #1
 80081e8:	e7a8      	b.n	800813c <_svfiprintf_r+0xd8>
 80081ea:	2300      	movs	r3, #0
 80081ec:	3401      	adds	r4, #1
 80081ee:	9305      	str	r3, [sp, #20]
 80081f0:	4619      	mov	r1, r3
 80081f2:	f04f 0c0a 	mov.w	ip, #10
 80081f6:	4620      	mov	r0, r4
 80081f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081fc:	3a30      	subs	r2, #48	@ 0x30
 80081fe:	2a09      	cmp	r2, #9
 8008200:	d903      	bls.n	800820a <_svfiprintf_r+0x1a6>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0c6      	beq.n	8008194 <_svfiprintf_r+0x130>
 8008206:	9105      	str	r1, [sp, #20]
 8008208:	e7c4      	b.n	8008194 <_svfiprintf_r+0x130>
 800820a:	fb0c 2101 	mla	r1, ip, r1, r2
 800820e:	4604      	mov	r4, r0
 8008210:	2301      	movs	r3, #1
 8008212:	e7f0      	b.n	80081f6 <_svfiprintf_r+0x192>
 8008214:	ab03      	add	r3, sp, #12
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	462a      	mov	r2, r5
 800821a:	4b0e      	ldr	r3, [pc, #56]	@ (8008254 <_svfiprintf_r+0x1f0>)
 800821c:	a904      	add	r1, sp, #16
 800821e:	4638      	mov	r0, r7
 8008220:	f3af 8000 	nop.w
 8008224:	1c42      	adds	r2, r0, #1
 8008226:	4606      	mov	r6, r0
 8008228:	d1d6      	bne.n	80081d8 <_svfiprintf_r+0x174>
 800822a:	89ab      	ldrh	r3, [r5, #12]
 800822c:	065b      	lsls	r3, r3, #25
 800822e:	f53f af2d 	bmi.w	800808c <_svfiprintf_r+0x28>
 8008232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008234:	e72c      	b.n	8008090 <_svfiprintf_r+0x2c>
 8008236:	ab03      	add	r3, sp, #12
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	462a      	mov	r2, r5
 800823c:	4b05      	ldr	r3, [pc, #20]	@ (8008254 <_svfiprintf_r+0x1f0>)
 800823e:	a904      	add	r1, sp, #16
 8008240:	4638      	mov	r0, r7
 8008242:	f000 f9bb 	bl	80085bc <_printf_i>
 8008246:	e7ed      	b.n	8008224 <_svfiprintf_r+0x1c0>
 8008248:	08009144 	.word	0x08009144
 800824c:	0800914e 	.word	0x0800914e
 8008250:	00000000 	.word	0x00000000
 8008254:	08007fad 	.word	0x08007fad
 8008258:	0800914a 	.word	0x0800914a

0800825c <__sfputc_r>:
 800825c:	6893      	ldr	r3, [r2, #8]
 800825e:	3b01      	subs	r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	b410      	push	{r4}
 8008264:	6093      	str	r3, [r2, #8]
 8008266:	da08      	bge.n	800827a <__sfputc_r+0x1e>
 8008268:	6994      	ldr	r4, [r2, #24]
 800826a:	42a3      	cmp	r3, r4
 800826c:	db01      	blt.n	8008272 <__sfputc_r+0x16>
 800826e:	290a      	cmp	r1, #10
 8008270:	d103      	bne.n	800827a <__sfputc_r+0x1e>
 8008272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008276:	f7ff bc5e 	b.w	8007b36 <__swbuf_r>
 800827a:	6813      	ldr	r3, [r2, #0]
 800827c:	1c58      	adds	r0, r3, #1
 800827e:	6010      	str	r0, [r2, #0]
 8008280:	7019      	strb	r1, [r3, #0]
 8008282:	4608      	mov	r0, r1
 8008284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008288:	4770      	bx	lr

0800828a <__sfputs_r>:
 800828a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828c:	4606      	mov	r6, r0
 800828e:	460f      	mov	r7, r1
 8008290:	4614      	mov	r4, r2
 8008292:	18d5      	adds	r5, r2, r3
 8008294:	42ac      	cmp	r4, r5
 8008296:	d101      	bne.n	800829c <__sfputs_r+0x12>
 8008298:	2000      	movs	r0, #0
 800829a:	e007      	b.n	80082ac <__sfputs_r+0x22>
 800829c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a0:	463a      	mov	r2, r7
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7ff ffda 	bl	800825c <__sfputc_r>
 80082a8:	1c43      	adds	r3, r0, #1
 80082aa:	d1f3      	bne.n	8008294 <__sfputs_r+0xa>
 80082ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082b0 <_vfiprintf_r>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	460d      	mov	r5, r1
 80082b6:	b09d      	sub	sp, #116	@ 0x74
 80082b8:	4614      	mov	r4, r2
 80082ba:	4698      	mov	r8, r3
 80082bc:	4606      	mov	r6, r0
 80082be:	b118      	cbz	r0, 80082c8 <_vfiprintf_r+0x18>
 80082c0:	6a03      	ldr	r3, [r0, #32]
 80082c2:	b90b      	cbnz	r3, 80082c8 <_vfiprintf_r+0x18>
 80082c4:	f7ff fafa 	bl	80078bc <__sinit>
 80082c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ca:	07d9      	lsls	r1, r3, #31
 80082cc:	d405      	bmi.n	80082da <_vfiprintf_r+0x2a>
 80082ce:	89ab      	ldrh	r3, [r5, #12]
 80082d0:	059a      	lsls	r2, r3, #22
 80082d2:	d402      	bmi.n	80082da <_vfiprintf_r+0x2a>
 80082d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082d6:	f7ff fd60 	bl	8007d9a <__retarget_lock_acquire_recursive>
 80082da:	89ab      	ldrh	r3, [r5, #12]
 80082dc:	071b      	lsls	r3, r3, #28
 80082de:	d501      	bpl.n	80082e4 <_vfiprintf_r+0x34>
 80082e0:	692b      	ldr	r3, [r5, #16]
 80082e2:	b99b      	cbnz	r3, 800830c <_vfiprintf_r+0x5c>
 80082e4:	4629      	mov	r1, r5
 80082e6:	4630      	mov	r0, r6
 80082e8:	f7ff fc64 	bl	8007bb4 <__swsetup_r>
 80082ec:	b170      	cbz	r0, 800830c <_vfiprintf_r+0x5c>
 80082ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082f0:	07dc      	lsls	r4, r3, #31
 80082f2:	d504      	bpl.n	80082fe <_vfiprintf_r+0x4e>
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	b01d      	add	sp, #116	@ 0x74
 80082fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fe:	89ab      	ldrh	r3, [r5, #12]
 8008300:	0598      	lsls	r0, r3, #22
 8008302:	d4f7      	bmi.n	80082f4 <_vfiprintf_r+0x44>
 8008304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008306:	f7ff fd49 	bl	8007d9c <__retarget_lock_release_recursive>
 800830a:	e7f3      	b.n	80082f4 <_vfiprintf_r+0x44>
 800830c:	2300      	movs	r3, #0
 800830e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008310:	2320      	movs	r3, #32
 8008312:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008316:	f8cd 800c 	str.w	r8, [sp, #12]
 800831a:	2330      	movs	r3, #48	@ 0x30
 800831c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084cc <_vfiprintf_r+0x21c>
 8008320:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008324:	f04f 0901 	mov.w	r9, #1
 8008328:	4623      	mov	r3, r4
 800832a:	469a      	mov	sl, r3
 800832c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008330:	b10a      	cbz	r2, 8008336 <_vfiprintf_r+0x86>
 8008332:	2a25      	cmp	r2, #37	@ 0x25
 8008334:	d1f9      	bne.n	800832a <_vfiprintf_r+0x7a>
 8008336:	ebba 0b04 	subs.w	fp, sl, r4
 800833a:	d00b      	beq.n	8008354 <_vfiprintf_r+0xa4>
 800833c:	465b      	mov	r3, fp
 800833e:	4622      	mov	r2, r4
 8008340:	4629      	mov	r1, r5
 8008342:	4630      	mov	r0, r6
 8008344:	f7ff ffa1 	bl	800828a <__sfputs_r>
 8008348:	3001      	adds	r0, #1
 800834a:	f000 80a7 	beq.w	800849c <_vfiprintf_r+0x1ec>
 800834e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008350:	445a      	add	r2, fp
 8008352:	9209      	str	r2, [sp, #36]	@ 0x24
 8008354:	f89a 3000 	ldrb.w	r3, [sl]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 809f 	beq.w	800849c <_vfiprintf_r+0x1ec>
 800835e:	2300      	movs	r3, #0
 8008360:	f04f 32ff 	mov.w	r2, #4294967295
 8008364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008368:	f10a 0a01 	add.w	sl, sl, #1
 800836c:	9304      	str	r3, [sp, #16]
 800836e:	9307      	str	r3, [sp, #28]
 8008370:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008374:	931a      	str	r3, [sp, #104]	@ 0x68
 8008376:	4654      	mov	r4, sl
 8008378:	2205      	movs	r2, #5
 800837a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837e:	4853      	ldr	r0, [pc, #332]	@ (80084cc <_vfiprintf_r+0x21c>)
 8008380:	f7f7 ff4e 	bl	8000220 <memchr>
 8008384:	9a04      	ldr	r2, [sp, #16]
 8008386:	b9d8      	cbnz	r0, 80083c0 <_vfiprintf_r+0x110>
 8008388:	06d1      	lsls	r1, r2, #27
 800838a:	bf44      	itt	mi
 800838c:	2320      	movmi	r3, #32
 800838e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008392:	0713      	lsls	r3, r2, #28
 8008394:	bf44      	itt	mi
 8008396:	232b      	movmi	r3, #43	@ 0x2b
 8008398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800839c:	f89a 3000 	ldrb.w	r3, [sl]
 80083a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083a2:	d015      	beq.n	80083d0 <_vfiprintf_r+0x120>
 80083a4:	9a07      	ldr	r2, [sp, #28]
 80083a6:	4654      	mov	r4, sl
 80083a8:	2000      	movs	r0, #0
 80083aa:	f04f 0c0a 	mov.w	ip, #10
 80083ae:	4621      	mov	r1, r4
 80083b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083b4:	3b30      	subs	r3, #48	@ 0x30
 80083b6:	2b09      	cmp	r3, #9
 80083b8:	d94b      	bls.n	8008452 <_vfiprintf_r+0x1a2>
 80083ba:	b1b0      	cbz	r0, 80083ea <_vfiprintf_r+0x13a>
 80083bc:	9207      	str	r2, [sp, #28]
 80083be:	e014      	b.n	80083ea <_vfiprintf_r+0x13a>
 80083c0:	eba0 0308 	sub.w	r3, r0, r8
 80083c4:	fa09 f303 	lsl.w	r3, r9, r3
 80083c8:	4313      	orrs	r3, r2
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	46a2      	mov	sl, r4
 80083ce:	e7d2      	b.n	8008376 <_vfiprintf_r+0xc6>
 80083d0:	9b03      	ldr	r3, [sp, #12]
 80083d2:	1d19      	adds	r1, r3, #4
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	9103      	str	r1, [sp, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bfbb      	ittet	lt
 80083dc:	425b      	neglt	r3, r3
 80083de:	f042 0202 	orrlt.w	r2, r2, #2
 80083e2:	9307      	strge	r3, [sp, #28]
 80083e4:	9307      	strlt	r3, [sp, #28]
 80083e6:	bfb8      	it	lt
 80083e8:	9204      	strlt	r2, [sp, #16]
 80083ea:	7823      	ldrb	r3, [r4, #0]
 80083ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80083ee:	d10a      	bne.n	8008406 <_vfiprintf_r+0x156>
 80083f0:	7863      	ldrb	r3, [r4, #1]
 80083f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80083f4:	d132      	bne.n	800845c <_vfiprintf_r+0x1ac>
 80083f6:	9b03      	ldr	r3, [sp, #12]
 80083f8:	1d1a      	adds	r2, r3, #4
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	9203      	str	r2, [sp, #12]
 80083fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008402:	3402      	adds	r4, #2
 8008404:	9305      	str	r3, [sp, #20]
 8008406:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084dc <_vfiprintf_r+0x22c>
 800840a:	7821      	ldrb	r1, [r4, #0]
 800840c:	2203      	movs	r2, #3
 800840e:	4650      	mov	r0, sl
 8008410:	f7f7 ff06 	bl	8000220 <memchr>
 8008414:	b138      	cbz	r0, 8008426 <_vfiprintf_r+0x176>
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	eba0 000a 	sub.w	r0, r0, sl
 800841c:	2240      	movs	r2, #64	@ 0x40
 800841e:	4082      	lsls	r2, r0
 8008420:	4313      	orrs	r3, r2
 8008422:	3401      	adds	r4, #1
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842a:	4829      	ldr	r0, [pc, #164]	@ (80084d0 <_vfiprintf_r+0x220>)
 800842c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008430:	2206      	movs	r2, #6
 8008432:	f7f7 fef5 	bl	8000220 <memchr>
 8008436:	2800      	cmp	r0, #0
 8008438:	d03f      	beq.n	80084ba <_vfiprintf_r+0x20a>
 800843a:	4b26      	ldr	r3, [pc, #152]	@ (80084d4 <_vfiprintf_r+0x224>)
 800843c:	bb1b      	cbnz	r3, 8008486 <_vfiprintf_r+0x1d6>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	3307      	adds	r3, #7
 8008442:	f023 0307 	bic.w	r3, r3, #7
 8008446:	3308      	adds	r3, #8
 8008448:	9303      	str	r3, [sp, #12]
 800844a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844c:	443b      	add	r3, r7
 800844e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008450:	e76a      	b.n	8008328 <_vfiprintf_r+0x78>
 8008452:	fb0c 3202 	mla	r2, ip, r2, r3
 8008456:	460c      	mov	r4, r1
 8008458:	2001      	movs	r0, #1
 800845a:	e7a8      	b.n	80083ae <_vfiprintf_r+0xfe>
 800845c:	2300      	movs	r3, #0
 800845e:	3401      	adds	r4, #1
 8008460:	9305      	str	r3, [sp, #20]
 8008462:	4619      	mov	r1, r3
 8008464:	f04f 0c0a 	mov.w	ip, #10
 8008468:	4620      	mov	r0, r4
 800846a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800846e:	3a30      	subs	r2, #48	@ 0x30
 8008470:	2a09      	cmp	r2, #9
 8008472:	d903      	bls.n	800847c <_vfiprintf_r+0x1cc>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0c6      	beq.n	8008406 <_vfiprintf_r+0x156>
 8008478:	9105      	str	r1, [sp, #20]
 800847a:	e7c4      	b.n	8008406 <_vfiprintf_r+0x156>
 800847c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008480:	4604      	mov	r4, r0
 8008482:	2301      	movs	r3, #1
 8008484:	e7f0      	b.n	8008468 <_vfiprintf_r+0x1b8>
 8008486:	ab03      	add	r3, sp, #12
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	462a      	mov	r2, r5
 800848c:	4b12      	ldr	r3, [pc, #72]	@ (80084d8 <_vfiprintf_r+0x228>)
 800848e:	a904      	add	r1, sp, #16
 8008490:	4630      	mov	r0, r6
 8008492:	f3af 8000 	nop.w
 8008496:	4607      	mov	r7, r0
 8008498:	1c78      	adds	r0, r7, #1
 800849a:	d1d6      	bne.n	800844a <_vfiprintf_r+0x19a>
 800849c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800849e:	07d9      	lsls	r1, r3, #31
 80084a0:	d405      	bmi.n	80084ae <_vfiprintf_r+0x1fe>
 80084a2:	89ab      	ldrh	r3, [r5, #12]
 80084a4:	059a      	lsls	r2, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_vfiprintf_r+0x1fe>
 80084a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084aa:	f7ff fc77 	bl	8007d9c <__retarget_lock_release_recursive>
 80084ae:	89ab      	ldrh	r3, [r5, #12]
 80084b0:	065b      	lsls	r3, r3, #25
 80084b2:	f53f af1f 	bmi.w	80082f4 <_vfiprintf_r+0x44>
 80084b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084b8:	e71e      	b.n	80082f8 <_vfiprintf_r+0x48>
 80084ba:	ab03      	add	r3, sp, #12
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	462a      	mov	r2, r5
 80084c0:	4b05      	ldr	r3, [pc, #20]	@ (80084d8 <_vfiprintf_r+0x228>)
 80084c2:	a904      	add	r1, sp, #16
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 f879 	bl	80085bc <_printf_i>
 80084ca:	e7e4      	b.n	8008496 <_vfiprintf_r+0x1e6>
 80084cc:	08009144 	.word	0x08009144
 80084d0:	0800914e 	.word	0x0800914e
 80084d4:	00000000 	.word	0x00000000
 80084d8:	0800828b 	.word	0x0800828b
 80084dc:	0800914a 	.word	0x0800914a

080084e0 <_printf_common>:
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	4616      	mov	r6, r2
 80084e6:	4698      	mov	r8, r3
 80084e8:	688a      	ldr	r2, [r1, #8]
 80084ea:	690b      	ldr	r3, [r1, #16]
 80084ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084f0:	4293      	cmp	r3, r2
 80084f2:	bfb8      	it	lt
 80084f4:	4613      	movlt	r3, r2
 80084f6:	6033      	str	r3, [r6, #0]
 80084f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084fc:	4607      	mov	r7, r0
 80084fe:	460c      	mov	r4, r1
 8008500:	b10a      	cbz	r2, 8008506 <_printf_common+0x26>
 8008502:	3301      	adds	r3, #1
 8008504:	6033      	str	r3, [r6, #0]
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	0699      	lsls	r1, r3, #26
 800850a:	bf42      	ittt	mi
 800850c:	6833      	ldrmi	r3, [r6, #0]
 800850e:	3302      	addmi	r3, #2
 8008510:	6033      	strmi	r3, [r6, #0]
 8008512:	6825      	ldr	r5, [r4, #0]
 8008514:	f015 0506 	ands.w	r5, r5, #6
 8008518:	d106      	bne.n	8008528 <_printf_common+0x48>
 800851a:	f104 0a19 	add.w	sl, r4, #25
 800851e:	68e3      	ldr	r3, [r4, #12]
 8008520:	6832      	ldr	r2, [r6, #0]
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	42ab      	cmp	r3, r5
 8008526:	dc26      	bgt.n	8008576 <_printf_common+0x96>
 8008528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800852c:	6822      	ldr	r2, [r4, #0]
 800852e:	3b00      	subs	r3, #0
 8008530:	bf18      	it	ne
 8008532:	2301      	movne	r3, #1
 8008534:	0692      	lsls	r2, r2, #26
 8008536:	d42b      	bmi.n	8008590 <_printf_common+0xb0>
 8008538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800853c:	4641      	mov	r1, r8
 800853e:	4638      	mov	r0, r7
 8008540:	47c8      	blx	r9
 8008542:	3001      	adds	r0, #1
 8008544:	d01e      	beq.n	8008584 <_printf_common+0xa4>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	6922      	ldr	r2, [r4, #16]
 800854a:	f003 0306 	and.w	r3, r3, #6
 800854e:	2b04      	cmp	r3, #4
 8008550:	bf02      	ittt	eq
 8008552:	68e5      	ldreq	r5, [r4, #12]
 8008554:	6833      	ldreq	r3, [r6, #0]
 8008556:	1aed      	subeq	r5, r5, r3
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	bf0c      	ite	eq
 800855c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008560:	2500      	movne	r5, #0
 8008562:	4293      	cmp	r3, r2
 8008564:	bfc4      	itt	gt
 8008566:	1a9b      	subgt	r3, r3, r2
 8008568:	18ed      	addgt	r5, r5, r3
 800856a:	2600      	movs	r6, #0
 800856c:	341a      	adds	r4, #26
 800856e:	42b5      	cmp	r5, r6
 8008570:	d11a      	bne.n	80085a8 <_printf_common+0xc8>
 8008572:	2000      	movs	r0, #0
 8008574:	e008      	b.n	8008588 <_printf_common+0xa8>
 8008576:	2301      	movs	r3, #1
 8008578:	4652      	mov	r2, sl
 800857a:	4641      	mov	r1, r8
 800857c:	4638      	mov	r0, r7
 800857e:	47c8      	blx	r9
 8008580:	3001      	adds	r0, #1
 8008582:	d103      	bne.n	800858c <_printf_common+0xac>
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858c:	3501      	adds	r5, #1
 800858e:	e7c6      	b.n	800851e <_printf_common+0x3e>
 8008590:	18e1      	adds	r1, r4, r3
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	2030      	movs	r0, #48	@ 0x30
 8008596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800859a:	4422      	add	r2, r4
 800859c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085a4:	3302      	adds	r3, #2
 80085a6:	e7c7      	b.n	8008538 <_printf_common+0x58>
 80085a8:	2301      	movs	r3, #1
 80085aa:	4622      	mov	r2, r4
 80085ac:	4641      	mov	r1, r8
 80085ae:	4638      	mov	r0, r7
 80085b0:	47c8      	blx	r9
 80085b2:	3001      	adds	r0, #1
 80085b4:	d0e6      	beq.n	8008584 <_printf_common+0xa4>
 80085b6:	3601      	adds	r6, #1
 80085b8:	e7d9      	b.n	800856e <_printf_common+0x8e>
	...

080085bc <_printf_i>:
 80085bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	7e0f      	ldrb	r7, [r1, #24]
 80085c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085c4:	2f78      	cmp	r7, #120	@ 0x78
 80085c6:	4691      	mov	r9, r2
 80085c8:	4680      	mov	r8, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	469a      	mov	sl, r3
 80085ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085d2:	d807      	bhi.n	80085e4 <_printf_i+0x28>
 80085d4:	2f62      	cmp	r7, #98	@ 0x62
 80085d6:	d80a      	bhi.n	80085ee <_printf_i+0x32>
 80085d8:	2f00      	cmp	r7, #0
 80085da:	f000 80d2 	beq.w	8008782 <_printf_i+0x1c6>
 80085de:	2f58      	cmp	r7, #88	@ 0x58
 80085e0:	f000 80b9 	beq.w	8008756 <_printf_i+0x19a>
 80085e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085ec:	e03a      	b.n	8008664 <_printf_i+0xa8>
 80085ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085f2:	2b15      	cmp	r3, #21
 80085f4:	d8f6      	bhi.n	80085e4 <_printf_i+0x28>
 80085f6:	a101      	add	r1, pc, #4	@ (adr r1, 80085fc <_printf_i+0x40>)
 80085f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085fc:	08008655 	.word	0x08008655
 8008600:	08008669 	.word	0x08008669
 8008604:	080085e5 	.word	0x080085e5
 8008608:	080085e5 	.word	0x080085e5
 800860c:	080085e5 	.word	0x080085e5
 8008610:	080085e5 	.word	0x080085e5
 8008614:	08008669 	.word	0x08008669
 8008618:	080085e5 	.word	0x080085e5
 800861c:	080085e5 	.word	0x080085e5
 8008620:	080085e5 	.word	0x080085e5
 8008624:	080085e5 	.word	0x080085e5
 8008628:	08008769 	.word	0x08008769
 800862c:	08008693 	.word	0x08008693
 8008630:	08008723 	.word	0x08008723
 8008634:	080085e5 	.word	0x080085e5
 8008638:	080085e5 	.word	0x080085e5
 800863c:	0800878b 	.word	0x0800878b
 8008640:	080085e5 	.word	0x080085e5
 8008644:	08008693 	.word	0x08008693
 8008648:	080085e5 	.word	0x080085e5
 800864c:	080085e5 	.word	0x080085e5
 8008650:	0800872b 	.word	0x0800872b
 8008654:	6833      	ldr	r3, [r6, #0]
 8008656:	1d1a      	adds	r2, r3, #4
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6032      	str	r2, [r6, #0]
 800865c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008664:	2301      	movs	r3, #1
 8008666:	e09d      	b.n	80087a4 <_printf_i+0x1e8>
 8008668:	6833      	ldr	r3, [r6, #0]
 800866a:	6820      	ldr	r0, [r4, #0]
 800866c:	1d19      	adds	r1, r3, #4
 800866e:	6031      	str	r1, [r6, #0]
 8008670:	0606      	lsls	r6, r0, #24
 8008672:	d501      	bpl.n	8008678 <_printf_i+0xbc>
 8008674:	681d      	ldr	r5, [r3, #0]
 8008676:	e003      	b.n	8008680 <_printf_i+0xc4>
 8008678:	0645      	lsls	r5, r0, #25
 800867a:	d5fb      	bpl.n	8008674 <_printf_i+0xb8>
 800867c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008680:	2d00      	cmp	r5, #0
 8008682:	da03      	bge.n	800868c <_printf_i+0xd0>
 8008684:	232d      	movs	r3, #45	@ 0x2d
 8008686:	426d      	negs	r5, r5
 8008688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800868c:	4859      	ldr	r0, [pc, #356]	@ (80087f4 <_printf_i+0x238>)
 800868e:	230a      	movs	r3, #10
 8008690:	e011      	b.n	80086b6 <_printf_i+0xfa>
 8008692:	6821      	ldr	r1, [r4, #0]
 8008694:	6833      	ldr	r3, [r6, #0]
 8008696:	0608      	lsls	r0, r1, #24
 8008698:	f853 5b04 	ldr.w	r5, [r3], #4
 800869c:	d402      	bmi.n	80086a4 <_printf_i+0xe8>
 800869e:	0649      	lsls	r1, r1, #25
 80086a0:	bf48      	it	mi
 80086a2:	b2ad      	uxthmi	r5, r5
 80086a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80086a6:	4853      	ldr	r0, [pc, #332]	@ (80087f4 <_printf_i+0x238>)
 80086a8:	6033      	str	r3, [r6, #0]
 80086aa:	bf14      	ite	ne
 80086ac:	230a      	movne	r3, #10
 80086ae:	2308      	moveq	r3, #8
 80086b0:	2100      	movs	r1, #0
 80086b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086b6:	6866      	ldr	r6, [r4, #4]
 80086b8:	60a6      	str	r6, [r4, #8]
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	bfa2      	ittt	ge
 80086be:	6821      	ldrge	r1, [r4, #0]
 80086c0:	f021 0104 	bicge.w	r1, r1, #4
 80086c4:	6021      	strge	r1, [r4, #0]
 80086c6:	b90d      	cbnz	r5, 80086cc <_printf_i+0x110>
 80086c8:	2e00      	cmp	r6, #0
 80086ca:	d04b      	beq.n	8008764 <_printf_i+0x1a8>
 80086cc:	4616      	mov	r6, r2
 80086ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80086d2:	fb03 5711 	mls	r7, r3, r1, r5
 80086d6:	5dc7      	ldrb	r7, [r0, r7]
 80086d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086dc:	462f      	mov	r7, r5
 80086de:	42bb      	cmp	r3, r7
 80086e0:	460d      	mov	r5, r1
 80086e2:	d9f4      	bls.n	80086ce <_printf_i+0x112>
 80086e4:	2b08      	cmp	r3, #8
 80086e6:	d10b      	bne.n	8008700 <_printf_i+0x144>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	07df      	lsls	r7, r3, #31
 80086ec:	d508      	bpl.n	8008700 <_printf_i+0x144>
 80086ee:	6923      	ldr	r3, [r4, #16]
 80086f0:	6861      	ldr	r1, [r4, #4]
 80086f2:	4299      	cmp	r1, r3
 80086f4:	bfde      	ittt	le
 80086f6:	2330      	movle	r3, #48	@ 0x30
 80086f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008700:	1b92      	subs	r2, r2, r6
 8008702:	6122      	str	r2, [r4, #16]
 8008704:	f8cd a000 	str.w	sl, [sp]
 8008708:	464b      	mov	r3, r9
 800870a:	aa03      	add	r2, sp, #12
 800870c:	4621      	mov	r1, r4
 800870e:	4640      	mov	r0, r8
 8008710:	f7ff fee6 	bl	80084e0 <_printf_common>
 8008714:	3001      	adds	r0, #1
 8008716:	d14a      	bne.n	80087ae <_printf_i+0x1f2>
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	b004      	add	sp, #16
 800871e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	f043 0320 	orr.w	r3, r3, #32
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	4833      	ldr	r0, [pc, #204]	@ (80087f8 <_printf_i+0x23c>)
 800872c:	2778      	movs	r7, #120	@ 0x78
 800872e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	6831      	ldr	r1, [r6, #0]
 8008736:	061f      	lsls	r7, r3, #24
 8008738:	f851 5b04 	ldr.w	r5, [r1], #4
 800873c:	d402      	bmi.n	8008744 <_printf_i+0x188>
 800873e:	065f      	lsls	r7, r3, #25
 8008740:	bf48      	it	mi
 8008742:	b2ad      	uxthmi	r5, r5
 8008744:	6031      	str	r1, [r6, #0]
 8008746:	07d9      	lsls	r1, r3, #31
 8008748:	bf44      	itt	mi
 800874a:	f043 0320 	orrmi.w	r3, r3, #32
 800874e:	6023      	strmi	r3, [r4, #0]
 8008750:	b11d      	cbz	r5, 800875a <_printf_i+0x19e>
 8008752:	2310      	movs	r3, #16
 8008754:	e7ac      	b.n	80086b0 <_printf_i+0xf4>
 8008756:	4827      	ldr	r0, [pc, #156]	@ (80087f4 <_printf_i+0x238>)
 8008758:	e7e9      	b.n	800872e <_printf_i+0x172>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	f023 0320 	bic.w	r3, r3, #32
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	e7f6      	b.n	8008752 <_printf_i+0x196>
 8008764:	4616      	mov	r6, r2
 8008766:	e7bd      	b.n	80086e4 <_printf_i+0x128>
 8008768:	6833      	ldr	r3, [r6, #0]
 800876a:	6825      	ldr	r5, [r4, #0]
 800876c:	6961      	ldr	r1, [r4, #20]
 800876e:	1d18      	adds	r0, r3, #4
 8008770:	6030      	str	r0, [r6, #0]
 8008772:	062e      	lsls	r6, r5, #24
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	d501      	bpl.n	800877c <_printf_i+0x1c0>
 8008778:	6019      	str	r1, [r3, #0]
 800877a:	e002      	b.n	8008782 <_printf_i+0x1c6>
 800877c:	0668      	lsls	r0, r5, #25
 800877e:	d5fb      	bpl.n	8008778 <_printf_i+0x1bc>
 8008780:	8019      	strh	r1, [r3, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	4616      	mov	r6, r2
 8008788:	e7bc      	b.n	8008704 <_printf_i+0x148>
 800878a:	6833      	ldr	r3, [r6, #0]
 800878c:	1d1a      	adds	r2, r3, #4
 800878e:	6032      	str	r2, [r6, #0]
 8008790:	681e      	ldr	r6, [r3, #0]
 8008792:	6862      	ldr	r2, [r4, #4]
 8008794:	2100      	movs	r1, #0
 8008796:	4630      	mov	r0, r6
 8008798:	f7f7 fd42 	bl	8000220 <memchr>
 800879c:	b108      	cbz	r0, 80087a2 <_printf_i+0x1e6>
 800879e:	1b80      	subs	r0, r0, r6
 80087a0:	6060      	str	r0, [r4, #4]
 80087a2:	6863      	ldr	r3, [r4, #4]
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	2300      	movs	r3, #0
 80087a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087ac:	e7aa      	b.n	8008704 <_printf_i+0x148>
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	4632      	mov	r2, r6
 80087b2:	4649      	mov	r1, r9
 80087b4:	4640      	mov	r0, r8
 80087b6:	47d0      	blx	sl
 80087b8:	3001      	adds	r0, #1
 80087ba:	d0ad      	beq.n	8008718 <_printf_i+0x15c>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	079b      	lsls	r3, r3, #30
 80087c0:	d413      	bmi.n	80087ea <_printf_i+0x22e>
 80087c2:	68e0      	ldr	r0, [r4, #12]
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	4298      	cmp	r0, r3
 80087c8:	bfb8      	it	lt
 80087ca:	4618      	movlt	r0, r3
 80087cc:	e7a6      	b.n	800871c <_printf_i+0x160>
 80087ce:	2301      	movs	r3, #1
 80087d0:	4632      	mov	r2, r6
 80087d2:	4649      	mov	r1, r9
 80087d4:	4640      	mov	r0, r8
 80087d6:	47d0      	blx	sl
 80087d8:	3001      	adds	r0, #1
 80087da:	d09d      	beq.n	8008718 <_printf_i+0x15c>
 80087dc:	3501      	adds	r5, #1
 80087de:	68e3      	ldr	r3, [r4, #12]
 80087e0:	9903      	ldr	r1, [sp, #12]
 80087e2:	1a5b      	subs	r3, r3, r1
 80087e4:	42ab      	cmp	r3, r5
 80087e6:	dcf2      	bgt.n	80087ce <_printf_i+0x212>
 80087e8:	e7eb      	b.n	80087c2 <_printf_i+0x206>
 80087ea:	2500      	movs	r5, #0
 80087ec:	f104 0619 	add.w	r6, r4, #25
 80087f0:	e7f5      	b.n	80087de <_printf_i+0x222>
 80087f2:	bf00      	nop
 80087f4:	08009155 	.word	0x08009155
 80087f8:	08009166 	.word	0x08009166

080087fc <__sflush_r>:
 80087fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008804:	0716      	lsls	r6, r2, #28
 8008806:	4605      	mov	r5, r0
 8008808:	460c      	mov	r4, r1
 800880a:	d454      	bmi.n	80088b6 <__sflush_r+0xba>
 800880c:	684b      	ldr	r3, [r1, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	dc02      	bgt.n	8008818 <__sflush_r+0x1c>
 8008812:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008814:	2b00      	cmp	r3, #0
 8008816:	dd48      	ble.n	80088aa <__sflush_r+0xae>
 8008818:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800881a:	2e00      	cmp	r6, #0
 800881c:	d045      	beq.n	80088aa <__sflush_r+0xae>
 800881e:	2300      	movs	r3, #0
 8008820:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008824:	682f      	ldr	r7, [r5, #0]
 8008826:	6a21      	ldr	r1, [r4, #32]
 8008828:	602b      	str	r3, [r5, #0]
 800882a:	d030      	beq.n	800888e <__sflush_r+0x92>
 800882c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	0759      	lsls	r1, r3, #29
 8008832:	d505      	bpl.n	8008840 <__sflush_r+0x44>
 8008834:	6863      	ldr	r3, [r4, #4]
 8008836:	1ad2      	subs	r2, r2, r3
 8008838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800883a:	b10b      	cbz	r3, 8008840 <__sflush_r+0x44>
 800883c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	2300      	movs	r3, #0
 8008842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008844:	6a21      	ldr	r1, [r4, #32]
 8008846:	4628      	mov	r0, r5
 8008848:	47b0      	blx	r6
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	d106      	bne.n	800885e <__sflush_r+0x62>
 8008850:	6829      	ldr	r1, [r5, #0]
 8008852:	291d      	cmp	r1, #29
 8008854:	d82b      	bhi.n	80088ae <__sflush_r+0xb2>
 8008856:	4a2a      	ldr	r2, [pc, #168]	@ (8008900 <__sflush_r+0x104>)
 8008858:	410a      	asrs	r2, r1
 800885a:	07d6      	lsls	r6, r2, #31
 800885c:	d427      	bmi.n	80088ae <__sflush_r+0xb2>
 800885e:	2200      	movs	r2, #0
 8008860:	6062      	str	r2, [r4, #4]
 8008862:	04d9      	lsls	r1, r3, #19
 8008864:	6922      	ldr	r2, [r4, #16]
 8008866:	6022      	str	r2, [r4, #0]
 8008868:	d504      	bpl.n	8008874 <__sflush_r+0x78>
 800886a:	1c42      	adds	r2, r0, #1
 800886c:	d101      	bne.n	8008872 <__sflush_r+0x76>
 800886e:	682b      	ldr	r3, [r5, #0]
 8008870:	b903      	cbnz	r3, 8008874 <__sflush_r+0x78>
 8008872:	6560      	str	r0, [r4, #84]	@ 0x54
 8008874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008876:	602f      	str	r7, [r5, #0]
 8008878:	b1b9      	cbz	r1, 80088aa <__sflush_r+0xae>
 800887a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800887e:	4299      	cmp	r1, r3
 8008880:	d002      	beq.n	8008888 <__sflush_r+0x8c>
 8008882:	4628      	mov	r0, r5
 8008884:	f7ff fa9a 	bl	8007dbc <_free_r>
 8008888:	2300      	movs	r3, #0
 800888a:	6363      	str	r3, [r4, #52]	@ 0x34
 800888c:	e00d      	b.n	80088aa <__sflush_r+0xae>
 800888e:	2301      	movs	r3, #1
 8008890:	4628      	mov	r0, r5
 8008892:	47b0      	blx	r6
 8008894:	4602      	mov	r2, r0
 8008896:	1c50      	adds	r0, r2, #1
 8008898:	d1c9      	bne.n	800882e <__sflush_r+0x32>
 800889a:	682b      	ldr	r3, [r5, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d0c6      	beq.n	800882e <__sflush_r+0x32>
 80088a0:	2b1d      	cmp	r3, #29
 80088a2:	d001      	beq.n	80088a8 <__sflush_r+0xac>
 80088a4:	2b16      	cmp	r3, #22
 80088a6:	d11e      	bne.n	80088e6 <__sflush_r+0xea>
 80088a8:	602f      	str	r7, [r5, #0]
 80088aa:	2000      	movs	r0, #0
 80088ac:	e022      	b.n	80088f4 <__sflush_r+0xf8>
 80088ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b2:	b21b      	sxth	r3, r3
 80088b4:	e01b      	b.n	80088ee <__sflush_r+0xf2>
 80088b6:	690f      	ldr	r7, [r1, #16]
 80088b8:	2f00      	cmp	r7, #0
 80088ba:	d0f6      	beq.n	80088aa <__sflush_r+0xae>
 80088bc:	0793      	lsls	r3, r2, #30
 80088be:	680e      	ldr	r6, [r1, #0]
 80088c0:	bf08      	it	eq
 80088c2:	694b      	ldreq	r3, [r1, #20]
 80088c4:	600f      	str	r7, [r1, #0]
 80088c6:	bf18      	it	ne
 80088c8:	2300      	movne	r3, #0
 80088ca:	eba6 0807 	sub.w	r8, r6, r7
 80088ce:	608b      	str	r3, [r1, #8]
 80088d0:	f1b8 0f00 	cmp.w	r8, #0
 80088d4:	dde9      	ble.n	80088aa <__sflush_r+0xae>
 80088d6:	6a21      	ldr	r1, [r4, #32]
 80088d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088da:	4643      	mov	r3, r8
 80088dc:	463a      	mov	r2, r7
 80088de:	4628      	mov	r0, r5
 80088e0:	47b0      	blx	r6
 80088e2:	2800      	cmp	r0, #0
 80088e4:	dc08      	bgt.n	80088f8 <__sflush_r+0xfc>
 80088e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ee:	81a3      	strh	r3, [r4, #12]
 80088f0:	f04f 30ff 	mov.w	r0, #4294967295
 80088f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f8:	4407      	add	r7, r0
 80088fa:	eba8 0800 	sub.w	r8, r8, r0
 80088fe:	e7e7      	b.n	80088d0 <__sflush_r+0xd4>
 8008900:	dfbffffe 	.word	0xdfbffffe

08008904 <_fflush_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	690b      	ldr	r3, [r1, #16]
 8008908:	4605      	mov	r5, r0
 800890a:	460c      	mov	r4, r1
 800890c:	b913      	cbnz	r3, 8008914 <_fflush_r+0x10>
 800890e:	2500      	movs	r5, #0
 8008910:	4628      	mov	r0, r5
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	b118      	cbz	r0, 800891e <_fflush_r+0x1a>
 8008916:	6a03      	ldr	r3, [r0, #32]
 8008918:	b90b      	cbnz	r3, 800891e <_fflush_r+0x1a>
 800891a:	f7fe ffcf 	bl	80078bc <__sinit>
 800891e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0f3      	beq.n	800890e <_fflush_r+0xa>
 8008926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008928:	07d0      	lsls	r0, r2, #31
 800892a:	d404      	bmi.n	8008936 <_fflush_r+0x32>
 800892c:	0599      	lsls	r1, r3, #22
 800892e:	d402      	bmi.n	8008936 <_fflush_r+0x32>
 8008930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008932:	f7ff fa32 	bl	8007d9a <__retarget_lock_acquire_recursive>
 8008936:	4628      	mov	r0, r5
 8008938:	4621      	mov	r1, r4
 800893a:	f7ff ff5f 	bl	80087fc <__sflush_r>
 800893e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008940:	07da      	lsls	r2, r3, #31
 8008942:	4605      	mov	r5, r0
 8008944:	d4e4      	bmi.n	8008910 <_fflush_r+0xc>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	059b      	lsls	r3, r3, #22
 800894a:	d4e1      	bmi.n	8008910 <_fflush_r+0xc>
 800894c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800894e:	f7ff fa25 	bl	8007d9c <__retarget_lock_release_recursive>
 8008952:	e7dd      	b.n	8008910 <_fflush_r+0xc>

08008954 <__swhatbuf_r>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	460c      	mov	r4, r1
 8008958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895c:	2900      	cmp	r1, #0
 800895e:	b096      	sub	sp, #88	@ 0x58
 8008960:	4615      	mov	r5, r2
 8008962:	461e      	mov	r6, r3
 8008964:	da0d      	bge.n	8008982 <__swhatbuf_r+0x2e>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800896c:	f04f 0100 	mov.w	r1, #0
 8008970:	bf14      	ite	ne
 8008972:	2340      	movne	r3, #64	@ 0x40
 8008974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008978:	2000      	movs	r0, #0
 800897a:	6031      	str	r1, [r6, #0]
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	b016      	add	sp, #88	@ 0x58
 8008980:	bd70      	pop	{r4, r5, r6, pc}
 8008982:	466a      	mov	r2, sp
 8008984:	f000 f862 	bl	8008a4c <_fstat_r>
 8008988:	2800      	cmp	r0, #0
 800898a:	dbec      	blt.n	8008966 <__swhatbuf_r+0x12>
 800898c:	9901      	ldr	r1, [sp, #4]
 800898e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008996:	4259      	negs	r1, r3
 8008998:	4159      	adcs	r1, r3
 800899a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800899e:	e7eb      	b.n	8008978 <__swhatbuf_r+0x24>

080089a0 <__smakebuf_r>:
 80089a0:	898b      	ldrh	r3, [r1, #12]
 80089a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089a4:	079d      	lsls	r5, r3, #30
 80089a6:	4606      	mov	r6, r0
 80089a8:	460c      	mov	r4, r1
 80089aa:	d507      	bpl.n	80089bc <__smakebuf_r+0x1c>
 80089ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	2301      	movs	r3, #1
 80089b6:	6163      	str	r3, [r4, #20]
 80089b8:	b003      	add	sp, #12
 80089ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089bc:	ab01      	add	r3, sp, #4
 80089be:	466a      	mov	r2, sp
 80089c0:	f7ff ffc8 	bl	8008954 <__swhatbuf_r>
 80089c4:	9f00      	ldr	r7, [sp, #0]
 80089c6:	4605      	mov	r5, r0
 80089c8:	4639      	mov	r1, r7
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7ff fa62 	bl	8007e94 <_malloc_r>
 80089d0:	b948      	cbnz	r0, 80089e6 <__smakebuf_r+0x46>
 80089d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d6:	059a      	lsls	r2, r3, #22
 80089d8:	d4ee      	bmi.n	80089b8 <__smakebuf_r+0x18>
 80089da:	f023 0303 	bic.w	r3, r3, #3
 80089de:	f043 0302 	orr.w	r3, r3, #2
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	e7e2      	b.n	80089ac <__smakebuf_r+0xc>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	6020      	str	r0, [r4, #0]
 80089ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089f6:	b15b      	cbz	r3, 8008a10 <__smakebuf_r+0x70>
 80089f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fc:	4630      	mov	r0, r6
 80089fe:	f000 f837 	bl	8008a70 <_isatty_r>
 8008a02:	b128      	cbz	r0, 8008a10 <__smakebuf_r+0x70>
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	f043 0301 	orr.w	r3, r3, #1
 8008a0e:	81a3      	strh	r3, [r4, #12]
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	431d      	orrs	r5, r3
 8008a14:	81a5      	strh	r5, [r4, #12]
 8008a16:	e7cf      	b.n	80089b8 <__smakebuf_r+0x18>

08008a18 <memmove>:
 8008a18:	4288      	cmp	r0, r1
 8008a1a:	b510      	push	{r4, lr}
 8008a1c:	eb01 0402 	add.w	r4, r1, r2
 8008a20:	d902      	bls.n	8008a28 <memmove+0x10>
 8008a22:	4284      	cmp	r4, r0
 8008a24:	4623      	mov	r3, r4
 8008a26:	d807      	bhi.n	8008a38 <memmove+0x20>
 8008a28:	1e43      	subs	r3, r0, #1
 8008a2a:	42a1      	cmp	r1, r4
 8008a2c:	d008      	beq.n	8008a40 <memmove+0x28>
 8008a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a36:	e7f8      	b.n	8008a2a <memmove+0x12>
 8008a38:	4402      	add	r2, r0
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	428a      	cmp	r2, r1
 8008a3e:	d100      	bne.n	8008a42 <memmove+0x2a>
 8008a40:	bd10      	pop	{r4, pc}
 8008a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a4a:	e7f7      	b.n	8008a3c <memmove+0x24>

08008a4c <_fstat_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4d07      	ldr	r5, [pc, #28]	@ (8008a6c <_fstat_r+0x20>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	4604      	mov	r4, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	4611      	mov	r1, r2
 8008a58:	602b      	str	r3, [r5, #0]
 8008a5a:	f7f9 fa4a 	bl	8001ef2 <_fstat>
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	d102      	bne.n	8008a68 <_fstat_r+0x1c>
 8008a62:	682b      	ldr	r3, [r5, #0]
 8008a64:	b103      	cbz	r3, 8008a68 <_fstat_r+0x1c>
 8008a66:	6023      	str	r3, [r4, #0]
 8008a68:	bd38      	pop	{r3, r4, r5, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20013c98 	.word	0x20013c98

08008a70 <_isatty_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d06      	ldr	r5, [pc, #24]	@ (8008a8c <_isatty_r+0x1c>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4608      	mov	r0, r1
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	f7f9 fa49 	bl	8001f12 <_isatty>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_isatty_r+0x1a>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_isatty_r+0x1a>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	20013c98 	.word	0x20013c98

08008a90 <_sbrk_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d06      	ldr	r5, [pc, #24]	@ (8008aac <_sbrk_r+0x1c>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	f000 f83e 	bl	8008b1c <_sbrk>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_sbrk_r+0x1a>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_sbrk_r+0x1a>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	20013c98 	.word	0x20013c98

08008ab0 <_realloc_r>:
 8008ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	4680      	mov	r8, r0
 8008ab6:	4615      	mov	r5, r2
 8008ab8:	460c      	mov	r4, r1
 8008aba:	b921      	cbnz	r1, 8008ac6 <_realloc_r+0x16>
 8008abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	f7ff b9e7 	b.w	8007e94 <_malloc_r>
 8008ac6:	b92a      	cbnz	r2, 8008ad4 <_realloc_r+0x24>
 8008ac8:	f7ff f978 	bl	8007dbc <_free_r>
 8008acc:	2400      	movs	r4, #0
 8008ace:	4620      	mov	r0, r4
 8008ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad4:	f000 f81a 	bl	8008b0c <_malloc_usable_size_r>
 8008ad8:	4285      	cmp	r5, r0
 8008ada:	4606      	mov	r6, r0
 8008adc:	d802      	bhi.n	8008ae4 <_realloc_r+0x34>
 8008ade:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ae2:	d8f4      	bhi.n	8008ace <_realloc_r+0x1e>
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	f7ff f9d4 	bl	8007e94 <_malloc_r>
 8008aec:	4607      	mov	r7, r0
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0ec      	beq.n	8008acc <_realloc_r+0x1c>
 8008af2:	42b5      	cmp	r5, r6
 8008af4:	462a      	mov	r2, r5
 8008af6:	4621      	mov	r1, r4
 8008af8:	bf28      	it	cs
 8008afa:	4632      	movcs	r2, r6
 8008afc:	f7ff f94f 	bl	8007d9e <memcpy>
 8008b00:	4621      	mov	r1, r4
 8008b02:	4640      	mov	r0, r8
 8008b04:	f7ff f95a 	bl	8007dbc <_free_r>
 8008b08:	463c      	mov	r4, r7
 8008b0a:	e7e0      	b.n	8008ace <_realloc_r+0x1e>

08008b0c <_malloc_usable_size_r>:
 8008b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b10:	1f18      	subs	r0, r3, #4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	bfbc      	itt	lt
 8008b16:	580b      	ldrlt	r3, [r1, r0]
 8008b18:	18c0      	addlt	r0, r0, r3
 8008b1a:	4770      	bx	lr

08008b1c <_sbrk>:
 8008b1c:	4a04      	ldr	r2, [pc, #16]	@ (8008b30 <_sbrk+0x14>)
 8008b1e:	6811      	ldr	r1, [r2, #0]
 8008b20:	4603      	mov	r3, r0
 8008b22:	b909      	cbnz	r1, 8008b28 <_sbrk+0xc>
 8008b24:	4903      	ldr	r1, [pc, #12]	@ (8008b34 <_sbrk+0x18>)
 8008b26:	6011      	str	r1, [r2, #0]
 8008b28:	6810      	ldr	r0, [r2, #0]
 8008b2a:	4403      	add	r3, r0
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	4770      	bx	lr
 8008b30:	20013ca8 	.word	0x20013ca8
 8008b34:	20013cb0 	.word	0x20013cb0

08008b38 <_init>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

08008b44 <_fini>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr
